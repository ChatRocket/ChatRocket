{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/e2e.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/e2e.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/e2e.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/e2e.ts","sourceRoot":"","sources":["app/api/server/v1/e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Subscriptions } from '@rocket.chat/models';\nimport {\n\tise2eGetUsersOfRoomWithoutKeyParamsGET,\n\tise2eSetRoomKeyIDParamsPOST,\n\tise2eSetUserPublicAndPrivateKeysParamsPOST,\n\tise2eUpdateGroupKeyParamsPOST,\n\tisE2EProvideUsersGroupKeyProps,\n\tisE2EFetchUsersWaitingForGroupKeyProps,\n\tisE2EResetRoomKeyProps,\n} from '@rocket.chat/rest-typings';\nimport ExpiryMap from 'expiry-map';\nimport { Meteor } from 'meteor/meteor';\n\nimport { canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { handleSuggestedGroupKey } from '../../../e2e/server/functions/handleSuggestedGroupKey';\nimport { provideUsersSuggestedGroupKeys } from '../../../e2e/server/functions/provideUsersSuggestedGroupKeys';\nimport { resetRoomKey } from '../../../e2e/server/functions/resetRoomKey';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\n\n// After 10s the room lock will expire, meaning that if for some reason the process never completed\n// The next reset will be available 10s after\nconst LockMap = new ExpiryMap<string, boolean>(10000);\n\nAPI.v1.addRoute(\n\t'e2e.fetchMyKeys',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst result: {\n\t\t\t\tpublic_key: string;\n\t\t\t\tprivate_key: string;\n\t\t\t} = await Meteor.callAsync('e2e.fetchMyKeys');\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.getUsersOfRoomWithoutKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { rid } = this.queryParams;\n\n\t\t\tconst result: {\n\t\t\t\tusers: IUser[];\n\t\t\t} = await Meteor.callAsync('e2e.getUsersOfRoomWithoutKey', rid);\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/e2e.setRoomKeyID:\n *    post:\n *      description: Sets the end-to-end encryption key ID for a room\n *      security:\n *        - autenticated: {}\n *      requestBody:\n *        description: A tuple containing the room ID and the key ID\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                rid:\n *                  type: string\n *                keyID:\n *                  type: string\n *      responses:\n *        200:\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nAPI.v1.addRoute(\n\t'e2e.setRoomKeyID',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eSetRoomKeyIDParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, keyID } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('e2e.setRoomKeyID', rid, keyID);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/e2e.setUserPublicAndPrivateKeys:\n *    post:\n *      description: Sets the end-to-end encryption keys for the authenticated user\n *      security:\n *        - autenticated: {}\n *      requestBody:\n *        description: A tuple containing the public and the private keys\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                public_key:\n *                  type: string\n *                private_key:\n *                  type: string\n *                force:\n *                  type: boolean\n *      responses:\n *        200:\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'e2e.setUserPublicAndPrivateKeys',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eSetUserPublicAndPrivateKeysParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t\tconst { public_key, private_key, force } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('e2e.setUserPublicAndPrivateKeys', {\n\t\t\t\tpublic_key,\n\t\t\t\tprivate_key,\n\t\t\t\tforce,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/e2e.updateGroupKey:\n *    post:\n *      description: Updates the end-to-end encryption key for a user on a room\n *      security:\n *        - autenticated: {}\n *      requestBody:\n *        description: A tuple containing the user ID, the room ID, and the key\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                uid:\n *                  type: string\n *                rid:\n *                  type: string\n *                key:\n *                  type: string\n *      responses:\n *        200:\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'e2e.updateGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eUpdateGroupKeyParamsPOST,\n\t\tdeprecation: {\n\t\t\tversion: '8.0.0',\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { uid, rid, key } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('e2e.updateGroupKey', rid, uid, key);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.acceptSuggestedGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid } = this.bodyParams;\n\n\t\t\tawait handleSuggestedGroupKey('accept', rid, this.userId, 'e2e.acceptSuggestedGroupKey');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.rejectSuggestedGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid } = this.bodyParams;\n\n\t\t\tawait handleSuggestedGroupKey('reject', rid, this.userId, 'e2e.rejectSuggestedGroupKey');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.fetchUsersWaitingForGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isE2EFetchUsersWaitingForGroupKeyProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (!settings.get('E2E_Enable')) {\n\t\t\t\treturn API.v1.success({ usersWaitingForE2EKeys: {} });\n\t\t\t}\n\n\t\t\tconst { roomIds = [] } = this.queryParams;\n\t\t\tconst usersWaitingForE2EKeys = (await Subscriptions.findUsersWithPublicE2EKeyByRids(roomIds, this.userId).toArray()).reduce<\n\t\t\t\tRecord<string, { _id: string; public_key: string }[]>\n\t\t\t>((acc, { rid, users }) => ({ [rid]: users, ...acc }), {});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tusersWaitingForE2EKeys,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.provideUsersSuggestedGroupKeys',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isE2EProvideUsersGroupKeyProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tif (!settings.get('E2E_Enable')) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tawait provideUsersSuggestedGroupKeys(this.userId, this.bodyParams.usersSuggestedGroupKeys);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// This should have permissions\nAPI.v1.addRoute(\n\t'e2e.resetRoomKey',\n\t{ authRequired: true, validateParams: isE2EResetRoomKeyProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, e2eKey, e2eKeyId } = this.bodyParams;\n\t\t\tif (!(await hasPermissionAsync(this.userId, 'toggle-room-e2e-encryption', rid))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\t\t\tif (LockMap.has(rid)) {\n\t\t\t\tthrow new Error('error-e2e-key-reset-in-progress');\n\t\t\t}\n\n\t\t\tLockMap.set(rid, true);\n\n\t\t\tif (!(await canAccessRoomIdAsync(rid, this.userId))) {\n\t\t\t\tthrow new Error('error-not-allowed');\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait resetRoomKey(rid, this.userId, e2eKey, e2eKeyId);\n\t\t\t\treturn API.v1.success();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\treturn API.v1.failure('error-e2e-key-reset-failed');\n\t\t\t} finally {\n\t\t\t\tLockMap.delete(rid);\n\t\t\t}\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/e2e.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/e2e.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/e2e.ts","sourceRoot":"","sources":["app/api/server/v1/e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Subscriptions } from '@rocket.chat/models';\nimport {\n\tise2eGetUsersOfRoomWithoutKeyParamsGET,\n\tise2eSetRoomKeyIDParamsPOST,\n\tise2eSetUserPublicAndPrivateKeysParamsPOST,\n\tise2eUpdateGroupKeyParamsPOST,\n\tisE2EProvideUsersGroupKeyProps,\n\tisE2EFetchUsersWaitingForGroupKeyProps,\n\tisE2EResetRoomKeyProps,\n} from '@rocket.chat/rest-typings';\nimport ExpiryMap from 'expiry-map';\nimport { Meteor } from 'meteor/meteor';\n\nimport { canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { handleSuggestedGroupKey } from '../../../e2e/server/functions/handleSuggestedGroupKey';\nimport { provideUsersSuggestedGroupKeys } from '../../../e2e/server/functions/provideUsersSuggestedGroupKeys';\nimport { resetRoomKey } from '../../../e2e/server/functions/resetRoomKey';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\n\n// After 10s the room lock will expire, meaning that if for some reason the process never completed\n// The next reset will be available 10s after\nconst LockMap = new ExpiryMap<string, boolean>(10000);\n\nAPI.v1.addRoute(\n\t'e2e.fetchMyKeys',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst result: {\n\t\t\t\tpublic_key: string;\n\t\t\t\tprivate_key: string;\n\t\t\t} = await Meteor.callAsync('e2e.fetchMyKeys');\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.getUsersOfRoomWithoutKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { rid } = this.queryParams;\n\n\t\t\tconst result: {\n\t\t\t\tusers: IUser[];\n\t\t\t} = await Meteor.callAsync('e2e.getUsersOfRoomWithoutKey', rid);\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/e2e.setRoomKeyID:\n *    post:\n *      description: Sets the end-to-end encryption key ID for a room\n *      security:\n *        - autenticated: {}\n *      requestBody:\n *        description: A tuple containing the room ID and the key ID\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                rid:\n *                  type: string\n *                keyID:\n *                  type: string\n *      responses:\n *        200:\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nAPI.v1.addRoute(\n\t'e2e.setRoomKeyID',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eSetRoomKeyIDParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, keyID } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('e2e.setRoomKeyID', rid, keyID);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/e2e.setUserPublicAndPrivateKeys:\n *    post:\n *      description: Sets the end-to-end encryption keys for the authenticated user\n *      security:\n *        - autenticated: {}\n *      requestBody:\n *        description: A tuple containing the public and the private keys\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                public_key:\n *                  type: string\n *                private_key:\n *                  type: string\n *                force:\n *                  type: boolean\n *      responses:\n *        200:\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'e2e.setUserPublicAndPrivateKeys',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eSetUserPublicAndPrivateKeysParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t\tconst { public_key, private_key, force } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('e2e.setUserPublicAndPrivateKeys', {\n\t\t\t\tpublic_key,\n\t\t\t\tprivate_key,\n\t\t\t\tforce,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/e2e.updateGroupKey:\n *    post:\n *      description: Updates the end-to-end encryption key for a user on a room\n *      security:\n *        - autenticated: {}\n *      requestBody:\n *        description: A tuple containing the user ID, the room ID, and the key\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                uid:\n *                  type: string\n *                rid:\n *                  type: string\n *                key:\n *                  type: string\n *      responses:\n *        200:\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'e2e.updateGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eUpdateGroupKeyParamsPOST,\n\t\tdeprecation: {\n\t\t\tversion: '8.0.0',\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { uid, rid, key } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('e2e.updateGroupKey', rid, uid, key);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.acceptSuggestedGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid } = this.bodyParams;\n\n\t\t\tawait handleSuggestedGroupKey('accept', rid, this.userId, 'e2e.acceptSuggestedGroupKey');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.rejectSuggestedGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid } = this.bodyParams;\n\n\t\t\tawait handleSuggestedGroupKey('reject', rid, this.userId, 'e2e.rejectSuggestedGroupKey');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.fetchUsersWaitingForGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isE2EFetchUsersWaitingForGroupKeyProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (!settings.get('E2E_Enable')) {\n\t\t\t\treturn API.v1.success({ usersWaitingForE2EKeys: {} });\n\t\t\t}\n\n\t\t\tconst { roomIds = [] } = this.queryParams;\n\t\t\tconst usersWaitingForE2EKeys = (await Subscriptions.findUsersWithPublicE2EKeyByRids(roomIds, this.userId).toArray()).reduce<\n\t\t\t\tRecord<string, { _id: string; public_key: string }[]>\n\t\t\t>((acc, { rid, users }) => ({ [rid]: users, ...acc }), {});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tusersWaitingForE2EKeys,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.provideUsersSuggestedGroupKeys',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isE2EProvideUsersGroupKeyProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tif (!settings.get('E2E_Enable')) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tawait provideUsersSuggestedGroupKeys(this.userId, this.bodyParams.usersSuggestedGroupKeys);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// This should have permissions\nAPI.v1.addRoute(\n\t'e2e.resetRoomKey',\n\t{ authRequired: true, validateParams: isE2EResetRoomKeyProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, e2eKey, e2eKeyId } = this.bodyParams;\n\t\t\tif (!(await hasPermissionAsync(this.userId, 'toggle-room-e2e-encryption', rid))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\t\t\tif (LockMap.has(rid)) {\n\t\t\t\tthrow new Error('error-e2e-key-reset-in-progress');\n\t\t\t}\n\n\t\t\tLockMap.set(rid, true);\n\n\t\t\tif (!(await canAccessRoomIdAsync(rid, this.userId))) {\n\t\t\t\tthrow new Error('error-not-allowed');\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait resetRoomKey(rid, this.userId, e2eKey, e2eKeyId);\n\t\t\t\treturn API.v1.success();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\treturn API.v1.failure('error-e2e-key-reset-failed');\n\t\t\t} finally {\n\t\t\t\tLockMap.delete(rid);\n\t\t\t}\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 0);\n    let ise2eGetUsersOfRoomWithoutKeyParamsGET, ise2eSetRoomKeyIDParamsPOST, ise2eSetUserPublicAndPrivateKeysParamsPOST, ise2eUpdateGroupKeyParamsPOST, isE2EProvideUsersGroupKeyProps, isE2EFetchUsersWaitingForGroupKeyProps, isE2EResetRoomKeyProps;\n    module.link(\"@rocket.chat/rest-typings\", {\n      ise2eGetUsersOfRoomWithoutKeyParamsGET(v) {\n        ise2eGetUsersOfRoomWithoutKeyParamsGET = v;\n      },\n      ise2eSetRoomKeyIDParamsPOST(v) {\n        ise2eSetRoomKeyIDParamsPOST = v;\n      },\n      ise2eSetUserPublicAndPrivateKeysParamsPOST(v) {\n        ise2eSetUserPublicAndPrivateKeysParamsPOST = v;\n      },\n      ise2eUpdateGroupKeyParamsPOST(v) {\n        ise2eUpdateGroupKeyParamsPOST = v;\n      },\n      isE2EProvideUsersGroupKeyProps(v) {\n        isE2EProvideUsersGroupKeyProps = v;\n      },\n      isE2EFetchUsersWaitingForGroupKeyProps(v) {\n        isE2EFetchUsersWaitingForGroupKeyProps = v;\n      },\n      isE2EResetRoomKeyProps(v) {\n        isE2EResetRoomKeyProps = v;\n      }\n    }, 1);\n    let ExpiryMap;\n    module.link(\"expiry-map\", {\n      default(v) {\n        ExpiryMap = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let canAccessRoomIdAsync;\n    module.link(\"../../../authorization/server/functions/canAccessRoom\", {\n      canAccessRoomIdAsync(v) {\n        canAccessRoomIdAsync = v;\n      }\n    }, 4);\n    let hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 5);\n    let handleSuggestedGroupKey;\n    module.link(\"../../../e2e/server/functions/handleSuggestedGroupKey\", {\n      handleSuggestedGroupKey(v) {\n        handleSuggestedGroupKey = v;\n      }\n    }, 6);\n    let provideUsersSuggestedGroupKeys;\n    module.link(\"../../../e2e/server/functions/provideUsersSuggestedGroupKeys\", {\n      provideUsersSuggestedGroupKeys(v) {\n        provideUsersSuggestedGroupKeys = v;\n      }\n    }, 7);\n    let resetRoomKey;\n    module.link(\"../../../e2e/server/functions/resetRoomKey\", {\n      resetRoomKey(v) {\n        resetRoomKey = v;\n      }\n    }, 8);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 9);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 10);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    // After 10s the room lock will expire, meaning that if for some reason the process never completed\n    // The next reset will be available 10s after\n    const LockMap = new ExpiryMap(10000);\n    API.v1.addRoute('e2e.fetchMyKeys', {\n      authRequired: true\n    }, {\n      async get() {\n        const result = await Meteor.callAsync('e2e.fetchMyKeys');\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('e2e.getUsersOfRoomWithoutKey', {\n      authRequired: true,\n      validateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET\n    }, {\n      async get() {\n        const {\n          rid\n        } = this.queryParams;\n        const result = await Meteor.callAsync('e2e.getUsersOfRoomWithoutKey', rid);\n        return API.v1.success(result);\n      }\n    });\n    /**\n     * @openapi\n     *  /api/v1/e2e.setRoomKeyID:\n     *    post:\n     *      description: Sets the end-to-end encryption key ID for a room\n     *      security:\n     *        - autenticated: {}\n     *      requestBody:\n     *        description: A tuple containing the room ID and the key ID\n     *        content:\n     *          application/json:\n     *            schema:\n     *              type: object\n     *              properties:\n     *                rid:\n     *                  type: string\n     *                keyID:\n     *                  type: string\n     *      responses:\n     *        200:\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiSuccessV1'\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('e2e.setRoomKeyID', {\n      authRequired: true,\n      validateParams: ise2eSetRoomKeyIDParamsPOST\n    }, {\n      async post() {\n        const {\n          rid,\n          keyID\n        } = this.bodyParams;\n        await Meteor.callAsync('e2e.setRoomKeyID', rid, keyID);\n        return API.v1.success();\n      }\n    });\n    /**\n     * @openapi\n     *  /api/v1/e2e.setUserPublicAndPrivateKeys:\n     *    post:\n     *      description: Sets the end-to-end encryption keys for the authenticated user\n     *      security:\n     *        - autenticated: {}\n     *      requestBody:\n     *        description: A tuple containing the public and the private keys\n     *        content:\n     *          application/json:\n     *            schema:\n     *              type: object\n     *              properties:\n     *                public_key:\n     *                  type: string\n     *                private_key:\n     *                  type: string\n     *                force:\n     *                  type: boolean\n     *      responses:\n     *        200:\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiSuccessV1'\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('e2e.setUserPublicAndPrivateKeys', {\n      authRequired: true,\n      validateParams: ise2eSetUserPublicAndPrivateKeysParamsPOST\n    }, {\n      async post() {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        const {\n          public_key,\n          private_key,\n          force\n        } = this.bodyParams;\n        await Meteor.callAsync('e2e.setUserPublicAndPrivateKeys', {\n          public_key,\n          private_key,\n          force\n        });\n        return API.v1.success();\n      }\n    });\n    /**\n     * @openapi\n     *  /api/v1/e2e.updateGroupKey:\n     *    post:\n     *      description: Updates the end-to-end encryption key for a user on a room\n     *      security:\n     *        - autenticated: {}\n     *      requestBody:\n     *        description: A tuple containing the user ID, the room ID, and the key\n     *        content:\n     *          application/json:\n     *            schema:\n     *              type: object\n     *              properties:\n     *                uid:\n     *                  type: string\n     *                rid:\n     *                  type: string\n     *                key:\n     *                  type: string\n     *      responses:\n     *        200:\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiSuccessV1'\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('e2e.updateGroupKey', {\n      authRequired: true,\n      validateParams: ise2eUpdateGroupKeyParamsPOST,\n      deprecation: {\n        version: '8.0.0'\n      }\n    }, {\n      async post() {\n        const {\n          uid,\n          rid,\n          key\n        } = this.bodyParams;\n        await Meteor.callAsync('e2e.updateGroupKey', rid, uid, key);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('e2e.acceptSuggestedGroupKey', {\n      authRequired: true,\n      validateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET\n    }, {\n      async post() {\n        const {\n          rid\n        } = this.bodyParams;\n        await handleSuggestedGroupKey('accept', rid, this.userId, 'e2e.acceptSuggestedGroupKey');\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('e2e.rejectSuggestedGroupKey', {\n      authRequired: true,\n      validateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET\n    }, {\n      async post() {\n        const {\n          rid\n        } = this.bodyParams;\n        await handleSuggestedGroupKey('reject', rid, this.userId, 'e2e.rejectSuggestedGroupKey');\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('e2e.fetchUsersWaitingForGroupKey', {\n      authRequired: true,\n      validateParams: isE2EFetchUsersWaitingForGroupKeyProps\n    }, {\n      async get() {\n        if (!settings.get('E2E_Enable')) {\n          return API.v1.success({\n            usersWaitingForE2EKeys: {}\n          });\n        }\n        const {\n          roomIds = []\n        } = this.queryParams;\n        const usersWaitingForE2EKeys = (await Subscriptions.findUsersWithPublicE2EKeyByRids(roomIds, this.userId).toArray()).reduce((acc, _ref) => {\n          let {\n            rid,\n            users\n          } = _ref;\n          return _objectSpread({\n            [rid]: users\n          }, acc);\n        }, {});\n        return API.v1.success({\n          usersWaitingForE2EKeys\n        });\n      }\n    });\n    API.v1.addRoute('e2e.provideUsersSuggestedGroupKeys', {\n      authRequired: true,\n      validateParams: isE2EProvideUsersGroupKeyProps\n    }, {\n      async post() {\n        if (!settings.get('E2E_Enable')) {\n          return API.v1.success();\n        }\n        await provideUsersSuggestedGroupKeys(this.userId, this.bodyParams.usersSuggestedGroupKeys);\n        return API.v1.success();\n      }\n    });\n    // This should have permissions\n    API.v1.addRoute('e2e.resetRoomKey', {\n      authRequired: true,\n      validateParams: isE2EResetRoomKeyProps\n    }, {\n      async post() {\n        const {\n          rid,\n          e2eKey,\n          e2eKeyId\n        } = this.bodyParams;\n        if (!(await hasPermissionAsync(this.userId, 'toggle-room-e2e-encryption', rid))) {\n          return API.v1.forbidden();\n        }\n        if (LockMap.has(rid)) {\n          throw new Error('error-e2e-key-reset-in-progress');\n        }\n        LockMap.set(rid, true);\n        if (!(await canAccessRoomIdAsync(rid, this.userId))) {\n          throw new Error('error-not-allowed');\n        }\n        try {\n          await resetRoomKey(rid, this.userId, e2eKey, e2eKeyId);\n          return API.v1.success();\n        } catch (e) {\n          console.error(e);\n          return API.v1.failure('error-e2e-key-reset-failed');\n        } finally {\n          LockMap.delete(rid);\n        }\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","Subscriptions","ise2eGetUsersOfRoomWithoutKeyParamsGET","ise2eSetRoomKeyIDParamsPOST","ise2eSetUserPublicAndPrivateKeysParamsPOST","ise2eUpdateGroupKeyParamsPOST","isE2EProvideUsersGroupKeyProps","isE2EFetchUsersWaitingForGroupKeyProps","isE2EResetRoomKeyProps","ExpiryMap","Meteor","canAccessRoomIdAsync","hasPermissionAsync","handleSuggestedGroupKey","provideUsersSuggestedGroupKeys","resetRoomKey","settings","API","__reifyWaitForDeps__","LockMap","v1","addRoute","authRequired","get","result","callAsync","success","validateParams","rid","queryParams","post","keyID","bodyParams","public_key","private_key","force","deprecation","version","uid","key","userId","usersWaitingForE2EKeys","roomIds","findUsersWithPublicE2EKeyByRids","toArray","reduce","acc","_ref","users","usersSuggestedGroupKeys","e2eKey","e2eKeyId","forbidden","has","Error","set","e","console","error","failure","delete","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/e2e.ts"],"sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Subscriptions } from '@rocket.chat/models';\nimport {\n\tise2eGetUsersOfRoomWithoutKeyParamsGET,\n\tise2eSetRoomKeyIDParamsPOST,\n\tise2eSetUserPublicAndPrivateKeysParamsPOST,\n\tise2eUpdateGroupKeyParamsPOST,\n\tisE2EProvideUsersGroupKeyProps,\n\tisE2EFetchUsersWaitingForGroupKeyProps,\n\tisE2EResetRoomKeyProps,\n} from '@rocket.chat/rest-typings';\nimport ExpiryMap from 'expiry-map';\nimport { Meteor } from 'meteor/meteor';\n\nimport { canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { handleSuggestedGroupKey } from '../../../e2e/server/functions/handleSuggestedGroupKey';\nimport { provideUsersSuggestedGroupKeys } from '../../../e2e/server/functions/provideUsersSuggestedGroupKeys';\nimport { resetRoomKey } from '../../../e2e/server/functions/resetRoomKey';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\n\n// After 10s the room lock will expire, meaning that if for some reason the process never completed\n// The next reset will be available 10s after\nconst LockMap = new ExpiryMap<string, boolean>(10000);\n\nAPI.v1.addRoute(\n\t'e2e.fetchMyKeys',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst result: {\n\t\t\t\tpublic_key: string;\n\t\t\t\tprivate_key: string;\n\t\t\t} = await Meteor.callAsync('e2e.fetchMyKeys');\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.getUsersOfRoomWithoutKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { rid } = this.queryParams;\n\n\t\t\tconst result: {\n\t\t\t\tusers: IUser[];\n\t\t\t} = await Meteor.callAsync('e2e.getUsersOfRoomWithoutKey', rid);\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/e2e.setRoomKeyID:\n *    post:\n *      description: Sets the end-to-end encryption key ID for a room\n *      security:\n *        - autenticated: {}\n *      requestBody:\n *        description: A tuple containing the room ID and the key ID\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                rid:\n *                  type: string\n *                keyID:\n *                  type: string\n *      responses:\n *        200:\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nAPI.v1.addRoute(\n\t'e2e.setRoomKeyID',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eSetRoomKeyIDParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, keyID } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('e2e.setRoomKeyID', rid, keyID);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/e2e.setUserPublicAndPrivateKeys:\n *    post:\n *      description: Sets the end-to-end encryption keys for the authenticated user\n *      security:\n *        - autenticated: {}\n *      requestBody:\n *        description: A tuple containing the public and the private keys\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                public_key:\n *                  type: string\n *                private_key:\n *                  type: string\n *                force:\n *                  type: boolean\n *      responses:\n *        200:\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'e2e.setUserPublicAndPrivateKeys',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eSetUserPublicAndPrivateKeysParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t\tconst { public_key, private_key, force } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('e2e.setUserPublicAndPrivateKeys', {\n\t\t\t\tpublic_key,\n\t\t\t\tprivate_key,\n\t\t\t\tforce,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/e2e.updateGroupKey:\n *    post:\n *      description: Updates the end-to-end encryption key for a user on a room\n *      security:\n *        - autenticated: {}\n *      requestBody:\n *        description: A tuple containing the user ID, the room ID, and the key\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                uid:\n *                  type: string\n *                rid:\n *                  type: string\n *                key:\n *                  type: string\n *      responses:\n *        200:\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'e2e.updateGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eUpdateGroupKeyParamsPOST,\n\t\tdeprecation: {\n\t\t\tversion: '8.0.0',\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { uid, rid, key } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('e2e.updateGroupKey', rid, uid, key);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.acceptSuggestedGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid } = this.bodyParams;\n\n\t\t\tawait handleSuggestedGroupKey('accept', rid, this.userId, 'e2e.acceptSuggestedGroupKey');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.rejectSuggestedGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: ise2eGetUsersOfRoomWithoutKeyParamsGET,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid } = this.bodyParams;\n\n\t\t\tawait handleSuggestedGroupKey('reject', rid, this.userId, 'e2e.rejectSuggestedGroupKey');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.fetchUsersWaitingForGroupKey',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isE2EFetchUsersWaitingForGroupKeyProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (!settings.get('E2E_Enable')) {\n\t\t\t\treturn API.v1.success({ usersWaitingForE2EKeys: {} });\n\t\t\t}\n\n\t\t\tconst { roomIds = [] } = this.queryParams;\n\t\t\tconst usersWaitingForE2EKeys = (await Subscriptions.findUsersWithPublicE2EKeyByRids(roomIds, this.userId).toArray()).reduce<\n\t\t\t\tRecord<string, { _id: string; public_key: string }[]>\n\t\t\t>((acc, { rid, users }) => ({ [rid]: users, ...acc }), {});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tusersWaitingForE2EKeys,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'e2e.provideUsersSuggestedGroupKeys',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isE2EProvideUsersGroupKeyProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tif (!settings.get('E2E_Enable')) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tawait provideUsersSuggestedGroupKeys(this.userId, this.bodyParams.usersSuggestedGroupKeys);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// This should have permissions\nAPI.v1.addRoute(\n\t'e2e.resetRoomKey',\n\t{ authRequired: true, validateParams: isE2EResetRoomKeyProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, e2eKey, e2eKeyId } = this.bodyParams;\n\t\t\tif (!(await hasPermissionAsync(this.userId, 'toggle-room-e2e-encryption', rid))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\t\t\tif (LockMap.has(rid)) {\n\t\t\t\tthrow new Error('error-e2e-key-reset-in-progress');\n\t\t\t}\n\n\t\t\tLockMap.set(rid, true);\n\n\t\t\tif (!(await canAccessRoomIdAsync(rid, this.userId))) {\n\t\t\t\tthrow new Error('error-not-allowed');\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait resetRoomKey(rid, this.userId, e2eKey, e2eKeyId);\n\t\t\t\treturn API.v1.success();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\treturn API.v1.failure('error-e2e-key-reset-failed');\n\t\t\t} finally {\n\t\t\t\tLockMap.delete(rid);\n\t\t\t}\n\t\t},\n\t},\n);\n"],"mappings":";;;IACA,IAAAA,aAAS;IAAAC,MAAe,CAAAC,IAAA,CAAM,sCAAsB;MAAAC,QAAAC,CAAA;QAAAJ,aAAA,GAAAI,CAAA;MAAA;IAAA;IAApD,IAAAC,aAAS;IAAAJ,MAAe,CAAAC,IAAA,CAAM,qBAAqB,EAAC;MAAAG,cAAAD,CAAA;QAAAC,aAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,IAAAE,sCAAA,EAAAC,2BAAA,EAAAC,0CAAA,EAAAC,6BAAA,EAAAC,8BAAA,EAAAC,sCAAA,EAAAC,sBAAA;IAAAX,MAAA,CAAAC,IAAA;MAAAI,uCAAAF,CAAA;QAAAE,sCAAA,GAAAF,CAAA;MAAA;MAAAG,4BAAAH,CAAA;QAAAG,2BAAA,GAAAH,CAAA;MAAA;MAAAI,2CAAAJ,CAAA;QAAAI,0CAAA,GAAAJ,CAAA;MAAA;MAAAK,8BAAAL,CAAA;QAAAK,6BAAA,GAAAL,CAAA;MAAA;MAAAM,+BAAAN,CAAA;QAAAM,8BAAA,GAAAN,CAAA;MAAA;MAAAO,uCAAAP,CAAA;QAAAO,sCAAA,GAAAP,CAAA;MAAA;MAAAQ,uBAAAR,CAAA;QAAAQ,sBAAA,GAAAR,CAAA;MAAA;IAAA;IAAA,IAAAS,SAAA;IAAAZ,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAS,SAAA,GAAAT,CAAA;MAAA;IAAA;IAAA,IAAAU,MAAA;IAAAb,MAAA,CAAAC,IAAA;MAAAY,OAAAV,CAAA;QAAAU,MAAA,GAAAV,CAAA;MAAA;IAAA;IAAA,IAAAW,oBAAA;IAAAd,MAAA,CAAAC,IAAA;MAAAa,qBAAAX,CAAA;QAAAW,oBAAA,GAAAX,CAAA;MAAA;IAAA;IAAA,IAAAY,kBAAA;IAAAf,MAAA,CAAAC,IAAA;MAAAc,mBAAAZ,CAAA;QAAAY,kBAAA,GAAAZ,CAAA;MAAA;IAAA;IAAA,IAAAa,uBAAA;IAAAhB,MAAA,CAAAC,IAAA;MAAAe,wBAAAb,CAAA;QAAAa,uBAAA,GAAAb,CAAA;MAAA;IAAA;IAAA,IAAAc,8BAAA;IAAAjB,MAAA,CAAAC,IAAA;MAAAgB,+BAAAd,CAAA;QAAAc,8BAAA,GAAAd,CAAA;MAAA;IAAA;IAAA,IAAAe,YAAA;IAAAlB,MAAA,CAAAC,IAAA;MAAAiB,aAAAf,CAAA;QAAAe,YAAA,GAAAf,CAAA;MAAA;IAAA;IAAA,IAAAgB,QAAA;IAAAnB,MAAA,CAAAC,IAAA;MAAAkB,SAAAhB,CAAA;QAAAgB,QAAA,GAAAhB,CAAA;MAAA;IAAA;IAAA,IAAAiB,GAAA;IAAApB,MAAA,CAAAC,IAAA;MAAAmB,IAAAjB,CAAA;QAAAiB,GAAA,GAAAjB,CAAA;MAAA;IAAA;IAAA,IAAAkB,oBAAA,WAAAA,oBAAA;IAqBpD;IACA;IACA,MAAMC,OAAO,GAAG,IAAIV,SAAS,CAAkB,KAAK,CAAC;IAErDQ,GAAG,CAACG,EAAE,CAACC,QAAQ,CACd,iBAAiB,EACjB;MACCC,YAAY,EAAE;KACd,EACD;MACC,MAAMC,GAAGA,CAAA;QACR,MAAMC,MAAM,GAGR,MAAMd,MAAM,CAACe,SAAS,CAAC,iBAAiB,CAAC;QAE7C,OAAOR,GAAG,CAACG,EAAE,CAACM,OAAO,CAACF,MAAM,CAAC;MAC9B;KACA,CACD;IAEDP,GAAG,CAACG,EAAE,CAACC,QAAQ,CACd,8BAA8B,EAC9B;MACCC,YAAY,EAAE,IAAI;MAClBK,cAAc,EAAEzB;KAChB,EACD;MACC,MAAMqB,GAAGA,CAAA;QACR,MAAM;UAAEK;QAAG,CAAE,GAAG,IAAI,CAACC,WAAW;QAEhC,MAAML,MAAM,GAER,MAAMd,MAAM,CAACe,SAAS,CAAC,8BAA8B,EAAEG,GAAG,CAAC;QAE/D,OAAOX,GAAG,CAACG,EAAE,CAACM,OAAO,CAACF,MAAM,CAAC;MAC9B;KACA,CACD;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgCAP,GAAG,CAACG,EAAE,CAACC,QAAQ,CACd,kBAAkB,EAClB;MACCC,YAAY,EAAE,IAAI;MAClBK,cAAc,EAAExB;KAChB,EACD;MACC,MAAM2B,IAAIA,CAAA;QACT,MAAM;UAAEF,GAAG;UAAEG;QAAK,CAAE,GAAG,IAAI,CAACC,UAAU;QAEtC,MAAMtB,MAAM,CAACe,SAAS,CAAC,kBAAkB,EAAEG,GAAG,EAAEG,KAAK,CAAC;QAEtD,OAAOd,GAAG,CAACG,EAAE,CAACM,OAAO,EAAE;MACxB;KACA,CACD;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiCAT,GAAG,CAACG,EAAE,CAACC,QAAQ,CACd,iCAAiC,EACjC;MACCC,YAAY,EAAE,IAAI;MAClBK,cAAc,EAAEvB;KAChB,EACD;MACC,MAAM0B,IAAIA,CAAA;QACT;QACA,MAAM;UAAEG,UAAU;UAAEC,WAAW;UAAEC;QAAK,CAAE,GAAG,IAAI,CAACH,UAAU;QAE1D,MAAMtB,MAAM,CAACe,SAAS,CAAC,iCAAiC,EAAE;UACzDQ,UAAU;UACVC,WAAW;UACXC;SACA,CAAC;QAEF,OAAOlB,GAAG,CAACG,EAAE,CAACM,OAAO,EAAE;MACxB;KACA,CACD;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiCAT,GAAG,CAACG,EAAE,CAACC,QAAQ,CACd,oBAAoB,EACpB;MACCC,YAAY,EAAE,IAAI;MAClBK,cAAc,EAAEtB,6BAA6B;MAC7C+B,WAAW,EAAE;QACZC,OAAO,EAAE;;KAEV,EACD;MACC,MAAMP,IAAIA,CAAA;QACT,MAAM;UAAEQ,GAAG;UAAEV,GAAG;UAAEW;QAAG,CAAE,GAAG,IAAI,CAACP,UAAU;QAEzC,MAAMtB,MAAM,CAACe,SAAS,CAAC,oBAAoB,EAAEG,GAAG,EAAEU,GAAG,EAAEC,GAAG,CAAC;QAE3D,OAAOtB,GAAG,CAACG,EAAE,CAACM,OAAO,EAAE;MACxB;KACA,CACD;IAEDT,GAAG,CAACG,EAAE,CAACC,QAAQ,CACd,6BAA6B,EAC7B;MACCC,YAAY,EAAE,IAAI;MAClBK,cAAc,EAAEzB;KAChB,EACD;MACC,MAAM4B,IAAIA,CAAA;QACT,MAAM;UAAEF;QAAG,CAAE,GAAG,IAAI,CAACI,UAAU;QAE/B,MAAMnB,uBAAuB,CAAC,QAAQ,EAAEe,GAAG,EAAE,IAAI,CAACY,MAAM,EAAE,6BAA6B,CAAC;QAExF,OAAOvB,GAAG,CAACG,EAAE,CAACM,OAAO,EAAE;MACxB;KACA,CACD;IAEDT,GAAG,CAACG,EAAE,CAACC,QAAQ,CACd,6BAA6B,EAC7B;MACCC,YAAY,EAAE,IAAI;MAClBK,cAAc,EAAEzB;KAChB,EACD;MACC,MAAM4B,IAAIA,CAAA;QACT,MAAM;UAAEF;QAAG,CAAE,GAAG,IAAI,CAACI,UAAU;QAE/B,MAAMnB,uBAAuB,CAAC,QAAQ,EAAEe,GAAG,EAAE,IAAI,CAACY,MAAM,EAAE,6BAA6B,CAAC;QAExF,OAAOvB,GAAG,CAACG,EAAE,CAACM,OAAO,EAAE;MACxB;KACA,CACD;IAEDT,GAAG,CAACG,EAAE,CAACC,QAAQ,CACd,kCAAkC,EAClC;MACCC,YAAY,EAAE,IAAI;MAClBK,cAAc,EAAEpB;KAChB,EACD;MACC,MAAMgB,GAAGA,CAAA;QACR,IAAI,CAACP,QAAQ,CAACO,GAAG,CAAC,YAAY,CAAC,EAAE;UAChC,OAAON,GAAG,CAACG,EAAE,CAACM,OAAO,CAAC;YAAEe,sBAAsB,EAAE;UAAE,CAAE,CAAC;QACtD;QAEA,MAAM;UAAEC,OAAO,GAAG;QAAE,CAAE,GAAG,IAAI,CAACb,WAAW;QACzC,MAAMY,sBAAsB,GAAG,CAAC,MAAMxC,aAAa,CAAC0C,+BAA+B,CAACD,OAAO,EAAE,IAAI,CAACF,MAAM,CAAC,CAACI,OAAO,EAAE,EAAEC,MAAM,CAEzH,CAACC,GAAG,EAAAC,IAAA;UAAA,IAAE;YAAEnB,GAAG;YAAEoB;UAAK,CAAE,GAAAD,IAAA;UAAA,OAAAnD,aAAA;YAAQ,CAACgC,GAAG,GAAGoB;UAAK,GAAKF,GAAG;QAAA,CAAG,EAAE,EAAE,CAAC;QAE1D,OAAO7B,GAAG,CAACG,EAAE,CAACM,OAAO,CAAC;UACrBe;SACA,CAAC;MACH;KACA,CACD;IAEDxB,GAAG,CAACG,EAAE,CAACC,QAAQ,CACd,oCAAoC,EACpC;MACCC,YAAY,EAAE,IAAI;MAClBK,cAAc,EAAErB;KAChB,EACD;MACC,MAAMwB,IAAIA,CAAA;QACT,IAAI,CAACd,QAAQ,CAACO,GAAG,CAAC,YAAY,CAAC,EAAE;UAChC,OAAON,GAAG,CAACG,EAAE,CAACM,OAAO,EAAE;QACxB;QAEA,MAAMZ,8BAA8B,CAAC,IAAI,CAAC0B,MAAM,EAAE,IAAI,CAACR,UAAU,CAACiB,uBAAuB,CAAC;QAE1F,OAAOhC,GAAG,CAACG,EAAE,CAACM,OAAO,EAAE;MACxB;KACA,CACD;IAED;IACAT,GAAG,CAACG,EAAE,CAACC,QAAQ,CACd,kBAAkB,EAClB;MAAEC,YAAY,EAAE,IAAI;MAAEK,cAAc,EAAEnB;IAAsB,CAAE,EAC9D;MACC,MAAMsB,IAAIA,CAAA;QACT,MAAM;UAAEF,GAAG;UAAEsB,MAAM;UAAEC;QAAQ,CAAE,GAAG,IAAI,CAACnB,UAAU;QACjD,IAAI,EAAE,MAAMpB,kBAAkB,CAAC,IAAI,CAAC4B,MAAM,EAAE,4BAA4B,EAAEZ,GAAG,CAAC,CAAC,EAAE;UAChF,OAAOX,GAAG,CAACG,EAAE,CAACgC,SAAS,EAAE;QAC1B;QACA,IAAIjC,OAAO,CAACkC,GAAG,CAACzB,GAAG,CAAC,EAAE;UACrB,MAAM,IAAI0B,KAAK,CAAC,iCAAiC,CAAC;QACnD;QAEAnC,OAAO,CAACoC,GAAG,CAAC3B,GAAG,EAAE,IAAI,CAAC;QAEtB,IAAI,EAAE,MAAMjB,oBAAoB,CAACiB,GAAG,EAAE,IAAI,CAACY,MAAM,CAAC,CAAC,EAAE;UACpD,MAAM,IAAIc,KAAK,CAAC,mBAAmB,CAAC;QACrC;QAEA,IAAI;UACH,MAAMvC,YAAY,CAACa,GAAG,EAAE,IAAI,CAACY,MAAM,EAAEU,MAAM,EAAEC,QAAQ,CAAC;UACtD,OAAOlC,GAAG,CAACG,EAAE,CAACM,OAAO,EAAE;QACxB,CAAC,CAAC,OAAO8B,CAAC,EAAE;UACXC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;UAChB,OAAOvC,GAAG,CAACG,EAAE,CAACuC,OAAO,CAAC,4BAA4B,CAAC;QACpD,CAAC,SAAS;UACTxC,OAAO,CAACyC,MAAM,CAAChC,GAAG,CAAC;QACpB;MACD;KACA,CACD;IAACiC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"53643dfb696a66753a715a9899c8bb096cbbed35"}
