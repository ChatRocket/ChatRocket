{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer-slack/server/SlackImporter.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer-slack/server/SlackImporter.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer-slack/server/SlackImporter.ts","inputSourceMap":{"version":3,"file":"app/importer-slack/server/SlackImporter.ts","sourceRoot":"","sources":["app/importer-slack/server/SlackImporter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImportUser, IImportMessage, IImportPendingFile } from '@rocket.chat/core-typings';\nimport { Messages, Settings, ImportData } from '@rocket.chat/models';\nimport type { IZipEntry } from 'adm-zip';\n\nimport { Importer, ProgressStep, ImporterWebsocket } from '../../importer/server';\nimport type { ImporterProgress } from '../../importer/server/classes/ImporterProgress';\nimport { notifyOnSettingChanged } from '../../lib/server/lib/notifyListener';\nimport { MentionsParser } from '../../mentions/lib/MentionsParser';\nimport { settings } from '../../settings/server';\nimport { getUserAvatarURL } from '../../utils/server/getUserAvatarURL';\n\ntype SlackChannel = {\n\tid: string;\n\tname: string;\n\ttopic?: {\n\t\tvalue: string;\n\t\tcreator: string;\n\t\tlast_set: number;\n\t};\n\tmembers: string[];\n\tpurpose?: {\n\t\tvalue: string;\n\t\tcreator: string;\n\t\tlast_set: number;\n\t};\n\tcreated: number;\n\tcreator: string | null;\n\tis_general: boolean;\n\tis_archived: boolean;\n};\n\ntype SlackUser = {\n\tid: string;\n\tname: string;\n\tprofile: {\n\t\treal_name: string;\n\t\temail: string;\n\t\timage_512: string;\n\t\timage_original: string;\n\t\tstatus_text: string;\n\t\ttitle: string;\n\t};\n\ttz_offset: number;\n\tdeleted: boolean;\n\tis_bot: boolean;\n};\n\ntype SlackFile = {\n\tid: string;\n\turl_private_download: string;\n\tsize: number;\n\tname: string;\n\tis_external: boolean;\n};\n\ntype SlackMessage = {\n\tid: string;\n\tts: string;\n\tuser: string;\n\treactions?: {\n\t\tname: string;\n\t\tusers: string[];\n\t}[];\n\ttype: 'message';\n\tsubtype?: string;\n\tfiles?: SlackFile[];\n\ttext: string;\n\tedited?: {\n\t\tts: string;\n\t\tuser: string;\n\t};\n\tthread_ts?: string;\n\treply_users?: string[];\n\treply_count?: number;\n\treplies?: {\n\t\tuser: string;\n\t}[];\n\tlatest_reply: string;\n\ticons?: {\n\t\temoji: string;\n\t};\n\tattachments?: SlackAttachment[];\n} & (\n\t| {\n\t\t\tsubtype: 'channel_purpose' | 'group_purpose';\n\t\t\tpurpose: string;\n\t  }\n\t| {\n\t\t\tsubtype: 'channel_join' | 'group_join' | 'channel_leave' | 'group_leave';\n\t  }\n\t| {\n\t\t\tsubtype: 'channel_topic' | 'group_topic';\n\t\t\ttopic: string;\n\t  }\n\t| {\n\t\t\tsubtype: 'channel_name' | 'group_name';\n\t\t\tname: string;\n\t  }\n\t| {\n\t\t\tsubtype: 'pinned_item';\n\t\t\tattachments: SlackAttachment[];\n\t  }\n\t| {\n\t\t\tsubtype: 'file_share';\n\t\t\tfile: SlackFile;\n\t  }\n\t| {\n\t\t\tsubtype: 'me_message';\n\t  }\n);\n\ntype SlackAttachment = {\n\ttext: string;\n\ttitle: string;\n\tfallback: string;\n\tauthor_subname: string;\n};\n\nexport class SlackImporter extends Importer {\n\tprivate _useUpsert = false;\n\n\tasync prepareChannelsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = (JSON.parse(entry.getData().toString()) as SlackChannel[]).filter(\n\t\t\t(channel): channel is SlackChannel & { creator: string } => 'creator' in channel && channel.creator != null,\n\t\t);\n\n\t\tthis.logger.debug(`loaded ${data.length} channels.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\t_id: channel.is_general ? 'general' : undefined,\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'c',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareGroupsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = (JSON.parse(entry.getData().toString()) as SlackChannel[]).filter(\n\t\t\t(channel): channel is SlackChannel & { creator: string } => 'creator' in channel && channel.creator != null,\n\t\t);\n\n\t\tthis.logger.debug(`loaded ${data.length} groups.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'p',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareMpimpsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = (JSON.parse(entry.getData().toString()) as SlackChannel[]).filter(\n\t\t\t(channel): channel is SlackChannel & { creator: string } => 'creator' in channel && channel.creator != null,\n\t\t);\n\n\t\tthis.logger.debug(`loaded ${data.length} mpims.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tconst maxUsers = settings.get<number>('DirectMesssage_maxUsers') || 1;\n\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: channel.members.length > maxUsers ? 'p' : 'd',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareDMsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = JSON.parse(entry.getData().toString()) as SlackChannel[];\n\n\t\tthis.logger.debug(`loaded ${data.length} dms.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'd',\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareUsersFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_USERS);\n\t\tconst data = JSON.parse(entry.getData().toString()) as SlackUser[];\n\n\t\tthis.logger.debug(`loaded ${data.length} users.`);\n\n\t\t// Insert the users record\n\t\tawait this.updateRecord({ 'count.users': data.length });\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tfor await (const user of data) {\n\t\t\tconst newUser: IImportUser = {\n\t\t\t\temails: [],\n\t\t\t\timportIds: [user.id],\n\t\t\t\tusername: user.name,\n\t\t\t\tname: user.profile.real_name,\n\t\t\t\tutcOffset: user.tz_offset && user.tz_offset / 3600,\n\t\t\t\tavatarUrl: user.profile.image_original || user.profile.image_512,\n\t\t\t\tdeleted: user.deleted,\n\t\t\t\tstatusText: user.profile.status_text || undefined,\n\t\t\t\tbio: user.profile.title || undefined,\n\t\t\t\ttype: 'user',\n\t\t\t};\n\n\t\t\tif (user.profile.email) {\n\t\t\t\tnewUser.emails.push(user.profile.email);\n\t\t\t}\n\n\t\t\tif (user.is_bot) {\n\t\t\t\tnewUser.roles = ['bot'];\n\t\t\t\tnewUser.type = 'bot';\n\t\t\t}\n\n\t\t\tawait this.converter.addUser(newUser);\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareUsingLocalFile(fullFilePath: string): Promise<ImporterProgress> {\n\t\tthis.logger.debug('start preparing import operation');\n\t\tawait this.converter.clearImportData();\n\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tlet userCount = 0;\n\t\tlet messagesCount = 0;\n\t\tlet channelCount = 0;\n\t\tlet count = 0;\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });\n\t\tlet oldRate = 0;\n\n\t\tconst increaseProgress = () => {\n\t\t\ttry {\n\t\t\t\tcount++;\n\t\t\t\tconst rate = Math.floor((count * 1000) / totalEntries) / 10;\n\t\t\t\tif (rate > oldRate) {\n\t\t\t\t\tImporterWebsocket.progressUpdated({ rate });\n\t\t\t\t\toldRate = rate;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\t// we need to iterate the zip file twice so that all channels are loaded before the messages\n\t\t\tfor await (const entry of zip.getEntries()) {\n\t\t\t\ttry {\n\t\t\t\t\tif (entry.entryName === 'channels.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareChannelsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'groups.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareGroupsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'mpims.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareMpimpsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'dms.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareDMsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'users.json') {\n\t\t\t\t\t\tuserCount = await this.prepareUsersFile(entry);\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.error(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (userCount) {\n\t\t\t\tconst { value } = await Settings.incrementValueById('Slack_Importer_Count', userCount, { returnDocument: 'after' });\n\t\t\t\tif (value) {\n\t\t\t\t\tvoid notifyOnSettingChanged(value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst missedTypes: Record<string, SlackMessage> = {};\n\t\t\t// If we have no slack message yet, then we can insert them instead of upserting\n\t\t\tthis._useUpsert = !(await Messages.findOne({ _id: /slack\\-.*/ }));\n\n\t\t\tfor await (const entry of zip.getEntries()) {\n\t\t\t\ttry {\n\t\t\t\t\tif (entry.entryName.includes('__MACOSX') || entry.entryName.includes('.DS_Store')) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tthis.logger.debug(`Ignoring the file: ${entry.entryName}`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (['channels.json', 'groups.json', 'mpims.json', 'dms.json', 'users.json'].includes(entry.entryName)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!entry.isDirectory && entry.entryName.includes('/')) {\n\t\t\t\t\t\tconst item = entry.entryName.split('/');\n\n\t\t\t\t\t\tconst channel = item[0];\n\t\t\t\t\t\tconst date = item[1].split('.')[0];\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Insert the messages records\n\t\t\t\t\t\t\tif (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n\t\t\t\t\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst tempMessages = JSON.parse(entry.getData().toString()) as SlackMessage[];\n\t\t\t\t\t\t\tmessagesCount += tempMessages.length;\n\t\t\t\t\t\t\tawait this.updateRecord({ messagesstatus: `${channel}/${date}` });\n\t\t\t\t\t\t\tawait this.addCountToTotal(tempMessages.length);\n\n\t\t\t\t\t\t\tconst slackChannelId = await ImportData.findChannelImportIdByNameOrImportId(channel);\n\n\t\t\t\t\t\t\tif (slackChannelId) {\n\t\t\t\t\t\t\t\tfor await (const message of tempMessages) {\n\t\t\t\t\t\t\t\t\tawait this.prepareMessageObject(message, missedTypes, slackChannelId);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.logger.warn(`${entry.entryName} is not a valid JSON file! Unable to import it.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.error(e);\n\t\t\t\t}\n\n\t\t\t\tincreaseProgress();\n\t\t\t}\n\n\t\t\tif (Object.keys(missedTypes).length > 0) {\n\t\t\t\tthis.logger.info('Missed import types:', missedTypes);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.logger.error(e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tImporterWebsocket.progressUpdated({ rate: 100 });\n\t\tawait this.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\n\t\treturn this.progress;\n\t}\n\n\tparseMentions(newMessage: IImportMessage): void {\n\t\tconst mentionsParser = new MentionsParser({\n\t\t\tpattern: () => '[0-9a-zA-Z]+',\n\t\t\tuseRealName: () => settings.get<boolean>('UI_Use_Real_Name'),\n\t\t\tme: () => 'me',\n\t\t});\n\n\t\tconst users = mentionsParser\n\t\t\t.getUserMentions(newMessage.msg)\n\t\t\t.filter((u: string) => u)\n\t\t\t.map((uid: string) => this._replaceSlackUserId(uid.slice(1, uid.length)));\n\t\tif (users.length) {\n\t\t\tif (!newMessage.mentions) {\n\t\t\t\tnewMessage.mentions = [];\n\t\t\t}\n\t\t\tnewMessage.mentions.push(...users);\n\t\t}\n\n\t\tconst channels = mentionsParser\n\t\t\t.getChannelMentions(newMessage.msg)\n\t\t\t.filter((c: string) => c)\n\t\t\t.map((name: string) => name.slice(1, name.length));\n\t\tif (channels.length) {\n\t\t\tif (!newMessage.channels) {\n\t\t\t\tnewMessage.channels = [];\n\t\t\t}\n\t\t\tnewMessage.channels.push(...channels);\n\t\t}\n\t}\n\n\tasync processMessageSubType(\n\t\tmessage: SlackMessage,\n\t\tslackChannelId: string,\n\t\tnewMessage: IImportMessage,\n\t\tmissedTypes: Record<string, SlackMessage>,\n\t): Promise<boolean> {\n\t\tconst ignoreTypes: Record<string, boolean> = { bot_add: true, file_comment: true, file_mention: true };\n\n\t\tswitch (message.subtype) {\n\t\t\tcase 'channel_join':\n\t\t\tcase 'group_join':\n\t\t\t\tnewMessage.t = 'uj';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_leave':\n\t\t\tcase 'group_leave':\n\t\t\t\tnewMessage.t = 'ul';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_purpose':\n\t\t\tcase 'group_purpose':\n\t\t\t\tnewMessage.t = 'room_changed_description';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\tnewMessage.msg = message.purpose;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_topic':\n\t\t\tcase 'group_topic':\n\t\t\t\tnewMessage.t = 'room_changed_topic';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\tnewMessage.msg = message.topic;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_name':\n\t\t\tcase 'group_name':\n\t\t\t\tnewMessage.t = 'r';\n\t\t\t\tnewMessage.msg = message.name;\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'pinned_item':\n\t\t\t\tif (message.attachments) {\n\t\t\t\t\tif (!newMessage.attachments) {\n\t\t\t\t\t\tnewMessage.attachments = [];\n\t\t\t\t\t}\n\t\t\t\t\tnewMessage.attachments.push({\n\t\t\t\t\t\ttext: this.convertSlackMessageToRocketChat(message.attachments[0].text),\n\t\t\t\t\t\tauthor_name: message.attachments[0].author_subname,\n\t\t\t\t\t\tauthor_icon: getUserAvatarURL(message.attachments[0].author_subname),\n\t\t\t\t\t});\n\t\t\t\t\tnewMessage.t = 'message_pinned';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'file_share':\n\t\t\t\tif (message.file?.url_private_download) {\n\t\t\t\t\tconst fileId = this.makeSlackMessageId(slackChannelId, message.ts, 'share');\n\t\t\t\t\tconst fileMessage: IImportMessage = {\n\t\t\t\t\t\t_id: fileId,\n\t\t\t\t\t\trid: newMessage.rid,\n\t\t\t\t\t\tts: newMessage.ts,\n\t\t\t\t\t\tmsg: message.file.url_private_download || '',\n\t\t\t\t\t\t_importFile: this.convertSlackFileToPendingFile(message.file),\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: newMessage.u._id,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (message.thread_ts && message.thread_ts !== message.ts) {\n\t\t\t\t\t\tfileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait this.converter.addMessage(fileMessage, this._useUpsert);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif (!missedTypes[message.subtype] && !ignoreTypes[message.subtype]) {\n\t\t\t\t\tmissedTypes[message.subtype] = message;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tmakeSlackMessageId(channelId: string, ts: string, fileIndex?: string): string {\n\t\tconst base = `slack-${channelId}-${ts.replace(/\\./g, '-')}`;\n\n\t\tif (fileIndex) {\n\t\t\treturn `${base}-file${fileIndex}`;\n\t\t}\n\n\t\treturn base;\n\t}\n\n\tasync prepareMessageObject(message: SlackMessage, missedTypes: Record<string, SlackMessage>, slackChannelId: string): Promise<void> {\n\t\tconst id = this.makeSlackMessageId(slackChannelId, message.ts);\n\t\tconst newMessage: IImportMessage = {\n\t\t\t_id: id,\n\t\t\trid: slackChannelId,\n\t\t\tts: new Date(parseInt(message.ts.split('.')[0]) * 1000),\n\t\t\tmsg: '',\n\t\t\tu: {\n\t\t\t\t_id: this._replaceSlackUserId(message.user),\n\t\t\t},\n\t\t};\n\n\t\t// Process the reactions\n\t\tif (message.reactions && message.reactions.length > 0) {\n\t\t\tnewMessage.reactions = message.reactions.reduce(\n\t\t\t\t(newReactions, reaction) => {\n\t\t\t\t\tconst name = `:${reaction.name}:`;\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...newReactions,\n\t\t\t\t\t\t...(reaction.users?.length ? { name: { name, users: this._replaceSlackUserIds(reaction.users) } } : {}),\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t{} as Required<IImportMessage>['reactions'],\n\t\t\t);\n\t\t}\n\n\t\tif (message.type === 'message') {\n\t\t\tif (message.files) {\n\t\t\t\tlet fileIndex = 0;\n\t\t\t\tconst promises = message.files.map(async (file) => {\n\t\t\t\t\tfileIndex++;\n\n\t\t\t\t\tconst fileId = this.makeSlackMessageId(slackChannelId, message.ts, String(fileIndex));\n\t\t\t\t\tconst fileMessage: IImportMessage = {\n\t\t\t\t\t\t_id: fileId,\n\t\t\t\t\t\trid: slackChannelId,\n\t\t\t\t\t\tts: newMessage.ts,\n\t\t\t\t\t\tmsg: file.url_private_download || '',\n\t\t\t\t\t\t_importFile: this.convertSlackFileToPendingFile(file),\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: this._replaceSlackUserId(message.user),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (message.thread_ts && message.thread_ts !== message.ts) {\n\t\t\t\t\t\tfileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait this.converter.addMessage(fileMessage, this._useUpsert);\n\t\t\t\t});\n\t\t\t\tawait Promise.all(promises);\n\t\t\t}\n\n\t\t\tconst regularTypes = ['me_message', 'thread_broadcast'];\n\n\t\t\tconst isBotMessage = message.subtype && ['bot_message', 'slackbot_response'].includes(message.subtype);\n\n\t\t\tif (message.subtype && !regularTypes.includes(message.subtype) && !isBotMessage) {\n\t\t\t\tif (await this.processMessageSubType(message, slackChannelId, newMessage, missedTypes)) {\n\t\t\t\t\tawait this.converter.addMessage(newMessage, this._useUpsert);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst text = this.convertSlackMessageToRocketChat(message.text);\n\n\t\t\t\tif (isBotMessage) {\n\t\t\t\t\tnewMessage.bot = true;\n\t\t\t\t}\n\n\t\t\t\tif (message.subtype === 'me_message') {\n\t\t\t\t\tnewMessage.msg = `_${text}_`;\n\t\t\t\t} else {\n\t\t\t\t\tnewMessage.msg = text;\n\t\t\t\t}\n\n\t\t\t\tif (message.thread_ts) {\n\t\t\t\t\tif (message.thread_ts === message.ts) {\n\t\t\t\t\t\tif (message.reply_users) {\n\t\t\t\t\t\t\tconst replies = new Set<string>();\n\t\t\t\t\t\t\tmessage.reply_users.forEach((item: string) => {\n\t\t\t\t\t\t\t\treplies.add(this._replaceSlackUserId(item));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (replies.size) {\n\t\t\t\t\t\t\t\tnewMessage.replies = Array.from(replies);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (message.replies) {\n\t\t\t\t\t\t\tconst replies = new Set<string>();\n\t\t\t\t\t\t\tmessage.replies.forEach((item: { user: string }) => {\n\t\t\t\t\t\t\t\treplies.add(this._replaceSlackUserId(item.user));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (replies.size) {\n\t\t\t\t\t\t\t\tnewMessage.replies = Array.from(replies);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logger.warn(`Failed to import the parent comment, message: ${newMessage._id}. Missing replies/reply_users field`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewMessage.tcount = message.reply_count;\n\t\t\t\t\t\tnewMessage.tlm = new Date(parseInt(message.latest_reply.split('.')[0]) * 1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (message.edited) {\n\t\t\t\t\tnewMessage.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n\t\t\t\t\tif (message.edited.user) {\n\t\t\t\t\t\tnewMessage.editedBy = this._replaceSlackUserId(message.edited.user);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (message.attachments) {\n\t\t\t\t\tnewMessage.attachments = this.convertMessageAttachments(message.attachments);\n\t\t\t\t}\n\n\t\t\t\tif (message.icons?.emoji) {\n\t\t\t\t\tnewMessage.emoji = message.icons.emoji;\n\t\t\t\t}\n\n\t\t\t\tthis.parseMentions(newMessage);\n\t\t\t\tawait this.converter.addMessage(newMessage, this._useUpsert);\n\t\t\t}\n\t\t}\n\t}\n\n\t_replaceSlackUserId(userId: string): string {\n\t\tif (userId === 'USLACKBOT') {\n\t\t\treturn 'rocket.cat';\n\t\t}\n\n\t\treturn userId;\n\t}\n\n\t_replaceSlackUserIds(members: string[]) {\n\t\tif (!members?.length) {\n\t\t\treturn [];\n\t\t}\n\t\treturn members.map((userId) => this._replaceSlackUserId(userId));\n\t}\n\n\tconvertSlackMessageToRocketChat(message: string): string {\n\t\tif (message) {\n\t\t\tmessage = message.replace(/<!everyone>/g, '@all');\n\t\t\tmessage = message.replace(/<!channel>/g, '@all');\n\t\t\tmessage = message.replace(/<!here>/g, '@here');\n\t\t\tmessage = message.replace(/&gt;/g, '>');\n\t\t\tmessage = message.replace(/&lt;/g, '<');\n\t\t\tmessage = message.replace(/&amp;/g, '&');\n\t\t\tmessage = message.replace(/:simple_smile:/g, ':smile:');\n\t\t\tmessage = message.replace(/:memo:/g, ':pencil:');\n\t\t\tmessage = message.replace(/:piggy:/g, ':pig:');\n\t\t\tmessage = message.replace(/:uk:/g, ':gb:');\n\t\t\tmessage = message.replace(/<(http[s]?:[^>|]*)>/g, '$1');\n\t\t\tmessage = message.replace(/<(http[s]?:[^|]*)\\|([^>]*)>/g, '[$2]($1)');\n\t\t\tmessage = message.replace(/<#([^|]*)\\|([^>]*)>/g, '#$2');\n\t\t\tmessage = message.replace(/<@([^|]*)\\|([^>]*)>/g, '@$1');\n\t\t\tmessage = message.replace(/<@([^|>]*)>/g, '@$1');\n\t\t} else {\n\t\t\tmessage = '';\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tconvertSlackFileToPendingFile(file: SlackFile): IImportPendingFile {\n\t\treturn {\n\t\t\tdownloadUrl: file.url_private_download,\n\t\t\tid: file.id,\n\t\t\tsize: file.size,\n\t\t\tname: file.name,\n\t\t\texternal: file.is_external,\n\t\t\tsource: 'slack',\n\t\t\toriginal: {\n\t\t\t\t...file,\n\t\t\t},\n\t\t};\n\t}\n\n\tconvertMessageAttachments(attachments: SlackAttachment[]): IImportMessage['attachments'] {\n\t\tif (!attachments?.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn attachments.map((attachment) => ({\n\t\t\t...attachment,\n\t\t\ttext: this.convertSlackMessageToRocketChat(attachment.text),\n\t\t\ttitle: this.convertSlackMessageToRocketChat(attachment.title),\n\t\t\tfallback: this.convertSlackMessageToRocketChat(attachment.fallback),\n\t\t}));\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer-slack/server/SlackImporter.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer-slack/server/SlackImporter.ts","inputSourceMap":{"version":3,"file":"app/importer-slack/server/SlackImporter.ts","sourceRoot":"","sources":["app/importer-slack/server/SlackImporter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImportUser, IImportMessage, IImportPendingFile } from '@rocket.chat/core-typings';\nimport { Messages, Settings, ImportData } from '@rocket.chat/models';\nimport type { IZipEntry } from 'adm-zip';\n\nimport { Importer, ProgressStep, ImporterWebsocket } from '../../importer/server';\nimport type { ImporterProgress } from '../../importer/server/classes/ImporterProgress';\nimport { notifyOnSettingChanged } from '../../lib/server/lib/notifyListener';\nimport { MentionsParser } from '../../mentions/lib/MentionsParser';\nimport { settings } from '../../settings/server';\nimport { getUserAvatarURL } from '../../utils/server/getUserAvatarURL';\n\ntype SlackChannel = {\n\tid: string;\n\tname: string;\n\ttopic?: {\n\t\tvalue: string;\n\t\tcreator: string;\n\t\tlast_set: number;\n\t};\n\tmembers: string[];\n\tpurpose?: {\n\t\tvalue: string;\n\t\tcreator: string;\n\t\tlast_set: number;\n\t};\n\tcreated: number;\n\tcreator: string | null;\n\tis_general: boolean;\n\tis_archived: boolean;\n};\n\ntype SlackUser = {\n\tid: string;\n\tname: string;\n\tprofile: {\n\t\treal_name: string;\n\t\temail: string;\n\t\timage_512: string;\n\t\timage_original: string;\n\t\tstatus_text: string;\n\t\ttitle: string;\n\t};\n\ttz_offset: number;\n\tdeleted: boolean;\n\tis_bot: boolean;\n};\n\ntype SlackFile = {\n\tid: string;\n\turl_private_download: string;\n\tsize: number;\n\tname: string;\n\tis_external: boolean;\n};\n\ntype SlackMessage = {\n\tid: string;\n\tts: string;\n\tuser: string;\n\treactions?: {\n\t\tname: string;\n\t\tusers: string[];\n\t}[];\n\ttype: 'message';\n\tsubtype?: string;\n\tfiles?: SlackFile[];\n\ttext: string;\n\tedited?: {\n\t\tts: string;\n\t\tuser: string;\n\t};\n\tthread_ts?: string;\n\treply_users?: string[];\n\treply_count?: number;\n\treplies?: {\n\t\tuser: string;\n\t}[];\n\tlatest_reply: string;\n\ticons?: {\n\t\temoji: string;\n\t};\n\tattachments?: SlackAttachment[];\n} & (\n\t| {\n\t\t\tsubtype: 'channel_purpose' | 'group_purpose';\n\t\t\tpurpose: string;\n\t  }\n\t| {\n\t\t\tsubtype: 'channel_join' | 'group_join' | 'channel_leave' | 'group_leave';\n\t  }\n\t| {\n\t\t\tsubtype: 'channel_topic' | 'group_topic';\n\t\t\ttopic: string;\n\t  }\n\t| {\n\t\t\tsubtype: 'channel_name' | 'group_name';\n\t\t\tname: string;\n\t  }\n\t| {\n\t\t\tsubtype: 'pinned_item';\n\t\t\tattachments: SlackAttachment[];\n\t  }\n\t| {\n\t\t\tsubtype: 'file_share';\n\t\t\tfile: SlackFile;\n\t  }\n\t| {\n\t\t\tsubtype: 'me_message';\n\t  }\n);\n\ntype SlackAttachment = {\n\ttext: string;\n\ttitle: string;\n\tfallback: string;\n\tauthor_subname: string;\n};\n\nexport class SlackImporter extends Importer {\n\tprivate _useUpsert = false;\n\n\tasync prepareChannelsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = (JSON.parse(entry.getData().toString()) as SlackChannel[]).filter(\n\t\t\t(channel): channel is SlackChannel & { creator: string } => 'creator' in channel && channel.creator != null,\n\t\t);\n\n\t\tthis.logger.debug(`loaded ${data.length} channels.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\t_id: channel.is_general ? 'general' : undefined,\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'c',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareGroupsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = (JSON.parse(entry.getData().toString()) as SlackChannel[]).filter(\n\t\t\t(channel): channel is SlackChannel & { creator: string } => 'creator' in channel && channel.creator != null,\n\t\t);\n\n\t\tthis.logger.debug(`loaded ${data.length} groups.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'p',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareMpimpsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = (JSON.parse(entry.getData().toString()) as SlackChannel[]).filter(\n\t\t\t(channel): channel is SlackChannel & { creator: string } => 'creator' in channel && channel.creator != null,\n\t\t);\n\n\t\tthis.logger.debug(`loaded ${data.length} mpims.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tconst maxUsers = settings.get<number>('DirectMesssage_maxUsers') || 1;\n\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: channel.members.length > maxUsers ? 'p' : 'd',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareDMsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = JSON.parse(entry.getData().toString()) as SlackChannel[];\n\n\t\tthis.logger.debug(`loaded ${data.length} dms.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'd',\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareUsersFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_USERS);\n\t\tconst data = JSON.parse(entry.getData().toString()) as SlackUser[];\n\n\t\tthis.logger.debug(`loaded ${data.length} users.`);\n\n\t\t// Insert the users record\n\t\tawait this.updateRecord({ 'count.users': data.length });\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tfor await (const user of data) {\n\t\t\tconst newUser: IImportUser = {\n\t\t\t\temails: [],\n\t\t\t\timportIds: [user.id],\n\t\t\t\tusername: user.name,\n\t\t\t\tname: user.profile.real_name,\n\t\t\t\tutcOffset: user.tz_offset && user.tz_offset / 3600,\n\t\t\t\tavatarUrl: user.profile.image_original || user.profile.image_512,\n\t\t\t\tdeleted: user.deleted,\n\t\t\t\tstatusText: user.profile.status_text || undefined,\n\t\t\t\tbio: user.profile.title || undefined,\n\t\t\t\ttype: 'user',\n\t\t\t};\n\n\t\t\tif (user.profile.email) {\n\t\t\t\tnewUser.emails.push(user.profile.email);\n\t\t\t}\n\n\t\t\tif (user.is_bot) {\n\t\t\t\tnewUser.roles = ['bot'];\n\t\t\t\tnewUser.type = 'bot';\n\t\t\t}\n\n\t\t\tawait this.converter.addUser(newUser);\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareUsingLocalFile(fullFilePath: string): Promise<ImporterProgress> {\n\t\tthis.logger.debug('start preparing import operation');\n\t\tawait this.converter.clearImportData();\n\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tlet userCount = 0;\n\t\tlet messagesCount = 0;\n\t\tlet channelCount = 0;\n\t\tlet count = 0;\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });\n\t\tlet oldRate = 0;\n\n\t\tconst increaseProgress = () => {\n\t\t\ttry {\n\t\t\t\tcount++;\n\t\t\t\tconst rate = Math.floor((count * 1000) / totalEntries) / 10;\n\t\t\t\tif (rate > oldRate) {\n\t\t\t\t\tImporterWebsocket.progressUpdated({ rate });\n\t\t\t\t\toldRate = rate;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\t// we need to iterate the zip file twice so that all channels are loaded before the messages\n\t\t\tfor await (const entry of zip.getEntries()) {\n\t\t\t\ttry {\n\t\t\t\t\tif (entry.entryName === 'channels.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareChannelsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'groups.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareGroupsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'mpims.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareMpimpsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'dms.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareDMsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'users.json') {\n\t\t\t\t\t\tuserCount = await this.prepareUsersFile(entry);\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.error(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (userCount) {\n\t\t\t\tconst { value } = await Settings.incrementValueById('Slack_Importer_Count', userCount, { returnDocument: 'after' });\n\t\t\t\tif (value) {\n\t\t\t\t\tvoid notifyOnSettingChanged(value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst missedTypes: Record<string, SlackMessage> = {};\n\t\t\t// If we have no slack message yet, then we can insert them instead of upserting\n\t\t\tthis._useUpsert = !(await Messages.findOne({ _id: /slack\\-.*/ }));\n\n\t\t\tfor await (const entry of zip.getEntries()) {\n\t\t\t\ttry {\n\t\t\t\t\tif (entry.entryName.includes('__MACOSX') || entry.entryName.includes('.DS_Store')) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tthis.logger.debug(`Ignoring the file: ${entry.entryName}`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (['channels.json', 'groups.json', 'mpims.json', 'dms.json', 'users.json'].includes(entry.entryName)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!entry.isDirectory && entry.entryName.includes('/')) {\n\t\t\t\t\t\tconst item = entry.entryName.split('/');\n\n\t\t\t\t\t\tconst channel = item[0];\n\t\t\t\t\t\tconst date = item[1].split('.')[0];\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Insert the messages records\n\t\t\t\t\t\t\tif (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n\t\t\t\t\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst tempMessages = JSON.parse(entry.getData().toString()) as SlackMessage[];\n\t\t\t\t\t\t\tmessagesCount += tempMessages.length;\n\t\t\t\t\t\t\tawait this.updateRecord({ messagesstatus: `${channel}/${date}` });\n\t\t\t\t\t\t\tawait this.addCountToTotal(tempMessages.length);\n\n\t\t\t\t\t\t\tconst slackChannelId = await ImportData.findChannelImportIdByNameOrImportId(channel);\n\n\t\t\t\t\t\t\tif (slackChannelId) {\n\t\t\t\t\t\t\t\tfor await (const message of tempMessages) {\n\t\t\t\t\t\t\t\t\tawait this.prepareMessageObject(message, missedTypes, slackChannelId);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.logger.warn(`${entry.entryName} is not a valid JSON file! Unable to import it.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.error(e);\n\t\t\t\t}\n\n\t\t\t\tincreaseProgress();\n\t\t\t}\n\n\t\t\tif (Object.keys(missedTypes).length > 0) {\n\t\t\t\tthis.logger.info('Missed import types:', missedTypes);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.logger.error(e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tImporterWebsocket.progressUpdated({ rate: 100 });\n\t\tawait this.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\n\t\treturn this.progress;\n\t}\n\n\tparseMentions(newMessage: IImportMessage): void {\n\t\tconst mentionsParser = new MentionsParser({\n\t\t\tpattern: () => '[0-9a-zA-Z]+',\n\t\t\tuseRealName: () => settings.get<boolean>('UI_Use_Real_Name'),\n\t\t\tme: () => 'me',\n\t\t});\n\n\t\tconst users = mentionsParser\n\t\t\t.getUserMentions(newMessage.msg)\n\t\t\t.filter((u: string) => u)\n\t\t\t.map((uid: string) => this._replaceSlackUserId(uid.slice(1, uid.length)));\n\t\tif (users.length) {\n\t\t\tif (!newMessage.mentions) {\n\t\t\t\tnewMessage.mentions = [];\n\t\t\t}\n\t\t\tnewMessage.mentions.push(...users);\n\t\t}\n\n\t\tconst channels = mentionsParser\n\t\t\t.getChannelMentions(newMessage.msg)\n\t\t\t.filter((c: string) => c)\n\t\t\t.map((name: string) => name.slice(1, name.length));\n\t\tif (channels.length) {\n\t\t\tif (!newMessage.channels) {\n\t\t\t\tnewMessage.channels = [];\n\t\t\t}\n\t\t\tnewMessage.channels.push(...channels);\n\t\t}\n\t}\n\n\tasync processMessageSubType(\n\t\tmessage: SlackMessage,\n\t\tslackChannelId: string,\n\t\tnewMessage: IImportMessage,\n\t\tmissedTypes: Record<string, SlackMessage>,\n\t): Promise<boolean> {\n\t\tconst ignoreTypes: Record<string, boolean> = { bot_add: true, file_comment: true, file_mention: true };\n\n\t\tswitch (message.subtype) {\n\t\t\tcase 'channel_join':\n\t\t\tcase 'group_join':\n\t\t\t\tnewMessage.t = 'uj';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_leave':\n\t\t\tcase 'group_leave':\n\t\t\t\tnewMessage.t = 'ul';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_purpose':\n\t\t\tcase 'group_purpose':\n\t\t\t\tnewMessage.t = 'room_changed_description';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\tnewMessage.msg = message.purpose;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_topic':\n\t\t\tcase 'group_topic':\n\t\t\t\tnewMessage.t = 'room_changed_topic';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\tnewMessage.msg = message.topic;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_name':\n\t\t\tcase 'group_name':\n\t\t\t\tnewMessage.t = 'r';\n\t\t\t\tnewMessage.msg = message.name;\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'pinned_item':\n\t\t\t\tif (message.attachments) {\n\t\t\t\t\tif (!newMessage.attachments) {\n\t\t\t\t\t\tnewMessage.attachments = [];\n\t\t\t\t\t}\n\t\t\t\t\tnewMessage.attachments.push({\n\t\t\t\t\t\ttext: this.convertSlackMessageToRocketChat(message.attachments[0].text),\n\t\t\t\t\t\tauthor_name: message.attachments[0].author_subname,\n\t\t\t\t\t\tauthor_icon: getUserAvatarURL(message.attachments[0].author_subname),\n\t\t\t\t\t});\n\t\t\t\t\tnewMessage.t = 'message_pinned';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'file_share':\n\t\t\t\tif (message.file?.url_private_download) {\n\t\t\t\t\tconst fileId = this.makeSlackMessageId(slackChannelId, message.ts, 'share');\n\t\t\t\t\tconst fileMessage: IImportMessage = {\n\t\t\t\t\t\t_id: fileId,\n\t\t\t\t\t\trid: newMessage.rid,\n\t\t\t\t\t\tts: newMessage.ts,\n\t\t\t\t\t\tmsg: message.file.url_private_download || '',\n\t\t\t\t\t\t_importFile: this.convertSlackFileToPendingFile(message.file),\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: newMessage.u._id,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (message.thread_ts && message.thread_ts !== message.ts) {\n\t\t\t\t\t\tfileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait this.converter.addMessage(fileMessage, this._useUpsert);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif (!missedTypes[message.subtype] && !ignoreTypes[message.subtype]) {\n\t\t\t\t\tmissedTypes[message.subtype] = message;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tmakeSlackMessageId(channelId: string, ts: string, fileIndex?: string): string {\n\t\tconst base = `slack-${channelId}-${ts.replace(/\\./g, '-')}`;\n\n\t\tif (fileIndex) {\n\t\t\treturn `${base}-file${fileIndex}`;\n\t\t}\n\n\t\treturn base;\n\t}\n\n\tasync prepareMessageObject(message: SlackMessage, missedTypes: Record<string, SlackMessage>, slackChannelId: string): Promise<void> {\n\t\tconst id = this.makeSlackMessageId(slackChannelId, message.ts);\n\t\tconst newMessage: IImportMessage = {\n\t\t\t_id: id,\n\t\t\trid: slackChannelId,\n\t\t\tts: new Date(parseInt(message.ts.split('.')[0]) * 1000),\n\t\t\tmsg: '',\n\t\t\tu: {\n\t\t\t\t_id: this._replaceSlackUserId(message.user),\n\t\t\t},\n\t\t};\n\n\t\t// Process the reactions\n\t\tif (message.reactions && message.reactions.length > 0) {\n\t\t\tnewMessage.reactions = message.reactions.reduce(\n\t\t\t\t(newReactions, reaction) => {\n\t\t\t\t\tconst name = `:${reaction.name}:`;\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...newReactions,\n\t\t\t\t\t\t...(reaction.users?.length ? { name: { name, users: this._replaceSlackUserIds(reaction.users) } } : {}),\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t{} as Required<IImportMessage>['reactions'],\n\t\t\t);\n\t\t}\n\n\t\tif (message.type === 'message') {\n\t\t\tif (message.files) {\n\t\t\t\tlet fileIndex = 0;\n\t\t\t\tconst promises = message.files.map(async (file) => {\n\t\t\t\t\tfileIndex++;\n\n\t\t\t\t\tconst fileId = this.makeSlackMessageId(slackChannelId, message.ts, String(fileIndex));\n\t\t\t\t\tconst fileMessage: IImportMessage = {\n\t\t\t\t\t\t_id: fileId,\n\t\t\t\t\t\trid: slackChannelId,\n\t\t\t\t\t\tts: newMessage.ts,\n\t\t\t\t\t\tmsg: file.url_private_download || '',\n\t\t\t\t\t\t_importFile: this.convertSlackFileToPendingFile(file),\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: this._replaceSlackUserId(message.user),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (message.thread_ts && message.thread_ts !== message.ts) {\n\t\t\t\t\t\tfileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait this.converter.addMessage(fileMessage, this._useUpsert);\n\t\t\t\t});\n\t\t\t\tawait Promise.all(promises);\n\t\t\t}\n\n\t\t\tconst regularTypes = ['me_message', 'thread_broadcast'];\n\n\t\t\tconst isBotMessage = message.subtype && ['bot_message', 'slackbot_response'].includes(message.subtype);\n\n\t\t\tif (message.subtype && !regularTypes.includes(message.subtype) && !isBotMessage) {\n\t\t\t\tif (await this.processMessageSubType(message, slackChannelId, newMessage, missedTypes)) {\n\t\t\t\t\tawait this.converter.addMessage(newMessage, this._useUpsert);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst text = this.convertSlackMessageToRocketChat(message.text);\n\n\t\t\t\tif (isBotMessage) {\n\t\t\t\t\tnewMessage.bot = true;\n\t\t\t\t}\n\n\t\t\t\tif (message.subtype === 'me_message') {\n\t\t\t\t\tnewMessage.msg = `_${text}_`;\n\t\t\t\t} else {\n\t\t\t\t\tnewMessage.msg = text;\n\t\t\t\t}\n\n\t\t\t\tif (message.thread_ts) {\n\t\t\t\t\tif (message.thread_ts === message.ts) {\n\t\t\t\t\t\tif (message.reply_users) {\n\t\t\t\t\t\t\tconst replies = new Set<string>();\n\t\t\t\t\t\t\tmessage.reply_users.forEach((item: string) => {\n\t\t\t\t\t\t\t\treplies.add(this._replaceSlackUserId(item));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (replies.size) {\n\t\t\t\t\t\t\t\tnewMessage.replies = Array.from(replies);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (message.replies) {\n\t\t\t\t\t\t\tconst replies = new Set<string>();\n\t\t\t\t\t\t\tmessage.replies.forEach((item: { user: string }) => {\n\t\t\t\t\t\t\t\treplies.add(this._replaceSlackUserId(item.user));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (replies.size) {\n\t\t\t\t\t\t\t\tnewMessage.replies = Array.from(replies);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logger.warn(`Failed to import the parent comment, message: ${newMessage._id}. Missing replies/reply_users field`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewMessage.tcount = message.reply_count;\n\t\t\t\t\t\tnewMessage.tlm = new Date(parseInt(message.latest_reply.split('.')[0]) * 1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (message.edited) {\n\t\t\t\t\tnewMessage.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n\t\t\t\t\tif (message.edited.user) {\n\t\t\t\t\t\tnewMessage.editedBy = this._replaceSlackUserId(message.edited.user);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (message.attachments) {\n\t\t\t\t\tnewMessage.attachments = this.convertMessageAttachments(message.attachments);\n\t\t\t\t}\n\n\t\t\t\tif (message.icons?.emoji) {\n\t\t\t\t\tnewMessage.emoji = message.icons.emoji;\n\t\t\t\t}\n\n\t\t\t\tthis.parseMentions(newMessage);\n\t\t\t\tawait this.converter.addMessage(newMessage, this._useUpsert);\n\t\t\t}\n\t\t}\n\t}\n\n\t_replaceSlackUserId(userId: string): string {\n\t\tif (userId === 'USLACKBOT') {\n\t\t\treturn 'rocket.cat';\n\t\t}\n\n\t\treturn userId;\n\t}\n\n\t_replaceSlackUserIds(members: string[]) {\n\t\tif (!members?.length) {\n\t\t\treturn [];\n\t\t}\n\t\treturn members.map((userId) => this._replaceSlackUserId(userId));\n\t}\n\n\tconvertSlackMessageToRocketChat(message: string): string {\n\t\tif (message) {\n\t\t\tmessage = message.replace(/<!everyone>/g, '@all');\n\t\t\tmessage = message.replace(/<!channel>/g, '@all');\n\t\t\tmessage = message.replace(/<!here>/g, '@here');\n\t\t\tmessage = message.replace(/&gt;/g, '>');\n\t\t\tmessage = message.replace(/&lt;/g, '<');\n\t\t\tmessage = message.replace(/&amp;/g, '&');\n\t\t\tmessage = message.replace(/:simple_smile:/g, ':smile:');\n\t\t\tmessage = message.replace(/:memo:/g, ':pencil:');\n\t\t\tmessage = message.replace(/:piggy:/g, ':pig:');\n\t\t\tmessage = message.replace(/:uk:/g, ':gb:');\n\t\t\tmessage = message.replace(/<(http[s]?:[^>|]*)>/g, '$1');\n\t\t\tmessage = message.replace(/<(http[s]?:[^|]*)\\|([^>]*)>/g, '[$2]($1)');\n\t\t\tmessage = message.replace(/<#([^|]*)\\|([^>]*)>/g, '#$2');\n\t\t\tmessage = message.replace(/<@([^|]*)\\|([^>]*)>/g, '@$1');\n\t\t\tmessage = message.replace(/<@([^|>]*)>/g, '@$1');\n\t\t} else {\n\t\t\tmessage = '';\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tconvertSlackFileToPendingFile(file: SlackFile): IImportPendingFile {\n\t\treturn {\n\t\t\tdownloadUrl: file.url_private_download,\n\t\t\tid: file.id,\n\t\t\tsize: file.size,\n\t\t\tname: file.name,\n\t\t\texternal: file.is_external,\n\t\t\tsource: 'slack',\n\t\t\toriginal: {\n\t\t\t\t...file,\n\t\t\t},\n\t\t};\n\t}\n\n\tconvertMessageAttachments(attachments: SlackAttachment[]): IImportMessage['attachments'] {\n\t\tif (!attachments?.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn attachments.map((attachment) => ({\n\t\t\t...attachment,\n\t\t\ttext: this.convertSlackMessageToRocketChat(attachment.text),\n\t\t\ttitle: this.convertSlackMessageToRocketChat(attachment.title),\n\t\t\tfallback: this.convertSlackMessageToRocketChat(attachment.fallback),\n\t\t}));\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      SlackImporter: () => SlackImporter\n    });\n    let Messages, Settings, ImportData;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Settings(v) {\n        Settings = v;\n      },\n      ImportData(v) {\n        ImportData = v;\n      }\n    }, 0);\n    let Importer, ProgressStep, ImporterWebsocket;\n    module.link(\"../../importer/server\", {\n      Importer(v) {\n        Importer = v;\n      },\n      ProgressStep(v) {\n        ProgressStep = v;\n      },\n      ImporterWebsocket(v) {\n        ImporterWebsocket = v;\n      }\n    }, 1);\n    let notifyOnSettingChanged;\n    module.link(\"../../lib/server/lib/notifyListener\", {\n      notifyOnSettingChanged(v) {\n        notifyOnSettingChanged = v;\n      }\n    }, 2);\n    let MentionsParser;\n    module.link(\"../../mentions/lib/MentionsParser\", {\n      MentionsParser(v) {\n        MentionsParser = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    let getUserAvatarURL;\n    module.link(\"../../utils/server/getUserAvatarURL\", {\n      getUserAvatarURL(v) {\n        getUserAvatarURL = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class SlackImporter extends Importer {\n      constructor() {\n        super(...arguments);\n        this._useUpsert = false;\n      }\n      async prepareChannelsFile(entry) {\n        await super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n        const data = JSON.parse(entry.getData().toString()).filter(channel => 'creator' in channel && channel.creator != null);\n        this.logger.debug(\"loaded \".concat(data.length, \" channels.\"));\n        await this.addCountToTotal(data.length);\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(data), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const channel = _step.value;\n            {\n              var _channel$topic, _channel$purpose;\n              await this.converter.addChannel({\n                _id: channel.is_general ? 'general' : undefined,\n                u: {\n                  _id: this._replaceSlackUserId(channel.creator)\n                },\n                importIds: [channel.id],\n                name: channel.name,\n                users: this._replaceSlackUserIds(channel.members),\n                t: 'c',\n                topic: ((_channel$topic = channel.topic) === null || _channel$topic === void 0 ? void 0 : _channel$topic.value) || undefined,\n                description: ((_channel$purpose = channel.purpose) === null || _channel$purpose === void 0 ? void 0 : _channel$purpose.value) || undefined,\n                ts: channel.created ? new Date(channel.created * 1000) : undefined,\n                archived: channel.is_archived\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        return data.length;\n      }\n      async prepareGroupsFile(entry) {\n        await super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n        const data = JSON.parse(entry.getData().toString()).filter(channel => 'creator' in channel && channel.creator != null);\n        this.logger.debug(\"loaded \".concat(data.length, \" groups.\"));\n        await this.addCountToTotal(data.length);\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(data), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            const channel = _step2.value;\n            {\n              var _channel$topic2, _channel$purpose2;\n              await this.converter.addChannel({\n                u: {\n                  _id: this._replaceSlackUserId(channel.creator)\n                },\n                importIds: [channel.id],\n                name: channel.name,\n                users: this._replaceSlackUserIds(channel.members),\n                t: 'p',\n                topic: ((_channel$topic2 = channel.topic) === null || _channel$topic2 === void 0 ? void 0 : _channel$topic2.value) || undefined,\n                description: ((_channel$purpose2 = channel.purpose) === null || _channel$purpose2 === void 0 ? void 0 : _channel$purpose2.value) || undefined,\n                ts: channel.created ? new Date(channel.created * 1000) : undefined,\n                archived: channel.is_archived\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        return data.length;\n      }\n      async prepareMpimpsFile(entry) {\n        await super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n        const data = JSON.parse(entry.getData().toString()).filter(channel => 'creator' in channel && channel.creator != null);\n        this.logger.debug(\"loaded \".concat(data.length, \" mpims.\"));\n        await this.addCountToTotal(data.length);\n        const maxUsers = settings.get('DirectMesssage_maxUsers') || 1;\n        var _iteratorAbruptCompletion3 = false;\n        var _didIteratorError3 = false;\n        var _iteratorError3;\n        try {\n          for (var _iterator3 = _asyncIterator(data), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n            const channel = _step3.value;\n            {\n              var _channel$topic3, _channel$purpose3;\n              await this.converter.addChannel({\n                u: {\n                  _id: this._replaceSlackUserId(channel.creator)\n                },\n                importIds: [channel.id],\n                name: channel.name,\n                users: this._replaceSlackUserIds(channel.members),\n                t: channel.members.length > maxUsers ? 'p' : 'd',\n                topic: ((_channel$topic3 = channel.topic) === null || _channel$topic3 === void 0 ? void 0 : _channel$topic3.value) || undefined,\n                description: ((_channel$purpose3 = channel.purpose) === null || _channel$purpose3 === void 0 ? void 0 : _channel$purpose3.value) || undefined,\n                ts: channel.created ? new Date(channel.created * 1000) : undefined,\n                archived: channel.is_archived\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n              await _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n        return data.length;\n      }\n      async prepareDMsFile(entry) {\n        await super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n        const data = JSON.parse(entry.getData().toString());\n        this.logger.debug(\"loaded \".concat(data.length, \" dms.\"));\n        await this.addCountToTotal(data.length);\n        var _iteratorAbruptCompletion4 = false;\n        var _didIteratorError4 = false;\n        var _iteratorError4;\n        try {\n          for (var _iterator4 = _asyncIterator(data), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n            const channel = _step4.value;\n            {\n              await this.converter.addChannel({\n                importIds: [channel.id],\n                users: this._replaceSlackUserIds(channel.members),\n                t: 'd',\n                ts: channel.created ? new Date(channel.created * 1000) : undefined\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n              await _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n        return data.length;\n      }\n      async prepareUsersFile(entry) {\n        await super.updateProgress(ProgressStep.PREPARING_USERS);\n        const data = JSON.parse(entry.getData().toString());\n        this.logger.debug(\"loaded \".concat(data.length, \" users.\"));\n        // Insert the users record\n        await this.updateRecord({\n          'count.users': data.length\n        });\n        await this.addCountToTotal(data.length);\n        var _iteratorAbruptCompletion5 = false;\n        var _didIteratorError5 = false;\n        var _iteratorError5;\n        try {\n          for (var _iterator5 = _asyncIterator(data), _step5; _iteratorAbruptCompletion5 = !(_step5 = await _iterator5.next()).done; _iteratorAbruptCompletion5 = false) {\n            const user = _step5.value;\n            {\n              const newUser = {\n                emails: [],\n                importIds: [user.id],\n                username: user.name,\n                name: user.profile.real_name,\n                utcOffset: user.tz_offset && user.tz_offset / 3600,\n                avatarUrl: user.profile.image_original || user.profile.image_512,\n                deleted: user.deleted,\n                statusText: user.profile.status_text || undefined,\n                bio: user.profile.title || undefined,\n                type: 'user'\n              };\n              if (user.profile.email) {\n                newUser.emails.push(user.profile.email);\n              }\n              if (user.is_bot) {\n                newUser.roles = ['bot'];\n                newUser.type = 'bot';\n              }\n              await this.converter.addUser(newUser);\n            }\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion5 && _iterator5.return != null) {\n              await _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n        return data.length;\n      }\n      async prepareUsingLocalFile(fullFilePath) {\n        this.logger.debug('start preparing import operation');\n        await this.converter.clearImportData();\n        const zip = new this.AdmZip(fullFilePath);\n        const totalEntries = zip.getEntryCount();\n        let userCount = 0;\n        let messagesCount = 0;\n        let channelCount = 0;\n        let count = 0;\n        ImporterWebsocket.progressUpdated({\n          rate: 0\n        });\n        let oldRate = 0;\n        const increaseProgress = () => {\n          try {\n            count++;\n            const rate = Math.floor(count * 1000 / totalEntries) / 10;\n            if (rate > oldRate) {\n              ImporterWebsocket.progressUpdated({\n                rate\n              });\n              oldRate = rate;\n            }\n          } catch (e) {\n            this.logger.error(e);\n          }\n        };\n        try {\n          // we need to iterate the zip file twice so that all channels are loaded before the messages\n          var _iteratorAbruptCompletion6 = false;\n          var _didIteratorError6 = false;\n          var _iteratorError6;\n          try {\n            for (var _iterator6 = _asyncIterator(zip.getEntries()), _step6; _iteratorAbruptCompletion6 = !(_step6 = await _iterator6.next()).done; _iteratorAbruptCompletion6 = false) {\n              const entry = _step6.value;\n              {\n                try {\n                  if (entry.entryName === 'channels.json') {\n                    channelCount += await this.prepareChannelsFile(entry);\n                    await this.updateRecord({\n                      'count.channels': channelCount\n                    });\n                    increaseProgress();\n                    continue;\n                  }\n                  if (entry.entryName === 'groups.json') {\n                    channelCount += await this.prepareGroupsFile(entry);\n                    await this.updateRecord({\n                      'count.channels': channelCount\n                    });\n                    increaseProgress();\n                    continue;\n                  }\n                  if (entry.entryName === 'mpims.json') {\n                    channelCount += await this.prepareMpimpsFile(entry);\n                    await this.updateRecord({\n                      'count.channels': channelCount\n                    });\n                    increaseProgress();\n                    continue;\n                  }\n                  if (entry.entryName === 'dms.json') {\n                    channelCount += await this.prepareDMsFile(entry);\n                    await this.updateRecord({\n                      'count.channels': channelCount\n                    });\n                    increaseProgress();\n                    continue;\n                  }\n                  if (entry.entryName === 'users.json') {\n                    userCount = await this.prepareUsersFile(entry);\n                    increaseProgress();\n                    continue;\n                  }\n                } catch (e) {\n                  this.logger.error(e);\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion6 && _iterator6.return != null) {\n                await _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n          if (userCount) {\n            const {\n              value\n            } = await Settings.incrementValueById('Slack_Importer_Count', userCount, {\n              returnDocument: 'after'\n            });\n            if (value) {\n              void notifyOnSettingChanged(value);\n            }\n          }\n          const missedTypes = {};\n          // If we have no slack message yet, then we can insert them instead of upserting\n          this._useUpsert = !(await Messages.findOne({\n            _id: /slack\\-.*/\n          }));\n          var _iteratorAbruptCompletion7 = false;\n          var _didIteratorError7 = false;\n          var _iteratorError7;\n          try {\n            for (var _iterator7 = _asyncIterator(zip.getEntries()), _step7; _iteratorAbruptCompletion7 = !(_step7 = await _iterator7.next()).done; _iteratorAbruptCompletion7 = false) {\n              const entry = _step7.value;\n              {\n                try {\n                  if (entry.entryName.includes('__MACOSX') || entry.entryName.includes('.DS_Store')) {\n                    count++;\n                    this.logger.debug(\"Ignoring the file: \".concat(entry.entryName));\n                    continue;\n                  }\n                  if (['channels.json', 'groups.json', 'mpims.json', 'dms.json', 'users.json'].includes(entry.entryName)) {\n                    continue;\n                  }\n                  if (!entry.isDirectory && entry.entryName.includes('/')) {\n                    const item = entry.entryName.split('/');\n                    const channel = item[0];\n                    const date = item[1].split('.')[0];\n                    try {\n                      // Insert the messages records\n                      if (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n                        await super.updateProgress(ProgressStep.PREPARING_MESSAGES);\n                      }\n                      const tempMessages = JSON.parse(entry.getData().toString());\n                      messagesCount += tempMessages.length;\n                      await this.updateRecord({\n                        messagesstatus: \"\".concat(channel, \"/\").concat(date)\n                      });\n                      await this.addCountToTotal(tempMessages.length);\n                      const slackChannelId = await ImportData.findChannelImportIdByNameOrImportId(channel);\n                      if (slackChannelId) {\n                        var _iteratorAbruptCompletion8 = false;\n                        var _didIteratorError8 = false;\n                        var _iteratorError8;\n                        try {\n                          for (var _iterator8 = _asyncIterator(tempMessages), _step8; _iteratorAbruptCompletion8 = !(_step8 = await _iterator8.next()).done; _iteratorAbruptCompletion8 = false) {\n                            const message = _step8.value;\n                            {\n                              await this.prepareMessageObject(message, missedTypes, slackChannelId);\n                            }\n                          }\n                        } catch (err) {\n                          _didIteratorError8 = true;\n                          _iteratorError8 = err;\n                        } finally {\n                          try {\n                            if (_iteratorAbruptCompletion8 && _iterator8.return != null) {\n                              await _iterator8.return();\n                            }\n                          } finally {\n                            if (_didIteratorError8) {\n                              throw _iteratorError8;\n                            }\n                          }\n                        }\n                      }\n                    } catch (error) {\n                      this.logger.warn(\"\".concat(entry.entryName, \" is not a valid JSON file! Unable to import it.\"));\n                    }\n                  }\n                } catch (e) {\n                  this.logger.error(e);\n                }\n                increaseProgress();\n              }\n            }\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion7 && _iterator7.return != null) {\n                await _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n          if (Object.keys(missedTypes).length > 0) {\n            this.logger.info('Missed import types:', missedTypes);\n          }\n        } catch (e) {\n          this.logger.error(e);\n          throw e;\n        }\n        ImporterWebsocket.progressUpdated({\n          rate: 100\n        });\n        await this.updateRecord({\n          'count.messages': messagesCount,\n          'messagesstatus': null\n        });\n        return this.progress;\n      }\n      parseMentions(newMessage) {\n        const mentionsParser = new MentionsParser({\n          pattern: () => '[0-9a-zA-Z]+',\n          useRealName: () => settings.get('UI_Use_Real_Name'),\n          me: () => 'me'\n        });\n        const users = mentionsParser.getUserMentions(newMessage.msg).filter(u => u).map(uid => this._replaceSlackUserId(uid.slice(1, uid.length)));\n        if (users.length) {\n          if (!newMessage.mentions) {\n            newMessage.mentions = [];\n          }\n          newMessage.mentions.push(...users);\n        }\n        const channels = mentionsParser.getChannelMentions(newMessage.msg).filter(c => c).map(name => name.slice(1, name.length));\n        if (channels.length) {\n          if (!newMessage.channels) {\n            newMessage.channels = [];\n          }\n          newMessage.channels.push(...channels);\n        }\n      }\n      async processMessageSubType(message, slackChannelId, newMessage, missedTypes) {\n        var _message$file;\n        const ignoreTypes = {\n          bot_add: true,\n          file_comment: true,\n          file_mention: true\n        };\n        switch (message.subtype) {\n          case 'channel_join':\n          case 'group_join':\n            newMessage.t = 'uj';\n            newMessage.groupable = false;\n            return true;\n          case 'channel_leave':\n          case 'group_leave':\n            newMessage.t = 'ul';\n            newMessage.groupable = false;\n            return true;\n          case 'channel_purpose':\n          case 'group_purpose':\n            newMessage.t = 'room_changed_description';\n            newMessage.groupable = false;\n            newMessage.msg = message.purpose;\n            return true;\n          case 'channel_topic':\n          case 'group_topic':\n            newMessage.t = 'room_changed_topic';\n            newMessage.groupable = false;\n            newMessage.msg = message.topic;\n            return true;\n          case 'channel_name':\n          case 'group_name':\n            newMessage.t = 'r';\n            newMessage.msg = message.name;\n            newMessage.groupable = false;\n            return true;\n          case 'pinned_item':\n            if (message.attachments) {\n              if (!newMessage.attachments) {\n                newMessage.attachments = [];\n              }\n              newMessage.attachments.push({\n                text: this.convertSlackMessageToRocketChat(message.attachments[0].text),\n                author_name: message.attachments[0].author_subname,\n                author_icon: getUserAvatarURL(message.attachments[0].author_subname)\n              });\n              newMessage.t = 'message_pinned';\n            }\n            break;\n          case 'file_share':\n            if ((_message$file = message.file) !== null && _message$file !== void 0 && _message$file.url_private_download) {\n              const fileId = this.makeSlackMessageId(slackChannelId, message.ts, 'share');\n              const fileMessage = {\n                _id: fileId,\n                rid: newMessage.rid,\n                ts: newMessage.ts,\n                msg: message.file.url_private_download || '',\n                _importFile: this.convertSlackFileToPendingFile(message.file),\n                u: {\n                  _id: newMessage.u._id\n                }\n              };\n              if (message.thread_ts && message.thread_ts !== message.ts) {\n                fileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n              }\n              await this.converter.addMessage(fileMessage, this._useUpsert);\n            }\n            break;\n          default:\n            if (!missedTypes[message.subtype] && !ignoreTypes[message.subtype]) {\n              missedTypes[message.subtype] = message;\n            }\n            break;\n        }\n        return false;\n      }\n      makeSlackMessageId(channelId, ts, fileIndex) {\n        const base = \"slack-\".concat(channelId, \"-\").concat(ts.replace(/\\./g, '-'));\n        if (fileIndex) {\n          return \"\".concat(base, \"-file\").concat(fileIndex);\n        }\n        return base;\n      }\n      async prepareMessageObject(message, missedTypes, slackChannelId) {\n        const id = this.makeSlackMessageId(slackChannelId, message.ts);\n        const newMessage = {\n          _id: id,\n          rid: slackChannelId,\n          ts: new Date(parseInt(message.ts.split('.')[0]) * 1000),\n          msg: '',\n          u: {\n            _id: this._replaceSlackUserId(message.user)\n          }\n        };\n        // Process the reactions\n        if (message.reactions && message.reactions.length > 0) {\n          newMessage.reactions = message.reactions.reduce((newReactions, reaction) => {\n            var _reaction$users;\n            const name = \":\".concat(reaction.name, \":\");\n            return _objectSpread(_objectSpread({}, newReactions), (_reaction$users = reaction.users) !== null && _reaction$users !== void 0 && _reaction$users.length ? {\n              name: {\n                name,\n                users: this._replaceSlackUserIds(reaction.users)\n              }\n            } : {});\n          }, {});\n        }\n        if (message.type === 'message') {\n          if (message.files) {\n            let fileIndex = 0;\n            const promises = message.files.map(async file => {\n              fileIndex++;\n              const fileId = this.makeSlackMessageId(slackChannelId, message.ts, String(fileIndex));\n              const fileMessage = {\n                _id: fileId,\n                rid: slackChannelId,\n                ts: newMessage.ts,\n                msg: file.url_private_download || '',\n                _importFile: this.convertSlackFileToPendingFile(file),\n                u: {\n                  _id: this._replaceSlackUserId(message.user)\n                }\n              };\n              if (message.thread_ts && message.thread_ts !== message.ts) {\n                fileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n              }\n              await this.converter.addMessage(fileMessage, this._useUpsert);\n            });\n            await Promise.all(promises);\n          }\n          const regularTypes = ['me_message', 'thread_broadcast'];\n          const isBotMessage = message.subtype && ['bot_message', 'slackbot_response'].includes(message.subtype);\n          if (message.subtype && !regularTypes.includes(message.subtype) && !isBotMessage) {\n            if (await this.processMessageSubType(message, slackChannelId, newMessage, missedTypes)) {\n              await this.converter.addMessage(newMessage, this._useUpsert);\n            }\n          } else {\n            var _message$icons;\n            const text = this.convertSlackMessageToRocketChat(message.text);\n            if (isBotMessage) {\n              newMessage.bot = true;\n            }\n            if (message.subtype === 'me_message') {\n              newMessage.msg = \"_\".concat(text, \"_\");\n            } else {\n              newMessage.msg = text;\n            }\n            if (message.thread_ts) {\n              if (message.thread_ts === message.ts) {\n                if (message.reply_users) {\n                  const replies = new Set();\n                  message.reply_users.forEach(item => {\n                    replies.add(this._replaceSlackUserId(item));\n                  });\n                  if (replies.size) {\n                    newMessage.replies = Array.from(replies);\n                  }\n                } else if (message.replies) {\n                  const replies = new Set();\n                  message.replies.forEach(item => {\n                    replies.add(this._replaceSlackUserId(item.user));\n                  });\n                  if (replies.size) {\n                    newMessage.replies = Array.from(replies);\n                  }\n                } else {\n                  this.logger.warn(\"Failed to import the parent comment, message: \".concat(newMessage._id, \". Missing replies/reply_users field\"));\n                }\n                newMessage.tcount = message.reply_count;\n                newMessage.tlm = new Date(parseInt(message.latest_reply.split('.')[0]) * 1000);\n              } else {\n                newMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n              }\n            }\n            if (message.edited) {\n              newMessage.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n              if (message.edited.user) {\n                newMessage.editedBy = this._replaceSlackUserId(message.edited.user);\n              }\n            }\n            if (message.attachments) {\n              newMessage.attachments = this.convertMessageAttachments(message.attachments);\n            }\n            if ((_message$icons = message.icons) !== null && _message$icons !== void 0 && _message$icons.emoji) {\n              newMessage.emoji = message.icons.emoji;\n            }\n            this.parseMentions(newMessage);\n            await this.converter.addMessage(newMessage, this._useUpsert);\n          }\n        }\n      }\n      _replaceSlackUserId(userId) {\n        if (userId === 'USLACKBOT') {\n          return 'rocket.cat';\n        }\n        return userId;\n      }\n      _replaceSlackUserIds(members) {\n        if (!(members !== null && members !== void 0 && members.length)) {\n          return [];\n        }\n        return members.map(userId => this._replaceSlackUserId(userId));\n      }\n      convertSlackMessageToRocketChat(message) {\n        if (message) {\n          message = message.replace(/<!everyone>/g, '@all');\n          message = message.replace(/<!channel>/g, '@all');\n          message = message.replace(/<!here>/g, '@here');\n          message = message.replace(/&gt;/g, '>');\n          message = message.replace(/&lt;/g, '<');\n          message = message.replace(/&amp;/g, '&');\n          message = message.replace(/:simple_smile:/g, ':smile:');\n          message = message.replace(/:memo:/g, ':pencil:');\n          message = message.replace(/:piggy:/g, ':pig:');\n          message = message.replace(/:uk:/g, ':gb:');\n          message = message.replace(/<(http[s]?:[^>|]*)>/g, '$1');\n          message = message.replace(/<(http[s]?:[^|]*)\\|([^>]*)>/g, '[$2]($1)');\n          message = message.replace(/<#([^|]*)\\|([^>]*)>/g, '#$2');\n          message = message.replace(/<@([^|]*)\\|([^>]*)>/g, '@$1');\n          message = message.replace(/<@([^|>]*)>/g, '@$1');\n        } else {\n          message = '';\n        }\n        return message;\n      }\n      convertSlackFileToPendingFile(file) {\n        return {\n          downloadUrl: file.url_private_download,\n          id: file.id,\n          size: file.size,\n          name: file.name,\n          external: file.is_external,\n          source: 'slack',\n          original: _objectSpread({}, file)\n        };\n      }\n      convertMessageAttachments(attachments) {\n        if (!(attachments !== null && attachments !== void 0 && attachments.length)) {\n          return undefined;\n        }\n        return attachments.map(attachment => _objectSpread(_objectSpread({}, attachment), {}, {\n          text: this.convertSlackMessageToRocketChat(attachment.text),\n          title: this.convertSlackMessageToRocketChat(attachment.title),\n          fallback: this.convertSlackMessageToRocketChat(attachment.fallback)\n        }));\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","SlackImporter","Messages","Settings","ImportData","Importer","ProgressStep","ImporterWebsocket","notifyOnSettingChanged","MentionsParser","settings","getUserAvatarURL","__reifyWaitForDeps__","constructor","arguments","_useUpsert","prepareChannelsFile","entry","updateProgress","PREPARING_CHANNELS","data","JSON","parse","getData","toString","filter","channel","creator","logger","debug","concat","length","addCountToTotal","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","_channel$topic","_channel$purpose","converter","addChannel","_id","is_general","undefined","u","_replaceSlackUserId","importIds","id","name","users","_replaceSlackUserIds","members","t","topic","description","purpose","ts","created","Date","archived","is_archived","err","return","prepareGroupsFile","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_channel$topic2","_channel$purpose2","prepareMpimpsFile","maxUsers","get","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_channel$topic3","_channel$purpose3","prepareDMsFile","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","prepareUsersFile","PREPARING_USERS","updateRecord","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","user","newUser","emails","username","profile","real_name","utcOffset","tz_offset","avatarUrl","image_original","image_512","deleted","statusText","status_text","bio","title","type","email","push","is_bot","roles","addUser","prepareUsingLocalFile","fullFilePath","clearImportData","zip","AdmZip","totalEntries","getEntryCount","userCount","messagesCount","channelCount","count","progressUpdated","rate","oldRate","increaseProgress","Math","floor","e","error","_iteratorAbruptCompletion6","_didIteratorError6","_iteratorError6","_iterator6","getEntries","_step6","entryName","incrementValueById","returnDocument","missedTypes","findOne","_iteratorAbruptCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","includes","isDirectory","item","split","date","progress","step","PREPARING_MESSAGES","tempMessages","messagesstatus","slackChannelId","findChannelImportIdByNameOrImportId","_iteratorAbruptCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","message","prepareMessageObject","warn","Object","keys","info","parseMentions","newMessage","mentionsParser","pattern","useRealName","me","getUserMentions","msg","map","uid","slice","mentions","channels","getChannelMentions","c","processMessageSubType","_message$file","ignoreTypes","bot_add","file_comment","file_mention","subtype","groupable","attachments","text","convertSlackMessageToRocketChat","author_name","author_subname","author_icon","file","url_private_download","fileId","makeSlackMessageId","fileMessage","rid","_importFile","convertSlackFileToPendingFile","thread_ts","tmid","addMessage","channelId","fileIndex","base","replace","parseInt","reactions","reduce","newReactions","reaction","_reaction$users","files","promises","String","Promise","all","regularTypes","isBotMessage","_message$icons","bot","reply_users","replies","Set","forEach","add","size","Array","from","tcount","reply_count","tlm","latest_reply","edited","editedAt","editedBy","convertMessageAttachments","icons","emoji","userId","downloadUrl","external","is_external","source","original","attachment","fallback","__reify_async_result__","_reifyError","self","async"],"sources":["app/importer-slack/server/SlackImporter.ts"],"sourcesContent":["import type { IImportUser, IImportMessage, IImportPendingFile } from '@rocket.chat/core-typings';\nimport { Messages, Settings, ImportData } from '@rocket.chat/models';\nimport type { IZipEntry } from 'adm-zip';\n\nimport { Importer, ProgressStep, ImporterWebsocket } from '../../importer/server';\nimport type { ImporterProgress } from '../../importer/server/classes/ImporterProgress';\nimport { notifyOnSettingChanged } from '../../lib/server/lib/notifyListener';\nimport { MentionsParser } from '../../mentions/lib/MentionsParser';\nimport { settings } from '../../settings/server';\nimport { getUserAvatarURL } from '../../utils/server/getUserAvatarURL';\n\ntype SlackChannel = {\n\tid: string;\n\tname: string;\n\ttopic?: {\n\t\tvalue: string;\n\t\tcreator: string;\n\t\tlast_set: number;\n\t};\n\tmembers: string[];\n\tpurpose?: {\n\t\tvalue: string;\n\t\tcreator: string;\n\t\tlast_set: number;\n\t};\n\tcreated: number;\n\tcreator: string | null;\n\tis_general: boolean;\n\tis_archived: boolean;\n};\n\ntype SlackUser = {\n\tid: string;\n\tname: string;\n\tprofile: {\n\t\treal_name: string;\n\t\temail: string;\n\t\timage_512: string;\n\t\timage_original: string;\n\t\tstatus_text: string;\n\t\ttitle: string;\n\t};\n\ttz_offset: number;\n\tdeleted: boolean;\n\tis_bot: boolean;\n};\n\ntype SlackFile = {\n\tid: string;\n\turl_private_download: string;\n\tsize: number;\n\tname: string;\n\tis_external: boolean;\n};\n\ntype SlackMessage = {\n\tid: string;\n\tts: string;\n\tuser: string;\n\treactions?: {\n\t\tname: string;\n\t\tusers: string[];\n\t}[];\n\ttype: 'message';\n\tsubtype?: string;\n\tfiles?: SlackFile[];\n\ttext: string;\n\tedited?: {\n\t\tts: string;\n\t\tuser: string;\n\t};\n\tthread_ts?: string;\n\treply_users?: string[];\n\treply_count?: number;\n\treplies?: {\n\t\tuser: string;\n\t}[];\n\tlatest_reply: string;\n\ticons?: {\n\t\temoji: string;\n\t};\n\tattachments?: SlackAttachment[];\n} & (\n\t| {\n\t\t\tsubtype: 'channel_purpose' | 'group_purpose';\n\t\t\tpurpose: string;\n\t  }\n\t| {\n\t\t\tsubtype: 'channel_join' | 'group_join' | 'channel_leave' | 'group_leave';\n\t  }\n\t| {\n\t\t\tsubtype: 'channel_topic' | 'group_topic';\n\t\t\ttopic: string;\n\t  }\n\t| {\n\t\t\tsubtype: 'channel_name' | 'group_name';\n\t\t\tname: string;\n\t  }\n\t| {\n\t\t\tsubtype: 'pinned_item';\n\t\t\tattachments: SlackAttachment[];\n\t  }\n\t| {\n\t\t\tsubtype: 'file_share';\n\t\t\tfile: SlackFile;\n\t  }\n\t| {\n\t\t\tsubtype: 'me_message';\n\t  }\n);\n\ntype SlackAttachment = {\n\ttext: string;\n\ttitle: string;\n\tfallback: string;\n\tauthor_subname: string;\n};\n\nexport class SlackImporter extends Importer {\n\tprivate _useUpsert = false;\n\n\tasync prepareChannelsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = (JSON.parse(entry.getData().toString()) as SlackChannel[]).filter(\n\t\t\t(channel): channel is SlackChannel & { creator: string } => 'creator' in channel && channel.creator != null,\n\t\t);\n\n\t\tthis.logger.debug(`loaded ${data.length} channels.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\t_id: channel.is_general ? 'general' : undefined,\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'c',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareGroupsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = (JSON.parse(entry.getData().toString()) as SlackChannel[]).filter(\n\t\t\t(channel): channel is SlackChannel & { creator: string } => 'creator' in channel && channel.creator != null,\n\t\t);\n\n\t\tthis.logger.debug(`loaded ${data.length} groups.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'p',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareMpimpsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = (JSON.parse(entry.getData().toString()) as SlackChannel[]).filter(\n\t\t\t(channel): channel is SlackChannel & { creator: string } => 'creator' in channel && channel.creator != null,\n\t\t);\n\n\t\tthis.logger.debug(`loaded ${data.length} mpims.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tconst maxUsers = settings.get<number>('DirectMesssage_maxUsers') || 1;\n\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\tu: {\n\t\t\t\t\t_id: this._replaceSlackUserId(channel.creator),\n\t\t\t\t},\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tname: channel.name,\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: channel.members.length > maxUsers ? 'p' : 'd',\n\t\t\t\ttopic: channel.topic?.value || undefined,\n\t\t\t\tdescription: channel.purpose?.value || undefined,\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t\tarchived: channel.is_archived,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareDMsFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\tconst data = JSON.parse(entry.getData().toString()) as SlackChannel[];\n\n\t\tthis.logger.debug(`loaded ${data.length} dms.`);\n\n\t\tawait this.addCountToTotal(data.length);\n\t\tfor await (const channel of data) {\n\t\t\tawait this.converter.addChannel({\n\t\t\t\timportIds: [channel.id],\n\t\t\t\tusers: this._replaceSlackUserIds(channel.members),\n\t\t\t\tt: 'd',\n\t\t\t\tts: channel.created ? new Date(channel.created * 1000) : undefined,\n\t\t\t});\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareUsersFile(entry: IZipEntry): Promise<number> {\n\t\tawait super.updateProgress(ProgressStep.PREPARING_USERS);\n\t\tconst data = JSON.parse(entry.getData().toString()) as SlackUser[];\n\n\t\tthis.logger.debug(`loaded ${data.length} users.`);\n\n\t\t// Insert the users record\n\t\tawait this.updateRecord({ 'count.users': data.length });\n\t\tawait this.addCountToTotal(data.length);\n\n\t\tfor await (const user of data) {\n\t\t\tconst newUser: IImportUser = {\n\t\t\t\temails: [],\n\t\t\t\timportIds: [user.id],\n\t\t\t\tusername: user.name,\n\t\t\t\tname: user.profile.real_name,\n\t\t\t\tutcOffset: user.tz_offset && user.tz_offset / 3600,\n\t\t\t\tavatarUrl: user.profile.image_original || user.profile.image_512,\n\t\t\t\tdeleted: user.deleted,\n\t\t\t\tstatusText: user.profile.status_text || undefined,\n\t\t\t\tbio: user.profile.title || undefined,\n\t\t\t\ttype: 'user',\n\t\t\t};\n\n\t\t\tif (user.profile.email) {\n\t\t\t\tnewUser.emails.push(user.profile.email);\n\t\t\t}\n\n\t\t\tif (user.is_bot) {\n\t\t\t\tnewUser.roles = ['bot'];\n\t\t\t\tnewUser.type = 'bot';\n\t\t\t}\n\n\t\t\tawait this.converter.addUser(newUser);\n\t\t}\n\n\t\treturn data.length;\n\t}\n\n\tasync prepareUsingLocalFile(fullFilePath: string): Promise<ImporterProgress> {\n\t\tthis.logger.debug('start preparing import operation');\n\t\tawait this.converter.clearImportData();\n\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tlet userCount = 0;\n\t\tlet messagesCount = 0;\n\t\tlet channelCount = 0;\n\t\tlet count = 0;\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });\n\t\tlet oldRate = 0;\n\n\t\tconst increaseProgress = () => {\n\t\t\ttry {\n\t\t\t\tcount++;\n\t\t\t\tconst rate = Math.floor((count * 1000) / totalEntries) / 10;\n\t\t\t\tif (rate > oldRate) {\n\t\t\t\t\tImporterWebsocket.progressUpdated({ rate });\n\t\t\t\t\toldRate = rate;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\t// we need to iterate the zip file twice so that all channels are loaded before the messages\n\t\t\tfor await (const entry of zip.getEntries()) {\n\t\t\t\ttry {\n\t\t\t\t\tif (entry.entryName === 'channels.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareChannelsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'groups.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareGroupsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'mpims.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareMpimpsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'dms.json') {\n\t\t\t\t\t\tchannelCount += await this.prepareDMsFile(entry);\n\t\t\t\t\t\tawait this.updateRecord({ 'count.channels': channelCount });\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.entryName === 'users.json') {\n\t\t\t\t\t\tuserCount = await this.prepareUsersFile(entry);\n\t\t\t\t\t\tincreaseProgress();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.error(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (userCount) {\n\t\t\t\tconst { value } = await Settings.incrementValueById('Slack_Importer_Count', userCount, { returnDocument: 'after' });\n\t\t\t\tif (value) {\n\t\t\t\t\tvoid notifyOnSettingChanged(value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst missedTypes: Record<string, SlackMessage> = {};\n\t\t\t// If we have no slack message yet, then we can insert them instead of upserting\n\t\t\tthis._useUpsert = !(await Messages.findOne({ _id: /slack\\-.*/ }));\n\n\t\t\tfor await (const entry of zip.getEntries()) {\n\t\t\t\ttry {\n\t\t\t\t\tif (entry.entryName.includes('__MACOSX') || entry.entryName.includes('.DS_Store')) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tthis.logger.debug(`Ignoring the file: ${entry.entryName}`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (['channels.json', 'groups.json', 'mpims.json', 'dms.json', 'users.json'].includes(entry.entryName)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!entry.isDirectory && entry.entryName.includes('/')) {\n\t\t\t\t\t\tconst item = entry.entryName.split('/');\n\n\t\t\t\t\t\tconst channel = item[0];\n\t\t\t\t\t\tconst date = item[1].split('.')[0];\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Insert the messages records\n\t\t\t\t\t\t\tif (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n\t\t\t\t\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst tempMessages = JSON.parse(entry.getData().toString()) as SlackMessage[];\n\t\t\t\t\t\t\tmessagesCount += tempMessages.length;\n\t\t\t\t\t\t\tawait this.updateRecord({ messagesstatus: `${channel}/${date}` });\n\t\t\t\t\t\t\tawait this.addCountToTotal(tempMessages.length);\n\n\t\t\t\t\t\t\tconst slackChannelId = await ImportData.findChannelImportIdByNameOrImportId(channel);\n\n\t\t\t\t\t\t\tif (slackChannelId) {\n\t\t\t\t\t\t\t\tfor await (const message of tempMessages) {\n\t\t\t\t\t\t\t\t\tawait this.prepareMessageObject(message, missedTypes, slackChannelId);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.logger.warn(`${entry.entryName} is not a valid JSON file! Unable to import it.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.error(e);\n\t\t\t\t}\n\n\t\t\t\tincreaseProgress();\n\t\t\t}\n\n\t\t\tif (Object.keys(missedTypes).length > 0) {\n\t\t\t\tthis.logger.info('Missed import types:', missedTypes);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.logger.error(e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tImporterWebsocket.progressUpdated({ rate: 100 });\n\t\tawait this.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\n\t\treturn this.progress;\n\t}\n\n\tparseMentions(newMessage: IImportMessage): void {\n\t\tconst mentionsParser = new MentionsParser({\n\t\t\tpattern: () => '[0-9a-zA-Z]+',\n\t\t\tuseRealName: () => settings.get<boolean>('UI_Use_Real_Name'),\n\t\t\tme: () => 'me',\n\t\t});\n\n\t\tconst users = mentionsParser\n\t\t\t.getUserMentions(newMessage.msg)\n\t\t\t.filter((u: string) => u)\n\t\t\t.map((uid: string) => this._replaceSlackUserId(uid.slice(1, uid.length)));\n\t\tif (users.length) {\n\t\t\tif (!newMessage.mentions) {\n\t\t\t\tnewMessage.mentions = [];\n\t\t\t}\n\t\t\tnewMessage.mentions.push(...users);\n\t\t}\n\n\t\tconst channels = mentionsParser\n\t\t\t.getChannelMentions(newMessage.msg)\n\t\t\t.filter((c: string) => c)\n\t\t\t.map((name: string) => name.slice(1, name.length));\n\t\tif (channels.length) {\n\t\t\tif (!newMessage.channels) {\n\t\t\t\tnewMessage.channels = [];\n\t\t\t}\n\t\t\tnewMessage.channels.push(...channels);\n\t\t}\n\t}\n\n\tasync processMessageSubType(\n\t\tmessage: SlackMessage,\n\t\tslackChannelId: string,\n\t\tnewMessage: IImportMessage,\n\t\tmissedTypes: Record<string, SlackMessage>,\n\t): Promise<boolean> {\n\t\tconst ignoreTypes: Record<string, boolean> = { bot_add: true, file_comment: true, file_mention: true };\n\n\t\tswitch (message.subtype) {\n\t\t\tcase 'channel_join':\n\t\t\tcase 'group_join':\n\t\t\t\tnewMessage.t = 'uj';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_leave':\n\t\t\tcase 'group_leave':\n\t\t\t\tnewMessage.t = 'ul';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_purpose':\n\t\t\tcase 'group_purpose':\n\t\t\t\tnewMessage.t = 'room_changed_description';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\tnewMessage.msg = message.purpose;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_topic':\n\t\t\tcase 'group_topic':\n\t\t\t\tnewMessage.t = 'room_changed_topic';\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\tnewMessage.msg = message.topic;\n\t\t\t\treturn true;\n\t\t\tcase 'channel_name':\n\t\t\tcase 'group_name':\n\t\t\t\tnewMessage.t = 'r';\n\t\t\t\tnewMessage.msg = message.name;\n\t\t\t\tnewMessage.groupable = false;\n\t\t\t\treturn true;\n\t\t\tcase 'pinned_item':\n\t\t\t\tif (message.attachments) {\n\t\t\t\t\tif (!newMessage.attachments) {\n\t\t\t\t\t\tnewMessage.attachments = [];\n\t\t\t\t\t}\n\t\t\t\t\tnewMessage.attachments.push({\n\t\t\t\t\t\ttext: this.convertSlackMessageToRocketChat(message.attachments[0].text),\n\t\t\t\t\t\tauthor_name: message.attachments[0].author_subname,\n\t\t\t\t\t\tauthor_icon: getUserAvatarURL(message.attachments[0].author_subname),\n\t\t\t\t\t});\n\t\t\t\t\tnewMessage.t = 'message_pinned';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'file_share':\n\t\t\t\tif (message.file?.url_private_download) {\n\t\t\t\t\tconst fileId = this.makeSlackMessageId(slackChannelId, message.ts, 'share');\n\t\t\t\t\tconst fileMessage: IImportMessage = {\n\t\t\t\t\t\t_id: fileId,\n\t\t\t\t\t\trid: newMessage.rid,\n\t\t\t\t\t\tts: newMessage.ts,\n\t\t\t\t\t\tmsg: message.file.url_private_download || '',\n\t\t\t\t\t\t_importFile: this.convertSlackFileToPendingFile(message.file),\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: newMessage.u._id,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (message.thread_ts && message.thread_ts !== message.ts) {\n\t\t\t\t\t\tfileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait this.converter.addMessage(fileMessage, this._useUpsert);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif (!missedTypes[message.subtype] && !ignoreTypes[message.subtype]) {\n\t\t\t\t\tmissedTypes[message.subtype] = message;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tmakeSlackMessageId(channelId: string, ts: string, fileIndex?: string): string {\n\t\tconst base = `slack-${channelId}-${ts.replace(/\\./g, '-')}`;\n\n\t\tif (fileIndex) {\n\t\t\treturn `${base}-file${fileIndex}`;\n\t\t}\n\n\t\treturn base;\n\t}\n\n\tasync prepareMessageObject(message: SlackMessage, missedTypes: Record<string, SlackMessage>, slackChannelId: string): Promise<void> {\n\t\tconst id = this.makeSlackMessageId(slackChannelId, message.ts);\n\t\tconst newMessage: IImportMessage = {\n\t\t\t_id: id,\n\t\t\trid: slackChannelId,\n\t\t\tts: new Date(parseInt(message.ts.split('.')[0]) * 1000),\n\t\t\tmsg: '',\n\t\t\tu: {\n\t\t\t\t_id: this._replaceSlackUserId(message.user),\n\t\t\t},\n\t\t};\n\n\t\t// Process the reactions\n\t\tif (message.reactions && message.reactions.length > 0) {\n\t\t\tnewMessage.reactions = message.reactions.reduce(\n\t\t\t\t(newReactions, reaction) => {\n\t\t\t\t\tconst name = `:${reaction.name}:`;\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...newReactions,\n\t\t\t\t\t\t...(reaction.users?.length ? { name: { name, users: this._replaceSlackUserIds(reaction.users) } } : {}),\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t{} as Required<IImportMessage>['reactions'],\n\t\t\t);\n\t\t}\n\n\t\tif (message.type === 'message') {\n\t\t\tif (message.files) {\n\t\t\t\tlet fileIndex = 0;\n\t\t\t\tconst promises = message.files.map(async (file) => {\n\t\t\t\t\tfileIndex++;\n\n\t\t\t\t\tconst fileId = this.makeSlackMessageId(slackChannelId, message.ts, String(fileIndex));\n\t\t\t\t\tconst fileMessage: IImportMessage = {\n\t\t\t\t\t\t_id: fileId,\n\t\t\t\t\t\trid: slackChannelId,\n\t\t\t\t\t\tts: newMessage.ts,\n\t\t\t\t\t\tmsg: file.url_private_download || '',\n\t\t\t\t\t\t_importFile: this.convertSlackFileToPendingFile(file),\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: this._replaceSlackUserId(message.user),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (message.thread_ts && message.thread_ts !== message.ts) {\n\t\t\t\t\t\tfileMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait this.converter.addMessage(fileMessage, this._useUpsert);\n\t\t\t\t});\n\t\t\t\tawait Promise.all(promises);\n\t\t\t}\n\n\t\t\tconst regularTypes = ['me_message', 'thread_broadcast'];\n\n\t\t\tconst isBotMessage = message.subtype && ['bot_message', 'slackbot_response'].includes(message.subtype);\n\n\t\t\tif (message.subtype && !regularTypes.includes(message.subtype) && !isBotMessage) {\n\t\t\t\tif (await this.processMessageSubType(message, slackChannelId, newMessage, missedTypes)) {\n\t\t\t\t\tawait this.converter.addMessage(newMessage, this._useUpsert);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst text = this.convertSlackMessageToRocketChat(message.text);\n\n\t\t\t\tif (isBotMessage) {\n\t\t\t\t\tnewMessage.bot = true;\n\t\t\t\t}\n\n\t\t\t\tif (message.subtype === 'me_message') {\n\t\t\t\t\tnewMessage.msg = `_${text}_`;\n\t\t\t\t} else {\n\t\t\t\t\tnewMessage.msg = text;\n\t\t\t\t}\n\n\t\t\t\tif (message.thread_ts) {\n\t\t\t\t\tif (message.thread_ts === message.ts) {\n\t\t\t\t\t\tif (message.reply_users) {\n\t\t\t\t\t\t\tconst replies = new Set<string>();\n\t\t\t\t\t\t\tmessage.reply_users.forEach((item: string) => {\n\t\t\t\t\t\t\t\treplies.add(this._replaceSlackUserId(item));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (replies.size) {\n\t\t\t\t\t\t\t\tnewMessage.replies = Array.from(replies);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (message.replies) {\n\t\t\t\t\t\t\tconst replies = new Set<string>();\n\t\t\t\t\t\t\tmessage.replies.forEach((item: { user: string }) => {\n\t\t\t\t\t\t\t\treplies.add(this._replaceSlackUserId(item.user));\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (replies.size) {\n\t\t\t\t\t\t\t\tnewMessage.replies = Array.from(replies);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logger.warn(`Failed to import the parent comment, message: ${newMessage._id}. Missing replies/reply_users field`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewMessage.tcount = message.reply_count;\n\t\t\t\t\t\tnewMessage.tlm = new Date(parseInt(message.latest_reply.split('.')[0]) * 1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewMessage.tmid = this.makeSlackMessageId(slackChannelId, message.thread_ts);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (message.edited) {\n\t\t\t\t\tnewMessage.editedAt = new Date(parseInt(message.edited.ts.split('.')[0]) * 1000);\n\t\t\t\t\tif (message.edited.user) {\n\t\t\t\t\t\tnewMessage.editedBy = this._replaceSlackUserId(message.edited.user);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (message.attachments) {\n\t\t\t\t\tnewMessage.attachments = this.convertMessageAttachments(message.attachments);\n\t\t\t\t}\n\n\t\t\t\tif (message.icons?.emoji) {\n\t\t\t\t\tnewMessage.emoji = message.icons.emoji;\n\t\t\t\t}\n\n\t\t\t\tthis.parseMentions(newMessage);\n\t\t\t\tawait this.converter.addMessage(newMessage, this._useUpsert);\n\t\t\t}\n\t\t}\n\t}\n\n\t_replaceSlackUserId(userId: string): string {\n\t\tif (userId === 'USLACKBOT') {\n\t\t\treturn 'rocket.cat';\n\t\t}\n\n\t\treturn userId;\n\t}\n\n\t_replaceSlackUserIds(members: string[]) {\n\t\tif (!members?.length) {\n\t\t\treturn [];\n\t\t}\n\t\treturn members.map((userId) => this._replaceSlackUserId(userId));\n\t}\n\n\tconvertSlackMessageToRocketChat(message: string): string {\n\t\tif (message) {\n\t\t\tmessage = message.replace(/<!everyone>/g, '@all');\n\t\t\tmessage = message.replace(/<!channel>/g, '@all');\n\t\t\tmessage = message.replace(/<!here>/g, '@here');\n\t\t\tmessage = message.replace(/&gt;/g, '>');\n\t\t\tmessage = message.replace(/&lt;/g, '<');\n\t\t\tmessage = message.replace(/&amp;/g, '&');\n\t\t\tmessage = message.replace(/:simple_smile:/g, ':smile:');\n\t\t\tmessage = message.replace(/:memo:/g, ':pencil:');\n\t\t\tmessage = message.replace(/:piggy:/g, ':pig:');\n\t\t\tmessage = message.replace(/:uk:/g, ':gb:');\n\t\t\tmessage = message.replace(/<(http[s]?:[^>|]*)>/g, '$1');\n\t\t\tmessage = message.replace(/<(http[s]?:[^|]*)\\|([^>]*)>/g, '[$2]($1)');\n\t\t\tmessage = message.replace(/<#([^|]*)\\|([^>]*)>/g, '#$2');\n\t\t\tmessage = message.replace(/<@([^|]*)\\|([^>]*)>/g, '@$1');\n\t\t\tmessage = message.replace(/<@([^|>]*)>/g, '@$1');\n\t\t} else {\n\t\t\tmessage = '';\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tconvertSlackFileToPendingFile(file: SlackFile): IImportPendingFile {\n\t\treturn {\n\t\t\tdownloadUrl: file.url_private_download,\n\t\t\tid: file.id,\n\t\t\tsize: file.size,\n\t\t\tname: file.name,\n\t\t\texternal: file.is_external,\n\t\t\tsource: 'slack',\n\t\t\toriginal: {\n\t\t\t\t...file,\n\t\t\t},\n\t\t};\n\t}\n\n\tconvertMessageAttachments(attachments: SlackAttachment[]): IImportMessage['attachments'] {\n\t\tif (!attachments?.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn attachments.map((attachment) => ({\n\t\t\t...attachment,\n\t\t\ttext: this.convertSlackMessageToRocketChat(attachment.text),\n\t\t\ttitle: this.convertSlackMessageToRocketChat(attachment.title),\n\t\t\tfallback: this.convertSlackMessageToRocketChat(attachment.fallback),\n\t\t}));\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"eb7205d20913338e71b14b49a9311574e4eed579"}
