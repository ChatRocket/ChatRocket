{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push/server/fcm.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/push/server/fcm.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push/server/fcm.ts","inputSourceMap":{"version":3,"file":"app/push/server/fcm.ts","sourceRoot":"","sources":["app/push/server/fcm.ts"],"names":[],"mappings":"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","sourcesContent":["import { serverFetch as fetch, type ExtendedFetchOptions } from '@rocket.chat/server-fetch';\nimport EJSON from 'ejson';\nimport type { Response } from 'node-fetch';\n\nimport type { PendingPushNotification } from './definition';\nimport { logger } from './logger';\nimport type { NativeNotificationParameters } from './push';\n\ntype FCMDataField = Record<string, any>;\n\ntype FCMNotificationField = {\n\ttitle: string;\n\tbody: string;\n\timage?: string;\n};\n\ntype FCMMessage = {\n\tnotification?: FCMNotificationField;\n\tdata?: FCMDataField;\n\ttoken?: string;\n\tto?: string;\n\tandroid?: {\n\t\tcollapseKey?: string;\n\t\tpriority?: 'HIGH' | 'NORMAL';\n\t\tttl?: string;\n\t\trestrictedPackageName?: string;\n\t\tdata?: FCMDataField;\n\t\tnotification?: FCMNotificationField;\n\t\tfcm_options?: {\n\t\t\tanalytics_label?: string;\n\t\t};\n\t\tdirect_boot_ok?: boolean;\n\t};\n\twebpush?: {\n\t\theaders?: FCMDataField;\n\t\tdata?: FCMDataField;\n\t\tnotification?: FCMNotificationField;\n\t\tfcm_options?: {\n\t\t\tlink?: string;\n\t\t\tanalytics_label?: string;\n\t\t};\n\t};\n\tfcm_options?: {\n\t\tanalytics_label?: string;\n\t};\n};\n\n// https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode\ntype FCMError = {\n\terror: {\n\t\tcode: number;\n\t\tmessage: string;\n\t\tstatus: string;\n\t};\n};\n\n/**\n * Send a push notification using Firebase Cloud Messaging (FCM).\n * implements the Firebase Cloud Messaging HTTP v1 API, and all of its retry logic,\n * see: https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode\n *\n * Errors:\n * - For 400, 401, 403 errors: abort, and do not retry.\n * - For 404 errors: remove the token from the database.\n * - For 429 errors: retry after waiting for the duration set in the retry-after header. If no retry-after header is set, default to 60 seconds.\n * - For 500 errors: retry with exponential backoff.\n */\nasync function fetchWithRetry(url: string, _removeToken: () => void, options: ExtendedFetchOptions, retries = 0): Promise<Response> {\n\tconst MAX_RETRIES = 5;\n\tconst response = await fetch(url, options);\n\n\tif (response.ok) {\n\t\treturn response;\n\t}\n\n\tif (retries >= MAX_RETRIES) {\n\t\tlogger.error('sendFCM error: max retries reached');\n\t\treturn response;\n\t}\n\n\tconst retryAfter = response.headers.get('retry-after');\n\tconst retryAfterSeconds = retryAfter ? parseInt(retryAfter, 10) : 60;\n\n\tif (response.status === 404) {\n\t\t_removeToken();\n\t\treturn response;\n\t}\n\n\tif (response.status === 429) {\n\t\tawait new Promise((resolve) => setTimeout(resolve, retryAfterSeconds * 1000));\n\t\treturn fetchWithRetry(url, _removeToken, options, retries + 1);\n\t}\n\n\tif (response.status >= 500 && response.status < 600) {\n\t\tconst backoff = Math.pow(2, retries) * 10000;\n\t\tawait new Promise((resolve) => setTimeout(resolve, backoff));\n\t\treturn fetchWithRetry(url, _removeToken, options, retries + 1);\n\t}\n\n\tconst error: FCMError = await response.json();\n\tlogger.error('sendFCM error', error);\n\n\treturn response;\n}\n\nfunction getFCMMessagesFromPushData(userTokens: string[], notification: PendingPushNotification): { message: FCMMessage }[] {\n\t// first we will get the `data` field from the notification\n\tconst data: FCMDataField = notification.payload ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n\t// Set image\n\tif (notification.gcm?.image) {\n\t\tdata.image = notification.gcm?.image;\n\t}\n\n\t// Set extra details\n\tif (notification.badge) {\n\t\tdata.msgcnt = notification.badge.toString();\n\t}\n\n\tif (notification.sound) {\n\t\tdata.soundname = notification.sound;\n\t}\n\n\tif (notification.notId) {\n\t\tdata.notId = notification.notId.toString();\n\t}\n\n\tif (notification.gcm?.style) {\n\t\tdata.style = notification.gcm?.style;\n\t}\n\n\tif (notification.contentAvailable) {\n\t\tdata['content-available'] = notification.contentAvailable.toString();\n\t}\n\n\t// then we will create the notification field\n\tconst notificationField: FCMNotificationField = {\n\t\ttitle: notification.title,\n\t\tbody: notification.text,\n\t};\n\n\t// then we will create the message\n\tconst message: FCMMessage = {\n\t\tnotification: notificationField,\n\t\tdata,\n\t\tandroid: {\n\t\t\tpriority: 'HIGH',\n\t\t},\n\t};\n\n\t// then we will create the message for each token\n\treturn userTokens.map((token) => ({ message: { ...message, token } }));\n}\n\nexport const sendFCM = function ({ userTokens, notification, _removeToken, options }: NativeNotificationParameters): void {\n\tconst tokens = typeof userTokens === 'string' ? [userTokens] : userTokens;\n\tif (!tokens.length) {\n\t\tlogger.log('sendFCM no push tokens found');\n\t\treturn;\n\t}\n\n\tlogger.debug('sendFCM', tokens, notification);\n\n\tconst messages = getFCMMessagesFromPushData(tokens, notification);\n\tconst headers = {\n\t\t'Content-Type': 'application/json',\n\t\t'Authorization': `Bearer ${options.gcm.apiKey}`,\n\t\t'access_token_auth': true,\n\t} as Record<string, any>;\n\n\tif (!options.gcm.projectNumber.trim()) {\n\t\tlogger.error('sendFCM error: GCM project number is missing');\n\t\treturn;\n\t}\n\n\tconst url = `https://fcm.googleapis.com/v1/projects/${options.gcm.projectNumber}/messages:send`;\n\n\tfor (const fcmRequest of messages) {\n\t\tlogger.debug('sendFCM message', fcmRequest);\n\n\t\tconst removeToken = () => {\n\t\t\tconst { token } = fcmRequest.message;\n\t\t\ttoken && _removeToken({ gcm: token });\n\t\t};\n\n\t\tconst response = fetchWithRetry(url, removeToken, { method: 'POST', headers, body: JSON.stringify(fcmRequest) });\n\n\t\tresponse.catch((err) => {\n\t\t\tlogger.error('sendFCM error', err);\n\t\t});\n\t}\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push/server/fcm.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/push/server/fcm.ts","inputSourceMap":{"version":3,"file":"app/push/server/fcm.ts","sourceRoot":"","sources":["app/push/server/fcm.ts"],"names":[],"mappings":"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","sourcesContent":["import { serverFetch as fetch, type ExtendedFetchOptions } from '@rocket.chat/server-fetch';\nimport EJSON from 'ejson';\nimport type { Response } from 'node-fetch';\n\nimport type { PendingPushNotification } from './definition';\nimport { logger } from './logger';\nimport type { NativeNotificationParameters } from './push';\n\ntype FCMDataField = Record<string, any>;\n\ntype FCMNotificationField = {\n\ttitle: string;\n\tbody: string;\n\timage?: string;\n};\n\ntype FCMMessage = {\n\tnotification?: FCMNotificationField;\n\tdata?: FCMDataField;\n\ttoken?: string;\n\tto?: string;\n\tandroid?: {\n\t\tcollapseKey?: string;\n\t\tpriority?: 'HIGH' | 'NORMAL';\n\t\tttl?: string;\n\t\trestrictedPackageName?: string;\n\t\tdata?: FCMDataField;\n\t\tnotification?: FCMNotificationField;\n\t\tfcm_options?: {\n\t\t\tanalytics_label?: string;\n\t\t};\n\t\tdirect_boot_ok?: boolean;\n\t};\n\twebpush?: {\n\t\theaders?: FCMDataField;\n\t\tdata?: FCMDataField;\n\t\tnotification?: FCMNotificationField;\n\t\tfcm_options?: {\n\t\t\tlink?: string;\n\t\t\tanalytics_label?: string;\n\t\t};\n\t};\n\tfcm_options?: {\n\t\tanalytics_label?: string;\n\t};\n};\n\n// https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode\ntype FCMError = {\n\terror: {\n\t\tcode: number;\n\t\tmessage: string;\n\t\tstatus: string;\n\t};\n};\n\n/**\n * Send a push notification using Firebase Cloud Messaging (FCM).\n * implements the Firebase Cloud Messaging HTTP v1 API, and all of its retry logic,\n * see: https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode\n *\n * Errors:\n * - For 400, 401, 403 errors: abort, and do not retry.\n * - For 404 errors: remove the token from the database.\n * - For 429 errors: retry after waiting for the duration set in the retry-after header. If no retry-after header is set, default to 60 seconds.\n * - For 500 errors: retry with exponential backoff.\n */\nasync function fetchWithRetry(url: string, _removeToken: () => void, options: ExtendedFetchOptions, retries = 0): Promise<Response> {\n\tconst MAX_RETRIES = 5;\n\tconst response = await fetch(url, options);\n\n\tif (response.ok) {\n\t\treturn response;\n\t}\n\n\tif (retries >= MAX_RETRIES) {\n\t\tlogger.error('sendFCM error: max retries reached');\n\t\treturn response;\n\t}\n\n\tconst retryAfter = response.headers.get('retry-after');\n\tconst retryAfterSeconds = retryAfter ? parseInt(retryAfter, 10) : 60;\n\n\tif (response.status === 404) {\n\t\t_removeToken();\n\t\treturn response;\n\t}\n\n\tif (response.status === 429) {\n\t\tawait new Promise((resolve) => setTimeout(resolve, retryAfterSeconds * 1000));\n\t\treturn fetchWithRetry(url, _removeToken, options, retries + 1);\n\t}\n\n\tif (response.status >= 500 && response.status < 600) {\n\t\tconst backoff = Math.pow(2, retries) * 10000;\n\t\tawait new Promise((resolve) => setTimeout(resolve, backoff));\n\t\treturn fetchWithRetry(url, _removeToken, options, retries + 1);\n\t}\n\n\tconst error: FCMError = await response.json();\n\tlogger.error('sendFCM error', error);\n\n\treturn response;\n}\n\nfunction getFCMMessagesFromPushData(userTokens: string[], notification: PendingPushNotification): { message: FCMMessage }[] {\n\t// first we will get the `data` field from the notification\n\tconst data: FCMDataField = notification.payload ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n\t// Set image\n\tif (notification.gcm?.image) {\n\t\tdata.image = notification.gcm?.image;\n\t}\n\n\t// Set extra details\n\tif (notification.badge) {\n\t\tdata.msgcnt = notification.badge.toString();\n\t}\n\n\tif (notification.sound) {\n\t\tdata.soundname = notification.sound;\n\t}\n\n\tif (notification.notId) {\n\t\tdata.notId = notification.notId.toString();\n\t}\n\n\tif (notification.gcm?.style) {\n\t\tdata.style = notification.gcm?.style;\n\t}\n\n\tif (notification.contentAvailable) {\n\t\tdata['content-available'] = notification.contentAvailable.toString();\n\t}\n\n\t// then we will create the notification field\n\tconst notificationField: FCMNotificationField = {\n\t\ttitle: notification.title,\n\t\tbody: notification.text,\n\t};\n\n\t// then we will create the message\n\tconst message: FCMMessage = {\n\t\tnotification: notificationField,\n\t\tdata,\n\t\tandroid: {\n\t\t\tpriority: 'HIGH',\n\t\t},\n\t};\n\n\t// then we will create the message for each token\n\treturn userTokens.map((token) => ({ message: { ...message, token } }));\n}\n\nexport const sendFCM = function ({ userTokens, notification, _removeToken, options }: NativeNotificationParameters): void {\n\tconst tokens = typeof userTokens === 'string' ? [userTokens] : userTokens;\n\tif (!tokens.length) {\n\t\tlogger.log('sendFCM no push tokens found');\n\t\treturn;\n\t}\n\n\tlogger.debug('sendFCM', tokens, notification);\n\n\tconst messages = getFCMMessagesFromPushData(tokens, notification);\n\tconst headers = {\n\t\t'Content-Type': 'application/json',\n\t\t'Authorization': `Bearer ${options.gcm.apiKey}`,\n\t\t'access_token_auth': true,\n\t} as Record<string, any>;\n\n\tif (!options.gcm.projectNumber.trim()) {\n\t\tlogger.error('sendFCM error: GCM project number is missing');\n\t\treturn;\n\t}\n\n\tconst url = `https://fcm.googleapis.com/v1/projects/${options.gcm.projectNumber}/messages:send`;\n\n\tfor (const fcmRequest of messages) {\n\t\tlogger.debug('sendFCM message', fcmRequest);\n\n\t\tconst removeToken = () => {\n\t\t\tconst { token } = fcmRequest.message;\n\t\t\ttoken && _removeToken({ gcm: token });\n\t\t};\n\n\t\tconst response = fetchWithRetry(url, removeToken, { method: 'POST', headers, body: JSON.stringify(fcmRequest) });\n\n\t\tresponse.catch((err) => {\n\t\t\tlogger.error('sendFCM error', err);\n\t\t});\n\t}\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      sendFCM: () => sendFCM\n    });\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 0);\n    let EJSON;\n    module.link(\"ejson\", {\n      default(v) {\n        EJSON = v;\n      }\n    }, 1);\n    let logger;\n    module.link(\"./logger\", {\n      logger(v) {\n        logger = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    /**\n     * Send a push notification using Firebase Cloud Messaging (FCM).\n     * implements the Firebase Cloud Messaging HTTP v1 API, and all of its retry logic,\n     * see: https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode\n     *\n     * Errors:\n     * - For 400, 401, 403 errors: abort, and do not retry.\n     * - For 404 errors: remove the token from the database.\n     * - For 429 errors: retry after waiting for the duration set in the retry-after header. If no retry-after header is set, default to 60 seconds.\n     * - For 500 errors: retry with exponential backoff.\n     */\n    async function fetchWithRetry(url, _removeToken, options) {\n      let retries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      const MAX_RETRIES = 5;\n      const response = await fetch(url, options);\n      if (response.ok) {\n        return response;\n      }\n      if (retries >= MAX_RETRIES) {\n        logger.error('sendFCM error: max retries reached');\n        return response;\n      }\n      const retryAfter = response.headers.get('retry-after');\n      const retryAfterSeconds = retryAfter ? parseInt(retryAfter, 10) : 60;\n      if (response.status === 404) {\n        _removeToken();\n        return response;\n      }\n      if (response.status === 429) {\n        await new Promise(resolve => setTimeout(resolve, retryAfterSeconds * 1000));\n        return fetchWithRetry(url, _removeToken, options, retries + 1);\n      }\n      if (response.status >= 500 && response.status < 600) {\n        const backoff = Math.pow(2, retries) * 10000;\n        await new Promise(resolve => setTimeout(resolve, backoff));\n        return fetchWithRetry(url, _removeToken, options, retries + 1);\n      }\n      const error = await response.json();\n      logger.error('sendFCM error', error);\n      return response;\n    }\n    function getFCMMessagesFromPushData(userTokens, notification) {\n      var _notification$gcm, _notification$gcm3;\n      // first we will get the `data` field from the notification\n      const data = notification.payload ? {\n        ejson: EJSON.stringify(notification.payload)\n      } : {};\n      // Set image\n      if ((_notification$gcm = notification.gcm) !== null && _notification$gcm !== void 0 && _notification$gcm.image) {\n        var _notification$gcm2;\n        data.image = (_notification$gcm2 = notification.gcm) === null || _notification$gcm2 === void 0 ? void 0 : _notification$gcm2.image;\n      }\n      // Set extra details\n      if (notification.badge) {\n        data.msgcnt = notification.badge.toString();\n      }\n      if (notification.sound) {\n        data.soundname = notification.sound;\n      }\n      if (notification.notId) {\n        data.notId = notification.notId.toString();\n      }\n      if ((_notification$gcm3 = notification.gcm) !== null && _notification$gcm3 !== void 0 && _notification$gcm3.style) {\n        var _notification$gcm4;\n        data.style = (_notification$gcm4 = notification.gcm) === null || _notification$gcm4 === void 0 ? void 0 : _notification$gcm4.style;\n      }\n      if (notification.contentAvailable) {\n        data['content-available'] = notification.contentAvailable.toString();\n      }\n      // then we will create the notification field\n      const notificationField = {\n        title: notification.title,\n        body: notification.text\n      };\n      // then we will create the message\n      const message = {\n        notification: notificationField,\n        data,\n        android: {\n          priority: 'HIGH'\n        }\n      };\n      // then we will create the message for each token\n      return userTokens.map(token => ({\n        message: _objectSpread(_objectSpread({}, message), {}, {\n          token\n        })\n      }));\n    }\n    const sendFCM = function (_ref) {\n      let {\n        userTokens,\n        notification,\n        _removeToken,\n        options\n      } = _ref;\n      const tokens = typeof userTokens === 'string' ? [userTokens] : userTokens;\n      if (!tokens.length) {\n        logger.log('sendFCM no push tokens found');\n        return;\n      }\n      logger.debug('sendFCM', tokens, notification);\n      const messages = getFCMMessagesFromPushData(tokens, notification);\n      const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \".concat(options.gcm.apiKey),\n        'access_token_auth': true\n      };\n      if (!options.gcm.projectNumber.trim()) {\n        logger.error('sendFCM error: GCM project number is missing');\n        return;\n      }\n      const url = \"https://fcm.googleapis.com/v1/projects/\".concat(options.gcm.projectNumber, \"/messages:send\");\n      for (const fcmRequest of messages) {\n        logger.debug('sendFCM message', fcmRequest);\n        const removeToken = () => {\n          const {\n            token\n          } = fcmRequest.message;\n          token && _removeToken({\n            gcm: token\n          });\n        };\n        const response = fetchWithRetry(url, removeToken, {\n          method: 'POST',\n          headers,\n          body: JSON.stringify(fcmRequest)\n        });\n        response.catch(err => {\n          logger.error('sendFCM error', err);\n        });\n      }\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","sendFCM","fetch","serverFetch","EJSON","logger","__reifyWaitForDeps__","fetchWithRetry","url","_removeToken","options","retries","arguments","length","undefined","MAX_RETRIES","response","ok","error","retryAfter","headers","get","retryAfterSeconds","parseInt","status","Promise","resolve","setTimeout","backoff","Math","pow","json","getFCMMessagesFromPushData","userTokens","notification","_notification$gcm","_notification$gcm3","data","payload","ejson","stringify","gcm","image","_notification$gcm2","badge","msgcnt","toString","sound","soundname","notId","style","_notification$gcm4","contentAvailable","notificationField","title","body","text","message","android","priority","map","token","_ref","tokens","log","debug","messages","concat","apiKey","projectNumber","trim","fcmRequest","removeToken","method","JSON","catch","err","__reify_async_result__","_reifyError","self","async"],"sources":["app/push/server/fcm.ts"],"sourcesContent":["import { serverFetch as fetch, type ExtendedFetchOptions } from '@rocket.chat/server-fetch';\nimport EJSON from 'ejson';\nimport type { Response } from 'node-fetch';\n\nimport type { PendingPushNotification } from './definition';\nimport { logger } from './logger';\nimport type { NativeNotificationParameters } from './push';\n\ntype FCMDataField = Record<string, any>;\n\ntype FCMNotificationField = {\n\ttitle: string;\n\tbody: string;\n\timage?: string;\n};\n\ntype FCMMessage = {\n\tnotification?: FCMNotificationField;\n\tdata?: FCMDataField;\n\ttoken?: string;\n\tto?: string;\n\tandroid?: {\n\t\tcollapseKey?: string;\n\t\tpriority?: 'HIGH' | 'NORMAL';\n\t\tttl?: string;\n\t\trestrictedPackageName?: string;\n\t\tdata?: FCMDataField;\n\t\tnotification?: FCMNotificationField;\n\t\tfcm_options?: {\n\t\t\tanalytics_label?: string;\n\t\t};\n\t\tdirect_boot_ok?: boolean;\n\t};\n\twebpush?: {\n\t\theaders?: FCMDataField;\n\t\tdata?: FCMDataField;\n\t\tnotification?: FCMNotificationField;\n\t\tfcm_options?: {\n\t\t\tlink?: string;\n\t\t\tanalytics_label?: string;\n\t\t};\n\t};\n\tfcm_options?: {\n\t\tanalytics_label?: string;\n\t};\n};\n\n// https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode\ntype FCMError = {\n\terror: {\n\t\tcode: number;\n\t\tmessage: string;\n\t\tstatus: string;\n\t};\n};\n\n/**\n * Send a push notification using Firebase Cloud Messaging (FCM).\n * implements the Firebase Cloud Messaging HTTP v1 API, and all of its retry logic,\n * see: https://firebase.google.com/docs/reference/fcm/rest/v1/ErrorCode\n *\n * Errors:\n * - For 400, 401, 403 errors: abort, and do not retry.\n * - For 404 errors: remove the token from the database.\n * - For 429 errors: retry after waiting for the duration set in the retry-after header. If no retry-after header is set, default to 60 seconds.\n * - For 500 errors: retry with exponential backoff.\n */\nasync function fetchWithRetry(url: string, _removeToken: () => void, options: ExtendedFetchOptions, retries = 0): Promise<Response> {\n\tconst MAX_RETRIES = 5;\n\tconst response = await fetch(url, options);\n\n\tif (response.ok) {\n\t\treturn response;\n\t}\n\n\tif (retries >= MAX_RETRIES) {\n\t\tlogger.error('sendFCM error: max retries reached');\n\t\treturn response;\n\t}\n\n\tconst retryAfter = response.headers.get('retry-after');\n\tconst retryAfterSeconds = retryAfter ? parseInt(retryAfter, 10) : 60;\n\n\tif (response.status === 404) {\n\t\t_removeToken();\n\t\treturn response;\n\t}\n\n\tif (response.status === 429) {\n\t\tawait new Promise((resolve) => setTimeout(resolve, retryAfterSeconds * 1000));\n\t\treturn fetchWithRetry(url, _removeToken, options, retries + 1);\n\t}\n\n\tif (response.status >= 500 && response.status < 600) {\n\t\tconst backoff = Math.pow(2, retries) * 10000;\n\t\tawait new Promise((resolve) => setTimeout(resolve, backoff));\n\t\treturn fetchWithRetry(url, _removeToken, options, retries + 1);\n\t}\n\n\tconst error: FCMError = await response.json();\n\tlogger.error('sendFCM error', error);\n\n\treturn response;\n}\n\nfunction getFCMMessagesFromPushData(userTokens: string[], notification: PendingPushNotification): { message: FCMMessage }[] {\n\t// first we will get the `data` field from the notification\n\tconst data: FCMDataField = notification.payload ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n\t// Set image\n\tif (notification.gcm?.image) {\n\t\tdata.image = notification.gcm?.image;\n\t}\n\n\t// Set extra details\n\tif (notification.badge) {\n\t\tdata.msgcnt = notification.badge.toString();\n\t}\n\n\tif (notification.sound) {\n\t\tdata.soundname = notification.sound;\n\t}\n\n\tif (notification.notId) {\n\t\tdata.notId = notification.notId.toString();\n\t}\n\n\tif (notification.gcm?.style) {\n\t\tdata.style = notification.gcm?.style;\n\t}\n\n\tif (notification.contentAvailable) {\n\t\tdata['content-available'] = notification.contentAvailable.toString();\n\t}\n\n\t// then we will create the notification field\n\tconst notificationField: FCMNotificationField = {\n\t\ttitle: notification.title,\n\t\tbody: notification.text,\n\t};\n\n\t// then we will create the message\n\tconst message: FCMMessage = {\n\t\tnotification: notificationField,\n\t\tdata,\n\t\tandroid: {\n\t\t\tpriority: 'HIGH',\n\t\t},\n\t};\n\n\t// then we will create the message for each token\n\treturn userTokens.map((token) => ({ message: { ...message, token } }));\n}\n\nexport const sendFCM = function ({ userTokens, notification, _removeToken, options }: NativeNotificationParameters): void {\n\tconst tokens = typeof userTokens === 'string' ? [userTokens] : userTokens;\n\tif (!tokens.length) {\n\t\tlogger.log('sendFCM no push tokens found');\n\t\treturn;\n\t}\n\n\tlogger.debug('sendFCM', tokens, notification);\n\n\tconst messages = getFCMMessagesFromPushData(tokens, notification);\n\tconst headers = {\n\t\t'Content-Type': 'application/json',\n\t\t'Authorization': `Bearer ${options.gcm.apiKey}`,\n\t\t'access_token_auth': true,\n\t} as Record<string, any>;\n\n\tif (!options.gcm.projectNumber.trim()) {\n\t\tlogger.error('sendFCM error: GCM project number is missing');\n\t\treturn;\n\t}\n\n\tconst url = `https://fcm.googleapis.com/v1/projects/${options.gcm.projectNumber}/messages:send`;\n\n\tfor (const fcmRequest of messages) {\n\t\tlogger.debug('sendFCM message', fcmRequest);\n\n\t\tconst removeToken = () => {\n\t\t\tconst { token } = fcmRequest.message;\n\t\t\ttoken && _removeToken({ gcm: token });\n\t\t};\n\n\t\tconst response = fetchWithRetry(url, removeToken, { method: 'POST', headers, body: JSON.stringify(fcmRequest) });\n\n\t\tresponse.catch((err) => {\n\t\t\tlogger.error('sendFCM error', err);\n\t\t});\n\t}\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"3e744ee74c243f5f79cfa43cc57659a75e77bcc1"}
