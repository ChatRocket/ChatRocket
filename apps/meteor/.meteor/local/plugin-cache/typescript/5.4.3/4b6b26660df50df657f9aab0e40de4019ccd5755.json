{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/retention-policy/server/cronPruneMessages.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/retention-policy/server/cronPruneMessages.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/retention-policy/server/cronPruneMessages.ts","inputSourceMap":{"version":3,"file":"app/retention-policy/server/cronPruneMessages.ts","sourceRoot":"","sources":["app/retention-policy/server/cronPruneMessages.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IRoomWithRetentionPolicy } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Rooms } from '@rocket.chat/models';\n\nimport { getCronAdvancedTimerFromPrecisionSetting } from '../../../lib/getCronAdvancedTimerFromPrecisionSetting';\nimport { cleanRoomHistory } from '../../lib/server/functions/cleanRoomHistory';\nimport { settings } from '../../settings/server';\n\ntype RetentionRoomTypes = 'c' | 'p' | 'd';\n\nconst getMaxAgeSettingIdByRoomType = (type: RetentionRoomTypes) => {\n\tswitch (type) {\n\t\tcase 'c':\n\t\t\treturn settings.get<number>('RetentionPolicy_TTL_Channels');\n\t\tcase 'p':\n\t\t\treturn settings.get<number>('RetentionPolicy_TTL_Groups');\n\t\tcase 'd':\n\t\t\treturn settings.get<number>('RetentionPolicy_TTL_DMs');\n\t}\n};\n\nlet types: RetentionRoomTypes[] = [];\n\nconst oldest = new Date('0001-01-01T00:00:00Z');\n\nconst toDays = (d: number): number => d * 1000 * 60 * 60 * 24;\n\nasync function job(): Promise<void> {\n\tconst now = new Date();\n\tconst filesOnly = settings.get<boolean>('RetentionPolicy_FilesOnly');\n\tconst excludePinned = settings.get<boolean>('RetentionPolicy_DoNotPrunePinned');\n\tconst ignoreDiscussion = settings.get<boolean>('RetentionPolicy_DoNotPruneDiscussion');\n\tconst ignoreThreads = settings.get<boolean>('RetentionPolicy_DoNotPruneThreads');\n\n\tconst ignoreDiscussionQuery = ignoreDiscussion ? { prid: { $exists: false } } : {};\n\n\t// get all rooms with default values\n\tfor await (const type of types) {\n\t\tconst maxAge = getMaxAgeSettingIdByRoomType(type) || 0;\n\t\tconst latest = new Date(now.getTime() - maxAge);\n\n\t\tconst rooms = await Rooms.find(\n\t\t\t{\n\t\t\t\t't': type,\n\t\t\t\t'$or': [{ 'retention.enabled': { $eq: true } }, { 'retention.enabled': { $exists: false } }],\n\t\t\t\t'retention.overrideGlobal': { $ne: true },\n\t\t\t\t...ignoreDiscussionQuery,\n\t\t\t},\n\t\t\t{ projection: { _id: 1 } },\n\t\t).toArray();\n\n\t\tfor await (const { _id: rid } of rooms) {\n\t\t\tawait cleanRoomHistory({\n\t\t\t\trid,\n\t\t\t\tlatest,\n\t\t\t\toldest,\n\t\t\t\tfilesOnly,\n\t\t\t\texcludePinned,\n\t\t\t\tignoreDiscussion,\n\t\t\t\tignoreThreads,\n\t\t\t});\n\t\t}\n\t}\n\n\tconst rooms = await Rooms.find<IRoomWithRetentionPolicy>(\n\t\t{\n\t\t\t'retention.enabled': { $eq: true },\n\t\t\t'retention.overrideGlobal': { $eq: true },\n\t\t\t'retention.maxAge': { $gte: 0 },\n\t\t\t...ignoreDiscussionQuery,\n\t\t},\n\t\t{ projection: { _id: 1, retention: 1 } },\n\t).toArray();\n\n\tfor await (const { _id: rid, retention } of rooms) {\n\t\tconst { maxAge = 30, filesOnly, excludePinned, ignoreThreads } = retention;\n\t\tconst latest = new Date(now.getTime() - toDays(maxAge));\n\t\tawait cleanRoomHistory({\n\t\t\trid,\n\t\t\tlatest,\n\t\t\toldest,\n\t\t\tfilesOnly,\n\t\t\texcludePinned,\n\t\t\tignoreDiscussion,\n\t\t\tignoreThreads,\n\t\t});\n\t}\n}\n\nconst pruneCronName = 'Prune old messages by retention policy';\n\nasync function deployCron(precision: string): Promise<void> {\n\tif (await cronJobs.has(pruneCronName)) {\n\t\tawait cronJobs.remove(pruneCronName);\n\t}\n\tawait cronJobs.add(pruneCronName, precision, async () => job());\n}\n\nsettings.watchMultiple(\n\t[\n\t\t'RetentionPolicy_Enabled',\n\t\t'RetentionPolicy_AppliesToChannels',\n\t\t'RetentionPolicy_AppliesToGroups',\n\t\t'RetentionPolicy_AppliesToDMs',\n\t\t'RetentionPolicy_Advanced_Precision',\n\t\t'RetentionPolicy_Advanced_Precision_Cron',\n\t\t'RetentionPolicy_Precision',\n\t],\n\tasync function reloadPolicy() {\n\t\ttypes = [];\n\n\t\tif (!settings.get('RetentionPolicy_Enabled')) {\n\t\t\treturn cronJobs.remove(pruneCronName);\n\t\t}\n\t\tif (settings.get('RetentionPolicy_AppliesToChannels')) {\n\t\t\ttypes.push('c');\n\t\t}\n\n\t\tif (settings.get('RetentionPolicy_AppliesToGroups')) {\n\t\t\ttypes.push('p');\n\t\t}\n\n\t\tif (settings.get('RetentionPolicy_AppliesToDMs')) {\n\t\t\ttypes.push('d');\n\t\t}\n\n\t\tconst precision =\n\t\t\t(settings.get<boolean>('RetentionPolicy_Advanced_Precision') && settings.get<string>('RetentionPolicy_Advanced_Precision_Cron')) ||\n\t\t\tgetCronAdvancedTimerFromPrecisionSetting(settings.get('RetentionPolicy_Precision'));\n\n\t\treturn deployCron(precision);\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/retention-policy/server/cronPruneMessages.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/retention-policy/server/cronPruneMessages.ts","inputSourceMap":{"version":3,"file":"app/retention-policy/server/cronPruneMessages.ts","sourceRoot":"","sources":["app/retention-policy/server/cronPruneMessages.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAE5C,OAAO,EAAE,wCAAwC,EAAE,MAAM,uDAAuD,CAAC;AACjH,OAAO,EAAE,gBAAgB,EAAE,MAAM,6CAA6C,CAAC;AAC/E,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AAIjD,MAAM,4BAA4B,GAAG,CAAC,IAAwB,EAAE,EAAE;IACjE,QAAQ,IAAI,EAAE,CAAC;QACd,KAAK,GAAG;YACP,OAAO,QAAQ,CAAC,GAAG,CAAS,8BAA8B,CAAC,CAAC;QAC7D,KAAK,GAAG;YACP,OAAO,QAAQ,CAAC,GAAG,CAAS,4BAA4B,CAAC,CAAC;QAC3D,KAAK,GAAG;YACP,OAAO,QAAQ,CAAC,GAAG,CAAS,yBAAyB,CAAC,CAAC;IACzD,CAAC;AACF,CAAC,CAAC;AAEF,IAAI,KAAK,GAAyB,EAAE,CAAC;AAErC,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC,CAAC;AAEhD,MAAM,MAAM,GAAG,CAAC,CAAS,EAAU,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAE9D,KAAK,UAAU,GAAG;IACjB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;IACvB,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAU,2BAA2B,CAAC,CAAC;IACrE,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAU,kCAAkC,CAAC,CAAC;IAChF,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAU,sCAAsC,CAAC,CAAC;IACvF,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAU,mCAAmC,CAAC,CAAC;IAEjF,MAAM,qBAAqB,GAAG,gBAAgB,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAEnF,oCAAoC;IACpC,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QAChC,MAAM,MAAM,GAAG,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC;QAEhD,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,IAAI,CAC7B;YACC,GAAG,EAAE,IAAI;YACT,KAAK,EAAE,CAAC,EAAE,mBAAmB,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,mBAAmB,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC;YAC5F,0BAA0B,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;YACzC,GAAG,qBAAqB;SACxB,EACD,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAC1B,CAAC,OAAO,EAAE,CAAC;QAEZ,IAAI,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,KAAK,EAAE,CAAC;YACxC,MAAM,gBAAgB,CAAC;gBACtB,GAAG;gBACH,MAAM;gBACN,MAAM;gBACN,SAAS;gBACT,aAAa;gBACb,gBAAgB;gBAChB,aAAa;aACb,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IAED,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,IAAI,CAC7B;QACC,mBAAmB,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;QAClC,0BAA0B,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;QACzC,kBAAkB,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;QAC/B,GAAG,qBAAqB;KACxB,EACD,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE,CACxC,CAAC,OAAO,EAAE,CAAC;IAEZ,IAAI,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,KAAK,EAAE,CAAC;QACnD,MAAM,EAAE,MAAM,GAAG,EAAE,EAAE,SAAS,EAAE,aAAa,EAAE,aAAa,EAAE,GAAG,SAAS,CAAC;QAC3E,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QACxD,MAAM,gBAAgB,CAAC;YACtB,GAAG;YACH,MAAM;YACN,MAAM;YACN,SAAS;YACT,aAAa;YACb,gBAAgB;YAChB,aAAa;SACb,CAAC,CAAC;IACJ,CAAC;AACF,CAAC;AAED,MAAM,aAAa,GAAG,wCAAwC,CAAC;AAE/D,KAAK,UAAU,UAAU,CAAC,SAAiB;IAC1C,IAAI,MAAM,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC;QACvC,MAAM,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IACtC,CAAC;IACD,MAAM,QAAQ,CAAC,GAAG,CAAC,aAAa,EAAE,SAAS,EAAE,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AACjE,CAAC;AAED,QAAQ,CAAC,aAAa,CACrB;IACC,yBAAyB;IACzB,mCAAmC;IACnC,iCAAiC;IACjC,8BAA8B;IAC9B,oCAAoC;IACpC,yCAAyC;IACzC,2BAA2B;CAC3B,EACD,KAAK,UAAU,YAAY;IAC1B,KAAK,GAAG,EAAE,CAAC;IAEX,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,yBAAyB,CAAC,EAAE,CAAC;QAC9C,OAAO,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IACvC,CAAC;IACD,IAAI,QAAQ,CAAC,GAAG,CAAC,mCAAmC,CAAC,EAAE,CAAC;QACvD,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;IAED,IAAI,QAAQ,CAAC,GAAG,CAAC,iCAAiC,CAAC,EAAE,CAAC;QACrD,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;IAED,IAAI,QAAQ,CAAC,GAAG,CAAC,8BAA8B,CAAC,EAAE,CAAC;QAClD,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjB,CAAC;IAED,MAAM,SAAS,GACd,CAAC,QAAQ,CAAC,GAAG,CAAU,oCAAoC,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAS,yCAAyC,CAAC,CAAC;QAChI,wCAAwC,CAAC,QAAQ,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAC;IAErF,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC;AAC9B,CAAC,CACD,CAAC","sourcesContent":["import type { IRoomWithRetentionPolicy } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Rooms } from '@rocket.chat/models';\n\nimport { getCronAdvancedTimerFromPrecisionSetting } from '../../../lib/getCronAdvancedTimerFromPrecisionSetting';\nimport { cleanRoomHistory } from '../../lib/server/functions/cleanRoomHistory';\nimport { settings } from '../../settings/server';\n\ntype RetentionRoomTypes = 'c' | 'p' | 'd';\n\nconst getMaxAgeSettingIdByRoomType = (type: RetentionRoomTypes) => {\n\tswitch (type) {\n\t\tcase 'c':\n\t\t\treturn settings.get<number>('RetentionPolicy_TTL_Channels');\n\t\tcase 'p':\n\t\t\treturn settings.get<number>('RetentionPolicy_TTL_Groups');\n\t\tcase 'd':\n\t\t\treturn settings.get<number>('RetentionPolicy_TTL_DMs');\n\t}\n};\n\nlet types: RetentionRoomTypes[] = [];\n\nconst oldest = new Date('0001-01-01T00:00:00Z');\n\nconst toDays = (d: number): number => d * 1000 * 60 * 60 * 24;\n\nasync function job(): Promise<void> {\n\tconst now = new Date();\n\tconst filesOnly = settings.get<boolean>('RetentionPolicy_FilesOnly');\n\tconst excludePinned = settings.get<boolean>('RetentionPolicy_DoNotPrunePinned');\n\tconst ignoreDiscussion = settings.get<boolean>('RetentionPolicy_DoNotPruneDiscussion');\n\tconst ignoreThreads = settings.get<boolean>('RetentionPolicy_DoNotPruneThreads');\n\n\tconst ignoreDiscussionQuery = ignoreDiscussion ? { prid: { $exists: false } } : {};\n\n\t// get all rooms with default values\n\tfor await (const type of types) {\n\t\tconst maxAge = getMaxAgeSettingIdByRoomType(type) || 0;\n\t\tconst latest = new Date(now.getTime() - maxAge);\n\n\t\tconst rooms = await Rooms.find(\n\t\t\t{\n\t\t\t\t't': type,\n\t\t\t\t'$or': [{ 'retention.enabled': { $eq: true } }, { 'retention.enabled': { $exists: false } }],\n\t\t\t\t'retention.overrideGlobal': { $ne: true },\n\t\t\t\t...ignoreDiscussionQuery,\n\t\t\t},\n\t\t\t{ projection: { _id: 1 } },\n\t\t).toArray();\n\n\t\tfor await (const { _id: rid } of rooms) {\n\t\t\tawait cleanRoomHistory({\n\t\t\t\trid,\n\t\t\t\tlatest,\n\t\t\t\toldest,\n\t\t\t\tfilesOnly,\n\t\t\t\texcludePinned,\n\t\t\t\tignoreDiscussion,\n\t\t\t\tignoreThreads,\n\t\t\t});\n\t\t}\n\t}\n\n\tconst rooms = await Rooms.find<IRoomWithRetentionPolicy>(\n\t\t{\n\t\t\t'retention.enabled': { $eq: true },\n\t\t\t'retention.overrideGlobal': { $eq: true },\n\t\t\t'retention.maxAge': { $gte: 0 },\n\t\t\t...ignoreDiscussionQuery,\n\t\t},\n\t\t{ projection: { _id: 1, retention: 1 } },\n\t).toArray();\n\n\tfor await (const { _id: rid, retention } of rooms) {\n\t\tconst { maxAge = 30, filesOnly, excludePinned, ignoreThreads } = retention;\n\t\tconst latest = new Date(now.getTime() - toDays(maxAge));\n\t\tawait cleanRoomHistory({\n\t\t\trid,\n\t\t\tlatest,\n\t\t\toldest,\n\t\t\tfilesOnly,\n\t\t\texcludePinned,\n\t\t\tignoreDiscussion,\n\t\t\tignoreThreads,\n\t\t});\n\t}\n}\n\nconst pruneCronName = 'Prune old messages by retention policy';\n\nasync function deployCron(precision: string): Promise<void> {\n\tif (await cronJobs.has(pruneCronName)) {\n\t\tawait cronJobs.remove(pruneCronName);\n\t}\n\tawait cronJobs.add(pruneCronName, precision, async () => job());\n}\n\nsettings.watchMultiple(\n\t[\n\t\t'RetentionPolicy_Enabled',\n\t\t'RetentionPolicy_AppliesToChannels',\n\t\t'RetentionPolicy_AppliesToGroups',\n\t\t'RetentionPolicy_AppliesToDMs',\n\t\t'RetentionPolicy_Advanced_Precision',\n\t\t'RetentionPolicy_Advanced_Precision_Cron',\n\t\t'RetentionPolicy_Precision',\n\t],\n\tasync function reloadPolicy() {\n\t\ttypes = [];\n\n\t\tif (!settings.get('RetentionPolicy_Enabled')) {\n\t\t\treturn cronJobs.remove(pruneCronName);\n\t\t}\n\t\tif (settings.get('RetentionPolicy_AppliesToChannels')) {\n\t\t\ttypes.push('c');\n\t\t}\n\n\t\tif (settings.get('RetentionPolicy_AppliesToGroups')) {\n\t\t\ttypes.push('p');\n\t\t}\n\n\t\tif (settings.get('RetentionPolicy_AppliesToDMs')) {\n\t\t\ttypes.push('d');\n\t\t}\n\n\t\tconst precision =\n\t\t\t(settings.get<boolean>('RetentionPolicy_Advanced_Precision') && settings.get<string>('RetentionPolicy_Advanced_Precision_Cron')) ||\n\t\t\tgetCronAdvancedTimerFromPrecisionSetting(settings.get('RetentionPolicy_Precision'));\n\n\t\treturn deployCron(precision);\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    let cronJobs;\n    module.link(\"@rocket.chat/cron\", {\n      cronJobs(v) {\n        cronJobs = v;\n      }\n    }, 0);\n    let Rooms;\n    module.link(\"@rocket.chat/models\", {\n      Rooms(v) {\n        Rooms = v;\n      }\n    }, 1);\n    let getCronAdvancedTimerFromPrecisionSetting;\n    module.link(\"../../../lib/getCronAdvancedTimerFromPrecisionSetting\", {\n      getCronAdvancedTimerFromPrecisionSetting(v) {\n        getCronAdvancedTimerFromPrecisionSetting = v;\n      }\n    }, 2);\n    let cleanRoomHistory;\n    module.link(\"../../lib/server/functions/cleanRoomHistory\", {\n      cleanRoomHistory(v) {\n        cleanRoomHistory = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const getMaxAgeSettingIdByRoomType = type => {\n      switch (type) {\n        case 'c':\n          return settings.get('RetentionPolicy_TTL_Channels');\n        case 'p':\n          return settings.get('RetentionPolicy_TTL_Groups');\n        case 'd':\n          return settings.get('RetentionPolicy_TTL_DMs');\n      }\n    };\n    let types = [];\n    const oldest = new Date('0001-01-01T00:00:00Z');\n    const toDays = d => d * 1000 * 60 * 60 * 24;\n    async function job() {\n      const now = new Date();\n      const filesOnly = settings.get('RetentionPolicy_FilesOnly');\n      const excludePinned = settings.get('RetentionPolicy_DoNotPrunePinned');\n      const ignoreDiscussion = settings.get('RetentionPolicy_DoNotPruneDiscussion');\n      const ignoreThreads = settings.get('RetentionPolicy_DoNotPruneThreads');\n      const ignoreDiscussionQuery = ignoreDiscussion ? {\n        prid: {\n          $exists: false\n        }\n      } : {};\n      // get all rooms with default values\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(types), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const type = _step.value;\n          {\n            const maxAge = getMaxAgeSettingIdByRoomType(type) || 0;\n            const latest = new Date(now.getTime() - maxAge);\n            const rooms = await Rooms.find(_objectSpread({\n              't': type,\n              '$or': [{\n                'retention.enabled': {\n                  $eq: true\n                }\n              }, {\n                'retention.enabled': {\n                  $exists: false\n                }\n              }],\n              'retention.overrideGlobal': {\n                $ne: true\n              }\n            }, ignoreDiscussionQuery), {\n              projection: {\n                _id: 1\n              }\n            }).toArray();\n            var _iteratorAbruptCompletion3 = false;\n            var _didIteratorError3 = false;\n            var _iteratorError3;\n            try {\n              for (var _iterator3 = _asyncIterator(rooms), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n                const {\n                  _id: rid\n                } = _step3.value;\n                {\n                  await cleanRoomHistory({\n                    rid,\n                    latest,\n                    oldest,\n                    filesOnly,\n                    excludePinned,\n                    ignoreDiscussion,\n                    ignoreThreads\n                  });\n                }\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n                  await _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      const rooms = await Rooms.find(_objectSpread({\n        'retention.enabled': {\n          $eq: true\n        },\n        'retention.overrideGlobal': {\n          $eq: true\n        },\n        'retention.maxAge': {\n          $gte: 0\n        }\n      }, ignoreDiscussionQuery), {\n        projection: {\n          _id: 1,\n          retention: 1\n        }\n      }).toArray();\n      var _iteratorAbruptCompletion2 = false;\n      var _didIteratorError2 = false;\n      var _iteratorError2;\n      try {\n        for (var _iterator2 = _asyncIterator(rooms), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n          const {\n            _id: rid,\n            retention\n          } = _step2.value;\n          {\n            const {\n              maxAge = 30,\n              filesOnly,\n              excludePinned,\n              ignoreThreads\n            } = retention;\n            const latest = new Date(now.getTime() - toDays(maxAge));\n            await cleanRoomHistory({\n              rid,\n              latest,\n              oldest,\n              filesOnly,\n              excludePinned,\n              ignoreDiscussion,\n              ignoreThreads\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n            await _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n    const pruneCronName = 'Prune old messages by retention policy';\n    async function deployCron(precision) {\n      if (await cronJobs.has(pruneCronName)) {\n        await cronJobs.remove(pruneCronName);\n      }\n      await cronJobs.add(pruneCronName, precision, async () => job());\n    }\n    settings.watchMultiple(['RetentionPolicy_Enabled', 'RetentionPolicy_AppliesToChannels', 'RetentionPolicy_AppliesToGroups', 'RetentionPolicy_AppliesToDMs', 'RetentionPolicy_Advanced_Precision', 'RetentionPolicy_Advanced_Precision_Cron', 'RetentionPolicy_Precision'], async function reloadPolicy() {\n      types = [];\n      if (!settings.get('RetentionPolicy_Enabled')) {\n        return cronJobs.remove(pruneCronName);\n      }\n      if (settings.get('RetentionPolicy_AppliesToChannels')) {\n        types.push('c');\n      }\n      if (settings.get('RetentionPolicy_AppliesToGroups')) {\n        types.push('p');\n      }\n      if (settings.get('RetentionPolicy_AppliesToDMs')) {\n        types.push('d');\n      }\n      const precision = settings.get('RetentionPolicy_Advanced_Precision') && settings.get('RetentionPolicy_Advanced_Precision_Cron') || getCronAdvancedTimerFromPrecisionSetting(settings.get('RetentionPolicy_Precision'));\n      return deployCron(precision);\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","cronJobs","Rooms","getCronAdvancedTimerFromPrecisionSetting","cleanRoomHistory","settings","__reifyWaitForDeps__","getMaxAgeSettingIdByRoomType","type","get","types","oldest","Date","toDays","d","job","now","filesOnly","excludePinned","ignoreDiscussion","ignoreThreads","ignoreDiscussionQuery","prid","$exists","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","maxAge","latest","getTime","rooms","find","$eq","$ne","projection","_id","toArray","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","rid","err","return","$gte","retention","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","pruneCronName","deployCron","precision","has","remove","add","watchMultiple","reloadPolicy","push","__reify_async_result__","_reifyError","self","async"],"sources":["app/retention-policy/server/cronPruneMessages.ts"],"sourcesContent":["import type { IRoomWithRetentionPolicy } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Rooms } from '@rocket.chat/models';\n\nimport { getCronAdvancedTimerFromPrecisionSetting } from '../../../lib/getCronAdvancedTimerFromPrecisionSetting';\nimport { cleanRoomHistory } from '../../lib/server/functions/cleanRoomHistory';\nimport { settings } from '../../settings/server';\n\ntype RetentionRoomTypes = 'c' | 'p' | 'd';\n\nconst getMaxAgeSettingIdByRoomType = (type: RetentionRoomTypes) => {\n\tswitch (type) {\n\t\tcase 'c':\n\t\t\treturn settings.get<number>('RetentionPolicy_TTL_Channels');\n\t\tcase 'p':\n\t\t\treturn settings.get<number>('RetentionPolicy_TTL_Groups');\n\t\tcase 'd':\n\t\t\treturn settings.get<number>('RetentionPolicy_TTL_DMs');\n\t}\n};\n\nlet types: RetentionRoomTypes[] = [];\n\nconst oldest = new Date('0001-01-01T00:00:00Z');\n\nconst toDays = (d: number): number => d * 1000 * 60 * 60 * 24;\n\nasync function job(): Promise<void> {\n\tconst now = new Date();\n\tconst filesOnly = settings.get<boolean>('RetentionPolicy_FilesOnly');\n\tconst excludePinned = settings.get<boolean>('RetentionPolicy_DoNotPrunePinned');\n\tconst ignoreDiscussion = settings.get<boolean>('RetentionPolicy_DoNotPruneDiscussion');\n\tconst ignoreThreads = settings.get<boolean>('RetentionPolicy_DoNotPruneThreads');\n\n\tconst ignoreDiscussionQuery = ignoreDiscussion ? { prid: { $exists: false } } : {};\n\n\t// get all rooms with default values\n\tfor await (const type of types) {\n\t\tconst maxAge = getMaxAgeSettingIdByRoomType(type) || 0;\n\t\tconst latest = new Date(now.getTime() - maxAge);\n\n\t\tconst rooms = await Rooms.find(\n\t\t\t{\n\t\t\t\t't': type,\n\t\t\t\t'$or': [{ 'retention.enabled': { $eq: true } }, { 'retention.enabled': { $exists: false } }],\n\t\t\t\t'retention.overrideGlobal': { $ne: true },\n\t\t\t\t...ignoreDiscussionQuery,\n\t\t\t},\n\t\t\t{ projection: { _id: 1 } },\n\t\t).toArray();\n\n\t\tfor await (const { _id: rid } of rooms) {\n\t\t\tawait cleanRoomHistory({\n\t\t\t\trid,\n\t\t\t\tlatest,\n\t\t\t\toldest,\n\t\t\t\tfilesOnly,\n\t\t\t\texcludePinned,\n\t\t\t\tignoreDiscussion,\n\t\t\t\tignoreThreads,\n\t\t\t});\n\t\t}\n\t}\n\n\tconst rooms = await Rooms.find<IRoomWithRetentionPolicy>(\n\t\t{\n\t\t\t'retention.enabled': { $eq: true },\n\t\t\t'retention.overrideGlobal': { $eq: true },\n\t\t\t'retention.maxAge': { $gte: 0 },\n\t\t\t...ignoreDiscussionQuery,\n\t\t},\n\t\t{ projection: { _id: 1, retention: 1 } },\n\t).toArray();\n\n\tfor await (const { _id: rid, retention } of rooms) {\n\t\tconst { maxAge = 30, filesOnly, excludePinned, ignoreThreads } = retention;\n\t\tconst latest = new Date(now.getTime() - toDays(maxAge));\n\t\tawait cleanRoomHistory({\n\t\t\trid,\n\t\t\tlatest,\n\t\t\toldest,\n\t\t\tfilesOnly,\n\t\t\texcludePinned,\n\t\t\tignoreDiscussion,\n\t\t\tignoreThreads,\n\t\t});\n\t}\n}\n\nconst pruneCronName = 'Prune old messages by retention policy';\n\nasync function deployCron(precision: string): Promise<void> {\n\tif (await cronJobs.has(pruneCronName)) {\n\t\tawait cronJobs.remove(pruneCronName);\n\t}\n\tawait cronJobs.add(pruneCronName, precision, async () => job());\n}\n\nsettings.watchMultiple(\n\t[\n\t\t'RetentionPolicy_Enabled',\n\t\t'RetentionPolicy_AppliesToChannels',\n\t\t'RetentionPolicy_AppliesToGroups',\n\t\t'RetentionPolicy_AppliesToDMs',\n\t\t'RetentionPolicy_Advanced_Precision',\n\t\t'RetentionPolicy_Advanced_Precision_Cron',\n\t\t'RetentionPolicy_Precision',\n\t],\n\tasync function reloadPolicy() {\n\t\ttypes = [];\n\n\t\tif (!settings.get('RetentionPolicy_Enabled')) {\n\t\t\treturn cronJobs.remove(pruneCronName);\n\t\t}\n\t\tif (settings.get('RetentionPolicy_AppliesToChannels')) {\n\t\t\ttypes.push('c');\n\t\t}\n\n\t\tif (settings.get('RetentionPolicy_AppliesToGroups')) {\n\t\t\ttypes.push('p');\n\t\t}\n\n\t\tif (settings.get('RetentionPolicy_AppliesToDMs')) {\n\t\t\ttypes.push('d');\n\t\t}\n\n\t\tconst precision =\n\t\t\t(settings.get<boolean>('RetentionPolicy_Advanced_Precision') && settings.get<string>('RetentionPolicy_Advanced_Precision_Cron')) ||\n\t\t\tgetCronAdvancedTimerFromPrecisionSetting(settings.get('RetentionPolicy_Precision'));\n\n\t\treturn deployCron(precision);\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"4b6b26660df50df657f9aab0e40de4019ccd5755"}
