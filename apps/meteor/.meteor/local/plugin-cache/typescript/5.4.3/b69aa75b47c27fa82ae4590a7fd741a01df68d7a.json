{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/UsersSessions.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/UsersSessions.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/UsersSessions.ts","inputSourceMap":{"version":3,"file":"server/models/raw/UsersSessions.ts","sourceRoot":"","sources":["server/models/raw/UsersSessions.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,OAAO,gBAAiB,SAAQ,OAAqB;IAC1D,YAAY,EAAM,EAAE,KAAyD;QAC5E,KAAK,CAAC,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE;YACjC,mBAAmB,EAAE,IAAI;YACzB,sBAAsB,CAAC,IAAI;gBAC1B,OAAO,IAAI,CAAC;YACb,CAAC;SACD,CAAC,CAAC;IACJ,CAAC;IAED,8BAA8B,CAAC,UAAoB;QAClD,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CACzB,EAAE,EACF;YACC,KAAK,EAAE;gBACN,WAAW,EAAE;oBACZ,UAAU,EAAE;wBACX,IAAI,EAAE,UAAU;qBAChB;iBACD;aACD;SACD,CACD,CAAC;IACH,CAAC;IAED,0BAA0B,CAAC,GAAW,EAAE,YAAoB,EAAE,MAAc;QAC3E,MAAM,KAAK,GAAG;YACb,KAAK,EAAE,GAAG;YACV,gBAAgB,EAAE,YAAY;SAC9B,CAAC;QAEF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,sBAAsB,EAAE,MAAM;gBAC9B,0BAA0B,EAAE,IAAI,IAAI,EAAE;aACtC;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,+BAA+B,CAAC,UAAkB;QACvD,OAAO,IAAI,CAAC,UAAU,CACrB;YACC,wBAAwB,EAAE,UAAU;SACpC,EACD;YACC,KAAK,EAAE;gBACN,WAAW,EAAE;oBACZ,UAAU;iBACV;aACD;SACD,CACD,CAAC;IACH,CAAC;IAED,qCAAqC,CAAC,WAAqB;QAC1D,OAAO,IAAI,CAAC,UAAU,CACrB,EAAE,EACF;YACC,KAAK,EAAE;gBACN,WAAW,EAAE;oBACZ,UAAU,EAAE;wBACX,IAAI,EAAE,WAAW;qBACjB;iBACD;aACD;SACD,CACD,CAAC;IACH,CAAC;IAED,KAAK,CAAC,8BAA8B,CAAC,YAAoB;QACxD,OAAO,IAAI,CAAC,UAAU,CACrB;YACC,gBAAgB,EAAE,YAAY;SAC9B,EACD;YACC,KAAK,EAAE;gBACN,WAAW,EAAE;oBACZ,EAAE,EAAE,YAAY;iBAChB;aACD;SACD,CACD,CAAC;IACH,CAAC;IAED,gBAAgB,CAAC,UAAkB;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC;YAChB,wBAAwB,EAAE,UAAU;SACpC,CAAC,CAAC;IACJ,CAAC;IAED,iBAAiB,CAChB,MAAc,EACd,EAAE,EAAE,EAAE,UAAU,EAAE,MAAM,EAAgE;QAExF,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QAEvB,MAAM,MAAM,GAAG;YACd,KAAK,EAAE;gBACN,WAAW,EAAE;oBACZ,EAAE;oBACF,UAAU;oBACV,MAAM;oBACN,UAAU,EAAE,GAAG;oBACf,UAAU,EAAE,GAAG;iBACf;aACD;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAClE,CAAC;IAED,sBAAsB,CAAC,WAAqB,EAAE,OAAmC;QAChF,OAAO,IAAI,CAAC,IAAI,CACf;YACC,wBAAwB,EAAE;gBACzB,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,WAAW;aACjB;SACD,EACD,OAAO,CACP,CAAC;IACH,CAAC;CACD","sourcesContent":["import type { IUserSession, IUserSessionConnection, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { IUsersSessionsModel } from '@rocket.chat/model-typings';\nimport type { FindCursor, Collection, Db, FindOptions } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class UsersSessionsRaw extends BaseRaw<IUserSession> implements IUsersSessionsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IUserSession>>) {\n\t\tsuper(db, 'usersSessions', trash, {\n\t\t\tpreventSetUpdatedAt: true,\n\t\t\tcollectionNameResolver(name) {\n\t\t\t\treturn name;\n\t\t\t},\n\t\t});\n\t}\n\n\tclearConnectionsFromInstanceId(instanceId: string[]): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.col.updateMany(\n\t\t\t{},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tinstanceId: {\n\t\t\t\t\t\t\t$nin: instanceId,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tupdateConnectionStatusById(uid: string, connectionId: string, status: string): ReturnType<BaseRaw<IUserSession>['updateOne']> {\n\t\tconst query = {\n\t\t\t'_id': uid,\n\t\t\t'connections.id': connectionId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'connections.$.status': status,\n\t\t\t\t'connections.$._updatedAt': new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync removeConnectionsFromInstanceId(instanceId: string): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'connections.instanceId': instanceId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tinstanceId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveConnectionsFromOtherInstanceIds(instanceIds: string[]): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.updateMany(\n\t\t\t{},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tinstanceId: {\n\t\t\t\t\t\t\t$nin: instanceIds,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync removeConnectionByConnectionId(connectionId: string): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'connections.id': connectionId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tid: connectionId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindByInstanceId(instanceId: string): FindCursor<IUserSession> {\n\t\treturn this.find({\n\t\t\t'connections.instanceId': instanceId,\n\t\t});\n\t}\n\n\taddConnectionById(\n\t\tuserId: string,\n\t\t{ id, instanceId, status }: Pick<IUserSessionConnection, 'id' | 'instanceId' | 'status'>,\n\t): ReturnType<BaseRaw<IUserSession>['updateOne']> {\n\t\tconst now = new Date();\n\n\t\tconst update = {\n\t\t\t$push: {\n\t\t\t\tconnections: {\n\t\t\t\t\tid,\n\t\t\t\t\tinstanceId,\n\t\t\t\t\tstatus,\n\t\t\t\t\t_createdAt: now,\n\t\t\t\t\t_updatedAt: now,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id: userId }, update, { upsert: true });\n\t}\n\n\tfindByOtherInstanceIds(instanceIds: string[], options?: FindOptions<IUserSession>): FindCursor<IUserSession> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\t'connections.instanceId': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t\t$nin: instanceIds,\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/UsersSessions.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/UsersSessions.ts","inputSourceMap":{"version":3,"file":"server/models/raw/UsersSessions.ts","sourceRoot":"","sources":["server/models/raw/UsersSessions.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,OAAO,gBAAiB,SAAQ,OAAqB;IAC1D,YAAY,EAAM,EAAE,KAAyD;QAC5E,KAAK,CAAC,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE;YACjC,mBAAmB,EAAE,IAAI;YACzB,sBAAsB,CAAC,IAAI;gBAC1B,OAAO,IAAI,CAAC;YACb,CAAC;SACD,CAAC,CAAC;IACJ,CAAC;IAED,8BAA8B,CAAC,UAAoB;QAClD,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CACzB,EAAE,EACF;YACC,KAAK,EAAE;gBACN,WAAW,EAAE;oBACZ,UAAU,EAAE;wBACX,IAAI,EAAE,UAAU;qBAChB;iBACD;aACD;SACD,CACD,CAAC;IACH,CAAC;IAED,0BAA0B,CAAC,GAAW,EAAE,YAAoB,EAAE,MAAc;QAC3E,MAAM,KAAK,GAAG;YACb,KAAK,EAAE,GAAG;YACV,gBAAgB,EAAE,YAAY;SAC9B,CAAC;QAEF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,sBAAsB,EAAE,MAAM;gBAC9B,0BAA0B,EAAE,IAAI,IAAI,EAAE;aACtC;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,+BAA+B,CAAC,UAAkB;QACvD,OAAO,IAAI,CAAC,UAAU,CACrB;YACC,wBAAwB,EAAE,UAAU;SACpC,EACD;YACC,KAAK,EAAE;gBACN,WAAW,EAAE;oBACZ,UAAU;iBACV;aACD;SACD,CACD,CAAC;IACH,CAAC;IAED,qCAAqC,CAAC,WAAqB;QAC1D,OAAO,IAAI,CAAC,UAAU,CACrB,EAAE,EACF;YACC,KAAK,EAAE;gBACN,WAAW,EAAE;oBACZ,UAAU,EAAE;wBACX,IAAI,EAAE,WAAW;qBACjB;iBACD;aACD;SACD,CACD,CAAC;IACH,CAAC;IAED,KAAK,CAAC,8BAA8B,CAAC,YAAoB;QACxD,OAAO,IAAI,CAAC,UAAU,CACrB;YACC,gBAAgB,EAAE,YAAY;SAC9B,EACD;YACC,KAAK,EAAE;gBACN,WAAW,EAAE;oBACZ,EAAE,EAAE,YAAY;iBAChB;aACD;SACD,CACD,CAAC;IACH,CAAC;IAED,gBAAgB,CAAC,UAAkB;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC;YAChB,wBAAwB,EAAE,UAAU;SACpC,CAAC,CAAC;IACJ,CAAC;IAED,iBAAiB,CAChB,MAAc,EACd,EAAE,EAAE,EAAE,UAAU,EAAE,MAAM,EAAgE;QAExF,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QAEvB,MAAM,MAAM,GAAG;YACd,KAAK,EAAE;gBACN,WAAW,EAAE;oBACZ,EAAE;oBACF,UAAU;oBACV,MAAM;oBACN,UAAU,EAAE,GAAG;oBACf,UAAU,EAAE,GAAG;iBACf;aACD;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAClE,CAAC;IAED,sBAAsB,CAAC,WAAqB,EAAE,OAAmC;QAChF,OAAO,IAAI,CAAC,IAAI,CACf;YACC,wBAAwB,EAAE;gBACzB,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,WAAW;aACjB;SACD,EACD,OAAO,CACP,CAAC;IACH,CAAC;CACD","sourcesContent":["import type { IUserSession, IUserSessionConnection, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { IUsersSessionsModel } from '@rocket.chat/model-typings';\nimport type { FindCursor, Collection, Db, FindOptions } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class UsersSessionsRaw extends BaseRaw<IUserSession> implements IUsersSessionsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IUserSession>>) {\n\t\tsuper(db, 'usersSessions', trash, {\n\t\t\tpreventSetUpdatedAt: true,\n\t\t\tcollectionNameResolver(name) {\n\t\t\t\treturn name;\n\t\t\t},\n\t\t});\n\t}\n\n\tclearConnectionsFromInstanceId(instanceId: string[]): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.col.updateMany(\n\t\t\t{},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tinstanceId: {\n\t\t\t\t\t\t\t$nin: instanceId,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tupdateConnectionStatusById(uid: string, connectionId: string, status: string): ReturnType<BaseRaw<IUserSession>['updateOne']> {\n\t\tconst query = {\n\t\t\t'_id': uid,\n\t\t\t'connections.id': connectionId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'connections.$.status': status,\n\t\t\t\t'connections.$._updatedAt': new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync removeConnectionsFromInstanceId(instanceId: string): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'connections.instanceId': instanceId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tinstanceId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveConnectionsFromOtherInstanceIds(instanceIds: string[]): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.updateMany(\n\t\t\t{},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tinstanceId: {\n\t\t\t\t\t\t\t$nin: instanceIds,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync removeConnectionByConnectionId(connectionId: string): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'connections.id': connectionId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tid: connectionId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindByInstanceId(instanceId: string): FindCursor<IUserSession> {\n\t\treturn this.find({\n\t\t\t'connections.instanceId': instanceId,\n\t\t});\n\t}\n\n\taddConnectionById(\n\t\tuserId: string,\n\t\t{ id, instanceId, status }: Pick<IUserSessionConnection, 'id' | 'instanceId' | 'status'>,\n\t): ReturnType<BaseRaw<IUserSession>['updateOne']> {\n\t\tconst now = new Date();\n\n\t\tconst update = {\n\t\t\t$push: {\n\t\t\t\tconnections: {\n\t\t\t\t\tid,\n\t\t\t\t\tinstanceId,\n\t\t\t\t\tstatus,\n\t\t\t\t\t_createdAt: now,\n\t\t\t\t\t_updatedAt: now,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id: userId }, update, { upsert: true });\n\t}\n\n\tfindByOtherInstanceIds(instanceIds: string[], options?: FindOptions<IUserSession>): FindCursor<IUserSession> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\t'connections.instanceId': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t\t$nin: instanceIds,\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      UsersSessionsRaw: () => UsersSessionsRaw\n    });\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class UsersSessionsRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'usersSessions', trash, {\n          preventSetUpdatedAt: true,\n          collectionNameResolver(name) {\n            return name;\n          }\n        });\n      }\n      clearConnectionsFromInstanceId(instanceId) {\n        return this.col.updateMany({}, {\n          $pull: {\n            connections: {\n              instanceId: {\n                $nin: instanceId\n              }\n            }\n          }\n        });\n      }\n      updateConnectionStatusById(uid, connectionId, status) {\n        const query = {\n          '_id': uid,\n          'connections.id': connectionId\n        };\n        const update = {\n          $set: {\n            'connections.$.status': status,\n            'connections.$._updatedAt': new Date()\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      async removeConnectionsFromInstanceId(instanceId) {\n        return this.updateMany({\n          'connections.instanceId': instanceId\n        }, {\n          $pull: {\n            connections: {\n              instanceId\n            }\n          }\n        });\n      }\n      removeConnectionsFromOtherInstanceIds(instanceIds) {\n        return this.updateMany({}, {\n          $pull: {\n            connections: {\n              instanceId: {\n                $nin: instanceIds\n              }\n            }\n          }\n        });\n      }\n      async removeConnectionByConnectionId(connectionId) {\n        return this.updateMany({\n          'connections.id': connectionId\n        }, {\n          $pull: {\n            connections: {\n              id: connectionId\n            }\n          }\n        });\n      }\n      findByInstanceId(instanceId) {\n        return this.find({\n          'connections.instanceId': instanceId\n        });\n      }\n      addConnectionById(userId, _ref) {\n        let {\n          id,\n          instanceId,\n          status\n        } = _ref;\n        const now = new Date();\n        const update = {\n          $push: {\n            connections: {\n              id,\n              instanceId,\n              status,\n              _createdAt: now,\n              _updatedAt: now\n            }\n          }\n        };\n        return this.updateOne({\n          _id: userId\n        }, update, {\n          upsert: true\n        });\n      }\n      findByOtherInstanceIds(instanceIds, options) {\n        return this.find({\n          'connections.instanceId': {\n            $exists: true,\n            $nin: instanceIds\n          }\n        }, options);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","UsersSessionsRaw","BaseRaw","link","v","__reifyWaitForDeps__","constructor","db","trash","preventSetUpdatedAt","collectionNameResolver","name","clearConnectionsFromInstanceId","instanceId","col","updateMany","$pull","connections","$nin","updateConnectionStatusById","uid","connectionId","status","query","update","$set","Date","updateOne","removeConnectionsFromInstanceId","removeConnectionsFromOtherInstanceIds","instanceIds","removeConnectionByConnectionId","id","findByInstanceId","find","addConnectionById","userId","_ref","now","$push","_createdAt","_updatedAt","_id","upsert","findByOtherInstanceIds","options","$exists","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/UsersSessions.ts"],"sourcesContent":["import type { IUserSession, IUserSessionConnection, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { IUsersSessionsModel } from '@rocket.chat/model-typings';\nimport type { FindCursor, Collection, Db, FindOptions } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class UsersSessionsRaw extends BaseRaw<IUserSession> implements IUsersSessionsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IUserSession>>) {\n\t\tsuper(db, 'usersSessions', trash, {\n\t\t\tpreventSetUpdatedAt: true,\n\t\t\tcollectionNameResolver(name) {\n\t\t\t\treturn name;\n\t\t\t},\n\t\t});\n\t}\n\n\tclearConnectionsFromInstanceId(instanceId: string[]): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.col.updateMany(\n\t\t\t{},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tinstanceId: {\n\t\t\t\t\t\t\t$nin: instanceId,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tupdateConnectionStatusById(uid: string, connectionId: string, status: string): ReturnType<BaseRaw<IUserSession>['updateOne']> {\n\t\tconst query = {\n\t\t\t'_id': uid,\n\t\t\t'connections.id': connectionId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'connections.$.status': status,\n\t\t\t\t'connections.$._updatedAt': new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync removeConnectionsFromInstanceId(instanceId: string): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'connections.instanceId': instanceId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tinstanceId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveConnectionsFromOtherInstanceIds(instanceIds: string[]): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.updateMany(\n\t\t\t{},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tinstanceId: {\n\t\t\t\t\t\t\t$nin: instanceIds,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync removeConnectionByConnectionId(connectionId: string): ReturnType<BaseRaw<IUserSession>['updateMany']> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'connections.id': connectionId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\tconnections: {\n\t\t\t\t\t\tid: connectionId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindByInstanceId(instanceId: string): FindCursor<IUserSession> {\n\t\treturn this.find({\n\t\t\t'connections.instanceId': instanceId,\n\t\t});\n\t}\n\n\taddConnectionById(\n\t\tuserId: string,\n\t\t{ id, instanceId, status }: Pick<IUserSessionConnection, 'id' | 'instanceId' | 'status'>,\n\t): ReturnType<BaseRaw<IUserSession>['updateOne']> {\n\t\tconst now = new Date();\n\n\t\tconst update = {\n\t\t\t$push: {\n\t\t\t\tconnections: {\n\t\t\t\t\tid,\n\t\t\t\t\tinstanceId,\n\t\t\t\t\tstatus,\n\t\t\t\t\t_createdAt: now,\n\t\t\t\t\t_updatedAt: now,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id: userId }, update, { upsert: true });\n\t}\n\n\tfindByOtherInstanceIds(instanceIds: string[], options?: FindOptions<IUserSession>): FindCursor<IUserSession> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\t'connections.instanceId': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t\t$nin: instanceIds,\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"b69aa75b47c27fa82ae4590a7fd741a01df68d7a"}
