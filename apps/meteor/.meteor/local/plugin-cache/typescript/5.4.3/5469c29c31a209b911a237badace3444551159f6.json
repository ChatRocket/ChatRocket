{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/RecordConverter.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer/server/classes/converters/RecordConverter.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/RecordConverter.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/converters/RecordConverter.ts","sourceRoot":"","sources":["app/importer/server/classes/converters/RecordConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImportRecord } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { ImportData } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { type FindCursor, ObjectId } from 'mongodb';\n\nimport { ConverterCache } from './ConverterCache';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\n\nexport type RecordConverterOptions = {\n\tworkInMemory?: boolean;\n\tdeleteDbData?: boolean;\n};\n\nexport class RecordConverter<R extends IImportRecord, T extends RecordConverterOptions = RecordConverterOptions> {\n\tprotected _logger: Logger;\n\n\tprotected _cache: ConverterCache;\n\n\tprotected _converterOptions: RecordConverterOptions;\n\n\tprotected _options: Omit<T, keyof RecordConverterOptions>;\n\n\tprotected _records: R[];\n\n\tprotected skippedCount = 0;\n\n\tprotected failedCount = 0;\n\n\tpublic aborted = false;\n\n\tconstructor(options?: T, logger?: Logger, cache?: ConverterCache) {\n\t\tconst { workInMemory = false, deleteDbData = false, ...customOptions } = options || ({} as T);\n\t\tthis._converterOptions = {\n\t\t\tworkInMemory,\n\t\t\tdeleteDbData,\n\t\t};\n\t\tthis._options = customOptions;\n\n\t\tthis._logger = logger || new Logger(`Data Importer - ${this.constructor.name}`);\n\t\tthis._cache = cache || new ConverterCache();\n\t\tthis._records = [];\n\t}\n\n\tprivate skipMemoryRecord(_id: string): void {\n\t\tconst record = this.getMemoryRecordById(_id);\n\t\tif (!record) {\n\t\t\treturn;\n\t\t}\n\n\t\trecord.skipped = true;\n\t}\n\n\tprivate async skipDatabaseRecord(_id: string): Promise<void> {\n\t\tawait ImportData.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tskipped: true,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected async skipRecord(_id: string): Promise<void> {\n\t\tthis.skippedCount++;\n\t\tthis.skipMemoryRecord(_id);\n\t\tif (!this._converterOptions.workInMemory) {\n\t\t\treturn this.skipDatabaseRecord(_id);\n\t\t}\n\t}\n\n\tprivate saveErrorToMemory(importId: string, error: Error): void {\n\t\tconst record = this.getMemoryRecordById(importId);\n\n\t\tif (!record) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!record.errors) {\n\t\t\trecord.errors = [];\n\t\t}\n\n\t\trecord.errors.push({\n\t\t\tmessage: error.message,\n\t\t\tstack: error.stack,\n\t\t});\n\t}\n\n\tprivate async saveErrorToDatabase(importId: string, error: Error): Promise<void> {\n\t\tawait ImportData.updateOne(\n\t\t\t{\n\t\t\t\t_id: importId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$push: {\n\t\t\t\t\terrors: {\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\tstack: error.stack,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected async saveError(importId: string, error: Error): Promise<void> {\n\t\tthis._logger.error(error);\n\t\tthis.saveErrorToMemory(importId, error);\n\n\t\tif (!this._converterOptions.workInMemory) {\n\t\t\treturn this.saveErrorToDatabase(importId, error);\n\t\t}\n\t}\n\n\tpublic async clearImportData(): Promise<void> {\n\t\tthis._records = [];\n\n\t\t// On regular import operations this data will be deleted by the importer class with one single operation for all dataTypes (aka with no filter)\n\t\tif (!this._converterOptions.workInMemory && this._converterOptions.deleteDbData) {\n\t\t\tawait ImportData.col.deleteMany({ dataType: this.getDataType() });\n\t\t}\n\t}\n\n\tpublic async clearSuccessfullyImportedData(): Promise<void> {\n\t\tthis._records = this._records.filter((record) => !record.errors?.length);\n\n\t\t// On regular import operations this data will be deleted by the importer class with one single operation for all dataTypes (aka with no filter)\n\t\tif (!this._converterOptions.workInMemory && this._converterOptions.deleteDbData) {\n\t\t\tawait ImportData.col.deleteMany({ dataType: this.getDataType(), error: { $exists: false } });\n\t\t}\n\t}\n\n\tprivate getMemoryRecordById(id: string): R | undefined {\n\t\tfor (const record of this._records) {\n\t\t\tif (record._id === id) {\n\t\t\t\treturn record;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected getDataType(): R['dataType'] {\n\t\tthrow new Error('Unspecified type');\n\t}\n\n\tprotected async addObjectToDatabase(data: R['data'], options: R['options'] = {}): Promise<void> {\n\t\tawait ImportData.col.insertOne({\n\t\t\t_id: new ObjectId().toHexString(),\n\t\t\tdata,\n\t\t\tdataType: this.getDataType(),\n\t\t\toptions,\n\t\t});\n\t}\n\n\tpublic addObjectToMemory(data: R['data'], options: R['options'] = {}): void {\n\t\tthis._records.push({\n\t\t\t_id: Random.id(),\n\t\t\tdata,\n\t\t\tdataType: this.getDataType(),\n\t\t\toptions,\n\t\t} as R);\n\t}\n\n\tpublic async addObject(data: R['data'], options: R['options'] = {}): Promise<void> {\n\t\tif (this._converterOptions.workInMemory) {\n\t\t\treturn this.addObjectToMemory(data, options);\n\t\t}\n\n\t\treturn this.addObjectToDatabase(data, options);\n\t}\n\n\tprotected getDatabaseDataToImport(): Promise<R[]> {\n\t\treturn (ImportData.find({ dataType: this.getDataType() }) as FindCursor<R>).toArray();\n\t}\n\n\tprotected async getDataToImport(): Promise<R[]> {\n\t\tif (this._converterOptions.workInMemory) {\n\t\t\treturn this._records;\n\t\t}\n\n\t\tconst dbRecords = await this.getDatabaseDataToImport();\n\t\tif (this._records.length) {\n\t\t\treturn [...this._records, ...dbRecords];\n\t\t}\n\n\t\treturn dbRecords;\n\t}\n\n\tprotected async iterateRecords({\n\t\tbeforeImportFn,\n\t\tafterImportFn,\n\t\tonErrorFn,\n\t\tprocessRecord,\n\t}: IConversionCallbacks & { processRecord?: (record: R) => Promise<boolean | undefined> } = {}): Promise<void> {\n\t\tconst records = await this.getDataToImport();\n\n\t\tthis.skippedCount = 0;\n\t\tthis.failedCount = 0;\n\n\t\tfor await (const record of records) {\n\t\t\tconst { _id } = record;\n\t\t\tif (this.aborted) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (beforeImportFn && !(await beforeImportFn(record))) {\n\t\t\t\t\tawait this.skipRecord(_id);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst isNew = await (processRecord || this.convertRecord).call(this, record);\n\n\t\t\t\tif (typeof isNew === 'boolean' && afterImportFn) {\n\t\t\t\t\tawait afterImportFn(record, isNew);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.failedCount++;\n\t\t\t\tawait this.saveError(_id, e instanceof Error ? e : new Error(String(e)));\n\t\t\t\tif (onErrorFn) {\n\t\t\t\t\tawait onErrorFn();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync convertData(callbacks: IConversionCallbacks = {}): Promise<void> {\n\t\treturn this.iterateRecords(callbacks);\n\t}\n\n\tprotected async convertRecord(_record: R): Promise<boolean | undefined> {\n\t\treturn undefined;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/RecordConverter.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer/server/classes/converters/RecordConverter.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/converters/RecordConverter.ts","sourceRoot":"","sources":["app/importer/server/classes/converters/RecordConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImportRecord } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { ImportData } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { type FindCursor, ObjectId } from 'mongodb';\n\nimport { ConverterCache } from './ConverterCache';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\n\nexport type RecordConverterOptions = {\n\tworkInMemory?: boolean;\n\tdeleteDbData?: boolean;\n};\n\nexport class RecordConverter<R extends IImportRecord, T extends RecordConverterOptions = RecordConverterOptions> {\n\tprotected _logger: Logger;\n\n\tprotected _cache: ConverterCache;\n\n\tprotected _converterOptions: RecordConverterOptions;\n\n\tprotected _options: Omit<T, keyof RecordConverterOptions>;\n\n\tprotected _records: R[];\n\n\tprotected skippedCount = 0;\n\n\tprotected failedCount = 0;\n\n\tpublic aborted = false;\n\n\tconstructor(options?: T, logger?: Logger, cache?: ConverterCache) {\n\t\tconst { workInMemory = false, deleteDbData = false, ...customOptions } = options || ({} as T);\n\t\tthis._converterOptions = {\n\t\t\tworkInMemory,\n\t\t\tdeleteDbData,\n\t\t};\n\t\tthis._options = customOptions;\n\n\t\tthis._logger = logger || new Logger(`Data Importer - ${this.constructor.name}`);\n\t\tthis._cache = cache || new ConverterCache();\n\t\tthis._records = [];\n\t}\n\n\tprivate skipMemoryRecord(_id: string): void {\n\t\tconst record = this.getMemoryRecordById(_id);\n\t\tif (!record) {\n\t\t\treturn;\n\t\t}\n\n\t\trecord.skipped = true;\n\t}\n\n\tprivate async skipDatabaseRecord(_id: string): Promise<void> {\n\t\tawait ImportData.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tskipped: true,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected async skipRecord(_id: string): Promise<void> {\n\t\tthis.skippedCount++;\n\t\tthis.skipMemoryRecord(_id);\n\t\tif (!this._converterOptions.workInMemory) {\n\t\t\treturn this.skipDatabaseRecord(_id);\n\t\t}\n\t}\n\n\tprivate saveErrorToMemory(importId: string, error: Error): void {\n\t\tconst record = this.getMemoryRecordById(importId);\n\n\t\tif (!record) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!record.errors) {\n\t\t\trecord.errors = [];\n\t\t}\n\n\t\trecord.errors.push({\n\t\t\tmessage: error.message,\n\t\t\tstack: error.stack,\n\t\t});\n\t}\n\n\tprivate async saveErrorToDatabase(importId: string, error: Error): Promise<void> {\n\t\tawait ImportData.updateOne(\n\t\t\t{\n\t\t\t\t_id: importId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$push: {\n\t\t\t\t\terrors: {\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\tstack: error.stack,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected async saveError(importId: string, error: Error): Promise<void> {\n\t\tthis._logger.error(error);\n\t\tthis.saveErrorToMemory(importId, error);\n\n\t\tif (!this._converterOptions.workInMemory) {\n\t\t\treturn this.saveErrorToDatabase(importId, error);\n\t\t}\n\t}\n\n\tpublic async clearImportData(): Promise<void> {\n\t\tthis._records = [];\n\n\t\t// On regular import operations this data will be deleted by the importer class with one single operation for all dataTypes (aka with no filter)\n\t\tif (!this._converterOptions.workInMemory && this._converterOptions.deleteDbData) {\n\t\t\tawait ImportData.col.deleteMany({ dataType: this.getDataType() });\n\t\t}\n\t}\n\n\tpublic async clearSuccessfullyImportedData(): Promise<void> {\n\t\tthis._records = this._records.filter((record) => !record.errors?.length);\n\n\t\t// On regular import operations this data will be deleted by the importer class with one single operation for all dataTypes (aka with no filter)\n\t\tif (!this._converterOptions.workInMemory && this._converterOptions.deleteDbData) {\n\t\t\tawait ImportData.col.deleteMany({ dataType: this.getDataType(), error: { $exists: false } });\n\t\t}\n\t}\n\n\tprivate getMemoryRecordById(id: string): R | undefined {\n\t\tfor (const record of this._records) {\n\t\t\tif (record._id === id) {\n\t\t\t\treturn record;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected getDataType(): R['dataType'] {\n\t\tthrow new Error('Unspecified type');\n\t}\n\n\tprotected async addObjectToDatabase(data: R['data'], options: R['options'] = {}): Promise<void> {\n\t\tawait ImportData.col.insertOne({\n\t\t\t_id: new ObjectId().toHexString(),\n\t\t\tdata,\n\t\t\tdataType: this.getDataType(),\n\t\t\toptions,\n\t\t});\n\t}\n\n\tpublic addObjectToMemory(data: R['data'], options: R['options'] = {}): void {\n\t\tthis._records.push({\n\t\t\t_id: Random.id(),\n\t\t\tdata,\n\t\t\tdataType: this.getDataType(),\n\t\t\toptions,\n\t\t} as R);\n\t}\n\n\tpublic async addObject(data: R['data'], options: R['options'] = {}): Promise<void> {\n\t\tif (this._converterOptions.workInMemory) {\n\t\t\treturn this.addObjectToMemory(data, options);\n\t\t}\n\n\t\treturn this.addObjectToDatabase(data, options);\n\t}\n\n\tprotected getDatabaseDataToImport(): Promise<R[]> {\n\t\treturn (ImportData.find({ dataType: this.getDataType() }) as FindCursor<R>).toArray();\n\t}\n\n\tprotected async getDataToImport(): Promise<R[]> {\n\t\tif (this._converterOptions.workInMemory) {\n\t\t\treturn this._records;\n\t\t}\n\n\t\tconst dbRecords = await this.getDatabaseDataToImport();\n\t\tif (this._records.length) {\n\t\t\treturn [...this._records, ...dbRecords];\n\t\t}\n\n\t\treturn dbRecords;\n\t}\n\n\tprotected async iterateRecords({\n\t\tbeforeImportFn,\n\t\tafterImportFn,\n\t\tonErrorFn,\n\t\tprocessRecord,\n\t}: IConversionCallbacks & { processRecord?: (record: R) => Promise<boolean | undefined> } = {}): Promise<void> {\n\t\tconst records = await this.getDataToImport();\n\n\t\tthis.skippedCount = 0;\n\t\tthis.failedCount = 0;\n\n\t\tfor await (const record of records) {\n\t\t\tconst { _id } = record;\n\t\t\tif (this.aborted) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (beforeImportFn && !(await beforeImportFn(record))) {\n\t\t\t\t\tawait this.skipRecord(_id);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst isNew = await (processRecord || this.convertRecord).call(this, record);\n\n\t\t\t\tif (typeof isNew === 'boolean' && afterImportFn) {\n\t\t\t\t\tawait afterImportFn(record, isNew);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.failedCount++;\n\t\t\t\tawait this.saveError(_id, e instanceof Error ? e : new Error(String(e)));\n\t\t\t\tif (onErrorFn) {\n\t\t\t\t\tawait onErrorFn();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync convertData(callbacks: IConversionCallbacks = {}): Promise<void> {\n\t\treturn this.iterateRecords(callbacks);\n\t}\n\n\tprotected async convertRecord(_record: R): Promise<boolean | undefined> {\n\t\treturn undefined;\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    const _excluded = [\"workInMemory\", \"deleteDbData\"];\n    module.export({\n      RecordConverter: () => RecordConverter\n    });\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 0);\n    let ImportData;\n    module.link(\"@rocket.chat/models\", {\n      ImportData(v) {\n        ImportData = v;\n      }\n    }, 1);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 2);\n    let ObjectId;\n    module.link(\"mongodb\", {\n      ObjectId(v) {\n        ObjectId = v;\n      }\n    }, 3);\n    let ConverterCache;\n    module.link(\"./ConverterCache\", {\n      ConverterCache(v) {\n        ConverterCache = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class RecordConverter {\n      constructor(options, logger, cache) {\n        this._logger = void 0;\n        this._cache = void 0;\n        this._converterOptions = void 0;\n        this._options = void 0;\n        this._records = void 0;\n        this.skippedCount = 0;\n        this.failedCount = 0;\n        this.aborted = false;\n        const _ref = options || {},\n          {\n            workInMemory = false,\n            deleteDbData = false\n          } = _ref,\n          customOptions = _objectWithoutProperties(_ref, _excluded);\n        this._converterOptions = {\n          workInMemory,\n          deleteDbData\n        };\n        this._options = customOptions;\n        this._logger = logger || new Logger(\"Data Importer - \".concat(this.constructor.name));\n        this._cache = cache || new ConverterCache();\n        this._records = [];\n      }\n      skipMemoryRecord(_id) {\n        const record = this.getMemoryRecordById(_id);\n        if (!record) {\n          return;\n        }\n        record.skipped = true;\n      }\n      async skipDatabaseRecord(_id) {\n        await ImportData.updateOne({\n          _id\n        }, {\n          $set: {\n            skipped: true\n          }\n        });\n      }\n      async skipRecord(_id) {\n        this.skippedCount++;\n        this.skipMemoryRecord(_id);\n        if (!this._converterOptions.workInMemory) {\n          return this.skipDatabaseRecord(_id);\n        }\n      }\n      saveErrorToMemory(importId, error) {\n        const record = this.getMemoryRecordById(importId);\n        if (!record) {\n          return;\n        }\n        if (!record.errors) {\n          record.errors = [];\n        }\n        record.errors.push({\n          message: error.message,\n          stack: error.stack\n        });\n      }\n      async saveErrorToDatabase(importId, error) {\n        await ImportData.updateOne({\n          _id: importId\n        }, {\n          $push: {\n            errors: {\n              message: error.message,\n              stack: error.stack\n            }\n          }\n        });\n      }\n      async saveError(importId, error) {\n        this._logger.error(error);\n        this.saveErrorToMemory(importId, error);\n        if (!this._converterOptions.workInMemory) {\n          return this.saveErrorToDatabase(importId, error);\n        }\n      }\n      async clearImportData() {\n        this._records = [];\n        // On regular import operations this data will be deleted by the importer class with one single operation for all dataTypes (aka with no filter)\n        if (!this._converterOptions.workInMemory && this._converterOptions.deleteDbData) {\n          await ImportData.col.deleteMany({\n            dataType: this.getDataType()\n          });\n        }\n      }\n      async clearSuccessfullyImportedData() {\n        this._records = this._records.filter(record => {\n          var _record$errors;\n          return !((_record$errors = record.errors) !== null && _record$errors !== void 0 && _record$errors.length);\n        });\n        // On regular import operations this data will be deleted by the importer class with one single operation for all dataTypes (aka with no filter)\n        if (!this._converterOptions.workInMemory && this._converterOptions.deleteDbData) {\n          await ImportData.col.deleteMany({\n            dataType: this.getDataType(),\n            error: {\n              $exists: false\n            }\n          });\n        }\n      }\n      getMemoryRecordById(id) {\n        for (const record of this._records) {\n          if (record._id === id) {\n            return record;\n          }\n        }\n        return undefined;\n      }\n      getDataType() {\n        throw new Error('Unspecified type');\n      }\n      async addObjectToDatabase(data) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        await ImportData.col.insertOne({\n          _id: new ObjectId().toHexString(),\n          data,\n          dataType: this.getDataType(),\n          options\n        });\n      }\n      addObjectToMemory(data) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        this._records.push({\n          _id: Random.id(),\n          data,\n          dataType: this.getDataType(),\n          options\n        });\n      }\n      async addObject(data) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (this._converterOptions.workInMemory) {\n          return this.addObjectToMemory(data, options);\n        }\n        return this.addObjectToDatabase(data, options);\n      }\n      getDatabaseDataToImport() {\n        return ImportData.find({\n          dataType: this.getDataType()\n        }).toArray();\n      }\n      async getDataToImport() {\n        if (this._converterOptions.workInMemory) {\n          return this._records;\n        }\n        const dbRecords = await this.getDatabaseDataToImport();\n        if (this._records.length) {\n          return [...this._records, ...dbRecords];\n        }\n        return dbRecords;\n      }\n      async iterateRecords() {\n        let {\n          beforeImportFn,\n          afterImportFn,\n          onErrorFn,\n          processRecord\n        } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const records = await this.getDataToImport();\n        this.skippedCount = 0;\n        this.failedCount = 0;\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(records), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const record = _step.value;\n            {\n              const {\n                _id\n              } = record;\n              if (this.aborted) {\n                return;\n              }\n              try {\n                if (beforeImportFn && !(await beforeImportFn(record))) {\n                  await this.skipRecord(_id);\n                  continue;\n                }\n                const isNew = await (processRecord || this.convertRecord).call(this, record);\n                if (typeof isNew === 'boolean' && afterImportFn) {\n                  await afterImportFn(record, isNew);\n                }\n              } catch (e) {\n                this.failedCount++;\n                await this.saveError(_id, e instanceof Error ? e : new Error(String(e)));\n                if (onErrorFn) {\n                  await onErrorFn();\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      async convertData() {\n        let callbacks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this.iterateRecords(callbacks);\n      }\n      async convertRecord(_record) {\n        return undefined;\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_asyncIterator","_excluded","export","RecordConverter","Logger","ImportData","Random","ObjectId","ConverterCache","__reifyWaitForDeps__","constructor","options","logger","cache","_logger","_cache","_converterOptions","_options","_records","skippedCount","failedCount","aborted","_ref","workInMemory","deleteDbData","customOptions","concat","name","skipMemoryRecord","_id","record","getMemoryRecordById","skipped","skipDatabaseRecord","updateOne","$set","skipRecord","saveErrorToMemory","importId","error","errors","push","message","stack","saveErrorToDatabase","$push","saveError","clearImportData","col","deleteMany","dataType","getDataType","clearSuccessfullyImportedData","filter","_record$errors","length","$exists","id","undefined","Error","addObjectToDatabase","data","arguments","insertOne","toHexString","addObjectToMemory","addObject","getDatabaseDataToImport","find","toArray","getDataToImport","dbRecords","iterateRecords","beforeImportFn","afterImportFn","onErrorFn","processRecord","records","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","isNew","convertRecord","call","e","String","err","return","convertData","callbacks","_record","__reify_async_result__","_reifyError","self","async"],"sources":["app/importer/server/classes/converters/RecordConverter.ts"],"sourcesContent":["import type { IImportRecord } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { ImportData } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { type FindCursor, ObjectId } from 'mongodb';\n\nimport { ConverterCache } from './ConverterCache';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\n\nexport type RecordConverterOptions = {\n\tworkInMemory?: boolean;\n\tdeleteDbData?: boolean;\n};\n\nexport class RecordConverter<R extends IImportRecord, T extends RecordConverterOptions = RecordConverterOptions> {\n\tprotected _logger: Logger;\n\n\tprotected _cache: ConverterCache;\n\n\tprotected _converterOptions: RecordConverterOptions;\n\n\tprotected _options: Omit<T, keyof RecordConverterOptions>;\n\n\tprotected _records: R[];\n\n\tprotected skippedCount = 0;\n\n\tprotected failedCount = 0;\n\n\tpublic aborted = false;\n\n\tconstructor(options?: T, logger?: Logger, cache?: ConverterCache) {\n\t\tconst { workInMemory = false, deleteDbData = false, ...customOptions } = options || ({} as T);\n\t\tthis._converterOptions = {\n\t\t\tworkInMemory,\n\t\t\tdeleteDbData,\n\t\t};\n\t\tthis._options = customOptions;\n\n\t\tthis._logger = logger || new Logger(`Data Importer - ${this.constructor.name}`);\n\t\tthis._cache = cache || new ConverterCache();\n\t\tthis._records = [];\n\t}\n\n\tprivate skipMemoryRecord(_id: string): void {\n\t\tconst record = this.getMemoryRecordById(_id);\n\t\tif (!record) {\n\t\t\treturn;\n\t\t}\n\n\t\trecord.skipped = true;\n\t}\n\n\tprivate async skipDatabaseRecord(_id: string): Promise<void> {\n\t\tawait ImportData.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tskipped: true,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected async skipRecord(_id: string): Promise<void> {\n\t\tthis.skippedCount++;\n\t\tthis.skipMemoryRecord(_id);\n\t\tif (!this._converterOptions.workInMemory) {\n\t\t\treturn this.skipDatabaseRecord(_id);\n\t\t}\n\t}\n\n\tprivate saveErrorToMemory(importId: string, error: Error): void {\n\t\tconst record = this.getMemoryRecordById(importId);\n\n\t\tif (!record) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!record.errors) {\n\t\t\trecord.errors = [];\n\t\t}\n\n\t\trecord.errors.push({\n\t\t\tmessage: error.message,\n\t\t\tstack: error.stack,\n\t\t});\n\t}\n\n\tprivate async saveErrorToDatabase(importId: string, error: Error): Promise<void> {\n\t\tawait ImportData.updateOne(\n\t\t\t{\n\t\t\t\t_id: importId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$push: {\n\t\t\t\t\terrors: {\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\tstack: error.stack,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected async saveError(importId: string, error: Error): Promise<void> {\n\t\tthis._logger.error(error);\n\t\tthis.saveErrorToMemory(importId, error);\n\n\t\tif (!this._converterOptions.workInMemory) {\n\t\t\treturn this.saveErrorToDatabase(importId, error);\n\t\t}\n\t}\n\n\tpublic async clearImportData(): Promise<void> {\n\t\tthis._records = [];\n\n\t\t// On regular import operations this data will be deleted by the importer class with one single operation for all dataTypes (aka with no filter)\n\t\tif (!this._converterOptions.workInMemory && this._converterOptions.deleteDbData) {\n\t\t\tawait ImportData.col.deleteMany({ dataType: this.getDataType() });\n\t\t}\n\t}\n\n\tpublic async clearSuccessfullyImportedData(): Promise<void> {\n\t\tthis._records = this._records.filter((record) => !record.errors?.length);\n\n\t\t// On regular import operations this data will be deleted by the importer class with one single operation for all dataTypes (aka with no filter)\n\t\tif (!this._converterOptions.workInMemory && this._converterOptions.deleteDbData) {\n\t\t\tawait ImportData.col.deleteMany({ dataType: this.getDataType(), error: { $exists: false } });\n\t\t}\n\t}\n\n\tprivate getMemoryRecordById(id: string): R | undefined {\n\t\tfor (const record of this._records) {\n\t\t\tif (record._id === id) {\n\t\t\t\treturn record;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected getDataType(): R['dataType'] {\n\t\tthrow new Error('Unspecified type');\n\t}\n\n\tprotected async addObjectToDatabase(data: R['data'], options: R['options'] = {}): Promise<void> {\n\t\tawait ImportData.col.insertOne({\n\t\t\t_id: new ObjectId().toHexString(),\n\t\t\tdata,\n\t\t\tdataType: this.getDataType(),\n\t\t\toptions,\n\t\t});\n\t}\n\n\tpublic addObjectToMemory(data: R['data'], options: R['options'] = {}): void {\n\t\tthis._records.push({\n\t\t\t_id: Random.id(),\n\t\t\tdata,\n\t\t\tdataType: this.getDataType(),\n\t\t\toptions,\n\t\t} as R);\n\t}\n\n\tpublic async addObject(data: R['data'], options: R['options'] = {}): Promise<void> {\n\t\tif (this._converterOptions.workInMemory) {\n\t\t\treturn this.addObjectToMemory(data, options);\n\t\t}\n\n\t\treturn this.addObjectToDatabase(data, options);\n\t}\n\n\tprotected getDatabaseDataToImport(): Promise<R[]> {\n\t\treturn (ImportData.find({ dataType: this.getDataType() }) as FindCursor<R>).toArray();\n\t}\n\n\tprotected async getDataToImport(): Promise<R[]> {\n\t\tif (this._converterOptions.workInMemory) {\n\t\t\treturn this._records;\n\t\t}\n\n\t\tconst dbRecords = await this.getDatabaseDataToImport();\n\t\tif (this._records.length) {\n\t\t\treturn [...this._records, ...dbRecords];\n\t\t}\n\n\t\treturn dbRecords;\n\t}\n\n\tprotected async iterateRecords({\n\t\tbeforeImportFn,\n\t\tafterImportFn,\n\t\tonErrorFn,\n\t\tprocessRecord,\n\t}: IConversionCallbacks & { processRecord?: (record: R) => Promise<boolean | undefined> } = {}): Promise<void> {\n\t\tconst records = await this.getDataToImport();\n\n\t\tthis.skippedCount = 0;\n\t\tthis.failedCount = 0;\n\n\t\tfor await (const record of records) {\n\t\t\tconst { _id } = record;\n\t\t\tif (this.aborted) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (beforeImportFn && !(await beforeImportFn(record))) {\n\t\t\t\t\tawait this.skipRecord(_id);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst isNew = await (processRecord || this.convertRecord).call(this, record);\n\n\t\t\t\tif (typeof isNew === 'boolean' && afterImportFn) {\n\t\t\t\t\tawait afterImportFn(record, isNew);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.failedCount++;\n\t\t\t\tawait this.saveError(_id, e instanceof Error ? e : new Error(String(e)));\n\t\t\t\tif (onErrorFn) {\n\t\t\t\t\tawait onErrorFn();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync convertData(callbacks: IConversionCallbacks = {}): Promise<void> {\n\t\treturn this.iterateRecords(callbacks);\n\t}\n\n\tprotected async convertRecord(_record: R): Promise<boolean | undefined> {\n\t\treturn undefined;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"5469c29c31a209b911a237badace3444551159f6"}
