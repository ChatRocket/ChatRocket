{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/converters/transformMappedData.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/converters/transformMappedData.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/converters/transformMappedData.ts","inputSourceMap":{"version":3,"file":"app/apps/server/converters/transformMappedData.ts","sourceRoot":"","sources":["app/apps/server/converters/transformMappedData.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,kBAAkB,CAAC;AAEzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4DG;AAEH,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAcvC,IAAc,EACd,GAAY,EACyD,EAAE;IACvE,MAAM,YAAY,GAAa,SAAS,CAAC,IAAI,CAAC,CAAC;IAC/C,MAAM,eAAe,GAAwB,EAAE,CAAC;IAEhD,IAAI,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;QACpD,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE,CAAC;YAChC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,CAAC;YAExC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;gBACnC,eAAe,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;YAC9B,CAAC;QACF,CAAC;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;YACrC,IAAI,OAAO,YAAY,CAAC,IAAI,CAAC,KAAK,WAAW,EAAE,CAAC;gBAC/C,eAAe,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;YAC1C,CAAC;YACD,OAAO,YAAY,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;IACF,CAAC;IAED,OAAO;QACN,GAAI,eAA8B;QAClC,oBAAoB,EAAE,YAA6C;KACnE,CAAC;AACH,CAAC,CAAC","sourcesContent":["import cloneDeep from 'lodash.clonedeep';\n\n/**\n * Transforms a `data` source object to another object,\n * essentially applying a to -> from mapping provided by\n * `map`. It does not mutate the `data` object.\n *\n * It also inserts in the `transformedObject` a new property\n * called `_unmappedProperties_` which contains properties from\n * the original `data` that have not been mapped to its transformed\n * counterpart. E.g.:\n *\n * ```javascript\n * const data = { _id: 'abcde123456', size: 10 };\n * const map = Object.freeze({ id: '_id' });\n *\n * transformMappedData(data, map);\n * // { id: 'abcde123456', _unmappedProperties_: { size: 10 } }\n * ```\n *\n * In order to compute the unmapped properties, this function will\n * ignore any property on `data` that has been named on the \"from\" part\n * of the `map`, and will consider properties not mentioned as unmapped.\n *\n * You can also define the \"from\" part as a function, so you can derive a\n * new value for your property from the original `data`. This function will\n * receive a copy of the original `data` for it to calculate the value\n * for its \"to\" field. Please note that in this case `transformMappedData`\n * will not be able to determine the source field from your map, so it won't\n * ignore any field you've used to derive your new value. For that, you're\n * going to need to delete the value from the received parameter. E.g:\n *\n * ```javascript\n * const data = { _id: 'abcde123456', size: 10 };\n *\n * // It will look like the `size` property is not mapped\n * const map = {\n *     id: '_id',\n *     newSize: (data) => data.size + 10\n * };\n *\n * transformMappedData(data, map);\n * // { id: 'abcde123456', newSize: 20, _unmappedProperties_: { size: 10 } }\n *\n * // You need to explicitly remove it from the original `data`\n * const map = Object.freeze({\n *     id: '_id',\n *     newSize: (data) => {\n *         const result = data.size + 10;\n *         delete data.size;\n *         return result;\n *     }\n * });\n *\n * transformMappedData(data, map);\n * // { id: 'abcde123456', newSize: 20, _unmappedProperties_: {} }\n * ```\n *\n * @param Object data The data to be transformed\n * @param Object map The map with transformations to be applied\n *\n * @returns Object The data after transformations have been applied\n */\n\nexport const transformMappedData = async <\n\tResultType extends {\n\t\t-readonly [p in keyof MapType]: MapType[p] extends keyof DataType\n\t\t\t? DataType[MapType[p]]\n\t\t\t: MapType[p] extends (...args: any[]) => any\n\t\t\t\t? Awaited<ReturnType<MapType[p]>>\n\t\t\t\t: never;\n\t},\n\tDataType extends Record<string, any>,\n\tMapType extends { [p in string]: string | ((data: DataType) => Promise<unknown>) | ((data: DataType) => unknown) },\n\tUnmappedProperties extends {\n\t\t[p in keyof DataType as Exclude<p, MapType[keyof MapType]>]: DataType[p];\n\t},\n>(\n\tdata: DataType,\n\tmap: MapType,\n): Promise<ResultType & { _unmappedProperties_: UnmappedProperties }> => {\n\tconst originalData: DataType = cloneDeep(data);\n\tconst transformedData: Record<string, any> = {};\n\n\tfor await (const [to, from] of Object.entries(map)) {\n\t\tif (typeof from === 'function') {\n\t\t\tconst result = await from(originalData);\n\n\t\t\tif (typeof result !== 'undefined') {\n\t\t\t\ttransformedData[to] = result;\n\t\t\t}\n\t\t} else if (typeof from === 'string') {\n\t\t\tif (typeof originalData[from] !== 'undefined') {\n\t\t\t\ttransformedData[to] = originalData[from];\n\t\t\t}\n\t\t\tdelete originalData[from];\n\t\t}\n\t}\n\n\treturn {\n\t\t...(transformedData as ResultType),\n\t\t_unmappedProperties_: originalData as unknown as UnmappedProperties,\n\t};\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/converters/transformMappedData.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/converters/transformMappedData.ts","inputSourceMap":{"version":3,"file":"app/apps/server/converters/transformMappedData.ts","sourceRoot":"","sources":["app/apps/server/converters/transformMappedData.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,kBAAkB,CAAC;AAEzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4DG;AAEH,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAcvC,IAAc,EACd,GAAY,EACyD,EAAE;IACvE,MAAM,YAAY,GAAa,SAAS,CAAC,IAAI,CAAC,CAAC;IAC/C,MAAM,eAAe,GAAwB,EAAE,CAAC;IAEhD,IAAI,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;QACpD,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE,CAAC;YAChC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,CAAC;YAExC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;gBACnC,eAAe,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;YAC9B,CAAC;QACF,CAAC;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;YACrC,IAAI,OAAO,YAAY,CAAC,IAAI,CAAC,KAAK,WAAW,EAAE,CAAC;gBAC/C,eAAe,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;YAC1C,CAAC;YACD,OAAO,YAAY,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;IACF,CAAC;IAED,OAAO;QACN,GAAI,eAA8B;QAClC,oBAAoB,EAAE,YAA6C;KACnE,CAAC;AACH,CAAC,CAAC","sourcesContent":["import cloneDeep from 'lodash.clonedeep';\n\n/**\n * Transforms a `data` source object to another object,\n * essentially applying a to -> from mapping provided by\n * `map`. It does not mutate the `data` object.\n *\n * It also inserts in the `transformedObject` a new property\n * called `_unmappedProperties_` which contains properties from\n * the original `data` that have not been mapped to its transformed\n * counterpart. E.g.:\n *\n * ```javascript\n * const data = { _id: 'abcde123456', size: 10 };\n * const map = Object.freeze({ id: '_id' });\n *\n * transformMappedData(data, map);\n * // { id: 'abcde123456', _unmappedProperties_: { size: 10 } }\n * ```\n *\n * In order to compute the unmapped properties, this function will\n * ignore any property on `data` that has been named on the \"from\" part\n * of the `map`, and will consider properties not mentioned as unmapped.\n *\n * You can also define the \"from\" part as a function, so you can derive a\n * new value for your property from the original `data`. This function will\n * receive a copy of the original `data` for it to calculate the value\n * for its \"to\" field. Please note that in this case `transformMappedData`\n * will not be able to determine the source field from your map, so it won't\n * ignore any field you've used to derive your new value. For that, you're\n * going to need to delete the value from the received parameter. E.g:\n *\n * ```javascript\n * const data = { _id: 'abcde123456', size: 10 };\n *\n * // It will look like the `size` property is not mapped\n * const map = {\n *     id: '_id',\n *     newSize: (data) => data.size + 10\n * };\n *\n * transformMappedData(data, map);\n * // { id: 'abcde123456', newSize: 20, _unmappedProperties_: { size: 10 } }\n *\n * // You need to explicitly remove it from the original `data`\n * const map = Object.freeze({\n *     id: '_id',\n *     newSize: (data) => {\n *         const result = data.size + 10;\n *         delete data.size;\n *         return result;\n *     }\n * });\n *\n * transformMappedData(data, map);\n * // { id: 'abcde123456', newSize: 20, _unmappedProperties_: {} }\n * ```\n *\n * @param Object data The data to be transformed\n * @param Object map The map with transformations to be applied\n *\n * @returns Object The data after transformations have been applied\n */\n\nexport const transformMappedData = async <\n\tResultType extends {\n\t\t-readonly [p in keyof MapType]: MapType[p] extends keyof DataType\n\t\t\t? DataType[MapType[p]]\n\t\t\t: MapType[p] extends (...args: any[]) => any\n\t\t\t\t? Awaited<ReturnType<MapType[p]>>\n\t\t\t\t: never;\n\t},\n\tDataType extends Record<string, any>,\n\tMapType extends { [p in string]: string | ((data: DataType) => Promise<unknown>) | ((data: DataType) => unknown) },\n\tUnmappedProperties extends {\n\t\t[p in keyof DataType as Exclude<p, MapType[keyof MapType]>]: DataType[p];\n\t},\n>(\n\tdata: DataType,\n\tmap: MapType,\n): Promise<ResultType & { _unmappedProperties_: UnmappedProperties }> => {\n\tconst originalData: DataType = cloneDeep(data);\n\tconst transformedData: Record<string, any> = {};\n\n\tfor await (const [to, from] of Object.entries(map)) {\n\t\tif (typeof from === 'function') {\n\t\t\tconst result = await from(originalData);\n\n\t\t\tif (typeof result !== 'undefined') {\n\t\t\t\ttransformedData[to] = result;\n\t\t\t}\n\t\t} else if (typeof from === 'string') {\n\t\t\tif (typeof originalData[from] !== 'undefined') {\n\t\t\t\ttransformedData[to] = originalData[from];\n\t\t\t}\n\t\t\tdelete originalData[from];\n\t\t}\n\t}\n\n\treturn {\n\t\t...(transformedData as ResultType),\n\t\t_unmappedProperties_: originalData as unknown as UnmappedProperties,\n\t};\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      transformMappedData: () => transformMappedData\n    });\n    let cloneDeep;\n    module.link(\"lodash.clonedeep\", {\n      default(v) {\n        cloneDeep = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const transformMappedData = async (data, map) => {\n      const originalData = cloneDeep(data);\n      const transformedData = {};\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(Object.entries(map)), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const [to, from] = _step.value;\n          {\n            if (typeof from === 'function') {\n              const result = await from(originalData);\n              if (typeof result !== 'undefined') {\n                transformedData[to] = result;\n              }\n            } else if (typeof from === 'string') {\n              if (typeof originalData[from] !== 'undefined') {\n                transformedData[to] = originalData[from];\n              }\n              delete originalData[from];\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      return _objectSpread(_objectSpread({}, transformedData), {}, {\n        _unmappedProperties_: originalData\n      });\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","transformMappedData","cloneDeep","__reifyWaitForDeps__","data","map","originalData","transformedData","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","Object","entries","_step","next","done","to","from","value","result","err","return","_unmappedProperties_","__reify_async_result__","_reifyError","self","async"],"sources":["app/apps/server/converters/transformMappedData.ts"],"sourcesContent":["import cloneDeep from 'lodash.clonedeep';\n\n/**\n * Transforms a `data` source object to another object,\n * essentially applying a to -> from mapping provided by\n * `map`. It does not mutate the `data` object.\n *\n * It also inserts in the `transformedObject` a new property\n * called `_unmappedProperties_` which contains properties from\n * the original `data` that have not been mapped to its transformed\n * counterpart. E.g.:\n *\n * ```javascript\n * const data = { _id: 'abcde123456', size: 10 };\n * const map = Object.freeze({ id: '_id' });\n *\n * transformMappedData(data, map);\n * // { id: 'abcde123456', _unmappedProperties_: { size: 10 } }\n * ```\n *\n * In order to compute the unmapped properties, this function will\n * ignore any property on `data` that has been named on the \"from\" part\n * of the `map`, and will consider properties not mentioned as unmapped.\n *\n * You can also define the \"from\" part as a function, so you can derive a\n * new value for your property from the original `data`. This function will\n * receive a copy of the original `data` for it to calculate the value\n * for its \"to\" field. Please note that in this case `transformMappedData`\n * will not be able to determine the source field from your map, so it won't\n * ignore any field you've used to derive your new value. For that, you're\n * going to need to delete the value from the received parameter. E.g:\n *\n * ```javascript\n * const data = { _id: 'abcde123456', size: 10 };\n *\n * // It will look like the `size` property is not mapped\n * const map = {\n *     id: '_id',\n *     newSize: (data) => data.size + 10\n * };\n *\n * transformMappedData(data, map);\n * // { id: 'abcde123456', newSize: 20, _unmappedProperties_: { size: 10 } }\n *\n * // You need to explicitly remove it from the original `data`\n * const map = Object.freeze({\n *     id: '_id',\n *     newSize: (data) => {\n *         const result = data.size + 10;\n *         delete data.size;\n *         return result;\n *     }\n * });\n *\n * transformMappedData(data, map);\n * // { id: 'abcde123456', newSize: 20, _unmappedProperties_: {} }\n * ```\n *\n * @param Object data The data to be transformed\n * @param Object map The map with transformations to be applied\n *\n * @returns Object The data after transformations have been applied\n */\n\nexport const transformMappedData = async <\n\tResultType extends {\n\t\t-readonly [p in keyof MapType]: MapType[p] extends keyof DataType\n\t\t\t? DataType[MapType[p]]\n\t\t\t: MapType[p] extends (...args: any[]) => any\n\t\t\t\t? Awaited<ReturnType<MapType[p]>>\n\t\t\t\t: never;\n\t},\n\tDataType extends Record<string, any>,\n\tMapType extends { [p in string]: string | ((data: DataType) => Promise<unknown>) | ((data: DataType) => unknown) },\n\tUnmappedProperties extends {\n\t\t[p in keyof DataType as Exclude<p, MapType[keyof MapType]>]: DataType[p];\n\t},\n>(\n\tdata: DataType,\n\tmap: MapType,\n): Promise<ResultType & { _unmappedProperties_: UnmappedProperties }> => {\n\tconst originalData: DataType = cloneDeep(data);\n\tconst transformedData: Record<string, any> = {};\n\n\tfor await (const [to, from] of Object.entries(map)) {\n\t\tif (typeof from === 'function') {\n\t\t\tconst result = await from(originalData);\n\n\t\t\tif (typeof result !== 'undefined') {\n\t\t\t\ttransformedData[to] = result;\n\t\t\t}\n\t\t} else if (typeof from === 'string') {\n\t\t\tif (typeof originalData[from] !== 'undefined') {\n\t\t\t\ttransformedData[to] = originalData[from];\n\t\t\t}\n\t\t\tdelete originalData[from];\n\t\t}\n\t}\n\n\treturn {\n\t\t...(transformedData as ResultType),\n\t\t_unmappedProperties_: originalData as unknown as UnmappedProperties,\n\t};\n};\n"],"mappings":";;;IAAA,IAAAA,aAAgB;IAAAC,MAAM,CAAAC,IAAA,uCAAmB;MAAAC,QAAAC,CAAA;QAAAJ,aAAA,GAAAI,CAAA;MAAA;IAAA;IAAA,IAAAC,cAAA;IAAAJ,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAC,cAAA,GAAAD,CAAA;MAAA;IAAA;IAAzCH,MAAA,CAAOK,MAAA;MAAAC,mBAAe,EAAAA,CAAA,KAAAA;IAAmB;IAAA,IAAAC,SAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAI,SAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,oBAAA,WAAAA,oBAAA;IAgElC,MAAMF,mBAAmB,GAAG,MAAAA,CAclCG,IAAc,EACdC,GAAY,KAC2D;MACvE,MAAMC,YAAY,GAAaJ,SAAS,CAACE,IAAI,CAAC;MAC9C,MAAMG,eAAe,GAAwB,EAAE;MAAC,IAAAC,yBAAA;MAAA,IAAAC,iBAAA;MAAA,IAAAC,cAAA;MAAA;QAEhD,SAAAC,SAAA,GAAAZ,cAAA,CAA+Ba,MAAM,CAACC,OAAO,CAACR,GAAG,CAAC,GAAAS,KAAA,EAAAN,yBAAA,KAAAM,KAAA,SAAAH,SAAA,CAAAI,IAAA,IAAAC,IAAA,EAAAR,yBAAA,UAAE;UAAA,MAAnC,CAACS,EAAE,EAAEC,IAAI,CAAC,GAAAJ,KAAA,CAAAK,KAAA;UAAA;YAC1B,IAAI,OAAOD,IAAI,KAAK,UAAU,EAAE;cAC/B,MAAME,MAAM,GAAG,MAAMF,IAAI,CAACZ,YAAY,CAAC;cAEvC,IAAI,OAAOc,MAAM,KAAK,WAAW,EAAE;gBAClCb,eAAe,CAACU,EAAE,CAAC,GAAGG,MAAM;cAC7B;YACD,CAAC,MAAM,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;cACpC,IAAI,OAAOZ,YAAY,CAACY,IAAI,CAAC,KAAK,WAAW,EAAE;gBAC9CX,eAAe,CAACU,EAAE,CAAC,GAAGX,YAAY,CAACY,IAAI,CAAC;cACzC;cACA,OAAOZ,YAAY,CAACY,IAAI,CAAC;YAC1B;UAAC;QACF;MAAC,SAAAG,GAAA;QAAAZ,iBAAA;QAAAC,cAAA,GAAAW,GAAA;MAAA;QAAA;UAAA,IAAAb,yBAAA,IAAAG,SAAA,CAAAW,MAAA;YAAA,MAAAX,SAAA,CAAAW,MAAA;UAAA;QAAA;UAAA,IAAAb,iBAAA;YAAA,MAAAC,cAAA;UAAA;QAAA;MAAA;MAED,OAAAhB,aAAA,CAAAA,aAAA,KACKa,eAA8B;QAClCgB,oBAAoB,EAAEjB;MAA6C;IAErE,CAAC;IAACkB,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"7c9c945aff37d5d6ba01531e774c7ef98b02cfa4"}
