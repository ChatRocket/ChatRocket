{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/ldap/Manager.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/lib/ldap/Manager.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/ldap/Manager.ts","inputSourceMap":{"version":3,"file":"ee/server/lib/ldap/Manager.ts","sourceRoot":"","sources":["ee/server/lib/ldap/Manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Team } from '@rocket.chat/core-services';\nimport type { ILDAPEntry, IUser, IRoom, IRole, IImportUser, IImportRecord } from '@rocket.chat/core-typings';\nimport { Users, Roles, Subscriptions as SubscriptionsRaw, Rooms } from '@rocket.chat/models';\nimport type ldapjs from 'ldapjs';\n\nimport type {\n\tImporterAfterImportCallback,\n\tImporterBeforeImportCallback,\n} from '../../../../app/importer/server/definitions/IConversionCallbacks';\nimport { addUserToRoom } from '../../../../app/lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../../app/lib/server/functions/createRoom';\nimport { removeUserFromRoom } from '../../../../app/lib/server/functions/removeUserFromRoom';\nimport { setUserActiveStatus } from '../../../../app/lib/server/functions/setUserActiveStatus';\nimport { settings } from '../../../../app/settings/server';\nimport { getValidRoomName } from '../../../../app/utils/server/lib/getValidRoomName';\nimport { ensureArray } from '../../../../lib/utils/arrayUtils';\nimport { LDAPConnection } from '../../../../server/lib/ldap/Connection';\nimport { logger, searchLogger, mapLogger } from '../../../../server/lib/ldap/Logger';\nimport { LDAPManager } from '../../../../server/lib/ldap/Manager';\nimport { LDAPUserConverter } from '../../../../server/lib/ldap/UserConverter';\nimport { syncUserRoles } from '../syncUserRoles';\nimport { copyCustomFieldsLDAP } from './copyCustomFieldsLDAP';\n\nexport class LDAPEEManager extends LDAPManager {\n\tpublic static async sync(): Promise<void> {\n\t\tif (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Background_Sync') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst createNewUsers = settings.get<boolean>('LDAP_Background_Sync_Import_New_Users') ?? true;\n\t\tconst updateExistingUsers = settings.get<boolean>('LDAP_Background_Sync_Keep_Existant_Users_Updated') ?? true;\n\t\tlet disableMissingUsers = updateExistingUsers && (settings.get<boolean>('LDAP_Background_Sync_Disable_Missing_Users') ?? false);\n\t\tconst mergeExistingUsers = settings.get<boolean>('LDAP_Background_Sync_Merge_Existent_Users') ?? false;\n\n\t\tconst options = this.getConverterOptions();\n\t\toptions.skipExistingUsers = !updateExistingUsers;\n\t\toptions.skipNewUsers = !createNewUsers;\n\n\t\tconst ldap = new LDAPConnection();\n\t\tconst converter = new LDAPUserConverter(options);\n\t\tconst touchedUsers = new Set<IUser['_id']>();\n\n\t\ttry {\n\t\t\tawait ldap.connect();\n\n\t\t\tif (createNewUsers || mergeExistingUsers) {\n\t\t\t\tawait this.importNewUsers(ldap, converter);\n\t\t\t} else if (updateExistingUsers) {\n\t\t\t\tawait this.updateExistingUsers(ldap, converter, disableMissingUsers);\n\t\t\t\t// Missing users will have been disabled automatically by the update operation, so no need to do a separate query for them\n\t\t\t\tdisableMissingUsers = false;\n\t\t\t}\n\n\t\t\tconst membersOfGroupFilter = await ldap.searchMembersOfGroupFilter();\n\n\t\t\tawait converter.convertData({\n\t\t\t\tbeforeImportFn: (async ({ options }: IImportRecord): Promise<boolean> => {\n\t\t\t\t\tif (!ldap.options.groupFilterEnabled || !ldap.options.groupFilterGroupMemberFormat) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst memberFormat = ldap.options.groupFilterGroupMemberFormat\n\t\t\t\t\t\t?.replace(/#{username}/g, options?.username || '#{username}')\n\t\t\t\t\t\t.replace(/#{userdn}/g, options?.dn || '#{userdn}');\n\n\t\t\t\t\treturn membersOfGroupFilter.includes(memberFormat);\n\t\t\t\t}) as ImporterBeforeImportCallback,\n\t\t\t\tafterImportFn: (async ({ data }, isNewRecord: boolean): Promise<void> => {\n\t\t\t\t\tif (data._id) {\n\t\t\t\t\t\ttouchedUsers.add(data._id);\n\t\t\t\t\t}\n\t\t\t\t\tawait this.advancedSync(ldap, data as IImportUser, converter, isNewRecord);\n\t\t\t\t}) as ImporterAfterImportCallback,\n\t\t\t});\n\n\t\t\tif (disableMissingUsers) {\n\t\t\t\tawait this.disableMissingUsers([...touchedUsers]);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t}\n\n\t\tldap.disconnect();\n\t}\n\n\tpublic static async syncAvatars(): Promise<void> {\n\t\tif (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Background_Sync_Avatars') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst ldap = new LDAPConnection();\n\t\t\tawait ldap.connect();\n\n\t\t\ttry {\n\t\t\t\tawait this.updateUserAvatars(ldap);\n\t\t\t} finally {\n\t\t\t\tldap.disconnect();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t}\n\t}\n\n\tpublic static validateLDAPTeamsMappingChanges(json: string): void {\n\t\tif (!json) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mustBeAnArrayOfStrings = (array: Array<string>): boolean =>\n\t\t\tBoolean(Array.isArray(array) && array.length && array.every((item) => typeof item === 'string'));\n\t\tconst mappedTeams = this.parseJson(json);\n\t\tif (!mappedTeams) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mappedRocketChatTeams = Object.values(mappedTeams);\n\t\tconst validStructureMapping = mappedRocketChatTeams.every(mustBeAnArrayOfStrings);\n\t\tif (!validStructureMapping) {\n\t\t\tthrow new Error(\n\t\t\t\t'Please verify your mapping for LDAP X RocketChat Teams. The structure is invalid, the structure should be an object like: {key: LdapTeam, value: [An array of rocket.chat teams]}',\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic static async syncLogout(): Promise<void> {\n\t\tif (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Sync_AutoLogout_Enabled') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst ldap = new LDAPConnection();\n\t\t\tawait ldap.connect();\n\n\t\t\ttry {\n\t\t\t\tawait this.logoutDeactivatedUsers(ldap);\n\t\t\t} finally {\n\t\t\t\tldap.disconnect();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t}\n\t}\n\n\tpublic static async advancedSyncForUser(ldap: LDAPConnection, user: IUser, isNewRecord: boolean, dn: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.syncUserRoles(ldap, user, dn);\n\t\t\tawait this.syncUserChannels(ldap, user, dn);\n\t\t\tawait this.syncUserTeams(ldap, user, dn, isNewRecord);\n\t\t} catch (e) {\n\t\t\tlogger.debug(`Advanced Sync failed for user: ${dn}`);\n\t\t\tlogger.error(e);\n\t\t}\n\t}\n\n\tprivate static async advancedSync(\n\t\tldap: LDAPConnection,\n\t\timportUser: IImportUser,\n\t\tconverter: LDAPUserConverter,\n\t\tisNewRecord: boolean,\n\t): Promise<void> {\n\t\tconst user = await converter.findExistingUser(importUser);\n\t\tif (!user?.username) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst dn = importUser.importIds[0];\n\t\treturn this.advancedSyncForUser(ldap, user, isNewRecord, dn);\n\t}\n\n\tprivate static async isUserInGroup(\n\t\tldap: LDAPConnection,\n\t\tbaseDN: string,\n\t\tfilter: string,\n\t\t{ dn, username }: { dn: string; username: string },\n\t\tgroupName: string,\n\t): Promise<boolean> {\n\t\tif (!filter || !baseDN) {\n\t\t\tlogger.error('Please setup LDAP Group Filter and LDAP Group BaseDN in LDAP Settings.');\n\t\t\treturn false;\n\t\t}\n\t\tconst searchOptions: ldapjs.SearchOptions = {\n\t\t\tfilter: filter\n\t\t\t\t.replace(/#{username}/g, username)\n\t\t\t\t.replace(/#{groupName}/g, groupName)\n\t\t\t\t.replace(/#{userdn}/g, dn.replace(/\\\\/g, '\\\\5c')),\n\t\t\tscope: 'sub',\n\t\t};\n\n\t\tconst result = await ldap.searchRaw(baseDN, searchOptions);\n\n\t\tif (!Array.isArray(result) || result.length === 0) {\n\t\t\tlogger.debug(`${username} is not in ${groupName} group!!!`);\n\t\t} else {\n\t\t\tlogger.debug(`${username} is in ${groupName} group.`);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate static parseJson(json: string): Record<string, any> | undefined {\n\t\ttry {\n\t\t\treturn JSON.parse(json);\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: 'Unexpected error', err });\n\t\t}\n\t}\n\n\tprivate static async syncUserRoles(ldap: LDAPConnection, user: IUser, dn: string): Promise<void> {\n\t\tconst { username } = user;\n\t\tif (!username) {\n\t\t\tlogger.debug('User has no username');\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldSyncUserRoles = settings.get<boolean>('LDAP_Sync_User_Data_Roles') ?? false;\n\t\tconst syncUserRolesAutoRemove = settings.get<boolean>('LDAP_Sync_User_Data_Roles_AutoRemove') ?? false;\n\t\tconst syncUserRolesFieldMap = (settings.get<string>('LDAP_Sync_User_Data_RolesMap') ?? '').trim();\n\t\tconst syncUserRolesFilter = (settings.get<string>('LDAP_Sync_User_Data_Roles_Filter') ?? '').trim();\n\t\tconst syncUserRolesBaseDN = (settings.get<string>('LDAP_Sync_User_Data_Roles_BaseDN') ?? '').trim();\n\t\tconst searchStrategy = settings.get<'once' | 'each_group'>('LDAP_Sync_User_Data_Roles_GroupMembershipValidationStrategy');\n\n\t\tif (!shouldSyncUserRoles || !syncUserRolesFieldMap) {\n\t\t\tlogger.debug('not syncing user roles');\n\t\t\treturn;\n\t\t}\n\n\t\tconst roles = (await Roles.find(\n\t\t\t{},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray()) as Array<IRole>;\n\n\t\tif (!roles) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst groupsToRolesMap = this.parseJson(syncUserRolesFieldMap);\n\t\tif (!groupsToRolesMap) {\n\t\t\tlogger.debug('missing group role mapping');\n\t\t\treturn;\n\t\t}\n\n\t\tconst ldapGroups = Object.keys(groupsToRolesMap);\n\t\tconst roleList: Array<IRole['_id']> = [];\n\t\tconst roleIdsList: Array<IRole['_id']> = [];\n\t\tconst allowedRoles: Array<IRole['_id']> = this.getDataMappedByLdapGroups(groupsToRolesMap, ldapGroups)\n\t\t\t.map((role) => role.split(/\\.(.+)/)[0])\n\t\t\t.reduce((allowedRolesIds: string[], roleIdOrName: string) => {\n\t\t\t\tconst role = roles.find((role) => role._id === roleIdOrName) ?? roles.find((role) => role.name === roleIdOrName);\n\t\t\t\tif (role) {\n\t\t\t\t\tallowedRolesIds.push(role._id);\n\t\t\t\t}\n\t\t\t\treturn allowedRolesIds;\n\t\t\t}, []);\n\n\t\tif (searchStrategy === 'once') {\n\t\t\tconst ldapUserGroups = await this.getLdapGroupsByUsername(ldap, username, dn, syncUserRolesBaseDN, syncUserRolesFilter);\n\t\t\troleList.push(...this.getDataMappedByLdapGroups(groupsToRolesMap, ldapUserGroups));\n\t\t} else if (searchStrategy === 'each_group') {\n\t\t\tfor await (const ldapGroup of ldapGroups) {\n\t\t\t\tif (await this.isUserInGroup(ldap, syncUserRolesBaseDN, syncUserRolesFilter, { dn, username }, ldapGroup)) {\n\t\t\t\t\troleList.push(...ensureArray<string>(groupsToRolesMap[ldapGroup]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor await (const nonValidatedRole of roleList) {\n\t\t\tconst [roleIdOrName] = nonValidatedRole.split(/\\.(.+)/);\n\n\t\t\tconst role = roles.find((role) => role._id === roleIdOrName) ?? roles.find((role) => role.name === roleIdOrName);\n\t\t\tif (role) {\n\t\t\t\troleIdsList.push(role._id);\n\t\t\t}\n\t\t}\n\n\t\tawait syncUserRoles(user._id, roleIdsList, {\n\t\t\tallowedRoles,\n\t\t\tskipRemovingRoles: !syncUserRolesAutoRemove,\n\t\t});\n\t}\n\n\tprivate static async createRoomForSync(channel: string): Promise<IRoom | undefined> {\n\t\tlogger.debug(`Channel '${channel}' doesn't exist, creating it.`);\n\n\t\tconst roomOwner = settings.get<string>('LDAP_Sync_User_Data_Channels_Admin') || '';\n\n\t\tconst user = await Users.findOneByUsernameIgnoringCase(roomOwner);\n\n\t\tconst room = await createRoom('c', channel, user, [], false, false, {\n\t\t\tcustomFields: { ldap: true },\n\t\t});\n\t\tif (!room?.rid) {\n\t\t\tlogger.error(`Unable to auto-create channel '${channel}' during ldap sync.`);\n\t\t\treturn;\n\t\t}\n\n\t\troom._id = room.rid;\n\t\treturn room;\n\t}\n\n\tprivate static async syncUserChannels(ldap: LDAPConnection, user: IUser, dn: string): Promise<void> {\n\t\tconst syncUserChannels = settings.get<boolean>('LDAP_Sync_User_Data_Channels') ?? false;\n\t\tconst syncUserChannelsRemove = settings.get<boolean>('LDAP_Sync_User_Data_Channels_Enforce_AutoChannels') ?? false;\n\t\tconst syncUserChannelsFieldMap = (settings.get<string>('LDAP_Sync_User_Data_ChannelsMap') ?? '').trim();\n\t\tconst syncUserChannelsFilter = (settings.get<string>('LDAP_Sync_User_Data_Channels_Filter') ?? '').trim();\n\t\tconst syncUserChannelsBaseDN = (settings.get<string>('LDAP_Sync_User_Data_Channels_BaseDN') ?? '').trim();\n\t\tconst searchStrategy = settings.get<'once' | 'each_group'>('LDAP_Sync_User_Data_Channels_GroupMembershipValidationStrategy');\n\n\t\tif (!syncUserChannels || !syncUserChannelsFieldMap) {\n\t\t\tlogger.debug('not syncing groups to channels');\n\t\t\treturn;\n\t\t}\n\n\t\tconst groupsToRoomsMap = this.parseJson(syncUserChannelsFieldMap);\n\t\tif (!groupsToRoomsMap) {\n\t\t\tlogger.debug('missing group channel mapping');\n\t\t\treturn;\n\t\t}\n\n\t\tconst { username } = user;\n\t\tif (!username) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug('syncing user channels');\n\t\tconst ldapGroups = Object.keys(groupsToRoomsMap);\n\t\tconst ldapUserGroups: string[] = [];\n\t\tconst channelsToAdd = new Set<string>();\n\t\tconst userChannelsNames: string[] = [];\n\n\t\tif (searchStrategy === 'once') {\n\t\t\tldapUserGroups.push(...(await this.getLdapGroupsByUsername(ldap, username, dn, syncUserChannelsBaseDN, syncUserChannelsFilter)));\n\t\t\tuserChannelsNames.push(...this.getDataMappedByLdapGroups(groupsToRoomsMap, ldapUserGroups));\n\t\t} else if (searchStrategy === 'each_group') {\n\t\t\tfor await (const ldapGroup of ldapGroups) {\n\t\t\t\tif (await this.isUserInGroup(ldap, syncUserChannelsBaseDN, syncUserChannelsFilter, { dn, username }, ldapGroup)) {\n\t\t\t\t\tuserChannelsNames.push(...ensureArray<string>(groupsToRoomsMap[ldapGroup]));\n\t\t\t\t\tldapUserGroups.push(ldapGroup);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor await (const userChannelName of userChannelsNames) {\n\t\t\ttry {\n\t\t\t\tconst name = await getValidRoomName(userChannelName.trim(), undefined, { allowDuplicates: true });\n\t\t\t\tconst room = (await Rooms.findOneByNonValidatedName(name)) || (await this.createRoomForSync(userChannelName));\n\t\t\t\tif (!room) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (room.teamMain) {\n\t\t\t\t\tlogger.error(`Can't add user to channel ${userChannelName} because it is a team.`);\n\t\t\t\t} else {\n\t\t\t\t\tchannelsToAdd.add(room._id);\n\t\t\t\t\tawait addUserToRoom(room._id, user);\n\t\t\t\t\tlogger.debug(`Synced user channel ${room._id} from LDAP for ${username}`);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tlogger.debug(`Failed to sync user room, user = ${username}, channel = ${userChannelName}`);\n\t\t\t\tlogger.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (syncUserChannelsRemove) {\n\t\t\tconst notInUserGroups = ldapGroups.filter((ldapGroup) => !ldapUserGroups.includes(ldapGroup));\n\t\t\tconst notMappedRooms = this.getDataMappedByLdapGroups(groupsToRoomsMap, notInUserGroups);\n\n\t\t\tconst roomsToRemove = new Set<string>(notMappedRooms);\n\t\t\tfor await (const roomName of roomsToRemove) {\n\t\t\t\tconst name = await getValidRoomName(roomName.trim(), undefined, { allowDuplicates: true });\n\t\t\t\tconst room = await Rooms.findOneByNonValidatedName(name);\n\t\t\t\tif (!room || room.teamMain || channelsToAdd.has(room._id)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst subscription = await SubscriptionsRaw.findOneByRoomIdAndUserId(room._id, user._id);\n\t\t\t\tif (subscription) {\n\t\t\t\t\tawait removeUserFromRoom(room._id, user);\n\t\t\t\t\tlogger.debug(`Removed user ${username} from channel ${room._id}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static async syncUserTeams(ldap: LDAPConnection, user: IUser, dn: string, isNewRecord: boolean): Promise<void> {\n\t\tif (!user.username) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mapTeams =\n\t\t\tsettings.get<boolean>('LDAP_Enable_LDAP_Groups_To_RC_Teams') &&\n\t\t\t(isNewRecord || settings.get<boolean>('LDAP_Validate_Teams_For_Each_Login'));\n\t\tif (!mapTeams) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst baseDN = (settings.get<string>('LDAP_Teams_BaseDN') ?? '').trim() || ldap.options.baseDN;\n\t\tconst filter = settings.get<string>('LDAP_Query_To_Get_User_Teams');\n\t\tconst groupAttributeName = settings.get<string>('LDAP_Teams_Name_Field');\n\t\tconst ldapUserTeams = await this.getLdapGroupsByUsername(ldap, user.username, dn, baseDN, filter, groupAttributeName);\n\t\tconst mapJson = settings.get<string>('LDAP_Groups_To_Rocket_Chat_Teams');\n\t\tif (!mapJson) {\n\t\t\treturn;\n\t\t}\n\t\tconst map = this.parseJson(mapJson) as Record<string, string>;\n\t\tif (!map) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst teamNames = this.getDataMappedByLdapGroups(map, ldapUserTeams);\n\n\t\tconst allTeamNames = [...new Set(Object.values(map).flat())];\n\t\tconst allTeams = await Team.listByNames(allTeamNames, { projection: { _id: 1, name: 1 } });\n\n\t\tconst inTeamIds = allTeams.filter(({ name }) => teamNames.includes(name)).map(({ _id }) => _id);\n\t\tconst notInTeamIds = allTeams.filter(({ name }) => !teamNames.includes(name)).map(({ _id }) => _id);\n\n\t\tconst currentTeams = await Team.listTeamsBySubscriberUserId(user._id, {\n\t\t\tprojection: { teamId: 1 },\n\t\t});\n\t\tconst currentTeamIds = currentTeams?.map(({ teamId }) => teamId);\n\t\tconst teamsToRemove = currentTeamIds?.filter((teamId) => notInTeamIds.includes(teamId));\n\t\tconst teamsToAdd = inTeamIds.filter((teamId) => !currentTeamIds?.includes(teamId));\n\n\t\tawait Team.insertMemberOnTeams(user._id, teamsToAdd);\n\t\tif (teamsToRemove) {\n\t\t\tawait Team.removeMemberFromTeams(user._id, teamsToRemove);\n\t\t}\n\t}\n\n\tprivate static getDataMappedByLdapGroups(map: Record<string, string>, ldapGroups: Array<string>): Array<string> {\n\t\tconst mappedLdapGroups = Object.keys(map);\n\t\tconst filteredMappedLdapGroups = ldapGroups.filter((ldapGroup) => mappedLdapGroups.includes(ldapGroup));\n\n\t\tif (filteredMappedLdapGroups.length < ldapGroups.length) {\n\t\t\tconst unmappedLdapGroups = ldapGroups.filter((ldapGroup) => !mappedLdapGroups.includes(ldapGroup));\n\t\t\tlogger.error(`The following LDAP groups are not mapped in Rocket.Chat: \"${unmappedLdapGroups.join(', ')}\".`);\n\t\t}\n\n\t\tif (!filteredMappedLdapGroups.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn [...new Set(filteredMappedLdapGroups.map((ldapGroup) => map[ldapGroup]).flat())];\n\t}\n\n\tprivate static async getLdapGroupsByUsername(\n\t\tldap: LDAPConnection,\n\t\tusername: string,\n\t\tuserDN: string,\n\t\tbaseDN: string,\n\t\tfilter: string,\n\t\tgroupAttributeName?: string,\n\t): Promise<Array<string>> {\n\t\tif (!filter) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst searchOptions = {\n\t\t\tfilter: filter.replace(/#{username}/g, username).replace(/#{userdn}/g, userDN.replace(/\\\\/g, '\\\\5c')),\n\t\t\tscope: ldap.options.userSearchScope || 'sub',\n\t\t\tsizeLimit: ldap.options.searchSizeLimit,\n\t\t};\n\n\t\tconst attributeNames = groupAttributeName ? groupAttributeName.split(',').map((attributeName) => attributeName.trim()) : ['ou', 'cn'];\n\n\t\tconst ldapUserGroups = await ldap.searchRaw(baseDN, searchOptions);\n\t\tif (!Array.isArray(ldapUserGroups)) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn ldapUserGroups\n\t\t\t.map((entry) => {\n\t\t\t\tif (!entry?.raw) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tfor (const attributeName of attributeNames) {\n\t\t\t\t\tif (entry.raw[attributeName]) {\n\t\t\t\t\t\treturn ldap.extractLdapAttribute(entry.raw[attributeName]) as string;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t})\n\t\t\t.filter((entry): entry is string => Boolean(entry))\n\t\t\t.flat();\n\t}\n\n\tprivate static isUserDeactivated(ldapUser: ILDAPEntry): boolean {\n\t\t// Account locked by \"Draft-behera-ldap-password-policy\"\n\t\tif (ldapUser.pwdAccountLockedTime) {\n\t\t\tmapLogger.debug('User account is locked by password policy (attribute pwdAccountLockedTime)');\n\t\t\treturn true;\n\t\t}\n\n\t\t// EDirectory: Account manually disabled by an admin\n\t\tif (ldapUser.loginDisabled) {\n\t\t\tmapLogger.debug('User account was manually disabled by an admin (attribute loginDisabled)');\n\t\t\treturn true;\n\t\t}\n\n\t\t// Oracle: Account must not be allowed to authenticate\n\t\tif (ldapUser.orclIsEnabled && ldapUser.orclIsEnabled !== 'ENABLED') {\n\t\t\tmapLogger.debug('User must not be allowed to authenticate (attribute orclIsEnabled)');\n\t\t\treturn true;\n\t\t}\n\n\t\t// Active Directory - Account locked automatically by security policies\n\t\tif (ldapUser.lockoutTime && ldapUser.lockoutTime !== '0') {\n\t\t\tconst lockoutTimeValue = Number(ldapUser.lockoutTime);\n\t\t\tif (lockoutTimeValue && !isNaN(lockoutTimeValue)) {\n\t\t\t\t// Automatic unlock is disabled\n\t\t\t\tif (!ldapUser.lockoutDuration) {\n\t\t\t\t\tmapLogger.debug('User account locked indefinitely by security policy (attribute lockoutTime)');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst lockoutTime = new Date(lockoutTimeValue);\n\t\t\t\tlockoutTime.setMinutes(lockoutTime.getMinutes() + Number(ldapUser.lockoutDuration));\n\t\t\t\t// Account has not unlocked itself yet\n\t\t\t\tif (lockoutTime.valueOf() > Date.now()) {\n\t\t\t\t\tmapLogger.debug('User account locked temporarily by security policy (attribute lockoutTime)');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Active Directory - Account disabled by an Admin\n\t\tif (ldapUser.userAccountControl && (ldapUser.userAccountControl & 2) === 2) {\n\t\t\tmapLogger.debug('User account disabled by an admin (attribute userAccountControl)');\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic static copyActiveState(ldapUser: ILDAPEntry, userData: IImportUser): void {\n\t\tif (!ldapUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst syncUserState = settings.get('LDAP_Sync_User_Active_State');\n\t\tif (syncUserState === 'none') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deleted = this.isUserDeactivated(ldapUser);\n\t\tif (deleted === userData.deleted) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (syncUserState === 'disable' && !deleted) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (syncUserState === 'enable' && deleted) {\n\t\t\treturn;\n\t\t}\n\n\t\tuserData.deleted = deleted;\n\t\tlogger.info(`${deleted ? 'Deactivating' : 'Activating'} user ${userData.name} (${userData.username})`);\n\t}\n\n\tpublic static copyCustomFields(ldapUser: ILDAPEntry, userData: IImportUser): void {\n\t\treturn copyCustomFieldsLDAP(\n\t\t\t{\n\t\t\t\tldapUser,\n\t\t\t\tuserData,\n\t\t\t\tcustomFieldsSettings: settings.get<string>('Accounts_CustomFields'),\n\t\t\t\tcustomFieldsMap: settings.get<string>('LDAP_CustomFieldMap'),\n\t\t\t\tsyncCustomFields: settings.get<boolean>('LDAP_Sync_Custom_Fields'),\n\t\t\t},\n\t\t\tlogger,\n\t\t);\n\t}\n\n\tprivate static async importNewUsers(ldap: LDAPConnection, converter: LDAPUserConverter): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet count = 0;\n\n\t\t\tvoid ldap.searchAllUsers<IImportUser>({\n\t\t\t\tentryCallback: (entry: ldapjs.SearchEntry): IImportUser | undefined => {\n\t\t\t\t\tconst data = ldap.extractLdapEntryData(entry);\n\t\t\t\t\tcount++;\n\n\t\t\t\t\tconst userData = this.mapUserData(data);\n\t\t\t\t\tconverter.addObjectToMemory(userData, { dn: data.dn, username: this.getLdapUsername(data) });\n\t\t\t\t\treturn userData;\n\t\t\t\t},\n\t\t\t\tendCallback: (error: any): void => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tlogger.error(error);\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlogger.info('LDAP finished loading users. Users added to importer: ', count);\n\t\t\t\t\tresolve();\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static async updateExistingUsers(ldap: LDAPConnection, converter: LDAPUserConverter, disableMissingUsers = false): Promise<void> {\n\t\tconst users = await Users.findLDAPUsers().toArray();\n\t\tfor await (const user of users) {\n\t\t\tconst ldapUser = await this.findLDAPUser(ldap, user);\n\n\t\t\tif (ldapUser) {\n\t\t\t\tconst userData = this.mapUserData(ldapUser, user.username);\n\t\t\t\tconverter.addObjectToMemory(userData, { dn: ldapUser.dn, username: this.getLdapUsername(ldapUser) });\n\t\t\t} else if (disableMissingUsers) {\n\t\t\t\tawait setUserActiveStatus(user._id, false, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static async disableMissingUsers(foundUsers: IUser['_id'][]): Promise<void> {\n\t\tconst userIds = (await Users.findLDAPUsersExceptIds(foundUsers, { projection: { _id: 1 } }).toArray()).map(({ _id }) => _id);\n\n\t\tawait Promise.allSettled(userIds.map((id) => setUserActiveStatus(id, false, true)));\n\t}\n\n\tprivate static async updateUserAvatars(ldap: LDAPConnection): Promise<void> {\n\t\tconst users = await Users.findLDAPUsers().toArray();\n\t\tfor await (const user of users) {\n\t\t\tconst ldapUser = await this.findLDAPUser(ldap, user);\n\t\t\tif (!ldapUser) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait LDAPManager.syncUserAvatar(user, ldapUser);\n\t\t}\n\t}\n\n\tprivate static async findLDAPUser(ldap: LDAPConnection, user: IUser): Promise<ILDAPEntry | undefined> {\n\t\tif (user.services?.ldap?.id) {\n\t\t\treturn ldap.findOneById(user.services.ldap.id, user.services.ldap.idAttribute);\n\t\t}\n\n\t\tif (user.username) {\n\t\t\treturn ldap.findOneByUsername(user.username);\n\t\t}\n\n\t\tsearchLogger.debug({\n\t\t\tmsg: 'existing LDAP user not found during Sync',\n\t\t\tldapId: user.services?.ldap?.id,\n\t\t\tldapAttribute: user.services?.ldap?.idAttribute,\n\t\t\tusername: user.username,\n\t\t});\n\t}\n\n\tprivate static async logoutDeactivatedUsers(ldap: LDAPConnection): Promise<void> {\n\t\tconst users = await Users.findConnectedLDAPUsers().toArray();\n\n\t\tfor await (const user of users) {\n\t\t\tconst ldapUser = await this.findLDAPUser(ldap, user);\n\t\t\tif (!ldapUser) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.isUserDeactivated(ldapUser)) {\n\t\t\t\tawait Users.unsetLoginTokens(user._id);\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/ldap/Manager.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/lib/ldap/Manager.ts","inputSourceMap":{"version":3,"file":"ee/server/lib/ldap/Manager.ts","sourceRoot":"","sources":["ee/server/lib/ldap/Manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Team } from '@rocket.chat/core-services';\nimport type { ILDAPEntry, IUser, IRoom, IRole, IImportUser, IImportRecord } from '@rocket.chat/core-typings';\nimport { Users, Roles, Subscriptions as SubscriptionsRaw, Rooms } from '@rocket.chat/models';\nimport type ldapjs from 'ldapjs';\n\nimport type {\n\tImporterAfterImportCallback,\n\tImporterBeforeImportCallback,\n} from '../../../../app/importer/server/definitions/IConversionCallbacks';\nimport { addUserToRoom } from '../../../../app/lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../../app/lib/server/functions/createRoom';\nimport { removeUserFromRoom } from '../../../../app/lib/server/functions/removeUserFromRoom';\nimport { setUserActiveStatus } from '../../../../app/lib/server/functions/setUserActiveStatus';\nimport { settings } from '../../../../app/settings/server';\nimport { getValidRoomName } from '../../../../app/utils/server/lib/getValidRoomName';\nimport { ensureArray } from '../../../../lib/utils/arrayUtils';\nimport { LDAPConnection } from '../../../../server/lib/ldap/Connection';\nimport { logger, searchLogger, mapLogger } from '../../../../server/lib/ldap/Logger';\nimport { LDAPManager } from '../../../../server/lib/ldap/Manager';\nimport { LDAPUserConverter } from '../../../../server/lib/ldap/UserConverter';\nimport { syncUserRoles } from '../syncUserRoles';\nimport { copyCustomFieldsLDAP } from './copyCustomFieldsLDAP';\n\nexport class LDAPEEManager extends LDAPManager {\n\tpublic static async sync(): Promise<void> {\n\t\tif (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Background_Sync') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst createNewUsers = settings.get<boolean>('LDAP_Background_Sync_Import_New_Users') ?? true;\n\t\tconst updateExistingUsers = settings.get<boolean>('LDAP_Background_Sync_Keep_Existant_Users_Updated') ?? true;\n\t\tlet disableMissingUsers = updateExistingUsers && (settings.get<boolean>('LDAP_Background_Sync_Disable_Missing_Users') ?? false);\n\t\tconst mergeExistingUsers = settings.get<boolean>('LDAP_Background_Sync_Merge_Existent_Users') ?? false;\n\n\t\tconst options = this.getConverterOptions();\n\t\toptions.skipExistingUsers = !updateExistingUsers;\n\t\toptions.skipNewUsers = !createNewUsers;\n\n\t\tconst ldap = new LDAPConnection();\n\t\tconst converter = new LDAPUserConverter(options);\n\t\tconst touchedUsers = new Set<IUser['_id']>();\n\n\t\ttry {\n\t\t\tawait ldap.connect();\n\n\t\t\tif (createNewUsers || mergeExistingUsers) {\n\t\t\t\tawait this.importNewUsers(ldap, converter);\n\t\t\t} else if (updateExistingUsers) {\n\t\t\t\tawait this.updateExistingUsers(ldap, converter, disableMissingUsers);\n\t\t\t\t// Missing users will have been disabled automatically by the update operation, so no need to do a separate query for them\n\t\t\t\tdisableMissingUsers = false;\n\t\t\t}\n\n\t\t\tconst membersOfGroupFilter = await ldap.searchMembersOfGroupFilter();\n\n\t\t\tawait converter.convertData({\n\t\t\t\tbeforeImportFn: (async ({ options }: IImportRecord): Promise<boolean> => {\n\t\t\t\t\tif (!ldap.options.groupFilterEnabled || !ldap.options.groupFilterGroupMemberFormat) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst memberFormat = ldap.options.groupFilterGroupMemberFormat\n\t\t\t\t\t\t?.replace(/#{username}/g, options?.username || '#{username}')\n\t\t\t\t\t\t.replace(/#{userdn}/g, options?.dn || '#{userdn}');\n\n\t\t\t\t\treturn membersOfGroupFilter.includes(memberFormat);\n\t\t\t\t}) as ImporterBeforeImportCallback,\n\t\t\t\tafterImportFn: (async ({ data }, isNewRecord: boolean): Promise<void> => {\n\t\t\t\t\tif (data._id) {\n\t\t\t\t\t\ttouchedUsers.add(data._id);\n\t\t\t\t\t}\n\t\t\t\t\tawait this.advancedSync(ldap, data as IImportUser, converter, isNewRecord);\n\t\t\t\t}) as ImporterAfterImportCallback,\n\t\t\t});\n\n\t\t\tif (disableMissingUsers) {\n\t\t\t\tawait this.disableMissingUsers([...touchedUsers]);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t}\n\n\t\tldap.disconnect();\n\t}\n\n\tpublic static async syncAvatars(): Promise<void> {\n\t\tif (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Background_Sync_Avatars') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst ldap = new LDAPConnection();\n\t\t\tawait ldap.connect();\n\n\t\t\ttry {\n\t\t\t\tawait this.updateUserAvatars(ldap);\n\t\t\t} finally {\n\t\t\t\tldap.disconnect();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t}\n\t}\n\n\tpublic static validateLDAPTeamsMappingChanges(json: string): void {\n\t\tif (!json) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mustBeAnArrayOfStrings = (array: Array<string>): boolean =>\n\t\t\tBoolean(Array.isArray(array) && array.length && array.every((item) => typeof item === 'string'));\n\t\tconst mappedTeams = this.parseJson(json);\n\t\tif (!mappedTeams) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mappedRocketChatTeams = Object.values(mappedTeams);\n\t\tconst validStructureMapping = mappedRocketChatTeams.every(mustBeAnArrayOfStrings);\n\t\tif (!validStructureMapping) {\n\t\t\tthrow new Error(\n\t\t\t\t'Please verify your mapping for LDAP X RocketChat Teams. The structure is invalid, the structure should be an object like: {key: LdapTeam, value: [An array of rocket.chat teams]}',\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic static async syncLogout(): Promise<void> {\n\t\tif (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Sync_AutoLogout_Enabled') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst ldap = new LDAPConnection();\n\t\t\tawait ldap.connect();\n\n\t\t\ttry {\n\t\t\t\tawait this.logoutDeactivatedUsers(ldap);\n\t\t\t} finally {\n\t\t\t\tldap.disconnect();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t}\n\t}\n\n\tpublic static async advancedSyncForUser(ldap: LDAPConnection, user: IUser, isNewRecord: boolean, dn: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.syncUserRoles(ldap, user, dn);\n\t\t\tawait this.syncUserChannels(ldap, user, dn);\n\t\t\tawait this.syncUserTeams(ldap, user, dn, isNewRecord);\n\t\t} catch (e) {\n\t\t\tlogger.debug(`Advanced Sync failed for user: ${dn}`);\n\t\t\tlogger.error(e);\n\t\t}\n\t}\n\n\tprivate static async advancedSync(\n\t\tldap: LDAPConnection,\n\t\timportUser: IImportUser,\n\t\tconverter: LDAPUserConverter,\n\t\tisNewRecord: boolean,\n\t): Promise<void> {\n\t\tconst user = await converter.findExistingUser(importUser);\n\t\tif (!user?.username) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst dn = importUser.importIds[0];\n\t\treturn this.advancedSyncForUser(ldap, user, isNewRecord, dn);\n\t}\n\n\tprivate static async isUserInGroup(\n\t\tldap: LDAPConnection,\n\t\tbaseDN: string,\n\t\tfilter: string,\n\t\t{ dn, username }: { dn: string; username: string },\n\t\tgroupName: string,\n\t): Promise<boolean> {\n\t\tif (!filter || !baseDN) {\n\t\t\tlogger.error('Please setup LDAP Group Filter and LDAP Group BaseDN in LDAP Settings.');\n\t\t\treturn false;\n\t\t}\n\t\tconst searchOptions: ldapjs.SearchOptions = {\n\t\t\tfilter: filter\n\t\t\t\t.replace(/#{username}/g, username)\n\t\t\t\t.replace(/#{groupName}/g, groupName)\n\t\t\t\t.replace(/#{userdn}/g, dn.replace(/\\\\/g, '\\\\5c')),\n\t\t\tscope: 'sub',\n\t\t};\n\n\t\tconst result = await ldap.searchRaw(baseDN, searchOptions);\n\n\t\tif (!Array.isArray(result) || result.length === 0) {\n\t\t\tlogger.debug(`${username} is not in ${groupName} group!!!`);\n\t\t} else {\n\t\t\tlogger.debug(`${username} is in ${groupName} group.`);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate static parseJson(json: string): Record<string, any> | undefined {\n\t\ttry {\n\t\t\treturn JSON.parse(json);\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: 'Unexpected error', err });\n\t\t}\n\t}\n\n\tprivate static async syncUserRoles(ldap: LDAPConnection, user: IUser, dn: string): Promise<void> {\n\t\tconst { username } = user;\n\t\tif (!username) {\n\t\t\tlogger.debug('User has no username');\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldSyncUserRoles = settings.get<boolean>('LDAP_Sync_User_Data_Roles') ?? false;\n\t\tconst syncUserRolesAutoRemove = settings.get<boolean>('LDAP_Sync_User_Data_Roles_AutoRemove') ?? false;\n\t\tconst syncUserRolesFieldMap = (settings.get<string>('LDAP_Sync_User_Data_RolesMap') ?? '').trim();\n\t\tconst syncUserRolesFilter = (settings.get<string>('LDAP_Sync_User_Data_Roles_Filter') ?? '').trim();\n\t\tconst syncUserRolesBaseDN = (settings.get<string>('LDAP_Sync_User_Data_Roles_BaseDN') ?? '').trim();\n\t\tconst searchStrategy = settings.get<'once' | 'each_group'>('LDAP_Sync_User_Data_Roles_GroupMembershipValidationStrategy');\n\n\t\tif (!shouldSyncUserRoles || !syncUserRolesFieldMap) {\n\t\t\tlogger.debug('not syncing user roles');\n\t\t\treturn;\n\t\t}\n\n\t\tconst roles = (await Roles.find(\n\t\t\t{},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray()) as Array<IRole>;\n\n\t\tif (!roles) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst groupsToRolesMap = this.parseJson(syncUserRolesFieldMap);\n\t\tif (!groupsToRolesMap) {\n\t\t\tlogger.debug('missing group role mapping');\n\t\t\treturn;\n\t\t}\n\n\t\tconst ldapGroups = Object.keys(groupsToRolesMap);\n\t\tconst roleList: Array<IRole['_id']> = [];\n\t\tconst roleIdsList: Array<IRole['_id']> = [];\n\t\tconst allowedRoles: Array<IRole['_id']> = this.getDataMappedByLdapGroups(groupsToRolesMap, ldapGroups)\n\t\t\t.map((role) => role.split(/\\.(.+)/)[0])\n\t\t\t.reduce((allowedRolesIds: string[], roleIdOrName: string) => {\n\t\t\t\tconst role = roles.find((role) => role._id === roleIdOrName) ?? roles.find((role) => role.name === roleIdOrName);\n\t\t\t\tif (role) {\n\t\t\t\t\tallowedRolesIds.push(role._id);\n\t\t\t\t}\n\t\t\t\treturn allowedRolesIds;\n\t\t\t}, []);\n\n\t\tif (searchStrategy === 'once') {\n\t\t\tconst ldapUserGroups = await this.getLdapGroupsByUsername(ldap, username, dn, syncUserRolesBaseDN, syncUserRolesFilter);\n\t\t\troleList.push(...this.getDataMappedByLdapGroups(groupsToRolesMap, ldapUserGroups));\n\t\t} else if (searchStrategy === 'each_group') {\n\t\t\tfor await (const ldapGroup of ldapGroups) {\n\t\t\t\tif (await this.isUserInGroup(ldap, syncUserRolesBaseDN, syncUserRolesFilter, { dn, username }, ldapGroup)) {\n\t\t\t\t\troleList.push(...ensureArray<string>(groupsToRolesMap[ldapGroup]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor await (const nonValidatedRole of roleList) {\n\t\t\tconst [roleIdOrName] = nonValidatedRole.split(/\\.(.+)/);\n\n\t\t\tconst role = roles.find((role) => role._id === roleIdOrName) ?? roles.find((role) => role.name === roleIdOrName);\n\t\t\tif (role) {\n\t\t\t\troleIdsList.push(role._id);\n\t\t\t}\n\t\t}\n\n\t\tawait syncUserRoles(user._id, roleIdsList, {\n\t\t\tallowedRoles,\n\t\t\tskipRemovingRoles: !syncUserRolesAutoRemove,\n\t\t});\n\t}\n\n\tprivate static async createRoomForSync(channel: string): Promise<IRoom | undefined> {\n\t\tlogger.debug(`Channel '${channel}' doesn't exist, creating it.`);\n\n\t\tconst roomOwner = settings.get<string>('LDAP_Sync_User_Data_Channels_Admin') || '';\n\n\t\tconst user = await Users.findOneByUsernameIgnoringCase(roomOwner);\n\n\t\tconst room = await createRoom('c', channel, user, [], false, false, {\n\t\t\tcustomFields: { ldap: true },\n\t\t});\n\t\tif (!room?.rid) {\n\t\t\tlogger.error(`Unable to auto-create channel '${channel}' during ldap sync.`);\n\t\t\treturn;\n\t\t}\n\n\t\troom._id = room.rid;\n\t\treturn room;\n\t}\n\n\tprivate static async syncUserChannels(ldap: LDAPConnection, user: IUser, dn: string): Promise<void> {\n\t\tconst syncUserChannels = settings.get<boolean>('LDAP_Sync_User_Data_Channels') ?? false;\n\t\tconst syncUserChannelsRemove = settings.get<boolean>('LDAP_Sync_User_Data_Channels_Enforce_AutoChannels') ?? false;\n\t\tconst syncUserChannelsFieldMap = (settings.get<string>('LDAP_Sync_User_Data_ChannelsMap') ?? '').trim();\n\t\tconst syncUserChannelsFilter = (settings.get<string>('LDAP_Sync_User_Data_Channels_Filter') ?? '').trim();\n\t\tconst syncUserChannelsBaseDN = (settings.get<string>('LDAP_Sync_User_Data_Channels_BaseDN') ?? '').trim();\n\t\tconst searchStrategy = settings.get<'once' | 'each_group'>('LDAP_Sync_User_Data_Channels_GroupMembershipValidationStrategy');\n\n\t\tif (!syncUserChannels || !syncUserChannelsFieldMap) {\n\t\t\tlogger.debug('not syncing groups to channels');\n\t\t\treturn;\n\t\t}\n\n\t\tconst groupsToRoomsMap = this.parseJson(syncUserChannelsFieldMap);\n\t\tif (!groupsToRoomsMap) {\n\t\t\tlogger.debug('missing group channel mapping');\n\t\t\treturn;\n\t\t}\n\n\t\tconst { username } = user;\n\t\tif (!username) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug('syncing user channels');\n\t\tconst ldapGroups = Object.keys(groupsToRoomsMap);\n\t\tconst ldapUserGroups: string[] = [];\n\t\tconst channelsToAdd = new Set<string>();\n\t\tconst userChannelsNames: string[] = [];\n\n\t\tif (searchStrategy === 'once') {\n\t\t\tldapUserGroups.push(...(await this.getLdapGroupsByUsername(ldap, username, dn, syncUserChannelsBaseDN, syncUserChannelsFilter)));\n\t\t\tuserChannelsNames.push(...this.getDataMappedByLdapGroups(groupsToRoomsMap, ldapUserGroups));\n\t\t} else if (searchStrategy === 'each_group') {\n\t\t\tfor await (const ldapGroup of ldapGroups) {\n\t\t\t\tif (await this.isUserInGroup(ldap, syncUserChannelsBaseDN, syncUserChannelsFilter, { dn, username }, ldapGroup)) {\n\t\t\t\t\tuserChannelsNames.push(...ensureArray<string>(groupsToRoomsMap[ldapGroup]));\n\t\t\t\t\tldapUserGroups.push(ldapGroup);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor await (const userChannelName of userChannelsNames) {\n\t\t\ttry {\n\t\t\t\tconst name = await getValidRoomName(userChannelName.trim(), undefined, { allowDuplicates: true });\n\t\t\t\tconst room = (await Rooms.findOneByNonValidatedName(name)) || (await this.createRoomForSync(userChannelName));\n\t\t\t\tif (!room) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (room.teamMain) {\n\t\t\t\t\tlogger.error(`Can't add user to channel ${userChannelName} because it is a team.`);\n\t\t\t\t} else {\n\t\t\t\t\tchannelsToAdd.add(room._id);\n\t\t\t\t\tawait addUserToRoom(room._id, user);\n\t\t\t\t\tlogger.debug(`Synced user channel ${room._id} from LDAP for ${username}`);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tlogger.debug(`Failed to sync user room, user = ${username}, channel = ${userChannelName}`);\n\t\t\t\tlogger.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (syncUserChannelsRemove) {\n\t\t\tconst notInUserGroups = ldapGroups.filter((ldapGroup) => !ldapUserGroups.includes(ldapGroup));\n\t\t\tconst notMappedRooms = this.getDataMappedByLdapGroups(groupsToRoomsMap, notInUserGroups);\n\n\t\t\tconst roomsToRemove = new Set<string>(notMappedRooms);\n\t\t\tfor await (const roomName of roomsToRemove) {\n\t\t\t\tconst name = await getValidRoomName(roomName.trim(), undefined, { allowDuplicates: true });\n\t\t\t\tconst room = await Rooms.findOneByNonValidatedName(name);\n\t\t\t\tif (!room || room.teamMain || channelsToAdd.has(room._id)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst subscription = await SubscriptionsRaw.findOneByRoomIdAndUserId(room._id, user._id);\n\t\t\t\tif (subscription) {\n\t\t\t\t\tawait removeUserFromRoom(room._id, user);\n\t\t\t\t\tlogger.debug(`Removed user ${username} from channel ${room._id}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static async syncUserTeams(ldap: LDAPConnection, user: IUser, dn: string, isNewRecord: boolean): Promise<void> {\n\t\tif (!user.username) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mapTeams =\n\t\t\tsettings.get<boolean>('LDAP_Enable_LDAP_Groups_To_RC_Teams') &&\n\t\t\t(isNewRecord || settings.get<boolean>('LDAP_Validate_Teams_For_Each_Login'));\n\t\tif (!mapTeams) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst baseDN = (settings.get<string>('LDAP_Teams_BaseDN') ?? '').trim() || ldap.options.baseDN;\n\t\tconst filter = settings.get<string>('LDAP_Query_To_Get_User_Teams');\n\t\tconst groupAttributeName = settings.get<string>('LDAP_Teams_Name_Field');\n\t\tconst ldapUserTeams = await this.getLdapGroupsByUsername(ldap, user.username, dn, baseDN, filter, groupAttributeName);\n\t\tconst mapJson = settings.get<string>('LDAP_Groups_To_Rocket_Chat_Teams');\n\t\tif (!mapJson) {\n\t\t\treturn;\n\t\t}\n\t\tconst map = this.parseJson(mapJson) as Record<string, string>;\n\t\tif (!map) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst teamNames = this.getDataMappedByLdapGroups(map, ldapUserTeams);\n\n\t\tconst allTeamNames = [...new Set(Object.values(map).flat())];\n\t\tconst allTeams = await Team.listByNames(allTeamNames, { projection: { _id: 1, name: 1 } });\n\n\t\tconst inTeamIds = allTeams.filter(({ name }) => teamNames.includes(name)).map(({ _id }) => _id);\n\t\tconst notInTeamIds = allTeams.filter(({ name }) => !teamNames.includes(name)).map(({ _id }) => _id);\n\n\t\tconst currentTeams = await Team.listTeamsBySubscriberUserId(user._id, {\n\t\t\tprojection: { teamId: 1 },\n\t\t});\n\t\tconst currentTeamIds = currentTeams?.map(({ teamId }) => teamId);\n\t\tconst teamsToRemove = currentTeamIds?.filter((teamId) => notInTeamIds.includes(teamId));\n\t\tconst teamsToAdd = inTeamIds.filter((teamId) => !currentTeamIds?.includes(teamId));\n\n\t\tawait Team.insertMemberOnTeams(user._id, teamsToAdd);\n\t\tif (teamsToRemove) {\n\t\t\tawait Team.removeMemberFromTeams(user._id, teamsToRemove);\n\t\t}\n\t}\n\n\tprivate static getDataMappedByLdapGroups(map: Record<string, string>, ldapGroups: Array<string>): Array<string> {\n\t\tconst mappedLdapGroups = Object.keys(map);\n\t\tconst filteredMappedLdapGroups = ldapGroups.filter((ldapGroup) => mappedLdapGroups.includes(ldapGroup));\n\n\t\tif (filteredMappedLdapGroups.length < ldapGroups.length) {\n\t\t\tconst unmappedLdapGroups = ldapGroups.filter((ldapGroup) => !mappedLdapGroups.includes(ldapGroup));\n\t\t\tlogger.error(`The following LDAP groups are not mapped in Rocket.Chat: \"${unmappedLdapGroups.join(', ')}\".`);\n\t\t}\n\n\t\tif (!filteredMappedLdapGroups.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn [...new Set(filteredMappedLdapGroups.map((ldapGroup) => map[ldapGroup]).flat())];\n\t}\n\n\tprivate static async getLdapGroupsByUsername(\n\t\tldap: LDAPConnection,\n\t\tusername: string,\n\t\tuserDN: string,\n\t\tbaseDN: string,\n\t\tfilter: string,\n\t\tgroupAttributeName?: string,\n\t): Promise<Array<string>> {\n\t\tif (!filter) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst searchOptions = {\n\t\t\tfilter: filter.replace(/#{username}/g, username).replace(/#{userdn}/g, userDN.replace(/\\\\/g, '\\\\5c')),\n\t\t\tscope: ldap.options.userSearchScope || 'sub',\n\t\t\tsizeLimit: ldap.options.searchSizeLimit,\n\t\t};\n\n\t\tconst attributeNames = groupAttributeName ? groupAttributeName.split(',').map((attributeName) => attributeName.trim()) : ['ou', 'cn'];\n\n\t\tconst ldapUserGroups = await ldap.searchRaw(baseDN, searchOptions);\n\t\tif (!Array.isArray(ldapUserGroups)) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn ldapUserGroups\n\t\t\t.map((entry) => {\n\t\t\t\tif (!entry?.raw) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tfor (const attributeName of attributeNames) {\n\t\t\t\t\tif (entry.raw[attributeName]) {\n\t\t\t\t\t\treturn ldap.extractLdapAttribute(entry.raw[attributeName]) as string;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t})\n\t\t\t.filter((entry): entry is string => Boolean(entry))\n\t\t\t.flat();\n\t}\n\n\tprivate static isUserDeactivated(ldapUser: ILDAPEntry): boolean {\n\t\t// Account locked by \"Draft-behera-ldap-password-policy\"\n\t\tif (ldapUser.pwdAccountLockedTime) {\n\t\t\tmapLogger.debug('User account is locked by password policy (attribute pwdAccountLockedTime)');\n\t\t\treturn true;\n\t\t}\n\n\t\t// EDirectory: Account manually disabled by an admin\n\t\tif (ldapUser.loginDisabled) {\n\t\t\tmapLogger.debug('User account was manually disabled by an admin (attribute loginDisabled)');\n\t\t\treturn true;\n\t\t}\n\n\t\t// Oracle: Account must not be allowed to authenticate\n\t\tif (ldapUser.orclIsEnabled && ldapUser.orclIsEnabled !== 'ENABLED') {\n\t\t\tmapLogger.debug('User must not be allowed to authenticate (attribute orclIsEnabled)');\n\t\t\treturn true;\n\t\t}\n\n\t\t// Active Directory - Account locked automatically by security policies\n\t\tif (ldapUser.lockoutTime && ldapUser.lockoutTime !== '0') {\n\t\t\tconst lockoutTimeValue = Number(ldapUser.lockoutTime);\n\t\t\tif (lockoutTimeValue && !isNaN(lockoutTimeValue)) {\n\t\t\t\t// Automatic unlock is disabled\n\t\t\t\tif (!ldapUser.lockoutDuration) {\n\t\t\t\t\tmapLogger.debug('User account locked indefinitely by security policy (attribute lockoutTime)');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst lockoutTime = new Date(lockoutTimeValue);\n\t\t\t\tlockoutTime.setMinutes(lockoutTime.getMinutes() + Number(ldapUser.lockoutDuration));\n\t\t\t\t// Account has not unlocked itself yet\n\t\t\t\tif (lockoutTime.valueOf() > Date.now()) {\n\t\t\t\t\tmapLogger.debug('User account locked temporarily by security policy (attribute lockoutTime)');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Active Directory - Account disabled by an Admin\n\t\tif (ldapUser.userAccountControl && (ldapUser.userAccountControl & 2) === 2) {\n\t\t\tmapLogger.debug('User account disabled by an admin (attribute userAccountControl)');\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic static copyActiveState(ldapUser: ILDAPEntry, userData: IImportUser): void {\n\t\tif (!ldapUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst syncUserState = settings.get('LDAP_Sync_User_Active_State');\n\t\tif (syncUserState === 'none') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deleted = this.isUserDeactivated(ldapUser);\n\t\tif (deleted === userData.deleted) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (syncUserState === 'disable' && !deleted) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (syncUserState === 'enable' && deleted) {\n\t\t\treturn;\n\t\t}\n\n\t\tuserData.deleted = deleted;\n\t\tlogger.info(`${deleted ? 'Deactivating' : 'Activating'} user ${userData.name} (${userData.username})`);\n\t}\n\n\tpublic static copyCustomFields(ldapUser: ILDAPEntry, userData: IImportUser): void {\n\t\treturn copyCustomFieldsLDAP(\n\t\t\t{\n\t\t\t\tldapUser,\n\t\t\t\tuserData,\n\t\t\t\tcustomFieldsSettings: settings.get<string>('Accounts_CustomFields'),\n\t\t\t\tcustomFieldsMap: settings.get<string>('LDAP_CustomFieldMap'),\n\t\t\t\tsyncCustomFields: settings.get<boolean>('LDAP_Sync_Custom_Fields'),\n\t\t\t},\n\t\t\tlogger,\n\t\t);\n\t}\n\n\tprivate static async importNewUsers(ldap: LDAPConnection, converter: LDAPUserConverter): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet count = 0;\n\n\t\t\tvoid ldap.searchAllUsers<IImportUser>({\n\t\t\t\tentryCallback: (entry: ldapjs.SearchEntry): IImportUser | undefined => {\n\t\t\t\t\tconst data = ldap.extractLdapEntryData(entry);\n\t\t\t\t\tcount++;\n\n\t\t\t\t\tconst userData = this.mapUserData(data);\n\t\t\t\t\tconverter.addObjectToMemory(userData, { dn: data.dn, username: this.getLdapUsername(data) });\n\t\t\t\t\treturn userData;\n\t\t\t\t},\n\t\t\t\tendCallback: (error: any): void => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tlogger.error(error);\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlogger.info('LDAP finished loading users. Users added to importer: ', count);\n\t\t\t\t\tresolve();\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static async updateExistingUsers(ldap: LDAPConnection, converter: LDAPUserConverter, disableMissingUsers = false): Promise<void> {\n\t\tconst users = await Users.findLDAPUsers().toArray();\n\t\tfor await (const user of users) {\n\t\t\tconst ldapUser = await this.findLDAPUser(ldap, user);\n\n\t\t\tif (ldapUser) {\n\t\t\t\tconst userData = this.mapUserData(ldapUser, user.username);\n\t\t\t\tconverter.addObjectToMemory(userData, { dn: ldapUser.dn, username: this.getLdapUsername(ldapUser) });\n\t\t\t} else if (disableMissingUsers) {\n\t\t\t\tawait setUserActiveStatus(user._id, false, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static async disableMissingUsers(foundUsers: IUser['_id'][]): Promise<void> {\n\t\tconst userIds = (await Users.findLDAPUsersExceptIds(foundUsers, { projection: { _id: 1 } }).toArray()).map(({ _id }) => _id);\n\n\t\tawait Promise.allSettled(userIds.map((id) => setUserActiveStatus(id, false, true)));\n\t}\n\n\tprivate static async updateUserAvatars(ldap: LDAPConnection): Promise<void> {\n\t\tconst users = await Users.findLDAPUsers().toArray();\n\t\tfor await (const user of users) {\n\t\t\tconst ldapUser = await this.findLDAPUser(ldap, user);\n\t\t\tif (!ldapUser) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait LDAPManager.syncUserAvatar(user, ldapUser);\n\t\t}\n\t}\n\n\tprivate static async findLDAPUser(ldap: LDAPConnection, user: IUser): Promise<ILDAPEntry | undefined> {\n\t\tif (user.services?.ldap?.id) {\n\t\t\treturn ldap.findOneById(user.services.ldap.id, user.services.ldap.idAttribute);\n\t\t}\n\n\t\tif (user.username) {\n\t\t\treturn ldap.findOneByUsername(user.username);\n\t\t}\n\n\t\tsearchLogger.debug({\n\t\t\tmsg: 'existing LDAP user not found during Sync',\n\t\t\tldapId: user.services?.ldap?.id,\n\t\t\tldapAttribute: user.services?.ldap?.idAttribute,\n\t\t\tusername: user.username,\n\t\t});\n\t}\n\n\tprivate static async logoutDeactivatedUsers(ldap: LDAPConnection): Promise<void> {\n\t\tconst users = await Users.findConnectedLDAPUsers().toArray();\n\n\t\tfor await (const user of users) {\n\t\t\tconst ldapUser = await this.findLDAPUser(ldap, user);\n\t\t\tif (!ldapUser) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.isUserDeactivated(ldapUser)) {\n\t\t\t\tawait Users.unsetLoginTokens(user._id);\n\t\t\t}\n\t\t}\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      LDAPEEManager: () => LDAPEEManager\n    });\n    let Team;\n    module.link(\"@rocket.chat/core-services\", {\n      Team(v) {\n        Team = v;\n      }\n    }, 0);\n    let Users, Roles, SubscriptionsRaw, Rooms;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      },\n      Roles(v) {\n        Roles = v;\n      },\n      Subscriptions(v) {\n        SubscriptionsRaw = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      }\n    }, 1);\n    let addUserToRoom;\n    module.link(\"../../../../app/lib/server/functions/addUserToRoom\", {\n      addUserToRoom(v) {\n        addUserToRoom = v;\n      }\n    }, 2);\n    let createRoom;\n    module.link(\"../../../../app/lib/server/functions/createRoom\", {\n      createRoom(v) {\n        createRoom = v;\n      }\n    }, 3);\n    let removeUserFromRoom;\n    module.link(\"../../../../app/lib/server/functions/removeUserFromRoom\", {\n      removeUserFromRoom(v) {\n        removeUserFromRoom = v;\n      }\n    }, 4);\n    let setUserActiveStatus;\n    module.link(\"../../../../app/lib/server/functions/setUserActiveStatus\", {\n      setUserActiveStatus(v) {\n        setUserActiveStatus = v;\n      }\n    }, 5);\n    let settings;\n    module.link(\"../../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 6);\n    let getValidRoomName;\n    module.link(\"../../../../app/utils/server/lib/getValidRoomName\", {\n      getValidRoomName(v) {\n        getValidRoomName = v;\n      }\n    }, 7);\n    let ensureArray;\n    module.link(\"../../../../lib/utils/arrayUtils\", {\n      ensureArray(v) {\n        ensureArray = v;\n      }\n    }, 8);\n    let LDAPConnection;\n    module.link(\"../../../../server/lib/ldap/Connection\", {\n      LDAPConnection(v) {\n        LDAPConnection = v;\n      }\n    }, 9);\n    let logger, searchLogger, mapLogger;\n    module.link(\"../../../../server/lib/ldap/Logger\", {\n      logger(v) {\n        logger = v;\n      },\n      searchLogger(v) {\n        searchLogger = v;\n      },\n      mapLogger(v) {\n        mapLogger = v;\n      }\n    }, 10);\n    let LDAPManager;\n    module.link(\"../../../../server/lib/ldap/Manager\", {\n      LDAPManager(v) {\n        LDAPManager = v;\n      }\n    }, 11);\n    let LDAPUserConverter;\n    module.link(\"../../../../server/lib/ldap/UserConverter\", {\n      LDAPUserConverter(v) {\n        LDAPUserConverter = v;\n      }\n    }, 12);\n    let syncUserRoles;\n    module.link(\"../syncUserRoles\", {\n      syncUserRoles(v) {\n        syncUserRoles = v;\n      }\n    }, 13);\n    let copyCustomFieldsLDAP;\n    module.link(\"./copyCustomFieldsLDAP\", {\n      copyCustomFieldsLDAP(v) {\n        copyCustomFieldsLDAP = v;\n      }\n    }, 14);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class LDAPEEManager extends LDAPManager {\n      static async sync() {\n        var _settings$get, _settings$get2, _settings$get3, _settings$get4;\n        if (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Background_Sync') !== true) {\n          return;\n        }\n        const createNewUsers = (_settings$get = settings.get('LDAP_Background_Sync_Import_New_Users')) !== null && _settings$get !== void 0 ? _settings$get : true;\n        const updateExistingUsers = (_settings$get2 = settings.get('LDAP_Background_Sync_Keep_Existant_Users_Updated')) !== null && _settings$get2 !== void 0 ? _settings$get2 : true;\n        let disableMissingUsers = updateExistingUsers && ((_settings$get3 = settings.get('LDAP_Background_Sync_Disable_Missing_Users')) !== null && _settings$get3 !== void 0 ? _settings$get3 : false);\n        const mergeExistingUsers = (_settings$get4 = settings.get('LDAP_Background_Sync_Merge_Existent_Users')) !== null && _settings$get4 !== void 0 ? _settings$get4 : false;\n        const options = this.getConverterOptions();\n        options.skipExistingUsers = !updateExistingUsers;\n        options.skipNewUsers = !createNewUsers;\n        const ldap = new LDAPConnection();\n        const converter = new LDAPUserConverter(options);\n        const touchedUsers = new Set();\n        try {\n          await ldap.connect();\n          if (createNewUsers || mergeExistingUsers) {\n            await this.importNewUsers(ldap, converter);\n          } else if (updateExistingUsers) {\n            await this.updateExistingUsers(ldap, converter, disableMissingUsers);\n            // Missing users will have been disabled automatically by the update operation, so no need to do a separate query for them\n            disableMissingUsers = false;\n          }\n          const membersOfGroupFilter = await ldap.searchMembersOfGroupFilter();\n          await converter.convertData({\n            beforeImportFn: async _ref => {\n              var _ldap$options$groupFi;\n              let {\n                options\n              } = _ref;\n              if (!ldap.options.groupFilterEnabled || !ldap.options.groupFilterGroupMemberFormat) {\n                return true;\n              }\n              const memberFormat = (_ldap$options$groupFi = ldap.options.groupFilterGroupMemberFormat) === null || _ldap$options$groupFi === void 0 ? void 0 : _ldap$options$groupFi.replace(/#{username}/g, (options === null || options === void 0 ? void 0 : options.username) || '#{username}').replace(/#{userdn}/g, (options === null || options === void 0 ? void 0 : options.dn) || '#{userdn}');\n              return membersOfGroupFilter.includes(memberFormat);\n            },\n            afterImportFn: async (_ref2, isNewRecord) => {\n              let {\n                data\n              } = _ref2;\n              if (data._id) {\n                touchedUsers.add(data._id);\n              }\n              await this.advancedSync(ldap, data, converter, isNewRecord);\n            }\n          });\n          if (disableMissingUsers) {\n            await this.disableMissingUsers([...touchedUsers]);\n          }\n        } catch (error) {\n          logger.error(error);\n        }\n        ldap.disconnect();\n      }\n      static async syncAvatars() {\n        if (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Background_Sync_Avatars') !== true) {\n          return;\n        }\n        try {\n          const ldap = new LDAPConnection();\n          await ldap.connect();\n          try {\n            await this.updateUserAvatars(ldap);\n          } finally {\n            ldap.disconnect();\n          }\n        } catch (error) {\n          logger.error(error);\n        }\n      }\n      static validateLDAPTeamsMappingChanges(json) {\n        if (!json) {\n          return;\n        }\n        const mustBeAnArrayOfStrings = array => Boolean(Array.isArray(array) && array.length && array.every(item => typeof item === 'string'));\n        const mappedTeams = this.parseJson(json);\n        if (!mappedTeams) {\n          return;\n        }\n        const mappedRocketChatTeams = Object.values(mappedTeams);\n        const validStructureMapping = mappedRocketChatTeams.every(mustBeAnArrayOfStrings);\n        if (!validStructureMapping) {\n          throw new Error('Please verify your mapping for LDAP X RocketChat Teams. The structure is invalid, the structure should be an object like: {key: LdapTeam, value: [An array of rocket.chat teams]}');\n        }\n      }\n      static async syncLogout() {\n        if (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Sync_AutoLogout_Enabled') !== true) {\n          return;\n        }\n        try {\n          const ldap = new LDAPConnection();\n          await ldap.connect();\n          try {\n            await this.logoutDeactivatedUsers(ldap);\n          } finally {\n            ldap.disconnect();\n          }\n        } catch (error) {\n          logger.error(error);\n        }\n      }\n      static async advancedSyncForUser(ldap, user, isNewRecord, dn) {\n        try {\n          await this.syncUserRoles(ldap, user, dn);\n          await this.syncUserChannels(ldap, user, dn);\n          await this.syncUserTeams(ldap, user, dn, isNewRecord);\n        } catch (e) {\n          logger.debug(\"Advanced Sync failed for user: \".concat(dn));\n          logger.error(e);\n        }\n      }\n      static async advancedSync(ldap, importUser, converter, isNewRecord) {\n        const user = await converter.findExistingUser(importUser);\n        if (!(user !== null && user !== void 0 && user.username)) {\n          return;\n        }\n        const dn = importUser.importIds[0];\n        return this.advancedSyncForUser(ldap, user, isNewRecord, dn);\n      }\n      static async isUserInGroup(ldap, baseDN, filter, _ref3, groupName) {\n        let {\n          dn,\n          username\n        } = _ref3;\n        if (!filter || !baseDN) {\n          logger.error('Please setup LDAP Group Filter and LDAP Group BaseDN in LDAP Settings.');\n          return false;\n        }\n        const searchOptions = {\n          filter: filter.replace(/#{username}/g, username).replace(/#{groupName}/g, groupName).replace(/#{userdn}/g, dn.replace(/\\\\/g, '\\\\5c')),\n          scope: 'sub'\n        };\n        const result = await ldap.searchRaw(baseDN, searchOptions);\n        if (!Array.isArray(result) || result.length === 0) {\n          logger.debug(\"\".concat(username, \" is not in \").concat(groupName, \" group!!!\"));\n        } else {\n          logger.debug(\"\".concat(username, \" is in \").concat(groupName, \" group.\"));\n          return true;\n        }\n        return false;\n      }\n      static parseJson(json) {\n        try {\n          return JSON.parse(json);\n        } catch (err) {\n          logger.error({\n            msg: 'Unexpected error',\n            err\n          });\n        }\n      }\n      static async syncUserRoles(ldap, user, dn) {\n        var _settings$get5, _settings$get6, _settings$get7, _settings$get8, _settings$get9;\n        const {\n          username\n        } = user;\n        if (!username) {\n          logger.debug('User has no username');\n          return;\n        }\n        const shouldSyncUserRoles = (_settings$get5 = settings.get('LDAP_Sync_User_Data_Roles')) !== null && _settings$get5 !== void 0 ? _settings$get5 : false;\n        const syncUserRolesAutoRemove = (_settings$get6 = settings.get('LDAP_Sync_User_Data_Roles_AutoRemove')) !== null && _settings$get6 !== void 0 ? _settings$get6 : false;\n        const syncUserRolesFieldMap = ((_settings$get7 = settings.get('LDAP_Sync_User_Data_RolesMap')) !== null && _settings$get7 !== void 0 ? _settings$get7 : '').trim();\n        const syncUserRolesFilter = ((_settings$get8 = settings.get('LDAP_Sync_User_Data_Roles_Filter')) !== null && _settings$get8 !== void 0 ? _settings$get8 : '').trim();\n        const syncUserRolesBaseDN = ((_settings$get9 = settings.get('LDAP_Sync_User_Data_Roles_BaseDN')) !== null && _settings$get9 !== void 0 ? _settings$get9 : '').trim();\n        const searchStrategy = settings.get('LDAP_Sync_User_Data_Roles_GroupMembershipValidationStrategy');\n        if (!shouldSyncUserRoles || !syncUserRolesFieldMap) {\n          logger.debug('not syncing user roles');\n          return;\n        }\n        const roles = await Roles.find({}, {\n          projection: {\n            _id: 1,\n            name: 1\n          }\n        }).toArray();\n        if (!roles) {\n          return;\n        }\n        const groupsToRolesMap = this.parseJson(syncUserRolesFieldMap);\n        if (!groupsToRolesMap) {\n          logger.debug('missing group role mapping');\n          return;\n        }\n        const ldapGroups = Object.keys(groupsToRolesMap);\n        const roleList = [];\n        const roleIdsList = [];\n        const allowedRoles = this.getDataMappedByLdapGroups(groupsToRolesMap, ldapGroups).map(role => role.split(/\\.(.+)/)[0]).reduce((allowedRolesIds, roleIdOrName) => {\n          var _roles$find;\n          const role = (_roles$find = roles.find(role => role._id === roleIdOrName)) !== null && _roles$find !== void 0 ? _roles$find : roles.find(role => role.name === roleIdOrName);\n          if (role) {\n            allowedRolesIds.push(role._id);\n          }\n          return allowedRolesIds;\n        }, []);\n        if (searchStrategy === 'once') {\n          const ldapUserGroups = await this.getLdapGroupsByUsername(ldap, username, dn, syncUserRolesBaseDN, syncUserRolesFilter);\n          roleList.push(...this.getDataMappedByLdapGroups(groupsToRolesMap, ldapUserGroups));\n        } else if (searchStrategy === 'each_group') {\n          var _iteratorAbruptCompletion = false;\n          var _didIteratorError = false;\n          var _iteratorError;\n          try {\n            for (var _iterator = _asyncIterator(ldapGroups), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n              const ldapGroup = _step.value;\n              {\n                if (await this.isUserInGroup(ldap, syncUserRolesBaseDN, syncUserRolesFilter, {\n                  dn,\n                  username\n                }, ldapGroup)) {\n                  roleList.push(...ensureArray(groupsToRolesMap[ldapGroup]));\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion && _iterator.return != null) {\n                await _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(roleList), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            const nonValidatedRole = _step2.value;\n            {\n              var _roles$find2;\n              const [roleIdOrName] = nonValidatedRole.split(/\\.(.+)/);\n              const role = (_roles$find2 = roles.find(role => role._id === roleIdOrName)) !== null && _roles$find2 !== void 0 ? _roles$find2 : roles.find(role => role.name === roleIdOrName);\n              if (role) {\n                roleIdsList.push(role._id);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        await syncUserRoles(user._id, roleIdsList, {\n          allowedRoles,\n          skipRemovingRoles: !syncUserRolesAutoRemove\n        });\n      }\n      static async createRoomForSync(channel) {\n        logger.debug(\"Channel '\".concat(channel, \"' doesn't exist, creating it.\"));\n        const roomOwner = settings.get('LDAP_Sync_User_Data_Channels_Admin') || '';\n        const user = await Users.findOneByUsernameIgnoringCase(roomOwner);\n        const room = await createRoom('c', channel, user, [], false, false, {\n          customFields: {\n            ldap: true\n          }\n        });\n        if (!(room !== null && room !== void 0 && room.rid)) {\n          logger.error(\"Unable to auto-create channel '\".concat(channel, \"' during ldap sync.\"));\n          return;\n        }\n        room._id = room.rid;\n        return room;\n      }\n      static async syncUserChannels(ldap, user, dn) {\n        var _settings$get10, _settings$get11, _settings$get12, _settings$get13, _settings$get14;\n        const syncUserChannels = (_settings$get10 = settings.get('LDAP_Sync_User_Data_Channels')) !== null && _settings$get10 !== void 0 ? _settings$get10 : false;\n        const syncUserChannelsRemove = (_settings$get11 = settings.get('LDAP_Sync_User_Data_Channels_Enforce_AutoChannels')) !== null && _settings$get11 !== void 0 ? _settings$get11 : false;\n        const syncUserChannelsFieldMap = ((_settings$get12 = settings.get('LDAP_Sync_User_Data_ChannelsMap')) !== null && _settings$get12 !== void 0 ? _settings$get12 : '').trim();\n        const syncUserChannelsFilter = ((_settings$get13 = settings.get('LDAP_Sync_User_Data_Channels_Filter')) !== null && _settings$get13 !== void 0 ? _settings$get13 : '').trim();\n        const syncUserChannelsBaseDN = ((_settings$get14 = settings.get('LDAP_Sync_User_Data_Channels_BaseDN')) !== null && _settings$get14 !== void 0 ? _settings$get14 : '').trim();\n        const searchStrategy = settings.get('LDAP_Sync_User_Data_Channels_GroupMembershipValidationStrategy');\n        if (!syncUserChannels || !syncUserChannelsFieldMap) {\n          logger.debug('not syncing groups to channels');\n          return;\n        }\n        const groupsToRoomsMap = this.parseJson(syncUserChannelsFieldMap);\n        if (!groupsToRoomsMap) {\n          logger.debug('missing group channel mapping');\n          return;\n        }\n        const {\n          username\n        } = user;\n        if (!username) {\n          return;\n        }\n        logger.debug('syncing user channels');\n        const ldapGroups = Object.keys(groupsToRoomsMap);\n        const ldapUserGroups = [];\n        const channelsToAdd = new Set();\n        const userChannelsNames = [];\n        if (searchStrategy === 'once') {\n          ldapUserGroups.push(...(await this.getLdapGroupsByUsername(ldap, username, dn, syncUserChannelsBaseDN, syncUserChannelsFilter)));\n          userChannelsNames.push(...this.getDataMappedByLdapGroups(groupsToRoomsMap, ldapUserGroups));\n        } else if (searchStrategy === 'each_group') {\n          var _iteratorAbruptCompletion3 = false;\n          var _didIteratorError3 = false;\n          var _iteratorError3;\n          try {\n            for (var _iterator3 = _asyncIterator(ldapGroups), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n              const ldapGroup = _step3.value;\n              {\n                if (await this.isUserInGroup(ldap, syncUserChannelsBaseDN, syncUserChannelsFilter, {\n                  dn,\n                  username\n                }, ldapGroup)) {\n                  userChannelsNames.push(...ensureArray(groupsToRoomsMap[ldapGroup]));\n                  ldapUserGroups.push(ldapGroup);\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n                await _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n        }\n        var _iteratorAbruptCompletion4 = false;\n        var _didIteratorError4 = false;\n        var _iteratorError4;\n        try {\n          for (var _iterator4 = _asyncIterator(userChannelsNames), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n            const userChannelName = _step4.value;\n            {\n              try {\n                const name = await getValidRoomName(userChannelName.trim(), undefined, {\n                  allowDuplicates: true\n                });\n                const room = (await Rooms.findOneByNonValidatedName(name)) || (await this.createRoomForSync(userChannelName));\n                if (!room) {\n                  return;\n                }\n                if (room.teamMain) {\n                  logger.error(\"Can't add user to channel \".concat(userChannelName, \" because it is a team.\"));\n                } else {\n                  channelsToAdd.add(room._id);\n                  await addUserToRoom(room._id, user);\n                  logger.debug(\"Synced user channel \".concat(room._id, \" from LDAP for \").concat(username));\n                }\n              } catch (e) {\n                logger.debug(\"Failed to sync user room, user = \".concat(username, \", channel = \").concat(userChannelName));\n                logger.error(e);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n              await _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n        if (syncUserChannelsRemove) {\n          const notInUserGroups = ldapGroups.filter(ldapGroup => !ldapUserGroups.includes(ldapGroup));\n          const notMappedRooms = this.getDataMappedByLdapGroups(groupsToRoomsMap, notInUserGroups);\n          const roomsToRemove = new Set(notMappedRooms);\n          var _iteratorAbruptCompletion5 = false;\n          var _didIteratorError5 = false;\n          var _iteratorError5;\n          try {\n            for (var _iterator5 = _asyncIterator(roomsToRemove), _step5; _iteratorAbruptCompletion5 = !(_step5 = await _iterator5.next()).done; _iteratorAbruptCompletion5 = false) {\n              const roomName = _step5.value;\n              {\n                const name = await getValidRoomName(roomName.trim(), undefined, {\n                  allowDuplicates: true\n                });\n                const room = await Rooms.findOneByNonValidatedName(name);\n                if (!room || room.teamMain || channelsToAdd.has(room._id)) {\n                  return;\n                }\n                const subscription = await SubscriptionsRaw.findOneByRoomIdAndUserId(room._id, user._id);\n                if (subscription) {\n                  await removeUserFromRoom(room._id, user);\n                  logger.debug(\"Removed user \".concat(username, \" from channel \").concat(room._id));\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion5 && _iterator5.return != null) {\n                await _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n        }\n      }\n      static async syncUserTeams(ldap, user, dn, isNewRecord) {\n        var _settings$get15;\n        if (!user.username) {\n          return;\n        }\n        const mapTeams = settings.get('LDAP_Enable_LDAP_Groups_To_RC_Teams') && (isNewRecord || settings.get('LDAP_Validate_Teams_For_Each_Login'));\n        if (!mapTeams) {\n          return;\n        }\n        const baseDN = ((_settings$get15 = settings.get('LDAP_Teams_BaseDN')) !== null && _settings$get15 !== void 0 ? _settings$get15 : '').trim() || ldap.options.baseDN;\n        const filter = settings.get('LDAP_Query_To_Get_User_Teams');\n        const groupAttributeName = settings.get('LDAP_Teams_Name_Field');\n        const ldapUserTeams = await this.getLdapGroupsByUsername(ldap, user.username, dn, baseDN, filter, groupAttributeName);\n        const mapJson = settings.get('LDAP_Groups_To_Rocket_Chat_Teams');\n        if (!mapJson) {\n          return;\n        }\n        const map = this.parseJson(mapJson);\n        if (!map) {\n          return;\n        }\n        const teamNames = this.getDataMappedByLdapGroups(map, ldapUserTeams);\n        const allTeamNames = [...new Set(Object.values(map).flat())];\n        const allTeams = await Team.listByNames(allTeamNames, {\n          projection: {\n            _id: 1,\n            name: 1\n          }\n        });\n        const inTeamIds = allTeams.filter(_ref4 => {\n          let {\n            name\n          } = _ref4;\n          return teamNames.includes(name);\n        }).map(_ref5 => {\n          let {\n            _id\n          } = _ref5;\n          return _id;\n        });\n        const notInTeamIds = allTeams.filter(_ref6 => {\n          let {\n            name\n          } = _ref6;\n          return !teamNames.includes(name);\n        }).map(_ref7 => {\n          let {\n            _id\n          } = _ref7;\n          return _id;\n        });\n        const currentTeams = await Team.listTeamsBySubscriberUserId(user._id, {\n          projection: {\n            teamId: 1\n          }\n        });\n        const currentTeamIds = currentTeams === null || currentTeams === void 0 ? void 0 : currentTeams.map(_ref8 => {\n          let {\n            teamId\n          } = _ref8;\n          return teamId;\n        });\n        const teamsToRemove = currentTeamIds === null || currentTeamIds === void 0 ? void 0 : currentTeamIds.filter(teamId => notInTeamIds.includes(teamId));\n        const teamsToAdd = inTeamIds.filter(teamId => !(currentTeamIds !== null && currentTeamIds !== void 0 && currentTeamIds.includes(teamId)));\n        await Team.insertMemberOnTeams(user._id, teamsToAdd);\n        if (teamsToRemove) {\n          await Team.removeMemberFromTeams(user._id, teamsToRemove);\n        }\n      }\n      static getDataMappedByLdapGroups(map, ldapGroups) {\n        const mappedLdapGroups = Object.keys(map);\n        const filteredMappedLdapGroups = ldapGroups.filter(ldapGroup => mappedLdapGroups.includes(ldapGroup));\n        if (filteredMappedLdapGroups.length < ldapGroups.length) {\n          const unmappedLdapGroups = ldapGroups.filter(ldapGroup => !mappedLdapGroups.includes(ldapGroup));\n          logger.error(\"The following LDAP groups are not mapped in Rocket.Chat: \\\"\".concat(unmappedLdapGroups.join(', '), \"\\\".\"));\n        }\n        if (!filteredMappedLdapGroups.length) {\n          return [];\n        }\n        return [...new Set(filteredMappedLdapGroups.map(ldapGroup => map[ldapGroup]).flat())];\n      }\n      static async getLdapGroupsByUsername(ldap, username, userDN, baseDN, filter, groupAttributeName) {\n        if (!filter) {\n          return [];\n        }\n        const searchOptions = {\n          filter: filter.replace(/#{username}/g, username).replace(/#{userdn}/g, userDN.replace(/\\\\/g, '\\\\5c')),\n          scope: ldap.options.userSearchScope || 'sub',\n          sizeLimit: ldap.options.searchSizeLimit\n        };\n        const attributeNames = groupAttributeName ? groupAttributeName.split(',').map(attributeName => attributeName.trim()) : ['ou', 'cn'];\n        const ldapUserGroups = await ldap.searchRaw(baseDN, searchOptions);\n        if (!Array.isArray(ldapUserGroups)) {\n          return [];\n        }\n        return ldapUserGroups.map(entry => {\n          if (!(entry !== null && entry !== void 0 && entry.raw)) {\n            return undefined;\n          }\n          for (const attributeName of attributeNames) {\n            if (entry.raw[attributeName]) {\n              return ldap.extractLdapAttribute(entry.raw[attributeName]);\n            }\n          }\n          return undefined;\n        }).filter(entry => Boolean(entry)).flat();\n      }\n      static isUserDeactivated(ldapUser) {\n        // Account locked by \"Draft-behera-ldap-password-policy\"\n        if (ldapUser.pwdAccountLockedTime) {\n          mapLogger.debug('User account is locked by password policy (attribute pwdAccountLockedTime)');\n          return true;\n        }\n        // EDirectory: Account manually disabled by an admin\n        if (ldapUser.loginDisabled) {\n          mapLogger.debug('User account was manually disabled by an admin (attribute loginDisabled)');\n          return true;\n        }\n        // Oracle: Account must not be allowed to authenticate\n        if (ldapUser.orclIsEnabled && ldapUser.orclIsEnabled !== 'ENABLED') {\n          mapLogger.debug('User must not be allowed to authenticate (attribute orclIsEnabled)');\n          return true;\n        }\n        // Active Directory - Account locked automatically by security policies\n        if (ldapUser.lockoutTime && ldapUser.lockoutTime !== '0') {\n          const lockoutTimeValue = Number(ldapUser.lockoutTime);\n          if (lockoutTimeValue && !isNaN(lockoutTimeValue)) {\n            // Automatic unlock is disabled\n            if (!ldapUser.lockoutDuration) {\n              mapLogger.debug('User account locked indefinitely by security policy (attribute lockoutTime)');\n              return true;\n            }\n            const lockoutTime = new Date(lockoutTimeValue);\n            lockoutTime.setMinutes(lockoutTime.getMinutes() + Number(ldapUser.lockoutDuration));\n            // Account has not unlocked itself yet\n            if (lockoutTime.valueOf() > Date.now()) {\n              mapLogger.debug('User account locked temporarily by security policy (attribute lockoutTime)');\n              return true;\n            }\n          }\n        }\n        // Active Directory - Account disabled by an Admin\n        if (ldapUser.userAccountControl && (ldapUser.userAccountControl & 2) === 2) {\n          mapLogger.debug('User account disabled by an admin (attribute userAccountControl)');\n          return true;\n        }\n        return false;\n      }\n      static copyActiveState(ldapUser, userData) {\n        if (!ldapUser) {\n          return;\n        }\n        const syncUserState = settings.get('LDAP_Sync_User_Active_State');\n        if (syncUserState === 'none') {\n          return;\n        }\n        const deleted = this.isUserDeactivated(ldapUser);\n        if (deleted === userData.deleted) {\n          return;\n        }\n        if (syncUserState === 'disable' && !deleted) {\n          return;\n        }\n        if (syncUserState === 'enable' && deleted) {\n          return;\n        }\n        userData.deleted = deleted;\n        logger.info(\"\".concat(deleted ? 'Deactivating' : 'Activating', \" user \").concat(userData.name, \" (\").concat(userData.username, \")\"));\n      }\n      static copyCustomFields(ldapUser, userData) {\n        return copyCustomFieldsLDAP({\n          ldapUser,\n          userData,\n          customFieldsSettings: settings.get('Accounts_CustomFields'),\n          customFieldsMap: settings.get('LDAP_CustomFieldMap'),\n          syncCustomFields: settings.get('LDAP_Sync_Custom_Fields')\n        }, logger);\n      }\n      static async importNewUsers(ldap, converter) {\n        return new Promise((resolve, reject) => {\n          let count = 0;\n          void ldap.searchAllUsers({\n            entryCallback: entry => {\n              const data = ldap.extractLdapEntryData(entry);\n              count++;\n              const userData = this.mapUserData(data);\n              converter.addObjectToMemory(userData, {\n                dn: data.dn,\n                username: this.getLdapUsername(data)\n              });\n              return userData;\n            },\n            endCallback: error => {\n              if (error) {\n                logger.error(error);\n                reject(error);\n                return;\n              }\n              logger.info('LDAP finished loading users. Users added to importer: ', count);\n              resolve();\n            }\n          });\n        });\n      }\n      static async updateExistingUsers(ldap, converter) {\n        let disableMissingUsers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        const users = await Users.findLDAPUsers().toArray();\n        var _iteratorAbruptCompletion6 = false;\n        var _didIteratorError6 = false;\n        var _iteratorError6;\n        try {\n          for (var _iterator6 = _asyncIterator(users), _step6; _iteratorAbruptCompletion6 = !(_step6 = await _iterator6.next()).done; _iteratorAbruptCompletion6 = false) {\n            const user = _step6.value;\n            {\n              const ldapUser = await this.findLDAPUser(ldap, user);\n              if (ldapUser) {\n                const userData = this.mapUserData(ldapUser, user.username);\n                converter.addObjectToMemory(userData, {\n                  dn: ldapUser.dn,\n                  username: this.getLdapUsername(ldapUser)\n                });\n              } else if (disableMissingUsers) {\n                await setUserActiveStatus(user._id, false, true);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion6 && _iterator6.return != null) {\n              await _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n      }\n      static async disableMissingUsers(foundUsers) {\n        const userIds = (await Users.findLDAPUsersExceptIds(foundUsers, {\n          projection: {\n            _id: 1\n          }\n        }).toArray()).map(_ref9 => {\n          let {\n            _id\n          } = _ref9;\n          return _id;\n        });\n        await Promise.allSettled(userIds.map(id => setUserActiveStatus(id, false, true)));\n      }\n      static async updateUserAvatars(ldap) {\n        const users = await Users.findLDAPUsers().toArray();\n        var _iteratorAbruptCompletion7 = false;\n        var _didIteratorError7 = false;\n        var _iteratorError7;\n        try {\n          for (var _iterator7 = _asyncIterator(users), _step7; _iteratorAbruptCompletion7 = !(_step7 = await _iterator7.next()).done; _iteratorAbruptCompletion7 = false) {\n            const user = _step7.value;\n            {\n              const ldapUser = await this.findLDAPUser(ldap, user);\n              if (!ldapUser) {\n                continue;\n              }\n              await LDAPManager.syncUserAvatar(user, ldapUser);\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion7 && _iterator7.return != null) {\n              await _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n      }\n      static async findLDAPUser(ldap, user) {\n        var _user$services, _user$services$ldap, _user$services2, _user$services2$ldap, _user$services3, _user$services3$ldap;\n        if ((_user$services = user.services) !== null && _user$services !== void 0 && (_user$services$ldap = _user$services.ldap) !== null && _user$services$ldap !== void 0 && _user$services$ldap.id) {\n          return ldap.findOneById(user.services.ldap.id, user.services.ldap.idAttribute);\n        }\n        if (user.username) {\n          return ldap.findOneByUsername(user.username);\n        }\n        searchLogger.debug({\n          msg: 'existing LDAP user not found during Sync',\n          ldapId: (_user$services2 = user.services) === null || _user$services2 === void 0 ? void 0 : (_user$services2$ldap = _user$services2.ldap) === null || _user$services2$ldap === void 0 ? void 0 : _user$services2$ldap.id,\n          ldapAttribute: (_user$services3 = user.services) === null || _user$services3 === void 0 ? void 0 : (_user$services3$ldap = _user$services3.ldap) === null || _user$services3$ldap === void 0 ? void 0 : _user$services3$ldap.idAttribute,\n          username: user.username\n        });\n      }\n      static async logoutDeactivatedUsers(ldap) {\n        const users = await Users.findConnectedLDAPUsers().toArray();\n        var _iteratorAbruptCompletion8 = false;\n        var _didIteratorError8 = false;\n        var _iteratorError8;\n        try {\n          for (var _iterator8 = _asyncIterator(users), _step8; _iteratorAbruptCompletion8 = !(_step8 = await _iterator8.next()).done; _iteratorAbruptCompletion8 = false) {\n            const user = _step8.value;\n            {\n              const ldapUser = await this.findLDAPUser(ldap, user);\n              if (!ldapUser) {\n                continue;\n              }\n              if (this.isUserDeactivated(ldapUser)) {\n                await Users.unsetLoginTokens(user._id);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion8 && _iterator8.return != null) {\n              await _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","LDAPEEManager","Team","Users","Roles","SubscriptionsRaw","Rooms","Subscriptions","addUserToRoom","createRoom","removeUserFromRoom","setUserActiveStatus","settings","getValidRoomName","ensureArray","LDAPConnection","logger","searchLogger","mapLogger","LDAPManager","LDAPUserConverter","syncUserRoles","copyCustomFieldsLDAP","__reifyWaitForDeps__","sync","_settings$get","_settings$get2","_settings$get3","_settings$get4","get","createNewUsers","updateExistingUsers","disableMissingUsers","mergeExistingUsers","options","getConverterOptions","skipExistingUsers","skipNewUsers","ldap","converter","touchedUsers","Set","connect","importNewUsers","membersOfGroupFilter","searchMembersOfGroupFilter","convertData","beforeImportFn","_ref","_ldap$options$groupFi","groupFilterEnabled","groupFilterGroupMemberFormat","memberFormat","replace","username","dn","includes","afterImportFn","_ref2","isNewRecord","data","_id","add","advancedSync","error","disconnect","syncAvatars","updateUserAvatars","validateLDAPTeamsMappingChanges","json","mustBeAnArrayOfStrings","array","Boolean","Array","isArray","length","every","item","mappedTeams","parseJson","mappedRocketChatTeams","Object","values","validStructureMapping","Error","syncLogout","logoutDeactivatedUsers","advancedSyncForUser","user","syncUserChannels","syncUserTeams","e","debug","concat","importUser","findExistingUser","importIds","isUserInGroup","baseDN","filter","_ref3","groupName","searchOptions","scope","result","searchRaw","JSON","parse","err","msg","_settings$get5","_settings$get6","_settings$get7","_settings$get8","_settings$get9","shouldSyncUserRoles","syncUserRolesAutoRemove","syncUserRolesFieldMap","trim","syncUserRolesFilter","syncUserRolesBaseDN","searchStrategy","roles","find","projection","name","toArray","groupsToRolesMap","ldapGroups","keys","roleList","roleIdsList","allowedRoles","getDataMappedByLdapGroups","map","role","split","reduce","allowedRolesIds","roleIdOrName","_roles$find","push","ldapUserGroups","getLdapGroupsByUsername","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","ldapGroup","value","return","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","nonValidatedRole","_roles$find2","skipRemovingRoles","createRoomForSync","channel","roomOwner","findOneByUsernameIgnoringCase","room","customFields","rid","_settings$get10","_settings$get11","_settings$get12","_settings$get13","_settings$get14","syncUserChannelsRemove","syncUserChannelsFieldMap","syncUserChannelsFilter","syncUserChannelsBaseDN","groupsToRoomsMap","channelsToAdd","userChannelsNames","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","userChannelName","undefined","allowDuplicates","findOneByNonValidatedName","teamMain","notInUserGroups","notMappedRooms","roomsToRemove","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","roomName","has","subscription","findOneByRoomIdAndUserId","_settings$get15","mapTeams","groupAttributeName","ldapUserTeams","mapJson","teamNames","allTeamNames","flat","allTeams","listByNames","inTeamIds","_ref4","_ref5","notInTeamIds","_ref6","_ref7","currentTeams","listTeamsBySubscriberUserId","teamId","currentTeamIds","_ref8","teamsToRemove","teamsToAdd","insertMemberOnTeams","removeMemberFromTeams","mappedLdapGroups","filteredMappedLdapGroups","unmappedLdapGroups","join","userDN","userSearchScope","sizeLimit","searchSizeLimit","attributeNames","attributeName","entry","raw","extractLdapAttribute","isUserDeactivated","ldapUser","pwdAccountLockedTime","loginDisabled","orclIsEnabled","lockoutTime","lockoutTimeValue","Number","isNaN","lockoutDuration","Date","setMinutes","getMinutes","valueOf","now","userAccountControl","copyActiveState","userData","syncUserState","deleted","info","copyCustomFields","customFieldsSettings","customFieldsMap","syncCustomFields","Promise","resolve","reject","count","searchAllUsers","entryCallback","extractLdapEntryData","mapUserData","addObjectToMemory","getLdapUsername","endCallback","arguments","users","findLDAPUsers","_iteratorAbruptCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","findLDAPUser","foundUsers","userIds","findLDAPUsersExceptIds","_ref9","allSettled","id","_iteratorAbruptCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","syncUserAvatar","_user$services","_user$services$ldap","_user$services2","_user$services2$ldap","_user$services3","_user$services3$ldap","services","findOneById","idAttribute","findOneByUsername","ldapId","ldapAttribute","findConnectedLDAPUsers","_iteratorAbruptCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","unsetLoginTokens","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/lib/ldap/Manager.ts"],"sourcesContent":["import { Team } from '@rocket.chat/core-services';\nimport type { ILDAPEntry, IUser, IRoom, IRole, IImportUser, IImportRecord } from '@rocket.chat/core-typings';\nimport { Users, Roles, Subscriptions as SubscriptionsRaw, Rooms } from '@rocket.chat/models';\nimport type ldapjs from 'ldapjs';\n\nimport type {\n\tImporterAfterImportCallback,\n\tImporterBeforeImportCallback,\n} from '../../../../app/importer/server/definitions/IConversionCallbacks';\nimport { addUserToRoom } from '../../../../app/lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../../app/lib/server/functions/createRoom';\nimport { removeUserFromRoom } from '../../../../app/lib/server/functions/removeUserFromRoom';\nimport { setUserActiveStatus } from '../../../../app/lib/server/functions/setUserActiveStatus';\nimport { settings } from '../../../../app/settings/server';\nimport { getValidRoomName } from '../../../../app/utils/server/lib/getValidRoomName';\nimport { ensureArray } from '../../../../lib/utils/arrayUtils';\nimport { LDAPConnection } from '../../../../server/lib/ldap/Connection';\nimport { logger, searchLogger, mapLogger } from '../../../../server/lib/ldap/Logger';\nimport { LDAPManager } from '../../../../server/lib/ldap/Manager';\nimport { LDAPUserConverter } from '../../../../server/lib/ldap/UserConverter';\nimport { syncUserRoles } from '../syncUserRoles';\nimport { copyCustomFieldsLDAP } from './copyCustomFieldsLDAP';\n\nexport class LDAPEEManager extends LDAPManager {\n\tpublic static async sync(): Promise<void> {\n\t\tif (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Background_Sync') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst createNewUsers = settings.get<boolean>('LDAP_Background_Sync_Import_New_Users') ?? true;\n\t\tconst updateExistingUsers = settings.get<boolean>('LDAP_Background_Sync_Keep_Existant_Users_Updated') ?? true;\n\t\tlet disableMissingUsers = updateExistingUsers && (settings.get<boolean>('LDAP_Background_Sync_Disable_Missing_Users') ?? false);\n\t\tconst mergeExistingUsers = settings.get<boolean>('LDAP_Background_Sync_Merge_Existent_Users') ?? false;\n\n\t\tconst options = this.getConverterOptions();\n\t\toptions.skipExistingUsers = !updateExistingUsers;\n\t\toptions.skipNewUsers = !createNewUsers;\n\n\t\tconst ldap = new LDAPConnection();\n\t\tconst converter = new LDAPUserConverter(options);\n\t\tconst touchedUsers = new Set<IUser['_id']>();\n\n\t\ttry {\n\t\t\tawait ldap.connect();\n\n\t\t\tif (createNewUsers || mergeExistingUsers) {\n\t\t\t\tawait this.importNewUsers(ldap, converter);\n\t\t\t} else if (updateExistingUsers) {\n\t\t\t\tawait this.updateExistingUsers(ldap, converter, disableMissingUsers);\n\t\t\t\t// Missing users will have been disabled automatically by the update operation, so no need to do a separate query for them\n\t\t\t\tdisableMissingUsers = false;\n\t\t\t}\n\n\t\t\tconst membersOfGroupFilter = await ldap.searchMembersOfGroupFilter();\n\n\t\t\tawait converter.convertData({\n\t\t\t\tbeforeImportFn: (async ({ options }: IImportRecord): Promise<boolean> => {\n\t\t\t\t\tif (!ldap.options.groupFilterEnabled || !ldap.options.groupFilterGroupMemberFormat) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst memberFormat = ldap.options.groupFilterGroupMemberFormat\n\t\t\t\t\t\t?.replace(/#{username}/g, options?.username || '#{username}')\n\t\t\t\t\t\t.replace(/#{userdn}/g, options?.dn || '#{userdn}');\n\n\t\t\t\t\treturn membersOfGroupFilter.includes(memberFormat);\n\t\t\t\t}) as ImporterBeforeImportCallback,\n\t\t\t\tafterImportFn: (async ({ data }, isNewRecord: boolean): Promise<void> => {\n\t\t\t\t\tif (data._id) {\n\t\t\t\t\t\ttouchedUsers.add(data._id);\n\t\t\t\t\t}\n\t\t\t\t\tawait this.advancedSync(ldap, data as IImportUser, converter, isNewRecord);\n\t\t\t\t}) as ImporterAfterImportCallback,\n\t\t\t});\n\n\t\t\tif (disableMissingUsers) {\n\t\t\t\tawait this.disableMissingUsers([...touchedUsers]);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t}\n\n\t\tldap.disconnect();\n\t}\n\n\tpublic static async syncAvatars(): Promise<void> {\n\t\tif (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Background_Sync_Avatars') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst ldap = new LDAPConnection();\n\t\t\tawait ldap.connect();\n\n\t\t\ttry {\n\t\t\t\tawait this.updateUserAvatars(ldap);\n\t\t\t} finally {\n\t\t\t\tldap.disconnect();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t}\n\t}\n\n\tpublic static validateLDAPTeamsMappingChanges(json: string): void {\n\t\tif (!json) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mustBeAnArrayOfStrings = (array: Array<string>): boolean =>\n\t\t\tBoolean(Array.isArray(array) && array.length && array.every((item) => typeof item === 'string'));\n\t\tconst mappedTeams = this.parseJson(json);\n\t\tif (!mappedTeams) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mappedRocketChatTeams = Object.values(mappedTeams);\n\t\tconst validStructureMapping = mappedRocketChatTeams.every(mustBeAnArrayOfStrings);\n\t\tif (!validStructureMapping) {\n\t\t\tthrow new Error(\n\t\t\t\t'Please verify your mapping for LDAP X RocketChat Teams. The structure is invalid, the structure should be an object like: {key: LdapTeam, value: [An array of rocket.chat teams]}',\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic static async syncLogout(): Promise<void> {\n\t\tif (settings.get('LDAP_Enable') !== true || settings.get('LDAP_Sync_AutoLogout_Enabled') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst ldap = new LDAPConnection();\n\t\t\tawait ldap.connect();\n\n\t\t\ttry {\n\t\t\t\tawait this.logoutDeactivatedUsers(ldap);\n\t\t\t} finally {\n\t\t\t\tldap.disconnect();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t}\n\t}\n\n\tpublic static async advancedSyncForUser(ldap: LDAPConnection, user: IUser, isNewRecord: boolean, dn: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.syncUserRoles(ldap, user, dn);\n\t\t\tawait this.syncUserChannels(ldap, user, dn);\n\t\t\tawait this.syncUserTeams(ldap, user, dn, isNewRecord);\n\t\t} catch (e) {\n\t\t\tlogger.debug(`Advanced Sync failed for user: ${dn}`);\n\t\t\tlogger.error(e);\n\t\t}\n\t}\n\n\tprivate static async advancedSync(\n\t\tldap: LDAPConnection,\n\t\timportUser: IImportUser,\n\t\tconverter: LDAPUserConverter,\n\t\tisNewRecord: boolean,\n\t): Promise<void> {\n\t\tconst user = await converter.findExistingUser(importUser);\n\t\tif (!user?.username) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst dn = importUser.importIds[0];\n\t\treturn this.advancedSyncForUser(ldap, user, isNewRecord, dn);\n\t}\n\n\tprivate static async isUserInGroup(\n\t\tldap: LDAPConnection,\n\t\tbaseDN: string,\n\t\tfilter: string,\n\t\t{ dn, username }: { dn: string; username: string },\n\t\tgroupName: string,\n\t): Promise<boolean> {\n\t\tif (!filter || !baseDN) {\n\t\t\tlogger.error('Please setup LDAP Group Filter and LDAP Group BaseDN in LDAP Settings.');\n\t\t\treturn false;\n\t\t}\n\t\tconst searchOptions: ldapjs.SearchOptions = {\n\t\t\tfilter: filter\n\t\t\t\t.replace(/#{username}/g, username)\n\t\t\t\t.replace(/#{groupName}/g, groupName)\n\t\t\t\t.replace(/#{userdn}/g, dn.replace(/\\\\/g, '\\\\5c')),\n\t\t\tscope: 'sub',\n\t\t};\n\n\t\tconst result = await ldap.searchRaw(baseDN, searchOptions);\n\n\t\tif (!Array.isArray(result) || result.length === 0) {\n\t\t\tlogger.debug(`${username} is not in ${groupName} group!!!`);\n\t\t} else {\n\t\t\tlogger.debug(`${username} is in ${groupName} group.`);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate static parseJson(json: string): Record<string, any> | undefined {\n\t\ttry {\n\t\t\treturn JSON.parse(json);\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: 'Unexpected error', err });\n\t\t}\n\t}\n\n\tprivate static async syncUserRoles(ldap: LDAPConnection, user: IUser, dn: string): Promise<void> {\n\t\tconst { username } = user;\n\t\tif (!username) {\n\t\t\tlogger.debug('User has no username');\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldSyncUserRoles = settings.get<boolean>('LDAP_Sync_User_Data_Roles') ?? false;\n\t\tconst syncUserRolesAutoRemove = settings.get<boolean>('LDAP_Sync_User_Data_Roles_AutoRemove') ?? false;\n\t\tconst syncUserRolesFieldMap = (settings.get<string>('LDAP_Sync_User_Data_RolesMap') ?? '').trim();\n\t\tconst syncUserRolesFilter = (settings.get<string>('LDAP_Sync_User_Data_Roles_Filter') ?? '').trim();\n\t\tconst syncUserRolesBaseDN = (settings.get<string>('LDAP_Sync_User_Data_Roles_BaseDN') ?? '').trim();\n\t\tconst searchStrategy = settings.get<'once' | 'each_group'>('LDAP_Sync_User_Data_Roles_GroupMembershipValidationStrategy');\n\n\t\tif (!shouldSyncUserRoles || !syncUserRolesFieldMap) {\n\t\t\tlogger.debug('not syncing user roles');\n\t\t\treturn;\n\t\t}\n\n\t\tconst roles = (await Roles.find(\n\t\t\t{},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray()) as Array<IRole>;\n\n\t\tif (!roles) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst groupsToRolesMap = this.parseJson(syncUserRolesFieldMap);\n\t\tif (!groupsToRolesMap) {\n\t\t\tlogger.debug('missing group role mapping');\n\t\t\treturn;\n\t\t}\n\n\t\tconst ldapGroups = Object.keys(groupsToRolesMap);\n\t\tconst roleList: Array<IRole['_id']> = [];\n\t\tconst roleIdsList: Array<IRole['_id']> = [];\n\t\tconst allowedRoles: Array<IRole['_id']> = this.getDataMappedByLdapGroups(groupsToRolesMap, ldapGroups)\n\t\t\t.map((role) => role.split(/\\.(.+)/)[0])\n\t\t\t.reduce((allowedRolesIds: string[], roleIdOrName: string) => {\n\t\t\t\tconst role = roles.find((role) => role._id === roleIdOrName) ?? roles.find((role) => role.name === roleIdOrName);\n\t\t\t\tif (role) {\n\t\t\t\t\tallowedRolesIds.push(role._id);\n\t\t\t\t}\n\t\t\t\treturn allowedRolesIds;\n\t\t\t}, []);\n\n\t\tif (searchStrategy === 'once') {\n\t\t\tconst ldapUserGroups = await this.getLdapGroupsByUsername(ldap, username, dn, syncUserRolesBaseDN, syncUserRolesFilter);\n\t\t\troleList.push(...this.getDataMappedByLdapGroups(groupsToRolesMap, ldapUserGroups));\n\t\t} else if (searchStrategy === 'each_group') {\n\t\t\tfor await (const ldapGroup of ldapGroups) {\n\t\t\t\tif (await this.isUserInGroup(ldap, syncUserRolesBaseDN, syncUserRolesFilter, { dn, username }, ldapGroup)) {\n\t\t\t\t\troleList.push(...ensureArray<string>(groupsToRolesMap[ldapGroup]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor await (const nonValidatedRole of roleList) {\n\t\t\tconst [roleIdOrName] = nonValidatedRole.split(/\\.(.+)/);\n\n\t\t\tconst role = roles.find((role) => role._id === roleIdOrName) ?? roles.find((role) => role.name === roleIdOrName);\n\t\t\tif (role) {\n\t\t\t\troleIdsList.push(role._id);\n\t\t\t}\n\t\t}\n\n\t\tawait syncUserRoles(user._id, roleIdsList, {\n\t\t\tallowedRoles,\n\t\t\tskipRemovingRoles: !syncUserRolesAutoRemove,\n\t\t});\n\t}\n\n\tprivate static async createRoomForSync(channel: string): Promise<IRoom | undefined> {\n\t\tlogger.debug(`Channel '${channel}' doesn't exist, creating it.`);\n\n\t\tconst roomOwner = settings.get<string>('LDAP_Sync_User_Data_Channels_Admin') || '';\n\n\t\tconst user = await Users.findOneByUsernameIgnoringCase(roomOwner);\n\n\t\tconst room = await createRoom('c', channel, user, [], false, false, {\n\t\t\tcustomFields: { ldap: true },\n\t\t});\n\t\tif (!room?.rid) {\n\t\t\tlogger.error(`Unable to auto-create channel '${channel}' during ldap sync.`);\n\t\t\treturn;\n\t\t}\n\n\t\troom._id = room.rid;\n\t\treturn room;\n\t}\n\n\tprivate static async syncUserChannels(ldap: LDAPConnection, user: IUser, dn: string): Promise<void> {\n\t\tconst syncUserChannels = settings.get<boolean>('LDAP_Sync_User_Data_Channels') ?? false;\n\t\tconst syncUserChannelsRemove = settings.get<boolean>('LDAP_Sync_User_Data_Channels_Enforce_AutoChannels') ?? false;\n\t\tconst syncUserChannelsFieldMap = (settings.get<string>('LDAP_Sync_User_Data_ChannelsMap') ?? '').trim();\n\t\tconst syncUserChannelsFilter = (settings.get<string>('LDAP_Sync_User_Data_Channels_Filter') ?? '').trim();\n\t\tconst syncUserChannelsBaseDN = (settings.get<string>('LDAP_Sync_User_Data_Channels_BaseDN') ?? '').trim();\n\t\tconst searchStrategy = settings.get<'once' | 'each_group'>('LDAP_Sync_User_Data_Channels_GroupMembershipValidationStrategy');\n\n\t\tif (!syncUserChannels || !syncUserChannelsFieldMap) {\n\t\t\tlogger.debug('not syncing groups to channels');\n\t\t\treturn;\n\t\t}\n\n\t\tconst groupsToRoomsMap = this.parseJson(syncUserChannelsFieldMap);\n\t\tif (!groupsToRoomsMap) {\n\t\t\tlogger.debug('missing group channel mapping');\n\t\t\treturn;\n\t\t}\n\n\t\tconst { username } = user;\n\t\tif (!username) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug('syncing user channels');\n\t\tconst ldapGroups = Object.keys(groupsToRoomsMap);\n\t\tconst ldapUserGroups: string[] = [];\n\t\tconst channelsToAdd = new Set<string>();\n\t\tconst userChannelsNames: string[] = [];\n\n\t\tif (searchStrategy === 'once') {\n\t\t\tldapUserGroups.push(...(await this.getLdapGroupsByUsername(ldap, username, dn, syncUserChannelsBaseDN, syncUserChannelsFilter)));\n\t\t\tuserChannelsNames.push(...this.getDataMappedByLdapGroups(groupsToRoomsMap, ldapUserGroups));\n\t\t} else if (searchStrategy === 'each_group') {\n\t\t\tfor await (const ldapGroup of ldapGroups) {\n\t\t\t\tif (await this.isUserInGroup(ldap, syncUserChannelsBaseDN, syncUserChannelsFilter, { dn, username }, ldapGroup)) {\n\t\t\t\t\tuserChannelsNames.push(...ensureArray<string>(groupsToRoomsMap[ldapGroup]));\n\t\t\t\t\tldapUserGroups.push(ldapGroup);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor await (const userChannelName of userChannelsNames) {\n\t\t\ttry {\n\t\t\t\tconst name = await getValidRoomName(userChannelName.trim(), undefined, { allowDuplicates: true });\n\t\t\t\tconst room = (await Rooms.findOneByNonValidatedName(name)) || (await this.createRoomForSync(userChannelName));\n\t\t\t\tif (!room) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (room.teamMain) {\n\t\t\t\t\tlogger.error(`Can't add user to channel ${userChannelName} because it is a team.`);\n\t\t\t\t} else {\n\t\t\t\t\tchannelsToAdd.add(room._id);\n\t\t\t\t\tawait addUserToRoom(room._id, user);\n\t\t\t\t\tlogger.debug(`Synced user channel ${room._id} from LDAP for ${username}`);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tlogger.debug(`Failed to sync user room, user = ${username}, channel = ${userChannelName}`);\n\t\t\t\tlogger.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (syncUserChannelsRemove) {\n\t\t\tconst notInUserGroups = ldapGroups.filter((ldapGroup) => !ldapUserGroups.includes(ldapGroup));\n\t\t\tconst notMappedRooms = this.getDataMappedByLdapGroups(groupsToRoomsMap, notInUserGroups);\n\n\t\t\tconst roomsToRemove = new Set<string>(notMappedRooms);\n\t\t\tfor await (const roomName of roomsToRemove) {\n\t\t\t\tconst name = await getValidRoomName(roomName.trim(), undefined, { allowDuplicates: true });\n\t\t\t\tconst room = await Rooms.findOneByNonValidatedName(name);\n\t\t\t\tif (!room || room.teamMain || channelsToAdd.has(room._id)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst subscription = await SubscriptionsRaw.findOneByRoomIdAndUserId(room._id, user._id);\n\t\t\t\tif (subscription) {\n\t\t\t\t\tawait removeUserFromRoom(room._id, user);\n\t\t\t\t\tlogger.debug(`Removed user ${username} from channel ${room._id}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static async syncUserTeams(ldap: LDAPConnection, user: IUser, dn: string, isNewRecord: boolean): Promise<void> {\n\t\tif (!user.username) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mapTeams =\n\t\t\tsettings.get<boolean>('LDAP_Enable_LDAP_Groups_To_RC_Teams') &&\n\t\t\t(isNewRecord || settings.get<boolean>('LDAP_Validate_Teams_For_Each_Login'));\n\t\tif (!mapTeams) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst baseDN = (settings.get<string>('LDAP_Teams_BaseDN') ?? '').trim() || ldap.options.baseDN;\n\t\tconst filter = settings.get<string>('LDAP_Query_To_Get_User_Teams');\n\t\tconst groupAttributeName = settings.get<string>('LDAP_Teams_Name_Field');\n\t\tconst ldapUserTeams = await this.getLdapGroupsByUsername(ldap, user.username, dn, baseDN, filter, groupAttributeName);\n\t\tconst mapJson = settings.get<string>('LDAP_Groups_To_Rocket_Chat_Teams');\n\t\tif (!mapJson) {\n\t\t\treturn;\n\t\t}\n\t\tconst map = this.parseJson(mapJson) as Record<string, string>;\n\t\tif (!map) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst teamNames = this.getDataMappedByLdapGroups(map, ldapUserTeams);\n\n\t\tconst allTeamNames = [...new Set(Object.values(map).flat())];\n\t\tconst allTeams = await Team.listByNames(allTeamNames, { projection: { _id: 1, name: 1 } });\n\n\t\tconst inTeamIds = allTeams.filter(({ name }) => teamNames.includes(name)).map(({ _id }) => _id);\n\t\tconst notInTeamIds = allTeams.filter(({ name }) => !teamNames.includes(name)).map(({ _id }) => _id);\n\n\t\tconst currentTeams = await Team.listTeamsBySubscriberUserId(user._id, {\n\t\t\tprojection: { teamId: 1 },\n\t\t});\n\t\tconst currentTeamIds = currentTeams?.map(({ teamId }) => teamId);\n\t\tconst teamsToRemove = currentTeamIds?.filter((teamId) => notInTeamIds.includes(teamId));\n\t\tconst teamsToAdd = inTeamIds.filter((teamId) => !currentTeamIds?.includes(teamId));\n\n\t\tawait Team.insertMemberOnTeams(user._id, teamsToAdd);\n\t\tif (teamsToRemove) {\n\t\t\tawait Team.removeMemberFromTeams(user._id, teamsToRemove);\n\t\t}\n\t}\n\n\tprivate static getDataMappedByLdapGroups(map: Record<string, string>, ldapGroups: Array<string>): Array<string> {\n\t\tconst mappedLdapGroups = Object.keys(map);\n\t\tconst filteredMappedLdapGroups = ldapGroups.filter((ldapGroup) => mappedLdapGroups.includes(ldapGroup));\n\n\t\tif (filteredMappedLdapGroups.length < ldapGroups.length) {\n\t\t\tconst unmappedLdapGroups = ldapGroups.filter((ldapGroup) => !mappedLdapGroups.includes(ldapGroup));\n\t\t\tlogger.error(`The following LDAP groups are not mapped in Rocket.Chat: \"${unmappedLdapGroups.join(', ')}\".`);\n\t\t}\n\n\t\tif (!filteredMappedLdapGroups.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn [...new Set(filteredMappedLdapGroups.map((ldapGroup) => map[ldapGroup]).flat())];\n\t}\n\n\tprivate static async getLdapGroupsByUsername(\n\t\tldap: LDAPConnection,\n\t\tusername: string,\n\t\tuserDN: string,\n\t\tbaseDN: string,\n\t\tfilter: string,\n\t\tgroupAttributeName?: string,\n\t): Promise<Array<string>> {\n\t\tif (!filter) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst searchOptions = {\n\t\t\tfilter: filter.replace(/#{username}/g, username).replace(/#{userdn}/g, userDN.replace(/\\\\/g, '\\\\5c')),\n\t\t\tscope: ldap.options.userSearchScope || 'sub',\n\t\t\tsizeLimit: ldap.options.searchSizeLimit,\n\t\t};\n\n\t\tconst attributeNames = groupAttributeName ? groupAttributeName.split(',').map((attributeName) => attributeName.trim()) : ['ou', 'cn'];\n\n\t\tconst ldapUserGroups = await ldap.searchRaw(baseDN, searchOptions);\n\t\tif (!Array.isArray(ldapUserGroups)) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn ldapUserGroups\n\t\t\t.map((entry) => {\n\t\t\t\tif (!entry?.raw) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tfor (const attributeName of attributeNames) {\n\t\t\t\t\tif (entry.raw[attributeName]) {\n\t\t\t\t\t\treturn ldap.extractLdapAttribute(entry.raw[attributeName]) as string;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t})\n\t\t\t.filter((entry): entry is string => Boolean(entry))\n\t\t\t.flat();\n\t}\n\n\tprivate static isUserDeactivated(ldapUser: ILDAPEntry): boolean {\n\t\t// Account locked by \"Draft-behera-ldap-password-policy\"\n\t\tif (ldapUser.pwdAccountLockedTime) {\n\t\t\tmapLogger.debug('User account is locked by password policy (attribute pwdAccountLockedTime)');\n\t\t\treturn true;\n\t\t}\n\n\t\t// EDirectory: Account manually disabled by an admin\n\t\tif (ldapUser.loginDisabled) {\n\t\t\tmapLogger.debug('User account was manually disabled by an admin (attribute loginDisabled)');\n\t\t\treturn true;\n\t\t}\n\n\t\t// Oracle: Account must not be allowed to authenticate\n\t\tif (ldapUser.orclIsEnabled && ldapUser.orclIsEnabled !== 'ENABLED') {\n\t\t\tmapLogger.debug('User must not be allowed to authenticate (attribute orclIsEnabled)');\n\t\t\treturn true;\n\t\t}\n\n\t\t// Active Directory - Account locked automatically by security policies\n\t\tif (ldapUser.lockoutTime && ldapUser.lockoutTime !== '0') {\n\t\t\tconst lockoutTimeValue = Number(ldapUser.lockoutTime);\n\t\t\tif (lockoutTimeValue && !isNaN(lockoutTimeValue)) {\n\t\t\t\t// Automatic unlock is disabled\n\t\t\t\tif (!ldapUser.lockoutDuration) {\n\t\t\t\t\tmapLogger.debug('User account locked indefinitely by security policy (attribute lockoutTime)');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tconst lockoutTime = new Date(lockoutTimeValue);\n\t\t\t\tlockoutTime.setMinutes(lockoutTime.getMinutes() + Number(ldapUser.lockoutDuration));\n\t\t\t\t// Account has not unlocked itself yet\n\t\t\t\tif (lockoutTime.valueOf() > Date.now()) {\n\t\t\t\t\tmapLogger.debug('User account locked temporarily by security policy (attribute lockoutTime)');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Active Directory - Account disabled by an Admin\n\t\tif (ldapUser.userAccountControl && (ldapUser.userAccountControl & 2) === 2) {\n\t\t\tmapLogger.debug('User account disabled by an admin (attribute userAccountControl)');\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic static copyActiveState(ldapUser: ILDAPEntry, userData: IImportUser): void {\n\t\tif (!ldapUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst syncUserState = settings.get('LDAP_Sync_User_Active_State');\n\t\tif (syncUserState === 'none') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deleted = this.isUserDeactivated(ldapUser);\n\t\tif (deleted === userData.deleted) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (syncUserState === 'disable' && !deleted) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (syncUserState === 'enable' && deleted) {\n\t\t\treturn;\n\t\t}\n\n\t\tuserData.deleted = deleted;\n\t\tlogger.info(`${deleted ? 'Deactivating' : 'Activating'} user ${userData.name} (${userData.username})`);\n\t}\n\n\tpublic static copyCustomFields(ldapUser: ILDAPEntry, userData: IImportUser): void {\n\t\treturn copyCustomFieldsLDAP(\n\t\t\t{\n\t\t\t\tldapUser,\n\t\t\t\tuserData,\n\t\t\t\tcustomFieldsSettings: settings.get<string>('Accounts_CustomFields'),\n\t\t\t\tcustomFieldsMap: settings.get<string>('LDAP_CustomFieldMap'),\n\t\t\t\tsyncCustomFields: settings.get<boolean>('LDAP_Sync_Custom_Fields'),\n\t\t\t},\n\t\t\tlogger,\n\t\t);\n\t}\n\n\tprivate static async importNewUsers(ldap: LDAPConnection, converter: LDAPUserConverter): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet count = 0;\n\n\t\t\tvoid ldap.searchAllUsers<IImportUser>({\n\t\t\t\tentryCallback: (entry: ldapjs.SearchEntry): IImportUser | undefined => {\n\t\t\t\t\tconst data = ldap.extractLdapEntryData(entry);\n\t\t\t\t\tcount++;\n\n\t\t\t\t\tconst userData = this.mapUserData(data);\n\t\t\t\t\tconverter.addObjectToMemory(userData, { dn: data.dn, username: this.getLdapUsername(data) });\n\t\t\t\t\treturn userData;\n\t\t\t\t},\n\t\t\t\tendCallback: (error: any): void => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tlogger.error(error);\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlogger.info('LDAP finished loading users. Users added to importer: ', count);\n\t\t\t\t\tresolve();\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static async updateExistingUsers(ldap: LDAPConnection, converter: LDAPUserConverter, disableMissingUsers = false): Promise<void> {\n\t\tconst users = await Users.findLDAPUsers().toArray();\n\t\tfor await (const user of users) {\n\t\t\tconst ldapUser = await this.findLDAPUser(ldap, user);\n\n\t\t\tif (ldapUser) {\n\t\t\t\tconst userData = this.mapUserData(ldapUser, user.username);\n\t\t\t\tconverter.addObjectToMemory(userData, { dn: ldapUser.dn, username: this.getLdapUsername(ldapUser) });\n\t\t\t} else if (disableMissingUsers) {\n\t\t\t\tawait setUserActiveStatus(user._id, false, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static async disableMissingUsers(foundUsers: IUser['_id'][]): Promise<void> {\n\t\tconst userIds = (await Users.findLDAPUsersExceptIds(foundUsers, { projection: { _id: 1 } }).toArray()).map(({ _id }) => _id);\n\n\t\tawait Promise.allSettled(userIds.map((id) => setUserActiveStatus(id, false, true)));\n\t}\n\n\tprivate static async updateUserAvatars(ldap: LDAPConnection): Promise<void> {\n\t\tconst users = await Users.findLDAPUsers().toArray();\n\t\tfor await (const user of users) {\n\t\t\tconst ldapUser = await this.findLDAPUser(ldap, user);\n\t\t\tif (!ldapUser) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait LDAPManager.syncUserAvatar(user, ldapUser);\n\t\t}\n\t}\n\n\tprivate static async findLDAPUser(ldap: LDAPConnection, user: IUser): Promise<ILDAPEntry | undefined> {\n\t\tif (user.services?.ldap?.id) {\n\t\t\treturn ldap.findOneById(user.services.ldap.id, user.services.ldap.idAttribute);\n\t\t}\n\n\t\tif (user.username) {\n\t\t\treturn ldap.findOneByUsername(user.username);\n\t\t}\n\n\t\tsearchLogger.debug({\n\t\t\tmsg: 'existing LDAP user not found during Sync',\n\t\t\tldapId: user.services?.ldap?.id,\n\t\t\tldapAttribute: user.services?.ldap?.idAttribute,\n\t\t\tusername: user.username,\n\t\t});\n\t}\n\n\tprivate static async logoutDeactivatedUsers(ldap: LDAPConnection): Promise<void> {\n\t\tconst users = await Users.findConnectedLDAPUsers().toArray();\n\n\t\tfor await (const user of users) {\n\t\t\tconst ldapUser = await this.findLDAPUser(ldap, user);\n\t\t\tif (!ldapUser) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.isUserDeactivated(ldapUser)) {\n\t\t\t\tawait Users.unsetLoginTokens(user._id);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"486ca853636d7770c203f6e87a96ea761e92e6bd"}
