{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","inputSourceMap":{"version":3,"file":"client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","sourceRoot":"","sources":["client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { useScrollableRecordList } from '../../../../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../../../lib/lists/RecordList';\nimport { getConfig } from '../../../../../lib/utils/getConfig';\nimport { mapMessageFromApi } from '../../../../../lib/utils/mapMessageFromApi';\n\ntype TeamsChannelListOptions = {\n\tteamId: string;\n\ttype: 'all' | 'autoJoin';\n\ttext: string;\n};\n\nexport const useTeamsChannelList = (\n\toptions: TeamsChannelListOptions,\n): {\n\tteamsChannelList: RecordList<IRoom>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst apiEndPoint = useEndpoint('GET', '/v1/teams.listRooms');\n\tconst [teamsChannelList, setTeamsChannelList] = useState(() => new RecordList<IRoom>());\n\tconst reload = useCallback(() => setTeamsChannelList(new RecordList<IRoom>()), []);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { rooms, total } = await apiEndPoint({\n\t\t\t\tteamId: options.teamId,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t\tfilter: options.text,\n\t\t\t\ttype: options.type,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: rooms.map(({ _updatedAt, lastMessage, lm, ts, webRtcCallStartTime, usersWaitingForE2EKeys, ...room }) => ({\n\t\t\t\t\t...(lm && { lm: new Date(lm) }),\n\t\t\t\t\t...(ts && { ts: new Date(ts) }),\n\t\t\t\t\t_updatedAt: new Date(_updatedAt),\n\t\t\t\t\t...(lastMessage && { lastMessage: mapMessageFromApi(lastMessage) }),\n\t\t\t\t\t...(webRtcCallStartTime && { webRtcCallStartTime: new Date(webRtcCallStartTime) }),\n\t\t\t\t\t...(usersWaitingForE2EKeys && usersWaitingForE2EKeys.map(({ userId, ts }) => ({ userId, ts: new Date(ts) }))),\n\t\t\t\t\t...room,\n\t\t\t\t})),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[apiEndPoint, options],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(\n\t\tteamsChannelList,\n\t\tfetchData,\n\t\tuseMemo(() => parseInt(`${getConfig('teamsChannelListSize', 10)}`), []),\n\t);\n\n\treturn {\n\t\treload,\n\t\tteamsChannelList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","inputSourceMap":{"version":3,"file":"client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts","sourceRoot":"","sources":["client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { useScrollableRecordList } from '../../../../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../../../lib/lists/RecordList';\nimport { getConfig } from '../../../../../lib/utils/getConfig';\nimport { mapMessageFromApi } from '../../../../../lib/utils/mapMessageFromApi';\n\ntype TeamsChannelListOptions = {\n\tteamId: string;\n\ttype: 'all' | 'autoJoin';\n\ttext: string;\n};\n\nexport const useTeamsChannelList = (\n\toptions: TeamsChannelListOptions,\n): {\n\tteamsChannelList: RecordList<IRoom>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst apiEndPoint = useEndpoint('GET', '/v1/teams.listRooms');\n\tconst [teamsChannelList, setTeamsChannelList] = useState(() => new RecordList<IRoom>());\n\tconst reload = useCallback(() => setTeamsChannelList(new RecordList<IRoom>()), []);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { rooms, total } = await apiEndPoint({\n\t\t\t\tteamId: options.teamId,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t\tfilter: options.text,\n\t\t\t\ttype: options.type,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: rooms.map(({ _updatedAt, lastMessage, lm, ts, webRtcCallStartTime, usersWaitingForE2EKeys, ...room }) => ({\n\t\t\t\t\t...(lm && { lm: new Date(lm) }),\n\t\t\t\t\t...(ts && { ts: new Date(ts) }),\n\t\t\t\t\t_updatedAt: new Date(_updatedAt),\n\t\t\t\t\t...(lastMessage && { lastMessage: mapMessageFromApi(lastMessage) }),\n\t\t\t\t\t...(webRtcCallStartTime && { webRtcCallStartTime: new Date(webRtcCallStartTime) }),\n\t\t\t\t\t...(usersWaitingForE2EKeys && usersWaitingForE2EKeys.map(({ userId, ts }) => ({ userId, ts: new Date(ts) }))),\n\t\t\t\t\t...room,\n\t\t\t\t})),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[apiEndPoint, options],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(\n\t\tteamsChannelList,\n\t\tfetchData,\n\t\tuseMemo(() => parseInt(`${getConfig('teamsChannelListSize', 10)}`), []),\n\t);\n\n\treturn {\n\t\treload,\n\t\tteamsChannelList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"]}}},"code":"const _excluded = [\"_updatedAt\", \"lastMessage\", \"lm\", \"ts\", \"webRtcCallStartTime\", \"usersWaitingForE2EKeys\"];\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nlet _objectWithoutProperties;\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n}, 1);\nmodule.export({\n  useTeamsChannelList: () => useTeamsChannelList\n});\nlet useEndpoint;\nmodule.link(\"@rocket.chat/ui-contexts\", {\n  useEndpoint(v) {\n    useEndpoint = v;\n  }\n}, 0);\nlet useCallback, useMemo, useState;\nmodule.link(\"react\", {\n  useCallback(v) {\n    useCallback = v;\n  },\n  useMemo(v) {\n    useMemo = v;\n  },\n  useState(v) {\n    useState = v;\n  }\n}, 1);\nlet useScrollableRecordList;\nmodule.link(\"../../../../../hooks/lists/useScrollableRecordList\", {\n  useScrollableRecordList(v) {\n    useScrollableRecordList = v;\n  }\n}, 2);\nlet useComponentDidUpdate;\nmodule.link(\"../../../../../hooks/useComponentDidUpdate\", {\n  useComponentDidUpdate(v) {\n    useComponentDidUpdate = v;\n  }\n}, 3);\nlet RecordList;\nmodule.link(\"../../../../../lib/lists/RecordList\", {\n  RecordList(v) {\n    RecordList = v;\n  }\n}, 4);\nlet getConfig;\nmodule.link(\"../../../../../lib/utils/getConfig\", {\n  getConfig(v) {\n    getConfig = v;\n  }\n}, 5);\nlet mapMessageFromApi;\nmodule.link(\"../../../../../lib/utils/mapMessageFromApi\", {\n  mapMessageFromApi(v) {\n    mapMessageFromApi = v;\n  }\n}, 6);\nconst useTeamsChannelList = options => {\n  const apiEndPoint = useEndpoint('GET', '/v1/teams.listRooms');\n  const [teamsChannelList, setTeamsChannelList] = useState(() => new RecordList());\n  const reload = useCallback(() => setTeamsChannelList(new RecordList()), []);\n  useComponentDidUpdate(() => {\n    options && reload();\n  }, [options, reload]);\n  const fetchData = useCallback(async (start, end) => {\n    const {\n      rooms,\n      total\n    } = await apiEndPoint({\n      teamId: options.teamId,\n      offset: start,\n      count: end,\n      filter: options.text,\n      type: options.type\n    });\n    return {\n      items: rooms.map(_ref => {\n        let {\n            _updatedAt,\n            lastMessage,\n            lm,\n            ts,\n            webRtcCallStartTime,\n            usersWaitingForE2EKeys\n          } = _ref,\n          room = _objectWithoutProperties(_ref, _excluded);\n        return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, lm && {\n          lm: new Date(lm)\n        }), ts && {\n          ts: new Date(ts)\n        }), {}, {\n          _updatedAt: new Date(_updatedAt)\n        }, lastMessage && {\n          lastMessage: mapMessageFromApi(lastMessage)\n        }), webRtcCallStartTime && {\n          webRtcCallStartTime: new Date(webRtcCallStartTime)\n        }), usersWaitingForE2EKeys && usersWaitingForE2EKeys.map(_ref2 => {\n          let {\n            userId,\n            ts\n          } = _ref2;\n          return {\n            userId,\n            ts: new Date(ts)\n          };\n        })), room);\n      }),\n      itemCount: total\n    };\n  }, [apiEndPoint, options]);\n  const {\n    loadMoreItems,\n    initialItemCount\n  } = useScrollableRecordList(teamsChannelList, fetchData, useMemo(() => parseInt(\"\".concat(getConfig('teamsChannelListSize', 10))), []));\n  return {\n    reload,\n    teamsChannelList,\n    loadMoreItems,\n    initialItemCount\n  };\n};","map":{"version":3,"names":["_objectSpread","module","link","default","v","_objectWithoutProperties","export","useTeamsChannelList","useEndpoint","useCallback","useMemo","useState","useScrollableRecordList","useComponentDidUpdate","RecordList","getConfig","mapMessageFromApi","options","apiEndPoint","teamsChannelList","setTeamsChannelList","reload","fetchData","start","end","rooms","total","teamId","offset","count","filter","text","type","items","map","_ref","_updatedAt","lastMessage","lm","ts","webRtcCallStartTime","usersWaitingForE2EKeys","room","_excluded","Date","_ref2","userId","itemCount","loadMoreItems","initialItemCount","parseInt","concat"],"sources":["client/views/teams/contextualBar/channels/hooks/useTeamsChannelList.ts"],"sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { useScrollableRecordList } from '../../../../../hooks/lists/useScrollableRecordList';\nimport { useComponentDidUpdate } from '../../../../../hooks/useComponentDidUpdate';\nimport { RecordList } from '../../../../../lib/lists/RecordList';\nimport { getConfig } from '../../../../../lib/utils/getConfig';\nimport { mapMessageFromApi } from '../../../../../lib/utils/mapMessageFromApi';\n\ntype TeamsChannelListOptions = {\n\tteamId: string;\n\ttype: 'all' | 'autoJoin';\n\ttext: string;\n};\n\nexport const useTeamsChannelList = (\n\toptions: TeamsChannelListOptions,\n): {\n\tteamsChannelList: RecordList<IRoom>;\n\tinitialItemCount: number;\n\treload: () => void;\n\tloadMoreItems: (start: number, end: number) => void;\n} => {\n\tconst apiEndPoint = useEndpoint('GET', '/v1/teams.listRooms');\n\tconst [teamsChannelList, setTeamsChannelList] = useState(() => new RecordList<IRoom>());\n\tconst reload = useCallback(() => setTeamsChannelList(new RecordList<IRoom>()), []);\n\n\tuseComponentDidUpdate(() => {\n\t\toptions && reload();\n\t}, [options, reload]);\n\n\tconst fetchData = useCallback(\n\t\tasync (start, end) => {\n\t\t\tconst { rooms, total } = await apiEndPoint({\n\t\t\t\tteamId: options.teamId,\n\t\t\t\toffset: start,\n\t\t\t\tcount: end,\n\t\t\t\tfilter: options.text,\n\t\t\t\ttype: options.type,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\titems: rooms.map(({ _updatedAt, lastMessage, lm, ts, webRtcCallStartTime, usersWaitingForE2EKeys, ...room }) => ({\n\t\t\t\t\t...(lm && { lm: new Date(lm) }),\n\t\t\t\t\t...(ts && { ts: new Date(ts) }),\n\t\t\t\t\t_updatedAt: new Date(_updatedAt),\n\t\t\t\t\t...(lastMessage && { lastMessage: mapMessageFromApi(lastMessage) }),\n\t\t\t\t\t...(webRtcCallStartTime && { webRtcCallStartTime: new Date(webRtcCallStartTime) }),\n\t\t\t\t\t...(usersWaitingForE2EKeys && usersWaitingForE2EKeys.map(({ userId, ts }) => ({ userId, ts: new Date(ts) }))),\n\t\t\t\t\t...room,\n\t\t\t\t})),\n\t\t\t\titemCount: total,\n\t\t\t};\n\t\t},\n\t\t[apiEndPoint, options],\n\t);\n\n\tconst { loadMoreItems, initialItemCount } = useScrollableRecordList(\n\t\tteamsChannelList,\n\t\tfetchData,\n\t\tuseMemo(() => parseInt(`${getConfig('teamsChannelListSize', 10)}`), []),\n\t);\n\n\treturn {\n\t\treload,\n\t\tteamsChannelList,\n\t\tloadMoreItems,\n\t\tinitialItemCount,\n\t};\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"d7025ed0881a0126004a85f54d4fdee340bd4764"}
