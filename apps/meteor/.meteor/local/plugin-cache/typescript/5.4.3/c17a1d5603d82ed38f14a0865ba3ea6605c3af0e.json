{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts","inputSourceMap":{"version":3,"file":"ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts","sourceRoot":"","sources":["ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FederationPaginatedResult, IFederationPublicRooms } from '@rocket.chat/rest-typings';\n\nimport { MatrixRoomJoinRules } from '../../../../../../../server/services/federation/infrastructure/matrix/definitions/MatrixRoomJoinRules';\nimport type { RocketChatFileAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatMessageAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Message';\nimport type { RocketChatNotificationAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Notification';\nimport type { RocketChatSettingsAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Settings';\nimport { ROCKET_CHAT_FEDERATION_ROLES } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/definitions/FederatedRoomInternalRoles';\nimport { FederatedUserEE } from '../../../domain/FederatedUser';\nimport type { IFederationBridgeEE, IFederationPublicRoomsResult } from '../../../domain/IFederationBridge';\nimport type { RocketChatQueueAdapterEE } from '../../../infrastructure/rocket-chat/adapters/Queue';\nimport type { RocketChatRoomAdapterEE } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatUserAdapterEE } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { AbstractFederationApplicationServiceEE } from '../../AbstractFederationApplicationServiceEE';\nimport type { FederationJoinExternalPublicRoomInputDto, FederationSearchPublicRoomsInputDto } from './input/RoomInputDto';\nimport type {\n\tFederationBeforeAddUserToARoomDto,\n\tFederationOnRoomCreationDto,\n\tFederationOnUsersAddedToARoomDto,\n\tFederationRoomInviteUserDto,\n\tFederationSetupRoomDto,\n\tIFederationInviteeDto,\n} from './input/RoomSenderDto';\n\nexport class FederationRoomServiceSender extends AbstractFederationApplicationServiceEE {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapterEE,\n\t\tprotected internalUserAdapter: RocketChatUserAdapterEE,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected internalMessageAdapter: RocketChatMessageAdapter,\n\t\tprotected internalNotificationAdapter: RocketChatNotificationAdapter,\n\t\tprotected internalQueueAdapter: RocketChatQueueAdapterEE,\n\t\tprotected bridge: IFederationBridgeEE,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async onRoomCreated(roomOnCreationInput: FederationOnRoomCreationDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, invitees } = roomOnCreationInput;\n\t\tawait this.setupFederatedRoom({ internalInviterId, internalRoomId });\n\n\t\tif (invitees.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.inviteLocalThenExternalUsers(invitees, internalInviterId, internalRoomId);\n\t}\n\n\tpublic async beforeAddUserToARoom(dmBeforeAddUserToARoomInput: FederationBeforeAddUserToARoomDto): Promise<void> {\n\t\tconst { invitees = [], internalInviter, internalRoomId } = dmBeforeAddUserToARoomInput;\n\t\tif (invitees.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (internalInviter) {\n\t\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviter._id);\n\t\t\tif (!federatedUser) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\t\tif (!federatedRoom) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst userRolesInThisRoom = await this.internalRoomAdapter.getInternalRoomRolesByUserId(\n\t\t\t\tfederatedRoom.getInternalId(),\n\t\t\t\tfederatedUser.getInternalId(),\n\t\t\t);\n\t\t\tconst canAddUserToARoom =\n\t\t\t\tuserRolesInThisRoom.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) ||\n\t\t\t\tuserRolesInThisRoom.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR) ||\n\t\t\t\tfederatedRoom.isTheCreator(federatedUser.getInternalId());\n\t\t\tif (!canAddUserToARoom) {\n\t\t\t\tthrow new Error('You are not allowed to add users to this room');\n\t\t\t}\n\t\t}\n\n\t\tawait this.createUsersLocallyOnly(invitees);\n\t}\n\n\tprivate async inviteLocalThenExternalUsers(\n\t\tinvitees: IFederationInviteeDto[],\n\t\tinternalInviterId: string,\n\t\tinternalRoomId: string,\n\t): Promise<void> {\n\t\tconst localUsers = invitees.filter((user) =>\n\t\t\tFederatedUserEE.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(user.rawInviteeId), this.internalHomeServerDomain),\n\t\t);\n\n\t\tconst externalUsers = invitees.filter(\n\t\t\t(user) =>\n\t\t\t\t!FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\t\t\tthis.bridge.extractHomeserverOrigin(user.rawInviteeId),\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t),\n\t\t);\n\n\t\tfor await (const user of [...localUsers, ...externalUsers]) {\n\t\t\tawait this.inviteUserToAFederatedRoom({\n\t\t\t\tinternalInviterId,\n\t\t\t\tinternalRoomId,\n\t\t\t\tinviteeUsernameOnly: user.inviteeUsernameOnly,\n\t\t\t\tnormalizedInviteeId: user.normalizedInviteeId,\n\t\t\t\trawInviteeId: user.rawInviteeId,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async onUsersAddedToARoom(roomOnUsersAddedToARoomInput: FederationOnUsersAddedToARoomDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, invitees, inviteComesFromAnExternalHomeServer } = roomOnUsersAddedToARoomInput;\n\n\t\tif (inviteComesFromAnExternalHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.inviteLocalThenExternalUsers(invitees, internalInviterId, internalRoomId);\n\t}\n\n\tpublic async searchPublicRooms(roomSearchInputDto: FederationSearchPublicRoomsInputDto): Promise<\n\t\tFederationPaginatedResult<{\n\t\t\trooms: IFederationPublicRooms[];\n\t\t}>\n\t> {\n\t\tif (!this.internalSettingsAdapter.isFederationEnabled()) {\n\t\t\tthrow new Error('Federation is disabled');\n\t\t}\n\n\t\tconst { serverName, roomName, count, pageToken } = roomSearchInputDto;\n\t\tconst rooms = await this.bridge.searchPublicRooms({\n\t\t\tserverName: serverName || this.internalHomeServerDomain,\n\t\t\troomName,\n\t\t\tlimit: count,\n\t\t\tpageToken,\n\t\t});\n\n\t\treturn RoomMapper.toSearchPublicRoomsDto(\n\t\t\trooms,\n\t\t\tparseInt(this.internalSettingsAdapter.getMaximumSizeOfUsersWhenJoiningPublicRooms() || '0'),\n\t\t\tpageToken,\n\t\t);\n\t}\n\n\tpublic async scheduleJoinExternalPublicRoom(\n\t\tinternalUserId: string,\n\t\texternalRoomId: string,\n\t\troomName?: string,\n\t\tpageToken?: string,\n\t): Promise<void> {\n\t\tif (!this.internalSettingsAdapter.isFederationEnabled()) {\n\t\t\tthrow new Error('Federation is disabled');\n\t\t}\n\t\tawait this.internalQueueAdapter.enqueueJob('federation-enterprise.joinExternalPublicRoom', {\n\t\t\tinternalUserId,\n\t\t\texternalRoomId,\n\t\t\troomName,\n\t\t\tpageToken,\n\t\t});\n\t}\n\n\tpublic async joinExternalPublicRoom(joinExternalPublicRoomInputDto: FederationJoinExternalPublicRoomInputDto): Promise<void> {\n\t\tif (!this.internalSettingsAdapter.isFederationEnabled()) {\n\t\t\tthrow new Error('Federation is disabled');\n\t\t}\n\n\t\tconst { externalRoomId, internalUserId, externalRoomHomeServerName, roomName, pageToken } = joinExternalPublicRoomInputDto;\n\t\tconst room = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (room) {\n\t\t\tconst alreadyJoined = await this.internalRoomAdapter.isUserAlreadyJoined(room.getInternalId(), internalUserId);\n\t\t\tif (alreadyJoined) {\n\t\t\t\tthrow new Error('already-joined');\n\t\t\t}\n\t\t}\n\n\t\tconst user = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!user) {\n\t\t\tawait this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalUserId);\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\tthrow new Error(`User with internalId ${internalUserId} not found`);\n\t\t}\n\t\tif (!(await this.isRoomSizeAllowed(externalRoomId, externalRoomHomeServerName, roomName, pageToken))) {\n\t\t\tthrow new Error(\"Can't join a room bigger than the admin of your workspace has set as the maximum size\");\n\t\t}\n\n\t\tawait this.bridge.joinRoom(externalRoomId, federatedUser.getExternalId(), [externalRoomHomeServerName]);\n\t}\n\n\tprivate async isRoomSizeAllowed(externalRoomId: string, serverName: string, roomName?: string, pageToken?: string): Promise<boolean> {\n\t\ttry {\n\t\t\tconst rooms = await this.bridge.searchPublicRooms({\n\t\t\t\tserverName,\n\t\t\t\tlimit: 50,\n\t\t\t\troomName,\n\t\t\t\tpageToken,\n\t\t\t});\n\n\t\t\tconst room = rooms.chunk.find((room) => room.room_id === externalRoomId);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error(\"Cannot find the room you're trying to join\");\n\t\t\t}\n\t\t\treturn room.num_joined_members <= parseInt(this.internalSettingsAdapter.getMaximumSizeOfUsersWhenJoiningPublicRooms() || '0');\n\t\t} catch (error) {\n\t\t\tthrow new Error(\"Cannot find the room you're trying to join\");\n\t\t}\n\t}\n\n\tprivate async setupFederatedRoom(roomInviteUserInput: FederationSetupRoomDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId } = roomInviteUserInput;\n\t\tconst inviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!inviterUser) {\n\t\t\tawait this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalInviterId);\n\t\t}\n\n\t\tconst federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n\t\tif (!federatedInviterUser) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tconst internalFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (internalFederatedRoom) {\n\t\t\treturn;\n\t\t}\n\t\tconst internalRoom = await this.internalRoomAdapter.getInternalRoomById(internalRoomId);\n\t\tif (!internalRoom || !internalRoom.name) {\n\t\t\tthrow new Error(`Room with internalId ${internalRoomId} not found`);\n\t\t}\n\t\tconst roomName = internalRoom.fname || internalRoom.name;\n\t\tconst externalRoomId = await this.bridge.createRoom(federatedInviterUser.getExternalId(), internalRoom.t, roomName, internalRoom.topic);\n\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoom._id, externalRoomId);\n\t}\n\n\tprivate async inviteUserToAFederatedRoom(roomInviteUserInput: FederationRoomInviteUserDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;\n\t\tconst isUserAutoJoining = Boolean(!internalInviterId);\n\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(rawInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\n\t\tif (isUserAutoJoining && !isInviteeFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\tthrow new Error(`Could not find the room to invite. RoomId: ${internalRoomId}`);\n\t\t}\n\n\t\tconst federatedInviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!federatedInviterUser && !isUserAutoJoining) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tconst username = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n\t\tconst inviteeUser = await this.internalUserAdapter.getFederatedUserByInternalUsername(username);\n\t\tif (!inviteeUser) {\n\t\t\tconst existsOnlyOnProxyServer = isInviteeFromTheSameHomeServer;\n\t\t\tawait this.createFederatedUserInternallyOnly(rawInviteeId, username, existsOnlyOnProxyServer);\n\t\t}\n\n\t\tconst federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(username));\n\t\tif (!federatedInviteeUser) {\n\t\t\tthrow new Error(`User with internalUsername ${username} not found`);\n\t\t}\n\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tconst profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n\t\t\tif (!profile) {\n\t\t\t\tawait this.bridge.createUser(\n\t\t\t\t\tinviteeUsernameOnly,\n\t\t\t\t\tfederatedInviteeUser.getName() || federatedInviteeUser.getUsername() || username,\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (!federatedInviterUser && isUserAutoJoining) {\n\t\t\tawait this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n\t\t\treturn;\n\t\t}\n\n\t\tif (!federatedInviterUser) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tawait this.bridge.inviteToRoom(\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\tfederatedInviterUser.getExternalId(),\n\t\t\tfederatedInviteeUser.getExternalId(),\n\t\t);\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tawait this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n\t\t}\n\t}\n}\n\nclass RoomMapper {\n\tpublic static toSearchPublicRoomsDto(\n\t\trooms: IFederationPublicRoomsResult,\n\t\tmaxSizeOfUsersAllowed: number,\n\t\tpageToken?: string,\n\t): FederationPaginatedResult<{\n\t\trooms: IFederationPublicRooms[];\n\t}> {\n\t\treturn {\n\t\t\trooms: (rooms?.chunk || [])\n\t\t\t\t.filter((room) => room.join_rule && room.join_rule !== MatrixRoomJoinRules.KNOCK)\n\t\t\t\t.map((room) => ({\n\t\t\t\t\tid: room.room_id,\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tcanJoin: room.num_joined_members <= maxSizeOfUsersAllowed,\n\t\t\t\t\tcanonicalAlias: room.canonical_alias,\n\t\t\t\t\tjoinedMembers: room.num_joined_members,\n\t\t\t\t\ttopic: room.topic,\n\t\t\t\t\tpageToken,\n\t\t\t\t})),\n\t\t\tcount: rooms?.chunk?.length || 0,\n\t\t\ttotal: rooms?.total_room_count_estimate || 0,\n\t\t\t...(rooms?.next_batch ? { nextPageToken: rooms.next_batch } : {}),\n\t\t\t...(rooms?.prev_batch ? { prevPageToken: rooms.prev_batch } : {}),\n\t\t};\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts","inputSourceMap":{"version":3,"file":"ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts","sourceRoot":"","sources":["ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FederationPaginatedResult, IFederationPublicRooms } from '@rocket.chat/rest-typings';\n\nimport { MatrixRoomJoinRules } from '../../../../../../../server/services/federation/infrastructure/matrix/definitions/MatrixRoomJoinRules';\nimport type { RocketChatFileAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatMessageAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Message';\nimport type { RocketChatNotificationAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Notification';\nimport type { RocketChatSettingsAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Settings';\nimport { ROCKET_CHAT_FEDERATION_ROLES } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/definitions/FederatedRoomInternalRoles';\nimport { FederatedUserEE } from '../../../domain/FederatedUser';\nimport type { IFederationBridgeEE, IFederationPublicRoomsResult } from '../../../domain/IFederationBridge';\nimport type { RocketChatQueueAdapterEE } from '../../../infrastructure/rocket-chat/adapters/Queue';\nimport type { RocketChatRoomAdapterEE } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatUserAdapterEE } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { AbstractFederationApplicationServiceEE } from '../../AbstractFederationApplicationServiceEE';\nimport type { FederationJoinExternalPublicRoomInputDto, FederationSearchPublicRoomsInputDto } from './input/RoomInputDto';\nimport type {\n\tFederationBeforeAddUserToARoomDto,\n\tFederationOnRoomCreationDto,\n\tFederationOnUsersAddedToARoomDto,\n\tFederationRoomInviteUserDto,\n\tFederationSetupRoomDto,\n\tIFederationInviteeDto,\n} from './input/RoomSenderDto';\n\nexport class FederationRoomServiceSender extends AbstractFederationApplicationServiceEE {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapterEE,\n\t\tprotected internalUserAdapter: RocketChatUserAdapterEE,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected internalMessageAdapter: RocketChatMessageAdapter,\n\t\tprotected internalNotificationAdapter: RocketChatNotificationAdapter,\n\t\tprotected internalQueueAdapter: RocketChatQueueAdapterEE,\n\t\tprotected bridge: IFederationBridgeEE,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async onRoomCreated(roomOnCreationInput: FederationOnRoomCreationDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, invitees } = roomOnCreationInput;\n\t\tawait this.setupFederatedRoom({ internalInviterId, internalRoomId });\n\n\t\tif (invitees.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.inviteLocalThenExternalUsers(invitees, internalInviterId, internalRoomId);\n\t}\n\n\tpublic async beforeAddUserToARoom(dmBeforeAddUserToARoomInput: FederationBeforeAddUserToARoomDto): Promise<void> {\n\t\tconst { invitees = [], internalInviter, internalRoomId } = dmBeforeAddUserToARoomInput;\n\t\tif (invitees.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (internalInviter) {\n\t\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviter._id);\n\t\t\tif (!federatedUser) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\t\tif (!federatedRoom) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst userRolesInThisRoom = await this.internalRoomAdapter.getInternalRoomRolesByUserId(\n\t\t\t\tfederatedRoom.getInternalId(),\n\t\t\t\tfederatedUser.getInternalId(),\n\t\t\t);\n\t\t\tconst canAddUserToARoom =\n\t\t\t\tuserRolesInThisRoom.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) ||\n\t\t\t\tuserRolesInThisRoom.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR) ||\n\t\t\t\tfederatedRoom.isTheCreator(federatedUser.getInternalId());\n\t\t\tif (!canAddUserToARoom) {\n\t\t\t\tthrow new Error('You are not allowed to add users to this room');\n\t\t\t}\n\t\t}\n\n\t\tawait this.createUsersLocallyOnly(invitees);\n\t}\n\n\tprivate async inviteLocalThenExternalUsers(\n\t\tinvitees: IFederationInviteeDto[],\n\t\tinternalInviterId: string,\n\t\tinternalRoomId: string,\n\t): Promise<void> {\n\t\tconst localUsers = invitees.filter((user) =>\n\t\t\tFederatedUserEE.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(user.rawInviteeId), this.internalHomeServerDomain),\n\t\t);\n\n\t\tconst externalUsers = invitees.filter(\n\t\t\t(user) =>\n\t\t\t\t!FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\t\t\tthis.bridge.extractHomeserverOrigin(user.rawInviteeId),\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t),\n\t\t);\n\n\t\tfor await (const user of [...localUsers, ...externalUsers]) {\n\t\t\tawait this.inviteUserToAFederatedRoom({\n\t\t\t\tinternalInviterId,\n\t\t\t\tinternalRoomId,\n\t\t\t\tinviteeUsernameOnly: user.inviteeUsernameOnly,\n\t\t\t\tnormalizedInviteeId: user.normalizedInviteeId,\n\t\t\t\trawInviteeId: user.rawInviteeId,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async onUsersAddedToARoom(roomOnUsersAddedToARoomInput: FederationOnUsersAddedToARoomDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, invitees, inviteComesFromAnExternalHomeServer } = roomOnUsersAddedToARoomInput;\n\n\t\tif (inviteComesFromAnExternalHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.inviteLocalThenExternalUsers(invitees, internalInviterId, internalRoomId);\n\t}\n\n\tpublic async searchPublicRooms(roomSearchInputDto: FederationSearchPublicRoomsInputDto): Promise<\n\t\tFederationPaginatedResult<{\n\t\t\trooms: IFederationPublicRooms[];\n\t\t}>\n\t> {\n\t\tif (!this.internalSettingsAdapter.isFederationEnabled()) {\n\t\t\tthrow new Error('Federation is disabled');\n\t\t}\n\n\t\tconst { serverName, roomName, count, pageToken } = roomSearchInputDto;\n\t\tconst rooms = await this.bridge.searchPublicRooms({\n\t\t\tserverName: serverName || this.internalHomeServerDomain,\n\t\t\troomName,\n\t\t\tlimit: count,\n\t\t\tpageToken,\n\t\t});\n\n\t\treturn RoomMapper.toSearchPublicRoomsDto(\n\t\t\trooms,\n\t\t\tparseInt(this.internalSettingsAdapter.getMaximumSizeOfUsersWhenJoiningPublicRooms() || '0'),\n\t\t\tpageToken,\n\t\t);\n\t}\n\n\tpublic async scheduleJoinExternalPublicRoom(\n\t\tinternalUserId: string,\n\t\texternalRoomId: string,\n\t\troomName?: string,\n\t\tpageToken?: string,\n\t): Promise<void> {\n\t\tif (!this.internalSettingsAdapter.isFederationEnabled()) {\n\t\t\tthrow new Error('Federation is disabled');\n\t\t}\n\t\tawait this.internalQueueAdapter.enqueueJob('federation-enterprise.joinExternalPublicRoom', {\n\t\t\tinternalUserId,\n\t\t\texternalRoomId,\n\t\t\troomName,\n\t\t\tpageToken,\n\t\t});\n\t}\n\n\tpublic async joinExternalPublicRoom(joinExternalPublicRoomInputDto: FederationJoinExternalPublicRoomInputDto): Promise<void> {\n\t\tif (!this.internalSettingsAdapter.isFederationEnabled()) {\n\t\t\tthrow new Error('Federation is disabled');\n\t\t}\n\n\t\tconst { externalRoomId, internalUserId, externalRoomHomeServerName, roomName, pageToken } = joinExternalPublicRoomInputDto;\n\t\tconst room = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (room) {\n\t\t\tconst alreadyJoined = await this.internalRoomAdapter.isUserAlreadyJoined(room.getInternalId(), internalUserId);\n\t\t\tif (alreadyJoined) {\n\t\t\t\tthrow new Error('already-joined');\n\t\t\t}\n\t\t}\n\n\t\tconst user = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!user) {\n\t\t\tawait this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalUserId);\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\tthrow new Error(`User with internalId ${internalUserId} not found`);\n\t\t}\n\t\tif (!(await this.isRoomSizeAllowed(externalRoomId, externalRoomHomeServerName, roomName, pageToken))) {\n\t\t\tthrow new Error(\"Can't join a room bigger than the admin of your workspace has set as the maximum size\");\n\t\t}\n\n\t\tawait this.bridge.joinRoom(externalRoomId, federatedUser.getExternalId(), [externalRoomHomeServerName]);\n\t}\n\n\tprivate async isRoomSizeAllowed(externalRoomId: string, serverName: string, roomName?: string, pageToken?: string): Promise<boolean> {\n\t\ttry {\n\t\t\tconst rooms = await this.bridge.searchPublicRooms({\n\t\t\t\tserverName,\n\t\t\t\tlimit: 50,\n\t\t\t\troomName,\n\t\t\t\tpageToken,\n\t\t\t});\n\n\t\t\tconst room = rooms.chunk.find((room) => room.room_id === externalRoomId);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error(\"Cannot find the room you're trying to join\");\n\t\t\t}\n\t\t\treturn room.num_joined_members <= parseInt(this.internalSettingsAdapter.getMaximumSizeOfUsersWhenJoiningPublicRooms() || '0');\n\t\t} catch (error) {\n\t\t\tthrow new Error(\"Cannot find the room you're trying to join\");\n\t\t}\n\t}\n\n\tprivate async setupFederatedRoom(roomInviteUserInput: FederationSetupRoomDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId } = roomInviteUserInput;\n\t\tconst inviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!inviterUser) {\n\t\t\tawait this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalInviterId);\n\t\t}\n\n\t\tconst federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n\t\tif (!federatedInviterUser) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tconst internalFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (internalFederatedRoom) {\n\t\t\treturn;\n\t\t}\n\t\tconst internalRoom = await this.internalRoomAdapter.getInternalRoomById(internalRoomId);\n\t\tif (!internalRoom || !internalRoom.name) {\n\t\t\tthrow new Error(`Room with internalId ${internalRoomId} not found`);\n\t\t}\n\t\tconst roomName = internalRoom.fname || internalRoom.name;\n\t\tconst externalRoomId = await this.bridge.createRoom(federatedInviterUser.getExternalId(), internalRoom.t, roomName, internalRoom.topic);\n\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoom._id, externalRoomId);\n\t}\n\n\tprivate async inviteUserToAFederatedRoom(roomInviteUserInput: FederationRoomInviteUserDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;\n\t\tconst isUserAutoJoining = Boolean(!internalInviterId);\n\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(rawInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\n\t\tif (isUserAutoJoining && !isInviteeFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\tthrow new Error(`Could not find the room to invite. RoomId: ${internalRoomId}`);\n\t\t}\n\n\t\tconst federatedInviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!federatedInviterUser && !isUserAutoJoining) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tconst username = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n\t\tconst inviteeUser = await this.internalUserAdapter.getFederatedUserByInternalUsername(username);\n\t\tif (!inviteeUser) {\n\t\t\tconst existsOnlyOnProxyServer = isInviteeFromTheSameHomeServer;\n\t\t\tawait this.createFederatedUserInternallyOnly(rawInviteeId, username, existsOnlyOnProxyServer);\n\t\t}\n\n\t\tconst federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(username));\n\t\tif (!federatedInviteeUser) {\n\t\t\tthrow new Error(`User with internalUsername ${username} not found`);\n\t\t}\n\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tconst profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n\t\t\tif (!profile) {\n\t\t\t\tawait this.bridge.createUser(\n\t\t\t\t\tinviteeUsernameOnly,\n\t\t\t\t\tfederatedInviteeUser.getName() || federatedInviteeUser.getUsername() || username,\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (!federatedInviterUser && isUserAutoJoining) {\n\t\t\tawait this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n\t\t\treturn;\n\t\t}\n\n\t\tif (!federatedInviterUser) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tawait this.bridge.inviteToRoom(\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\tfederatedInviterUser.getExternalId(),\n\t\t\tfederatedInviteeUser.getExternalId(),\n\t\t);\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tawait this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n\t\t}\n\t}\n}\n\nclass RoomMapper {\n\tpublic static toSearchPublicRoomsDto(\n\t\trooms: IFederationPublicRoomsResult,\n\t\tmaxSizeOfUsersAllowed: number,\n\t\tpageToken?: string,\n\t): FederationPaginatedResult<{\n\t\trooms: IFederationPublicRooms[];\n\t}> {\n\t\treturn {\n\t\t\trooms: (rooms?.chunk || [])\n\t\t\t\t.filter((room) => room.join_rule && room.join_rule !== MatrixRoomJoinRules.KNOCK)\n\t\t\t\t.map((room) => ({\n\t\t\t\t\tid: room.room_id,\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tcanJoin: room.num_joined_members <= maxSizeOfUsersAllowed,\n\t\t\t\t\tcanonicalAlias: room.canonical_alias,\n\t\t\t\t\tjoinedMembers: room.num_joined_members,\n\t\t\t\t\ttopic: room.topic,\n\t\t\t\t\tpageToken,\n\t\t\t\t})),\n\t\t\tcount: rooms?.chunk?.length || 0,\n\t\t\ttotal: rooms?.total_room_count_estimate || 0,\n\t\t\t...(rooms?.next_batch ? { nextPageToken: rooms.next_batch } : {}),\n\t\t\t...(rooms?.prev_batch ? { prevPageToken: rooms.prev_batch } : {}),\n\t\t};\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      FederationRoomServiceSender: () => FederationRoomServiceSender\n    });\n    let MatrixRoomJoinRules;\n    module.link(\"../../../../../../../server/services/federation/infrastructure/matrix/definitions/MatrixRoomJoinRules\", {\n      MatrixRoomJoinRules(v) {\n        MatrixRoomJoinRules = v;\n      }\n    }, 0);\n    let ROCKET_CHAT_FEDERATION_ROLES;\n    module.link(\"../../../../../../../server/services/federation/infrastructure/rocket-chat/definitions/FederatedRoomInternalRoles\", {\n      ROCKET_CHAT_FEDERATION_ROLES(v) {\n        ROCKET_CHAT_FEDERATION_ROLES = v;\n      }\n    }, 1);\n    let FederatedUserEE;\n    module.link(\"../../../domain/FederatedUser\", {\n      FederatedUserEE(v) {\n        FederatedUserEE = v;\n      }\n    }, 2);\n    let AbstractFederationApplicationServiceEE;\n    module.link(\"../../AbstractFederationApplicationServiceEE\", {\n      AbstractFederationApplicationServiceEE(v) {\n        AbstractFederationApplicationServiceEE = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class FederationRoomServiceSender extends AbstractFederationApplicationServiceEE {\n      constructor(internalRoomAdapter, internalUserAdapter, internalFileAdapter, internalSettingsAdapter, internalMessageAdapter, internalNotificationAdapter, internalQueueAdapter, bridge) {\n        super(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n        this.internalRoomAdapter = void 0;\n        this.internalUserAdapter = void 0;\n        this.internalFileAdapter = void 0;\n        this.internalSettingsAdapter = void 0;\n        this.internalMessageAdapter = void 0;\n        this.internalNotificationAdapter = void 0;\n        this.internalQueueAdapter = void 0;\n        this.bridge = void 0;\n        this.internalRoomAdapter = internalRoomAdapter;\n        this.internalUserAdapter = internalUserAdapter;\n        this.internalFileAdapter = internalFileAdapter;\n        this.internalSettingsAdapter = internalSettingsAdapter;\n        this.internalMessageAdapter = internalMessageAdapter;\n        this.internalNotificationAdapter = internalNotificationAdapter;\n        this.internalQueueAdapter = internalQueueAdapter;\n        this.bridge = bridge;\n      }\n      async onRoomCreated(roomOnCreationInput) {\n        const {\n          internalInviterId,\n          internalRoomId,\n          invitees\n        } = roomOnCreationInput;\n        await this.setupFederatedRoom({\n          internalInviterId,\n          internalRoomId\n        });\n        if (invitees.length === 0) {\n          return;\n        }\n        await this.inviteLocalThenExternalUsers(invitees, internalInviterId, internalRoomId);\n      }\n      async beforeAddUserToARoom(dmBeforeAddUserToARoomInput) {\n        const {\n          invitees = [],\n          internalInviter,\n          internalRoomId\n        } = dmBeforeAddUserToARoomInput;\n        if (invitees.length === 0) {\n          return;\n        }\n        if (internalInviter) {\n          const federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviter._id);\n          if (!federatedUser) {\n            return;\n          }\n          const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n          if (!federatedRoom) {\n            return;\n          }\n          const userRolesInThisRoom = await this.internalRoomAdapter.getInternalRoomRolesByUserId(federatedRoom.getInternalId(), federatedUser.getInternalId());\n          const canAddUserToARoom = userRolesInThisRoom.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) || userRolesInThisRoom.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR) || federatedRoom.isTheCreator(federatedUser.getInternalId());\n          if (!canAddUserToARoom) {\n            throw new Error('You are not allowed to add users to this room');\n          }\n        }\n        await this.createUsersLocallyOnly(invitees);\n      }\n      async inviteLocalThenExternalUsers(invitees, internalInviterId, internalRoomId) {\n        const localUsers = invitees.filter(user => FederatedUserEE.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(user.rawInviteeId), this.internalHomeServerDomain));\n        const externalUsers = invitees.filter(user => !FederatedUserEE.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(user.rawInviteeId), this.internalHomeServerDomain));\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator([...localUsers, ...externalUsers]), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const user = _step.value;\n            {\n              await this.inviteUserToAFederatedRoom({\n                internalInviterId,\n                internalRoomId,\n                inviteeUsernameOnly: user.inviteeUsernameOnly,\n                normalizedInviteeId: user.normalizedInviteeId,\n                rawInviteeId: user.rawInviteeId\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      async onUsersAddedToARoom(roomOnUsersAddedToARoomInput) {\n        const {\n          internalInviterId,\n          internalRoomId,\n          invitees,\n          inviteComesFromAnExternalHomeServer\n        } = roomOnUsersAddedToARoomInput;\n        if (inviteComesFromAnExternalHomeServer) {\n          return;\n        }\n        await this.inviteLocalThenExternalUsers(invitees, internalInviterId, internalRoomId);\n      }\n      async searchPublicRooms(roomSearchInputDto) {\n        if (!this.internalSettingsAdapter.isFederationEnabled()) {\n          throw new Error('Federation is disabled');\n        }\n        const {\n          serverName,\n          roomName,\n          count,\n          pageToken\n        } = roomSearchInputDto;\n        const rooms = await this.bridge.searchPublicRooms({\n          serverName: serverName || this.internalHomeServerDomain,\n          roomName,\n          limit: count,\n          pageToken\n        });\n        return RoomMapper.toSearchPublicRoomsDto(rooms, parseInt(this.internalSettingsAdapter.getMaximumSizeOfUsersWhenJoiningPublicRooms() || '0'), pageToken);\n      }\n      async scheduleJoinExternalPublicRoom(internalUserId, externalRoomId, roomName, pageToken) {\n        if (!this.internalSettingsAdapter.isFederationEnabled()) {\n          throw new Error('Federation is disabled');\n        }\n        await this.internalQueueAdapter.enqueueJob('federation-enterprise.joinExternalPublicRoom', {\n          internalUserId,\n          externalRoomId,\n          roomName,\n          pageToken\n        });\n      }\n      async joinExternalPublicRoom(joinExternalPublicRoomInputDto) {\n        if (!this.internalSettingsAdapter.isFederationEnabled()) {\n          throw new Error('Federation is disabled');\n        }\n        const {\n          externalRoomId,\n          internalUserId,\n          externalRoomHomeServerName,\n          roomName,\n          pageToken\n        } = joinExternalPublicRoomInputDto;\n        const room = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (room) {\n          const alreadyJoined = await this.internalRoomAdapter.isUserAlreadyJoined(room.getInternalId(), internalUserId);\n          if (alreadyJoined) {\n            throw new Error('already-joined');\n          }\n        }\n        const user = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n        if (!user) {\n          await this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalUserId);\n        }\n        const federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n        if (!federatedUser) {\n          throw new Error(\"User with internalId \".concat(internalUserId, \" not found\"));\n        }\n        if (!(await this.isRoomSizeAllowed(externalRoomId, externalRoomHomeServerName, roomName, pageToken))) {\n          throw new Error(\"Can't join a room bigger than the admin of your workspace has set as the maximum size\");\n        }\n        await this.bridge.joinRoom(externalRoomId, federatedUser.getExternalId(), [externalRoomHomeServerName]);\n      }\n      async isRoomSizeAllowed(externalRoomId, serverName, roomName, pageToken) {\n        try {\n          const rooms = await this.bridge.searchPublicRooms({\n            serverName,\n            limit: 50,\n            roomName,\n            pageToken\n          });\n          const room = rooms.chunk.find(room => room.room_id === externalRoomId);\n          if (!room) {\n            throw new Error(\"Cannot find the room you're trying to join\");\n          }\n          return room.num_joined_members <= parseInt(this.internalSettingsAdapter.getMaximumSizeOfUsersWhenJoiningPublicRooms() || '0');\n        } catch (error) {\n          throw new Error(\"Cannot find the room you're trying to join\");\n        }\n      }\n      async setupFederatedRoom(roomInviteUserInput) {\n        const {\n          internalInviterId,\n          internalRoomId\n        } = roomInviteUserInput;\n        const inviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n        if (!inviterUser) {\n          await this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalInviterId);\n        }\n        const federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n        if (!federatedInviterUser) {\n          throw new Error(\"User with internalId \".concat(internalInviterId, \" not found\"));\n        }\n        const internalFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (internalFederatedRoom) {\n          return;\n        }\n        const internalRoom = await this.internalRoomAdapter.getInternalRoomById(internalRoomId);\n        if (!internalRoom || !internalRoom.name) {\n          throw new Error(\"Room with internalId \".concat(internalRoomId, \" not found\"));\n        }\n        const roomName = internalRoom.fname || internalRoom.name;\n        const externalRoomId = await this.bridge.createRoom(federatedInviterUser.getExternalId(), internalRoom.t, roomName, internalRoom.topic);\n        await this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoom._id, externalRoomId);\n      }\n      async inviteUserToAFederatedRoom(roomInviteUserInput) {\n        const {\n          internalInviterId,\n          internalRoomId,\n          normalizedInviteeId,\n          inviteeUsernameOnly,\n          rawInviteeId\n        } = roomInviteUserInput;\n        const isUserAutoJoining = Boolean(!internalInviterId);\n        const isInviteeFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(rawInviteeId), this.internalHomeServerDomain);\n        if (isUserAutoJoining && !isInviteeFromTheSameHomeServer) {\n          return;\n        }\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          throw new Error(\"Could not find the room to invite. RoomId: \".concat(internalRoomId));\n        }\n        const federatedInviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n        if (!federatedInviterUser && !isUserAutoJoining) {\n          throw new Error(\"User with internalId \".concat(internalInviterId, \" not found\"));\n        }\n        const username = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n        const inviteeUser = await this.internalUserAdapter.getFederatedUserByInternalUsername(username);\n        if (!inviteeUser) {\n          const existsOnlyOnProxyServer = isInviteeFromTheSameHomeServer;\n          await this.createFederatedUserInternallyOnly(rawInviteeId, username, existsOnlyOnProxyServer);\n        }\n        const federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(username));\n        if (!federatedInviteeUser) {\n          throw new Error(\"User with internalUsername \".concat(username, \" not found\"));\n        }\n        if (isInviteeFromTheSameHomeServer) {\n          const profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n          if (!profile) {\n            await this.bridge.createUser(inviteeUsernameOnly, federatedInviteeUser.getName() || federatedInviteeUser.getUsername() || username, this.internalHomeServerDomain);\n          }\n        }\n        if (!federatedInviterUser && isUserAutoJoining) {\n          await this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n          return;\n        }\n        if (!federatedInviterUser) {\n          throw new Error(\"User with internalId \".concat(internalInviterId, \" not found\"));\n        }\n        await this.bridge.inviteToRoom(federatedRoom.getExternalId(), federatedInviterUser.getExternalId(), federatedInviteeUser.getExternalId());\n        if (isInviteeFromTheSameHomeServer) {\n          await this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n        }\n      }\n    }\n    class RoomMapper {\n      static toSearchPublicRoomsDto(rooms, maxSizeOfUsersAllowed, pageToken) {\n        var _rooms$chunk;\n        return _objectSpread(_objectSpread({\n          rooms: ((rooms === null || rooms === void 0 ? void 0 : rooms.chunk) || []).filter(room => room.join_rule && room.join_rule !== MatrixRoomJoinRules.KNOCK).map(room => ({\n            id: room.room_id,\n            name: room.name,\n            canJoin: room.num_joined_members <= maxSizeOfUsersAllowed,\n            canonicalAlias: room.canonical_alias,\n            joinedMembers: room.num_joined_members,\n            topic: room.topic,\n            pageToken\n          })),\n          count: (rooms === null || rooms === void 0 ? void 0 : (_rooms$chunk = rooms.chunk) === null || _rooms$chunk === void 0 ? void 0 : _rooms$chunk.length) || 0,\n          total: (rooms === null || rooms === void 0 ? void 0 : rooms.total_room_count_estimate) || 0\n        }, rooms !== null && rooms !== void 0 && rooms.next_batch ? {\n          nextPageToken: rooms.next_batch\n        } : {}), rooms !== null && rooms !== void 0 && rooms.prev_batch ? {\n          prevPageToken: rooms.prev_batch\n        } : {});\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","FederationRoomServiceSender","MatrixRoomJoinRules","ROCKET_CHAT_FEDERATION_ROLES","FederatedUserEE","AbstractFederationApplicationServiceEE","__reifyWaitForDeps__","constructor","internalRoomAdapter","internalUserAdapter","internalFileAdapter","internalSettingsAdapter","internalMessageAdapter","internalNotificationAdapter","internalQueueAdapter","bridge","onRoomCreated","roomOnCreationInput","internalInviterId","internalRoomId","invitees","setupFederatedRoom","length","inviteLocalThenExternalUsers","beforeAddUserToARoom","dmBeforeAddUserToARoomInput","internalInviter","federatedUser","getFederatedUserByInternalId","_id","federatedRoom","getFederatedRoomByInternalId","userRolesInThisRoom","getInternalRoomRolesByUserId","getInternalId","canAddUserToARoom","includes","OWNER","MODERATOR","isTheCreator","Error","createUsersLocallyOnly","localUsers","filter","user","isOriginalFromTheProxyServer","extractHomeserverOrigin","rawInviteeId","internalHomeServerDomain","externalUsers","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","inviteUserToAFederatedRoom","inviteeUsernameOnly","normalizedInviteeId","err","return","onUsersAddedToARoom","roomOnUsersAddedToARoomInput","inviteComesFromAnExternalHomeServer","searchPublicRooms","roomSearchInputDto","isFederationEnabled","serverName","roomName","count","pageToken","rooms","limit","RoomMapper","toSearchPublicRoomsDto","parseInt","getMaximumSizeOfUsersWhenJoiningPublicRooms","scheduleJoinExternalPublicRoom","internalUserId","externalRoomId","enqueueJob","joinExternalPublicRoom","joinExternalPublicRoomInputDto","externalRoomHomeServerName","room","getFederatedRoomByExternalId","alreadyJoined","isUserAlreadyJoined","createFederatedUserIncludingHomeserverUsingLocalInformation","concat","isRoomSizeAllowed","joinRoom","getExternalId","chunk","find","room_id","num_joined_members","error","roomInviteUserInput","inviterUser","federatedInviterUser","internalFederatedRoom","internalRoom","getInternalRoomById","name","fname","createRoom","t","topic","updateFederatedRoomByInternalRoomId","isUserAutoJoining","Boolean","isInviteeFromTheSameHomeServer","username","inviteeUser","getFederatedUserByInternalUsername","existsOnlyOnProxyServer","createFederatedUserInternallyOnly","federatedInviteeUser","profile","getUserProfileInformation","createUser","getName","getUsername","inviteToRoom","maxSizeOfUsersAllowed","_rooms$chunk","join_rule","KNOCK","map","id","canJoin","canonicalAlias","canonical_alias","joinedMembers","total","total_room_count_estimate","next_batch","nextPageToken","prev_batch","prevPageToken","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/local-services/federation/application/room/sender/RoomServiceSender.ts"],"sourcesContent":["import type { FederationPaginatedResult, IFederationPublicRooms } from '@rocket.chat/rest-typings';\n\nimport { MatrixRoomJoinRules } from '../../../../../../../server/services/federation/infrastructure/matrix/definitions/MatrixRoomJoinRules';\nimport type { RocketChatFileAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatMessageAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Message';\nimport type { RocketChatNotificationAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Notification';\nimport type { RocketChatSettingsAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Settings';\nimport { ROCKET_CHAT_FEDERATION_ROLES } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/definitions/FederatedRoomInternalRoles';\nimport { FederatedUserEE } from '../../../domain/FederatedUser';\nimport type { IFederationBridgeEE, IFederationPublicRoomsResult } from '../../../domain/IFederationBridge';\nimport type { RocketChatQueueAdapterEE } from '../../../infrastructure/rocket-chat/adapters/Queue';\nimport type { RocketChatRoomAdapterEE } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatUserAdapterEE } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { AbstractFederationApplicationServiceEE } from '../../AbstractFederationApplicationServiceEE';\nimport type { FederationJoinExternalPublicRoomInputDto, FederationSearchPublicRoomsInputDto } from './input/RoomInputDto';\nimport type {\n\tFederationBeforeAddUserToARoomDto,\n\tFederationOnRoomCreationDto,\n\tFederationOnUsersAddedToARoomDto,\n\tFederationRoomInviteUserDto,\n\tFederationSetupRoomDto,\n\tIFederationInviteeDto,\n} from './input/RoomSenderDto';\n\nexport class FederationRoomServiceSender extends AbstractFederationApplicationServiceEE {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapterEE,\n\t\tprotected internalUserAdapter: RocketChatUserAdapterEE,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected internalMessageAdapter: RocketChatMessageAdapter,\n\t\tprotected internalNotificationAdapter: RocketChatNotificationAdapter,\n\t\tprotected internalQueueAdapter: RocketChatQueueAdapterEE,\n\t\tprotected bridge: IFederationBridgeEE,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async onRoomCreated(roomOnCreationInput: FederationOnRoomCreationDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, invitees } = roomOnCreationInput;\n\t\tawait this.setupFederatedRoom({ internalInviterId, internalRoomId });\n\n\t\tif (invitees.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.inviteLocalThenExternalUsers(invitees, internalInviterId, internalRoomId);\n\t}\n\n\tpublic async beforeAddUserToARoom(dmBeforeAddUserToARoomInput: FederationBeforeAddUserToARoomDto): Promise<void> {\n\t\tconst { invitees = [], internalInviter, internalRoomId } = dmBeforeAddUserToARoomInput;\n\t\tif (invitees.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (internalInviter) {\n\t\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviter._id);\n\t\t\tif (!federatedUser) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\t\tif (!federatedRoom) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst userRolesInThisRoom = await this.internalRoomAdapter.getInternalRoomRolesByUserId(\n\t\t\t\tfederatedRoom.getInternalId(),\n\t\t\t\tfederatedUser.getInternalId(),\n\t\t\t);\n\t\t\tconst canAddUserToARoom =\n\t\t\t\tuserRolesInThisRoom.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) ||\n\t\t\t\tuserRolesInThisRoom.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR) ||\n\t\t\t\tfederatedRoom.isTheCreator(federatedUser.getInternalId());\n\t\t\tif (!canAddUserToARoom) {\n\t\t\t\tthrow new Error('You are not allowed to add users to this room');\n\t\t\t}\n\t\t}\n\n\t\tawait this.createUsersLocallyOnly(invitees);\n\t}\n\n\tprivate async inviteLocalThenExternalUsers(\n\t\tinvitees: IFederationInviteeDto[],\n\t\tinternalInviterId: string,\n\t\tinternalRoomId: string,\n\t): Promise<void> {\n\t\tconst localUsers = invitees.filter((user) =>\n\t\t\tFederatedUserEE.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(user.rawInviteeId), this.internalHomeServerDomain),\n\t\t);\n\n\t\tconst externalUsers = invitees.filter(\n\t\t\t(user) =>\n\t\t\t\t!FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\t\t\tthis.bridge.extractHomeserverOrigin(user.rawInviteeId),\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t),\n\t\t);\n\n\t\tfor await (const user of [...localUsers, ...externalUsers]) {\n\t\t\tawait this.inviteUserToAFederatedRoom({\n\t\t\t\tinternalInviterId,\n\t\t\t\tinternalRoomId,\n\t\t\t\tinviteeUsernameOnly: user.inviteeUsernameOnly,\n\t\t\t\tnormalizedInviteeId: user.normalizedInviteeId,\n\t\t\t\trawInviteeId: user.rawInviteeId,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async onUsersAddedToARoom(roomOnUsersAddedToARoomInput: FederationOnUsersAddedToARoomDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, invitees, inviteComesFromAnExternalHomeServer } = roomOnUsersAddedToARoomInput;\n\n\t\tif (inviteComesFromAnExternalHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.inviteLocalThenExternalUsers(invitees, internalInviterId, internalRoomId);\n\t}\n\n\tpublic async searchPublicRooms(roomSearchInputDto: FederationSearchPublicRoomsInputDto): Promise<\n\t\tFederationPaginatedResult<{\n\t\t\trooms: IFederationPublicRooms[];\n\t\t}>\n\t> {\n\t\tif (!this.internalSettingsAdapter.isFederationEnabled()) {\n\t\t\tthrow new Error('Federation is disabled');\n\t\t}\n\n\t\tconst { serverName, roomName, count, pageToken } = roomSearchInputDto;\n\t\tconst rooms = await this.bridge.searchPublicRooms({\n\t\t\tserverName: serverName || this.internalHomeServerDomain,\n\t\t\troomName,\n\t\t\tlimit: count,\n\t\t\tpageToken,\n\t\t});\n\n\t\treturn RoomMapper.toSearchPublicRoomsDto(\n\t\t\trooms,\n\t\t\tparseInt(this.internalSettingsAdapter.getMaximumSizeOfUsersWhenJoiningPublicRooms() || '0'),\n\t\t\tpageToken,\n\t\t);\n\t}\n\n\tpublic async scheduleJoinExternalPublicRoom(\n\t\tinternalUserId: string,\n\t\texternalRoomId: string,\n\t\troomName?: string,\n\t\tpageToken?: string,\n\t): Promise<void> {\n\t\tif (!this.internalSettingsAdapter.isFederationEnabled()) {\n\t\t\tthrow new Error('Federation is disabled');\n\t\t}\n\t\tawait this.internalQueueAdapter.enqueueJob('federation-enterprise.joinExternalPublicRoom', {\n\t\t\tinternalUserId,\n\t\t\texternalRoomId,\n\t\t\troomName,\n\t\t\tpageToken,\n\t\t});\n\t}\n\n\tpublic async joinExternalPublicRoom(joinExternalPublicRoomInputDto: FederationJoinExternalPublicRoomInputDto): Promise<void> {\n\t\tif (!this.internalSettingsAdapter.isFederationEnabled()) {\n\t\t\tthrow new Error('Federation is disabled');\n\t\t}\n\n\t\tconst { externalRoomId, internalUserId, externalRoomHomeServerName, roomName, pageToken } = joinExternalPublicRoomInputDto;\n\t\tconst room = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (room) {\n\t\t\tconst alreadyJoined = await this.internalRoomAdapter.isUserAlreadyJoined(room.getInternalId(), internalUserId);\n\t\t\tif (alreadyJoined) {\n\t\t\t\tthrow new Error('already-joined');\n\t\t\t}\n\t\t}\n\n\t\tconst user = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!user) {\n\t\t\tawait this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalUserId);\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\tthrow new Error(`User with internalId ${internalUserId} not found`);\n\t\t}\n\t\tif (!(await this.isRoomSizeAllowed(externalRoomId, externalRoomHomeServerName, roomName, pageToken))) {\n\t\t\tthrow new Error(\"Can't join a room bigger than the admin of your workspace has set as the maximum size\");\n\t\t}\n\n\t\tawait this.bridge.joinRoom(externalRoomId, federatedUser.getExternalId(), [externalRoomHomeServerName]);\n\t}\n\n\tprivate async isRoomSizeAllowed(externalRoomId: string, serverName: string, roomName?: string, pageToken?: string): Promise<boolean> {\n\t\ttry {\n\t\t\tconst rooms = await this.bridge.searchPublicRooms({\n\t\t\t\tserverName,\n\t\t\t\tlimit: 50,\n\t\t\t\troomName,\n\t\t\t\tpageToken,\n\t\t\t});\n\n\t\t\tconst room = rooms.chunk.find((room) => room.room_id === externalRoomId);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error(\"Cannot find the room you're trying to join\");\n\t\t\t}\n\t\t\treturn room.num_joined_members <= parseInt(this.internalSettingsAdapter.getMaximumSizeOfUsersWhenJoiningPublicRooms() || '0');\n\t\t} catch (error) {\n\t\t\tthrow new Error(\"Cannot find the room you're trying to join\");\n\t\t}\n\t}\n\n\tprivate async setupFederatedRoom(roomInviteUserInput: FederationSetupRoomDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId } = roomInviteUserInput;\n\t\tconst inviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!inviterUser) {\n\t\t\tawait this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalInviterId);\n\t\t}\n\n\t\tconst federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n\t\tif (!federatedInviterUser) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tconst internalFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (internalFederatedRoom) {\n\t\t\treturn;\n\t\t}\n\t\tconst internalRoom = await this.internalRoomAdapter.getInternalRoomById(internalRoomId);\n\t\tif (!internalRoom || !internalRoom.name) {\n\t\t\tthrow new Error(`Room with internalId ${internalRoomId} not found`);\n\t\t}\n\t\tconst roomName = internalRoom.fname || internalRoom.name;\n\t\tconst externalRoomId = await this.bridge.createRoom(federatedInviterUser.getExternalId(), internalRoom.t, roomName, internalRoom.topic);\n\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoom._id, externalRoomId);\n\t}\n\n\tprivate async inviteUserToAFederatedRoom(roomInviteUserInput: FederationRoomInviteUserDto): Promise<void> {\n\t\tconst { internalInviterId, internalRoomId, normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;\n\t\tconst isUserAutoJoining = Boolean(!internalInviterId);\n\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(rawInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\n\t\tif (isUserAutoJoining && !isInviteeFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\tthrow new Error(`Could not find the room to invite. RoomId: ${internalRoomId}`);\n\t\t}\n\n\t\tconst federatedInviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!federatedInviterUser && !isUserAutoJoining) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tconst username = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n\t\tconst inviteeUser = await this.internalUserAdapter.getFederatedUserByInternalUsername(username);\n\t\tif (!inviteeUser) {\n\t\t\tconst existsOnlyOnProxyServer = isInviteeFromTheSameHomeServer;\n\t\t\tawait this.createFederatedUserInternallyOnly(rawInviteeId, username, existsOnlyOnProxyServer);\n\t\t}\n\n\t\tconst federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(username));\n\t\tif (!federatedInviteeUser) {\n\t\t\tthrow new Error(`User with internalUsername ${username} not found`);\n\t\t}\n\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tconst profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n\t\t\tif (!profile) {\n\t\t\t\tawait this.bridge.createUser(\n\t\t\t\t\tinviteeUsernameOnly,\n\t\t\t\t\tfederatedInviteeUser.getName() || federatedInviteeUser.getUsername() || username,\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (!federatedInviterUser && isUserAutoJoining) {\n\t\t\tawait this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n\t\t\treturn;\n\t\t}\n\n\t\tif (!federatedInviterUser) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tawait this.bridge.inviteToRoom(\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\tfederatedInviterUser.getExternalId(),\n\t\t\tfederatedInviteeUser.getExternalId(),\n\t\t);\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tawait this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n\t\t}\n\t}\n}\n\nclass RoomMapper {\n\tpublic static toSearchPublicRoomsDto(\n\t\trooms: IFederationPublicRoomsResult,\n\t\tmaxSizeOfUsersAllowed: number,\n\t\tpageToken?: string,\n\t): FederationPaginatedResult<{\n\t\trooms: IFederationPublicRooms[];\n\t}> {\n\t\treturn {\n\t\t\trooms: (rooms?.chunk || [])\n\t\t\t\t.filter((room) => room.join_rule && room.join_rule !== MatrixRoomJoinRules.KNOCK)\n\t\t\t\t.map((room) => ({\n\t\t\t\t\tid: room.room_id,\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tcanJoin: room.num_joined_members <= maxSizeOfUsersAllowed,\n\t\t\t\t\tcanonicalAlias: room.canonical_alias,\n\t\t\t\t\tjoinedMembers: room.num_joined_members,\n\t\t\t\t\ttopic: room.topic,\n\t\t\t\t\tpageToken,\n\t\t\t\t})),\n\t\t\tcount: rooms?.chunk?.length || 0,\n\t\t\ttotal: rooms?.total_room_count_estimate || 0,\n\t\t\t...(rooms?.next_batch ? { nextPageToken: rooms.next_batch } : {}),\n\t\t\t...(rooms?.prev_batch ? { prevPageToken: rooms.prev_batch } : {}),\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"c17a1d5603d82ed38f14a0865ba3ea6605c3af0e"}
