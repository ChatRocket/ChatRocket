{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/channel-settings/server/functions/saveRoomType.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/channel-settings/server/functions/saveRoomType.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/channel-settings/server/functions/saveRoomType.ts","inputSourceMap":{"version":3,"file":"app/channel-settings/server/functions/saveRoomType.ts","sourceRoot":"","sources":["app/channel-settings/server/functions/saveRoomType.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { IRoom, IUser } from '@rocket.chat/core-typings';\nimport { Rooms, Subscriptions } from '@rocket.chat/models';\nimport { Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { UpdateResult, Document } from 'mongodb';\n\nimport { RoomSettingsEnum } from '../../../../definition/IRoomTypeConfig';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { notifyOnSubscriptionChangedByRoomId } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\n\nexport const saveRoomType = async function (\n\trid: string,\n\troomType: IRoom['t'],\n\tuser: IUser,\n\tsendMessage = true,\n): Promise<UpdateResult | Document> {\n\tif (!Match.test(rid, String)) {\n\t\tthrow new Meteor.Error('invalid-room', 'Invalid room', {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t});\n\t}\n\tif (roomType !== 'c' && roomType !== 'p') {\n\t\tthrow new Meteor.Error('error-invalid-room-type', 'error-invalid-room-type', {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t\ttype: roomType,\n\t\t});\n\t}\n\tconst room = await Rooms.findOneById(rid);\n\tif (room == null) {\n\t\tthrow new Meteor.Error('error-invalid-room', 'error-invalid-room', {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t\t_id: rid,\n\t\t});\n\t}\n\n\tif (!(await roomCoordinator.getRoomDirectives(room.t)?.allowRoomSettingChange(room, RoomSettingsEnum.TYPE))) {\n\t\tthrow new Meteor.Error('error-direct-room', \"Can't change type of direct rooms\", {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t});\n\t}\n\n\tconst result = await Promise.all([Rooms.setTypeById(rid, roomType), Subscriptions.updateTypeByRoomId(rid, roomType)]);\n\n\tif (!result) {\n\t\treturn result;\n\t}\n\n\tif (result[1]?.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tif (sendMessage) {\n\t\tlet message;\n\t\tif (roomType === 'c') {\n\t\t\tmessage = i18n.t('public', {\n\t\t\t\tlng: user?.language || settings.get('Language') || 'en',\n\t\t\t});\n\t\t} else {\n\t\t\tmessage = i18n.t('private', {\n\t\t\t\tlng: user?.language || settings.get('Language') || 'en',\n\t\t\t});\n\t\t}\n\t\tawait Message.saveSystemMessage('room_changed_privacy', rid, message, user);\n\t}\n\n\treturn result;\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/channel-settings/server/functions/saveRoomType.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/channel-settings/server/functions/saveRoomType.ts","inputSourceMap":{"version":3,"file":"app/channel-settings/server/functions/saveRoomType.ts","sourceRoot":"","sources":["app/channel-settings/server/functions/saveRoomType.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { IRoom, IUser } from '@rocket.chat/core-typings';\nimport { Rooms, Subscriptions } from '@rocket.chat/models';\nimport { Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { UpdateResult, Document } from 'mongodb';\n\nimport { RoomSettingsEnum } from '../../../../definition/IRoomTypeConfig';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { notifyOnSubscriptionChangedByRoomId } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\n\nexport const saveRoomType = async function (\n\trid: string,\n\troomType: IRoom['t'],\n\tuser: IUser,\n\tsendMessage = true,\n): Promise<UpdateResult | Document> {\n\tif (!Match.test(rid, String)) {\n\t\tthrow new Meteor.Error('invalid-room', 'Invalid room', {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t});\n\t}\n\tif (roomType !== 'c' && roomType !== 'p') {\n\t\tthrow new Meteor.Error('error-invalid-room-type', 'error-invalid-room-type', {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t\ttype: roomType,\n\t\t});\n\t}\n\tconst room = await Rooms.findOneById(rid);\n\tif (room == null) {\n\t\tthrow new Meteor.Error('error-invalid-room', 'error-invalid-room', {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t\t_id: rid,\n\t\t});\n\t}\n\n\tif (!(await roomCoordinator.getRoomDirectives(room.t)?.allowRoomSettingChange(room, RoomSettingsEnum.TYPE))) {\n\t\tthrow new Meteor.Error('error-direct-room', \"Can't change type of direct rooms\", {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t});\n\t}\n\n\tconst result = await Promise.all([Rooms.setTypeById(rid, roomType), Subscriptions.updateTypeByRoomId(rid, roomType)]);\n\n\tif (!result) {\n\t\treturn result;\n\t}\n\n\tif (result[1]?.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tif (sendMessage) {\n\t\tlet message;\n\t\tif (roomType === 'c') {\n\t\t\tmessage = i18n.t('public', {\n\t\t\t\tlng: user?.language || settings.get('Language') || 'en',\n\t\t\t});\n\t\t} else {\n\t\t\tmessage = i18n.t('private', {\n\t\t\t\tlng: user?.language || settings.get('Language') || 'en',\n\t\t\t});\n\t\t}\n\t\tawait Message.saveSystemMessage('room_changed_privacy', rid, message, user);\n\t}\n\n\treturn result;\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      saveRoomType: () => saveRoomType\n    });\n    let Message;\n    module.link(\"@rocket.chat/core-services\", {\n      Message(v) {\n        Message = v;\n      }\n    }, 0);\n    let Rooms, Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 1);\n    let Match;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let RoomSettingsEnum;\n    module.link(\"../../../../definition/IRoomTypeConfig\", {\n      RoomSettingsEnum(v) {\n        RoomSettingsEnum = v;\n      }\n    }, 4);\n    let i18n;\n    module.link(\"../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 5);\n    let roomCoordinator;\n    module.link(\"../../../../server/lib/rooms/roomCoordinator\", {\n      roomCoordinator(v) {\n        roomCoordinator = v;\n      }\n    }, 6);\n    let notifyOnSubscriptionChangedByRoomId;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnSubscriptionChangedByRoomId(v) {\n        notifyOnSubscriptionChangedByRoomId = v;\n      }\n    }, 7);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 8);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const saveRoomType = async function (rid, roomType, user) {\n      var _roomCoordinator$getR, _result$;\n      let sendMessage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      if (!Match.test(rid, String)) {\n        throw new Meteor.Error('invalid-room', 'Invalid room', {\n          function: 'RocketChat.saveRoomType'\n        });\n      }\n      if (roomType !== 'c' && roomType !== 'p') {\n        throw new Meteor.Error('error-invalid-room-type', 'error-invalid-room-type', {\n          function: 'RocketChat.saveRoomType',\n          type: roomType\n        });\n      }\n      const room = await Rooms.findOneById(rid);\n      if (room == null) {\n        throw new Meteor.Error('error-invalid-room', 'error-invalid-room', {\n          function: 'RocketChat.saveRoomType',\n          _id: rid\n        });\n      }\n      if (!(await ((_roomCoordinator$getR = roomCoordinator.getRoomDirectives(room.t)) === null || _roomCoordinator$getR === void 0 ? void 0 : _roomCoordinator$getR.allowRoomSettingChange(room, RoomSettingsEnum.TYPE)))) {\n        throw new Meteor.Error('error-direct-room', \"Can't change type of direct rooms\", {\n          function: 'RocketChat.saveRoomType'\n        });\n      }\n      const result = await Promise.all([Rooms.setTypeById(rid, roomType), Subscriptions.updateTypeByRoomId(rid, roomType)]);\n      if (!result) {\n        return result;\n      }\n      if ((_result$ = result[1]) !== null && _result$ !== void 0 && _result$.modifiedCount) {\n        void notifyOnSubscriptionChangedByRoomId(rid);\n      }\n      if (sendMessage) {\n        let message;\n        if (roomType === 'c') {\n          message = i18n.t('public', {\n            lng: (user === null || user === void 0 ? void 0 : user.language) || settings.get('Language') || 'en'\n          });\n        } else {\n          message = i18n.t('private', {\n            lng: (user === null || user === void 0 ? void 0 : user.language) || settings.get('Language') || 'en'\n          });\n        }\n        await Message.saveSystemMessage('room_changed_privacy', rid, message, user);\n      }\n      return result;\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","saveRoomType","Message","link","v","Rooms","Subscriptions","Match","Meteor","RoomSettingsEnum","i18n","roomCoordinator","notifyOnSubscriptionChangedByRoomId","settings","__reifyWaitForDeps__","rid","roomType","user","_roomCoordinator$getR","_result$","sendMessage","arguments","length","undefined","test","String","Error","function","type","room","findOneById","_id","getRoomDirectives","t","allowRoomSettingChange","TYPE","result","Promise","all","setTypeById","updateTypeByRoomId","modifiedCount","message","lng","language","get","saveSystemMessage","__reify_async_result__","_reifyError","self","async"],"sources":["app/channel-settings/server/functions/saveRoomType.ts"],"sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { IRoom, IUser } from '@rocket.chat/core-typings';\nimport { Rooms, Subscriptions } from '@rocket.chat/models';\nimport { Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { UpdateResult, Document } from 'mongodb';\n\nimport { RoomSettingsEnum } from '../../../../definition/IRoomTypeConfig';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { notifyOnSubscriptionChangedByRoomId } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\n\nexport const saveRoomType = async function (\n\trid: string,\n\troomType: IRoom['t'],\n\tuser: IUser,\n\tsendMessage = true,\n): Promise<UpdateResult | Document> {\n\tif (!Match.test(rid, String)) {\n\t\tthrow new Meteor.Error('invalid-room', 'Invalid room', {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t});\n\t}\n\tif (roomType !== 'c' && roomType !== 'p') {\n\t\tthrow new Meteor.Error('error-invalid-room-type', 'error-invalid-room-type', {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t\ttype: roomType,\n\t\t});\n\t}\n\tconst room = await Rooms.findOneById(rid);\n\tif (room == null) {\n\t\tthrow new Meteor.Error('error-invalid-room', 'error-invalid-room', {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t\t_id: rid,\n\t\t});\n\t}\n\n\tif (!(await roomCoordinator.getRoomDirectives(room.t)?.allowRoomSettingChange(room, RoomSettingsEnum.TYPE))) {\n\t\tthrow new Meteor.Error('error-direct-room', \"Can't change type of direct rooms\", {\n\t\t\tfunction: 'RocketChat.saveRoomType',\n\t\t});\n\t}\n\n\tconst result = await Promise.all([Rooms.setTypeById(rid, roomType), Subscriptions.updateTypeByRoomId(rid, roomType)]);\n\n\tif (!result) {\n\t\treturn result;\n\t}\n\n\tif (result[1]?.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tif (sendMessage) {\n\t\tlet message;\n\t\tif (roomType === 'c') {\n\t\t\tmessage = i18n.t('public', {\n\t\t\t\tlng: user?.language || settings.get('Language') || 'en',\n\t\t\t});\n\t\t} else {\n\t\t\tmessage = i18n.t('private', {\n\t\t\t\tlng: user?.language || settings.get('Language') || 'en',\n\t\t\t});\n\t\t}\n\t\tawait Message.saveSystemMessage('room_changed_privacy', rid, message, user);\n\t}\n\n\treturn result;\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"a08b68db5b919fd77b9b1159313f41b57d437844"}
