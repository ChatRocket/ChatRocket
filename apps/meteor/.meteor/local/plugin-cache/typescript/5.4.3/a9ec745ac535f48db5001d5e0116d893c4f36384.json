{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/mentions/server/Mentions.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/mentions/server/Mentions.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/mentions/server/Mentions.ts","inputSourceMap":{"version":3,"file":"app/mentions/server/Mentions.ts","sourceRoot":"","sources":["app/mentions/server/Mentions.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Mentions is a named function that will process Mentions\n * @param {Object} message - The message object\n */\nimport { isE2EEMessage, type IMessage, type IRoom, type IUser } from '@rocket.chat/core-typings';\n\nimport { type MentionsParserArgs, MentionsParser } from '../lib/MentionsParser';\n\ntype MentionsServerArgs = MentionsParserArgs & {\n\tmessageMaxAll: () => number;\n\tgetChannels: (c: string[]) => Promise<Pick<IRoom, '_id' | 'name' | 'fname' | 'federated'>[]>;\n\tgetUsers: (u: string[]) => Promise<{ type: 'team' | 'user'; _id: string; username?: string; name?: string }[]>;\n\tgetUser: (u: string) => Promise<IUser | null>;\n\tgetTotalChannelMembers: (rid: string) => Promise<number>;\n\tonMaxRoomMembersExceeded: ({ sender, rid }: { sender: IMessage['u']; rid: string }) => Promise<void>;\n};\n\nexport class MentionsServer extends MentionsParser {\n\tmessageMaxAll: MentionsServerArgs['messageMaxAll'];\n\n\tgetChannels: MentionsServerArgs['getChannels'];\n\n\tgetUsers: MentionsServerArgs['getUsers'];\n\n\tgetUser: MentionsServerArgs['getUser'];\n\n\tgetTotalChannelMembers: MentionsServerArgs['getTotalChannelMembers'];\n\n\tonMaxRoomMembersExceeded: MentionsServerArgs['onMaxRoomMembersExceeded'];\n\n\tconstructor(args: MentionsServerArgs) {\n\t\tsuper(args);\n\n\t\tthis.messageMaxAll = args.messageMaxAll;\n\t\tthis.getChannels = args.getChannels;\n\t\tthis.getUsers = args.getUsers;\n\t\tthis.getUser = args.getUser;\n\t\tthis.getTotalChannelMembers = args.getTotalChannelMembers;\n\t\tthis.onMaxRoomMembersExceeded =\n\t\t\targs.onMaxRoomMembersExceeded ||\n\t\t\t(() => {\n\t\t\t\t/* do nothing */\n\t\t\t});\n\t}\n\n\tasync getUsersByMentions(message: IMessage): Promise<IMessage['mentions']> {\n\t\tconst { msg, rid, u: sender, e2eMentions }: Pick<IMessage, 'msg' | 'rid' | 'u' | 't' | 'e2eMentions'> = message;\n\n\t\tconst mentions =\n\t\t\tisE2EEMessage(message) && e2eMentions?.e2eUserMentions && e2eMentions?.e2eUserMentions.length > 0\n\t\t\t\t? e2eMentions?.e2eUserMentions\n\t\t\t\t: this.getUserMentions(msg);\n\t\tconst mentionsAll: { _id: string; username: string }[] = [];\n\t\tconst userMentions = [];\n\n\t\tfor await (const m of mentions) {\n\t\t\tconst mention = m.trim().substr(1);\n\t\t\tif (mention !== 'all' && mention !== 'here') {\n\t\t\t\tuserMentions.push(mention);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.messageMaxAll() > 0 && (await this.getTotalChannelMembers(rid)) > this.messageMaxAll()) {\n\t\t\t\tawait this.onMaxRoomMembersExceeded({ sender, rid });\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmentionsAll.push({\n\t\t\t\t_id: mention,\n\t\t\t\tusername: mention,\n\t\t\t});\n\t\t}\n\n\t\treturn [...mentionsAll, ...(userMentions.length ? await this.getUsers(userMentions) : [])];\n\t}\n\n\tasync getChannelbyMentions(message: IMessage) {\n\t\tconst { msg, e2eMentions }: Pick<IMessage, 'msg' | 't' | 'e2eMentions'> = message;\n\n\t\tconst channels =\n\t\t\tisE2EEMessage(message) && e2eMentions?.e2eChannelMentions && e2eMentions?.e2eChannelMentions.length > 0\n\t\t\t\t? e2eMentions?.e2eChannelMentions\n\t\t\t\t: this.getChannelMentions(msg);\n\t\treturn this.getChannels(channels.map((c) => c.trim().substr(1)));\n\t}\n\n\tasync execute(message: IMessage) {\n\t\tconst mentionsAll = await this.getUsersByMentions(message);\n\t\tconst channels = await this.getChannelbyMentions(message);\n\n\t\tmessage.mentions = mentionsAll;\n\t\tmessage.channels = channels;\n\n\t\treturn message;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/mentions/server/Mentions.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/mentions/server/Mentions.ts","inputSourceMap":{"version":3,"file":"app/mentions/server/Mentions.ts","sourceRoot":"","sources":["app/mentions/server/Mentions.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Mentions is a named function that will process Mentions\n * @param {Object} message - The message object\n */\nimport { isE2EEMessage, type IMessage, type IRoom, type IUser } from '@rocket.chat/core-typings';\n\nimport { type MentionsParserArgs, MentionsParser } from '../lib/MentionsParser';\n\ntype MentionsServerArgs = MentionsParserArgs & {\n\tmessageMaxAll: () => number;\n\tgetChannels: (c: string[]) => Promise<Pick<IRoom, '_id' | 'name' | 'fname' | 'federated'>[]>;\n\tgetUsers: (u: string[]) => Promise<{ type: 'team' | 'user'; _id: string; username?: string; name?: string }[]>;\n\tgetUser: (u: string) => Promise<IUser | null>;\n\tgetTotalChannelMembers: (rid: string) => Promise<number>;\n\tonMaxRoomMembersExceeded: ({ sender, rid }: { sender: IMessage['u']; rid: string }) => Promise<void>;\n};\n\nexport class MentionsServer extends MentionsParser {\n\tmessageMaxAll: MentionsServerArgs['messageMaxAll'];\n\n\tgetChannels: MentionsServerArgs['getChannels'];\n\n\tgetUsers: MentionsServerArgs['getUsers'];\n\n\tgetUser: MentionsServerArgs['getUser'];\n\n\tgetTotalChannelMembers: MentionsServerArgs['getTotalChannelMembers'];\n\n\tonMaxRoomMembersExceeded: MentionsServerArgs['onMaxRoomMembersExceeded'];\n\n\tconstructor(args: MentionsServerArgs) {\n\t\tsuper(args);\n\n\t\tthis.messageMaxAll = args.messageMaxAll;\n\t\tthis.getChannels = args.getChannels;\n\t\tthis.getUsers = args.getUsers;\n\t\tthis.getUser = args.getUser;\n\t\tthis.getTotalChannelMembers = args.getTotalChannelMembers;\n\t\tthis.onMaxRoomMembersExceeded =\n\t\t\targs.onMaxRoomMembersExceeded ||\n\t\t\t(() => {\n\t\t\t\t/* do nothing */\n\t\t\t});\n\t}\n\n\tasync getUsersByMentions(message: IMessage): Promise<IMessage['mentions']> {\n\t\tconst { msg, rid, u: sender, e2eMentions }: Pick<IMessage, 'msg' | 'rid' | 'u' | 't' | 'e2eMentions'> = message;\n\n\t\tconst mentions =\n\t\t\tisE2EEMessage(message) && e2eMentions?.e2eUserMentions && e2eMentions?.e2eUserMentions.length > 0\n\t\t\t\t? e2eMentions?.e2eUserMentions\n\t\t\t\t: this.getUserMentions(msg);\n\t\tconst mentionsAll: { _id: string; username: string }[] = [];\n\t\tconst userMentions = [];\n\n\t\tfor await (const m of mentions) {\n\t\t\tconst mention = m.trim().substr(1);\n\t\t\tif (mention !== 'all' && mention !== 'here') {\n\t\t\t\tuserMentions.push(mention);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.messageMaxAll() > 0 && (await this.getTotalChannelMembers(rid)) > this.messageMaxAll()) {\n\t\t\t\tawait this.onMaxRoomMembersExceeded({ sender, rid });\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmentionsAll.push({\n\t\t\t\t_id: mention,\n\t\t\t\tusername: mention,\n\t\t\t});\n\t\t}\n\n\t\treturn [...mentionsAll, ...(userMentions.length ? await this.getUsers(userMentions) : [])];\n\t}\n\n\tasync getChannelbyMentions(message: IMessage) {\n\t\tconst { msg, e2eMentions }: Pick<IMessage, 'msg' | 't' | 'e2eMentions'> = message;\n\n\t\tconst channels =\n\t\t\tisE2EEMessage(message) && e2eMentions?.e2eChannelMentions && e2eMentions?.e2eChannelMentions.length > 0\n\t\t\t\t? e2eMentions?.e2eChannelMentions\n\t\t\t\t: this.getChannelMentions(msg);\n\t\treturn this.getChannels(channels.map((c) => c.trim().substr(1)));\n\t}\n\n\tasync execute(message: IMessage) {\n\t\tconst mentionsAll = await this.getUsersByMentions(message);\n\t\tconst channels = await this.getChannelbyMentions(message);\n\n\t\tmessage.mentions = mentionsAll;\n\t\tmessage.channels = channels;\n\n\t\treturn message;\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      MentionsServer: () => MentionsServer\n    });\n    let isE2EEMessage;\n    module.link(\"@rocket.chat/core-typings\", {\n      isE2EEMessage(v) {\n        isE2EEMessage = v;\n      }\n    }, 0);\n    let MentionsParser;\n    module.link(\"../lib/MentionsParser\", {\n      MentionsParser(v) {\n        MentionsParser = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class MentionsServer extends MentionsParser {\n      constructor(args) {\n        super(args);\n        this.messageMaxAll = void 0;\n        this.getChannels = void 0;\n        this.getUsers = void 0;\n        this.getUser = void 0;\n        this.getTotalChannelMembers = void 0;\n        this.onMaxRoomMembersExceeded = void 0;\n        this.messageMaxAll = args.messageMaxAll;\n        this.getChannels = args.getChannels;\n        this.getUsers = args.getUsers;\n        this.getUser = args.getUser;\n        this.getTotalChannelMembers = args.getTotalChannelMembers;\n        this.onMaxRoomMembersExceeded = args.onMaxRoomMembersExceeded || (() => {\n          /* do nothing */\n        });\n      }\n      async getUsersByMentions(message) {\n        const {\n          msg,\n          rid,\n          u: sender,\n          e2eMentions\n        } = message;\n        const mentions = isE2EEMessage(message) && e2eMentions !== null && e2eMentions !== void 0 && e2eMentions.e2eUserMentions && (e2eMentions === null || e2eMentions === void 0 ? void 0 : e2eMentions.e2eUserMentions.length) > 0 ? e2eMentions === null || e2eMentions === void 0 ? void 0 : e2eMentions.e2eUserMentions : this.getUserMentions(msg);\n        const mentionsAll = [];\n        const userMentions = [];\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(mentions), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const m = _step.value;\n            {\n              const mention = m.trim().substr(1);\n              if (mention !== 'all' && mention !== 'here') {\n                userMentions.push(mention);\n                continue;\n              }\n              if (this.messageMaxAll() > 0 && (await this.getTotalChannelMembers(rid)) > this.messageMaxAll()) {\n                await this.onMaxRoomMembersExceeded({\n                  sender,\n                  rid\n                });\n                continue;\n              }\n              mentionsAll.push({\n                _id: mention,\n                username: mention\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        return [...mentionsAll, ...(userMentions.length ? await this.getUsers(userMentions) : [])];\n      }\n      async getChannelbyMentions(message) {\n        const {\n          msg,\n          e2eMentions\n        } = message;\n        const channels = isE2EEMessage(message) && e2eMentions !== null && e2eMentions !== void 0 && e2eMentions.e2eChannelMentions && (e2eMentions === null || e2eMentions === void 0 ? void 0 : e2eMentions.e2eChannelMentions.length) > 0 ? e2eMentions === null || e2eMentions === void 0 ? void 0 : e2eMentions.e2eChannelMentions : this.getChannelMentions(msg);\n        return this.getChannels(channels.map(c => c.trim().substr(1)));\n      }\n      async execute(message) {\n        const mentionsAll = await this.getUsersByMentions(message);\n        const channels = await this.getChannelbyMentions(message);\n        message.mentions = mentionsAll;\n        message.channels = channels;\n        return message;\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","MentionsServer","isE2EEMessage","MentionsParser","__reifyWaitForDeps__","constructor","args","messageMaxAll","getChannels","getUsers","getUser","getTotalChannelMembers","onMaxRoomMembersExceeded","getUsersByMentions","message","msg","rid","u","sender","e2eMentions","mentions","e2eUserMentions","length","getUserMentions","mentionsAll","userMentions","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","m","value","mention","trim","substr","push","_id","username","err","return","getChannelbyMentions","channels","e2eChannelMentions","getChannelMentions","map","c","execute","__reify_async_result__","_reifyError","self","async"],"sources":["app/mentions/server/Mentions.ts"],"sourcesContent":["/*\n * Mentions is a named function that will process Mentions\n * @param {Object} message - The message object\n */\nimport { isE2EEMessage, type IMessage, type IRoom, type IUser } from '@rocket.chat/core-typings';\n\nimport { type MentionsParserArgs, MentionsParser } from '../lib/MentionsParser';\n\ntype MentionsServerArgs = MentionsParserArgs & {\n\tmessageMaxAll: () => number;\n\tgetChannels: (c: string[]) => Promise<Pick<IRoom, '_id' | 'name' | 'fname' | 'federated'>[]>;\n\tgetUsers: (u: string[]) => Promise<{ type: 'team' | 'user'; _id: string; username?: string; name?: string }[]>;\n\tgetUser: (u: string) => Promise<IUser | null>;\n\tgetTotalChannelMembers: (rid: string) => Promise<number>;\n\tonMaxRoomMembersExceeded: ({ sender, rid }: { sender: IMessage['u']; rid: string }) => Promise<void>;\n};\n\nexport class MentionsServer extends MentionsParser {\n\tmessageMaxAll: MentionsServerArgs['messageMaxAll'];\n\n\tgetChannels: MentionsServerArgs['getChannels'];\n\n\tgetUsers: MentionsServerArgs['getUsers'];\n\n\tgetUser: MentionsServerArgs['getUser'];\n\n\tgetTotalChannelMembers: MentionsServerArgs['getTotalChannelMembers'];\n\n\tonMaxRoomMembersExceeded: MentionsServerArgs['onMaxRoomMembersExceeded'];\n\n\tconstructor(args: MentionsServerArgs) {\n\t\tsuper(args);\n\n\t\tthis.messageMaxAll = args.messageMaxAll;\n\t\tthis.getChannels = args.getChannels;\n\t\tthis.getUsers = args.getUsers;\n\t\tthis.getUser = args.getUser;\n\t\tthis.getTotalChannelMembers = args.getTotalChannelMembers;\n\t\tthis.onMaxRoomMembersExceeded =\n\t\t\targs.onMaxRoomMembersExceeded ||\n\t\t\t(() => {\n\t\t\t\t/* do nothing */\n\t\t\t});\n\t}\n\n\tasync getUsersByMentions(message: IMessage): Promise<IMessage['mentions']> {\n\t\tconst { msg, rid, u: sender, e2eMentions }: Pick<IMessage, 'msg' | 'rid' | 'u' | 't' | 'e2eMentions'> = message;\n\n\t\tconst mentions =\n\t\t\tisE2EEMessage(message) && e2eMentions?.e2eUserMentions && e2eMentions?.e2eUserMentions.length > 0\n\t\t\t\t? e2eMentions?.e2eUserMentions\n\t\t\t\t: this.getUserMentions(msg);\n\t\tconst mentionsAll: { _id: string; username: string }[] = [];\n\t\tconst userMentions = [];\n\n\t\tfor await (const m of mentions) {\n\t\t\tconst mention = m.trim().substr(1);\n\t\t\tif (mention !== 'all' && mention !== 'here') {\n\t\t\t\tuserMentions.push(mention);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.messageMaxAll() > 0 && (await this.getTotalChannelMembers(rid)) > this.messageMaxAll()) {\n\t\t\t\tawait this.onMaxRoomMembersExceeded({ sender, rid });\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmentionsAll.push({\n\t\t\t\t_id: mention,\n\t\t\t\tusername: mention,\n\t\t\t});\n\t\t}\n\n\t\treturn [...mentionsAll, ...(userMentions.length ? await this.getUsers(userMentions) : [])];\n\t}\n\n\tasync getChannelbyMentions(message: IMessage) {\n\t\tconst { msg, e2eMentions }: Pick<IMessage, 'msg' | 't' | 'e2eMentions'> = message;\n\n\t\tconst channels =\n\t\t\tisE2EEMessage(message) && e2eMentions?.e2eChannelMentions && e2eMentions?.e2eChannelMentions.length > 0\n\t\t\t\t? e2eMentions?.e2eChannelMentions\n\t\t\t\t: this.getChannelMentions(msg);\n\t\treturn this.getChannels(channels.map((c) => c.trim().substr(1)));\n\t}\n\n\tasync execute(message: IMessage) {\n\t\tconst mentionsAll = await this.getUsersByMentions(message);\n\t\tconst channels = await this.getChannelbyMentions(message);\n\n\t\tmessage.mentions = mentionsAll;\n\t\tmessage.channels = channels;\n\n\t\treturn message;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"a9ec745ac535f48db5001d5e0116d893c4f36384"}
