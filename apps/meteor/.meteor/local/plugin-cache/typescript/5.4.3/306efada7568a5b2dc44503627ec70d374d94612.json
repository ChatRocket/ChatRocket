{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatRooms.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/models/raw/LivechatRooms.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatRooms.ts","inputSourceMap":{"version":3,"file":"ee/server/models/raw/LivechatRooms.ts","sourceRoot":"","sources":["ee/server/models/raw/LivechatRooms.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tILivechatPriority,\n\tIOmnichannelRoom,\n\tIOmnichannelServiceLevelAgreements,\n\tRocketChatRecordDeleted,\n\tReportResult,\n} from '@rocket.chat/core-typings';\nimport { LivechatPriorityWeight, DEFAULT_SLA_CONFIG } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport type { FindCursor, UpdateResult, Document, FindOptions, Db, Collection, Filter, AggregationCursor } from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../../../server/database/readSecondaryPreferred';\nimport { LivechatRoomsRaw } from '../../../../server/models/raw/LivechatRooms';\n\ndeclare module '@rocket.chat/model-typings' {\n\tinterface ILivechatRoomsModel {\n\t\tassociateRoomsWithDepartmentToUnit: (departments: string[], unit: string) => Promise<void>;\n\t\tremoveUnitAssociationFromRooms: (unit: string) => Promise<void>;\n\t\tupdateDepartmentAncestorsById: (rid: string, ancestors?: string[]) => Promise<UpdateResult>;\n\t\tunsetPredictedVisitorAbandonmentByRoomId(rid: string): Promise<UpdateResult>;\n\t\tfindAbandonedOpenRooms(date: Date, extraQuery?: Filter<IOmnichannelRoom>): FindCursor<IOmnichannelRoom>;\n\t\tsetPredictedVisitorAbandonmentByRoomId(roomId: string, date: Date): Promise<UpdateResult>;\n\t\tgetPredictedVisitorAbandonmentByRoomIdUpdateQuery(date: Date, roomUpdater: Updater<IOmnichannelRoom>): Updater<IOmnichannelRoom>;\n\t\tunsetAllPredictedVisitorAbandonment(): Promise<void>;\n\t\tsetOnHoldByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tunsetOnHoldByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tunsetOnHoldAndPredictedVisitorAbandonmentByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tsetSlaForRoomById(\n\t\t\troomId: string,\n\t\t\tsla: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>,\n\t\t): Promise<UpdateResult | Document>;\n\t\tremoveSlaFromRoomById(roomId: string): Promise<UpdateResult | Document>;\n\t\tbulkRemoveSlaFromRoomsById(slaId: string): Promise<UpdateResult | Document>;\n\t\tfindOpenBySlaId(\n\t\t\tslaId: string,\n\t\t\toptions: FindOptions<IOmnichannelRoom>,\n\t\t\textraQuery?: Filter<IOmnichannelRoom>,\n\t\t): FindCursor<IOmnichannelRoom>;\n\t\tsetPriorityByRoomId(roomId: string, priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<UpdateResult>;\n\t\tunsetPriorityByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tcountPrioritizedRooms(): Promise<number>;\n\t\tcountRoomsWithSla(): Promise<number>;\n\t\tcountRoomsWithPdfTranscriptRequested(): Promise<number>;\n\t\tcountRoomsWithTranscriptSent(): Promise<number>;\n\t\tgetConversationsBySource(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult>;\n\t\tgetConversationsByStatus(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult>;\n\t\tgetConversationsByDepartment(\n\t\t\tstart: Date,\n\t\t\tend: Date,\n\t\t\tsort: Record<string, 1 | -1>,\n\t\t\textraQuery: Filter<IOmnichannelRoom>,\n\t\t): AggregationCursor<ReportResult>;\n\t\tgetConversationsByTags(\n\t\t\tstart: Date,\n\t\t\tend: Date,\n\t\t\tsort: Record<string, 1 | -1>,\n\t\t\textraQuery: Filter<IOmnichannelRoom>,\n\t\t): AggregationCursor<ReportResult>;\n\t\tgetConversationsByAgents(\n\t\t\tstart: Date,\n\t\t\tend: Date,\n\t\t\tsort: Record<string, 1 | -1>,\n\t\t\textraQuery: Filter<IOmnichannelRoom>,\n\t\t): AggregationCursor<ReportResult>;\n\t\tgetConversationsWithoutTagsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number>;\n\t\tgetTotalConversationsWithoutAgentsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number>;\n\t\tgetTotalConversationsWithoutDepartmentBetweenDates(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number>;\n\t}\n}\n\nexport class LivechatRoomsRawEE extends LivechatRoomsRaw implements ILivechatRoomsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IOmnichannelRoom>>) {\n\t\tsuper(db, trash);\n\t}\n\n\tcountPrioritizedRooms(): Promise<number> {\n\t\treturn this.col.countDocuments({ priorityId: { $exists: true } });\n\t}\n\n\tcountRoomsWithSla(): Promise<number> {\n\t\treturn this.col.countDocuments({ slaId: { $exists: true } });\n\t}\n\n\tcountRoomsWithPdfTranscriptRequested(): Promise<number> {\n\t\treturn this.col.countDocuments({ pdfTranscriptRequested: true });\n\t}\n\n\tcountRoomsWithTranscriptSent(): Promise<number> {\n\t\treturn this.col.countDocuments({ pdfTranscriptFileId: { $exists: true } });\n\t}\n\n\tasync unsetAllPredictedVisitorAbandonment(): Promise<void> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'open': true,\n\t\t\t\t't': 'l',\n\t\t\t\t'omnichannel.predictedVisitorAbandonmentAt': { $exists: true },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { 'omnichannel.predictedVisitorAbandonmentAt': 1 },\n\t\t\t},\n\t\t).then();\n\t}\n\n\tsetOnHoldByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { onHold: true } });\n\t}\n\n\tunsetOnHoldByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $unset: { onHold: 1 } });\n\t}\n\n\tunsetOnHoldAndPredictedVisitorAbandonmentByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t'omnichannel.predictedVisitorAbandonmentAt': 1,\n\t\t\t\t\t'onHold': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetSlaForRoomById(\n\t\troomId: string,\n\t\tsla: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>,\n\t): Promise<UpdateResult | Document> {\n\t\tconst { _id: slaId, dueTimeInMinutes } = sla;\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tslaId,\n\t\t\t\t\testimatedWaitingTimeQueue: dueTimeInMinutes,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveSlaFromRoomById(roomId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tslaId: 1,\n\t\t\t\t},\n\t\t\t\t$set: {\n\t\t\t\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tbulkRemoveSlaFromRoomsById(slaId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\topen: true,\n\t\t\t\tt: 'l',\n\t\t\t\tslaId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { slaId: 1 },\n\t\t\t\t$set: {\n\t\t\t\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindOpenBySlaId(\n\t\tslaId: string,\n\t\toptions: FindOptions<IOmnichannelRoom>,\n\t\textraQuery?: Filter<IOmnichannelRoom>,\n\t): FindCursor<IOmnichannelRoom> {\n\t\tconst query = {\n\t\t\tt: 'l' as const,\n\t\t\topen: true,\n\t\t\tslaId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync setPriorityByRoomId(roomId: string, priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<UpdateResult> {\n\t\tconst { _id: priorityId, sortItem: priorityWeight } = priority;\n\n\t\treturn this.updateOne({ _id: roomId }, { $set: { priorityId, priorityWeight } });\n\t}\n\n\tasync unsetPriorityByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id: roomId },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tpriorityId: 1,\n\t\t\t\t},\n\t\t\t\t$set: {\n\t\t\t\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tgetPredictedVisitorAbandonmentByRoomIdUpdateQuery(\n\t\tdate: Date,\n\t\troomUpdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t): Updater<IOmnichannelRoom> {\n\t\treturn roomUpdater.set('omnichannel.predictedVisitorAbandonmentAt', date);\n\t}\n\n\tsetPredictedVisitorAbandonmentByRoomId(rid: string, willBeAbandonedAt: Date): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: rid,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'omnichannel.predictedVisitorAbandonmentAt': willBeAbandonedAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindAbandonedOpenRooms(date: Date, extraQuery?: Filter<IOmnichannelRoom>): FindCursor<IOmnichannelRoom> {\n\t\treturn this.find({\n\t\t\t'omnichannel.predictedVisitorAbandonmentAt': { $lte: date },\n\t\t\t'waitingResponse': { $exists: false },\n\t\t\t'closedAt': { $exists: false },\n\t\t\t'open': true,\n\t\t\t...extraQuery,\n\t\t});\n\t}\n\n\tasync unsetPredictedVisitorAbandonmentByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { 'omnichannel.predictedVisitorAbandonmentAt': 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tasync associateRoomsWithDepartmentToUnit(departments: string[], unitId: string): Promise<void> {\n\t\tconst query = {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\tdepartmentId: { $in: departments },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdepartmentAncestors: { $exists: false },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdepartmentAncestors: { $exists: true },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdepartmentAncestors: { $ne: unitId },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t\tconst update = { $set: { departmentAncestors: [unitId] } };\n\t\tawait this.updateMany(query, update);\n\n\t\tconst queryToDisassociateOldRoomsConnectedToUnit = {\n\t\t\tdepartmentAncestors: unitId,\n\t\t\tdepartmentId: { $nin: departments },\n\t\t};\n\t\tconst updateToDisassociateRooms = { $unset: { departmentAncestors: 1 } };\n\t\tawait this.updateMany(queryToDisassociateOldRoomsConnectedToUnit, updateToDisassociateRooms);\n\t}\n\n\tasync removeUnitAssociationFromRooms(unitId: string): Promise<void> {\n\t\tconst query = {\n\t\t\tdepartmentAncestors: unitId,\n\t\t};\n\t\tconst update = { $unset: { departmentAncestors: 1 } };\n\t\tawait this.updateMany(query, update);\n\t}\n\n\tasync updateDepartmentAncestorsById(rid: string, departmentAncestors?: string[]) {\n\t\tconst query = {\n\t\t\t_id: rid,\n\t\t};\n\t\tconst update = departmentAncestors ? { $set: { departmentAncestors } } : { $unset: { departmentAncestors: 1 } };\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetConversationsBySource(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\ttype: '$source.type',\n\t\t\t\t\t\t\talias: '$source.alias',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalue: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: { value: -1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$value' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\t\t\t$ifNull: ['$_id.alias', '$_id.type'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvalue: '$value',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'source_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetConversationsByStatus(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\topen: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{ $eq: ['$open', true] },\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$or: [{ $not: ['$onHold'] }, { $eq: ['$onHold', false] }],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{ $ifNull: ['$servedBy', false] },\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclosed: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$ifNull: ['$metrics.chatDuration', false],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tqueued: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{ $eq: ['$open', true] },\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$eq: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$ifNull: ['$servedBy', null],\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonhold: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [{ $eq: ['$onHold', true] }, 1, 0],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{ label: 'Open', value: '$open' },\n\t\t\t\t\t\t\t{ label: 'Closed', value: '$closed' },\n\t\t\t\t\t\t\t{ label: 'Queued', value: '$queued' },\n\t\t\t\t\t\t\t{ label: 'On_Hold', value: '$onhold' },\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$data',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: { 'data.value': -1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\ttotal: { $first: '$total' },\n\t\t\t\t\t\tdata: { $push: '$data' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetConversationsByDepartment(\n\t\tstart: Date,\n\t\tend: Date,\n\t\tsort: Record<string, 1 | -1>,\n\t\textraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tdepartmentId: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$departmentId',\n\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\t\tas: 'department',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t$arrayElemAt: ['$department.name', 0],\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotal: {\n\t\t\t\t\t\t\t$sum: '$total',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t$ne: null,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: sort || { total: 1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: '$_id',\n\t\t\t\t\t\t\t\tvalue: '$total',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'departmentId_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetTotalConversationsWithoutDepartmentBetweenDates(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\tt: 'l',\n\t\t\tdepartmentId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$gte: start,\n\t\t\t\t$lt: end,\n\t\t\t},\n\t\t\t...extraQuery,\n\t\t});\n\t}\n\n\tgetConversationsByTags(\n\t\tstart: Date,\n\t\tend: Date,\n\t\tsort: Record<string, 1 | -1>,\n\t\textraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttags: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: [],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$tags',\n\t\t\t\t\t\ttotal: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$_id',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: sort || { total: 1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: '$_id',\n\t\t\t\t\t\t\t\tvalue: '$total',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'tags.0_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetConversationsWithoutTagsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\tt: 'l',\n\t\t\tts: {\n\t\t\t\t$gte: start,\n\t\t\t\t$lt: end,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\ttags: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttags: {\n\t\t\t\t\t\t$eq: [],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t...extraQuery,\n\t\t});\n\t}\n\n\tgetConversationsByAgents(\n\t\tstart: Date,\n\t\tend: Date,\n\t\tsort: Record<string, 1 | -1>,\n\t\textraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tservedBy: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$servedBy._id',\n\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'users',\n\t\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\t\tas: 'agent',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$set: {\n\t\t\t\t\t\tagent: { $first: '$agent' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$addFields: {\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t$ifNull: ['$agent.name', '$_id'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: sort || { name: 1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: '$name',\n\t\t\t\t\t\t\t\tvalue: '$total',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'servedBy_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetTotalConversationsWithoutAgentsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\tt: 'l',\n\t\t\tts: {\n\t\t\t\t$gte: start,\n\t\t\t\t$lt: end,\n\t\t\t},\n\t\t\tservedBy: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t...extraQuery,\n\t\t});\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/models/raw/LivechatRooms.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/models/raw/LivechatRooms.ts","inputSourceMap":{"version":3,"file":"ee/server/models/raw/LivechatRooms.ts","sourceRoot":"","sources":["ee/server/models/raw/LivechatRooms.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tILivechatPriority,\n\tIOmnichannelRoom,\n\tIOmnichannelServiceLevelAgreements,\n\tRocketChatRecordDeleted,\n\tReportResult,\n} from '@rocket.chat/core-typings';\nimport { LivechatPriorityWeight, DEFAULT_SLA_CONFIG } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport type { FindCursor, UpdateResult, Document, FindOptions, Db, Collection, Filter, AggregationCursor } from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../../../server/database/readSecondaryPreferred';\nimport { LivechatRoomsRaw } from '../../../../server/models/raw/LivechatRooms';\n\ndeclare module '@rocket.chat/model-typings' {\n\tinterface ILivechatRoomsModel {\n\t\tassociateRoomsWithDepartmentToUnit: (departments: string[], unit: string) => Promise<void>;\n\t\tremoveUnitAssociationFromRooms: (unit: string) => Promise<void>;\n\t\tupdateDepartmentAncestorsById: (rid: string, ancestors?: string[]) => Promise<UpdateResult>;\n\t\tunsetPredictedVisitorAbandonmentByRoomId(rid: string): Promise<UpdateResult>;\n\t\tfindAbandonedOpenRooms(date: Date, extraQuery?: Filter<IOmnichannelRoom>): FindCursor<IOmnichannelRoom>;\n\t\tsetPredictedVisitorAbandonmentByRoomId(roomId: string, date: Date): Promise<UpdateResult>;\n\t\tgetPredictedVisitorAbandonmentByRoomIdUpdateQuery(date: Date, roomUpdater: Updater<IOmnichannelRoom>): Updater<IOmnichannelRoom>;\n\t\tunsetAllPredictedVisitorAbandonment(): Promise<void>;\n\t\tsetOnHoldByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tunsetOnHoldByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tunsetOnHoldAndPredictedVisitorAbandonmentByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tsetSlaForRoomById(\n\t\t\troomId: string,\n\t\t\tsla: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>,\n\t\t): Promise<UpdateResult | Document>;\n\t\tremoveSlaFromRoomById(roomId: string): Promise<UpdateResult | Document>;\n\t\tbulkRemoveSlaFromRoomsById(slaId: string): Promise<UpdateResult | Document>;\n\t\tfindOpenBySlaId(\n\t\t\tslaId: string,\n\t\t\toptions: FindOptions<IOmnichannelRoom>,\n\t\t\textraQuery?: Filter<IOmnichannelRoom>,\n\t\t): FindCursor<IOmnichannelRoom>;\n\t\tsetPriorityByRoomId(roomId: string, priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<UpdateResult>;\n\t\tunsetPriorityByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tcountPrioritizedRooms(): Promise<number>;\n\t\tcountRoomsWithSla(): Promise<number>;\n\t\tcountRoomsWithPdfTranscriptRequested(): Promise<number>;\n\t\tcountRoomsWithTranscriptSent(): Promise<number>;\n\t\tgetConversationsBySource(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult>;\n\t\tgetConversationsByStatus(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult>;\n\t\tgetConversationsByDepartment(\n\t\t\tstart: Date,\n\t\t\tend: Date,\n\t\t\tsort: Record<string, 1 | -1>,\n\t\t\textraQuery: Filter<IOmnichannelRoom>,\n\t\t): AggregationCursor<ReportResult>;\n\t\tgetConversationsByTags(\n\t\t\tstart: Date,\n\t\t\tend: Date,\n\t\t\tsort: Record<string, 1 | -1>,\n\t\t\textraQuery: Filter<IOmnichannelRoom>,\n\t\t): AggregationCursor<ReportResult>;\n\t\tgetConversationsByAgents(\n\t\t\tstart: Date,\n\t\t\tend: Date,\n\t\t\tsort: Record<string, 1 | -1>,\n\t\t\textraQuery: Filter<IOmnichannelRoom>,\n\t\t): AggregationCursor<ReportResult>;\n\t\tgetConversationsWithoutTagsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number>;\n\t\tgetTotalConversationsWithoutAgentsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number>;\n\t\tgetTotalConversationsWithoutDepartmentBetweenDates(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number>;\n\t}\n}\n\nexport class LivechatRoomsRawEE extends LivechatRoomsRaw implements ILivechatRoomsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IOmnichannelRoom>>) {\n\t\tsuper(db, trash);\n\t}\n\n\tcountPrioritizedRooms(): Promise<number> {\n\t\treturn this.col.countDocuments({ priorityId: { $exists: true } });\n\t}\n\n\tcountRoomsWithSla(): Promise<number> {\n\t\treturn this.col.countDocuments({ slaId: { $exists: true } });\n\t}\n\n\tcountRoomsWithPdfTranscriptRequested(): Promise<number> {\n\t\treturn this.col.countDocuments({ pdfTranscriptRequested: true });\n\t}\n\n\tcountRoomsWithTranscriptSent(): Promise<number> {\n\t\treturn this.col.countDocuments({ pdfTranscriptFileId: { $exists: true } });\n\t}\n\n\tasync unsetAllPredictedVisitorAbandonment(): Promise<void> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'open': true,\n\t\t\t\t't': 'l',\n\t\t\t\t'omnichannel.predictedVisitorAbandonmentAt': { $exists: true },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { 'omnichannel.predictedVisitorAbandonmentAt': 1 },\n\t\t\t},\n\t\t).then();\n\t}\n\n\tsetOnHoldByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { onHold: true } });\n\t}\n\n\tunsetOnHoldByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $unset: { onHold: 1 } });\n\t}\n\n\tunsetOnHoldAndPredictedVisitorAbandonmentByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t'omnichannel.predictedVisitorAbandonmentAt': 1,\n\t\t\t\t\t'onHold': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetSlaForRoomById(\n\t\troomId: string,\n\t\tsla: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>,\n\t): Promise<UpdateResult | Document> {\n\t\tconst { _id: slaId, dueTimeInMinutes } = sla;\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tslaId,\n\t\t\t\t\testimatedWaitingTimeQueue: dueTimeInMinutes,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveSlaFromRoomById(roomId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tslaId: 1,\n\t\t\t\t},\n\t\t\t\t$set: {\n\t\t\t\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tbulkRemoveSlaFromRoomsById(slaId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\topen: true,\n\t\t\t\tt: 'l',\n\t\t\t\tslaId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { slaId: 1 },\n\t\t\t\t$set: {\n\t\t\t\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindOpenBySlaId(\n\t\tslaId: string,\n\t\toptions: FindOptions<IOmnichannelRoom>,\n\t\textraQuery?: Filter<IOmnichannelRoom>,\n\t): FindCursor<IOmnichannelRoom> {\n\t\tconst query = {\n\t\t\tt: 'l' as const,\n\t\t\topen: true,\n\t\t\tslaId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync setPriorityByRoomId(roomId: string, priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<UpdateResult> {\n\t\tconst { _id: priorityId, sortItem: priorityWeight } = priority;\n\n\t\treturn this.updateOne({ _id: roomId }, { $set: { priorityId, priorityWeight } });\n\t}\n\n\tasync unsetPriorityByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id: roomId },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tpriorityId: 1,\n\t\t\t\t},\n\t\t\t\t$set: {\n\t\t\t\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tgetPredictedVisitorAbandonmentByRoomIdUpdateQuery(\n\t\tdate: Date,\n\t\troomUpdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t): Updater<IOmnichannelRoom> {\n\t\treturn roomUpdater.set('omnichannel.predictedVisitorAbandonmentAt', date);\n\t}\n\n\tsetPredictedVisitorAbandonmentByRoomId(rid: string, willBeAbandonedAt: Date): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: rid,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'omnichannel.predictedVisitorAbandonmentAt': willBeAbandonedAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindAbandonedOpenRooms(date: Date, extraQuery?: Filter<IOmnichannelRoom>): FindCursor<IOmnichannelRoom> {\n\t\treturn this.find({\n\t\t\t'omnichannel.predictedVisitorAbandonmentAt': { $lte: date },\n\t\t\t'waitingResponse': { $exists: false },\n\t\t\t'closedAt': { $exists: false },\n\t\t\t'open': true,\n\t\t\t...extraQuery,\n\t\t});\n\t}\n\n\tasync unsetPredictedVisitorAbandonmentByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { 'omnichannel.predictedVisitorAbandonmentAt': 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tasync associateRoomsWithDepartmentToUnit(departments: string[], unitId: string): Promise<void> {\n\t\tconst query = {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\tdepartmentId: { $in: departments },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdepartmentAncestors: { $exists: false },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdepartmentAncestors: { $exists: true },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdepartmentAncestors: { $ne: unitId },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t\tconst update = { $set: { departmentAncestors: [unitId] } };\n\t\tawait this.updateMany(query, update);\n\n\t\tconst queryToDisassociateOldRoomsConnectedToUnit = {\n\t\t\tdepartmentAncestors: unitId,\n\t\t\tdepartmentId: { $nin: departments },\n\t\t};\n\t\tconst updateToDisassociateRooms = { $unset: { departmentAncestors: 1 } };\n\t\tawait this.updateMany(queryToDisassociateOldRoomsConnectedToUnit, updateToDisassociateRooms);\n\t}\n\n\tasync removeUnitAssociationFromRooms(unitId: string): Promise<void> {\n\t\tconst query = {\n\t\t\tdepartmentAncestors: unitId,\n\t\t};\n\t\tconst update = { $unset: { departmentAncestors: 1 } };\n\t\tawait this.updateMany(query, update);\n\t}\n\n\tasync updateDepartmentAncestorsById(rid: string, departmentAncestors?: string[]) {\n\t\tconst query = {\n\t\t\t_id: rid,\n\t\t};\n\t\tconst update = departmentAncestors ? { $set: { departmentAncestors } } : { $unset: { departmentAncestors: 1 } };\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetConversationsBySource(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\ttype: '$source.type',\n\t\t\t\t\t\t\talias: '$source.alias',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalue: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: { value: -1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$value' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\t\t\t$ifNull: ['$_id.alias', '$_id.type'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvalue: '$value',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'source_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetConversationsByStatus(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\topen: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{ $eq: ['$open', true] },\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$or: [{ $not: ['$onHold'] }, { $eq: ['$onHold', false] }],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{ $ifNull: ['$servedBy', false] },\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclosed: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$ifNull: ['$metrics.chatDuration', false],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tqueued: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{ $eq: ['$open', true] },\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$eq: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$ifNull: ['$servedBy', null],\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonhold: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [{ $eq: ['$onHold', true] }, 1, 0],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{ label: 'Open', value: '$open' },\n\t\t\t\t\t\t\t{ label: 'Closed', value: '$closed' },\n\t\t\t\t\t\t\t{ label: 'Queued', value: '$queued' },\n\t\t\t\t\t\t\t{ label: 'On_Hold', value: '$onhold' },\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$data',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: { 'data.value': -1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\ttotal: { $first: '$total' },\n\t\t\t\t\t\tdata: { $push: '$data' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetConversationsByDepartment(\n\t\tstart: Date,\n\t\tend: Date,\n\t\tsort: Record<string, 1 | -1>,\n\t\textraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tdepartmentId: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$departmentId',\n\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\t\tas: 'department',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t$arrayElemAt: ['$department.name', 0],\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotal: {\n\t\t\t\t\t\t\t$sum: '$total',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t$ne: null,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: sort || { total: 1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: '$_id',\n\t\t\t\t\t\t\t\tvalue: '$total',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'departmentId_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetTotalConversationsWithoutDepartmentBetweenDates(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\tt: 'l',\n\t\t\tdepartmentId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$gte: start,\n\t\t\t\t$lt: end,\n\t\t\t},\n\t\t\t...extraQuery,\n\t\t});\n\t}\n\n\tgetConversationsByTags(\n\t\tstart: Date,\n\t\tend: Date,\n\t\tsort: Record<string, 1 | -1>,\n\t\textraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttags: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: [],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$tags',\n\t\t\t\t\t\ttotal: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$_id',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: sort || { total: 1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: '$_id',\n\t\t\t\t\t\t\t\tvalue: '$total',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'tags.0_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetConversationsWithoutTagsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\tt: 'l',\n\t\t\tts: {\n\t\t\t\t$gte: start,\n\t\t\t\t$lt: end,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\ttags: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttags: {\n\t\t\t\t\t\t$eq: [],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t...extraQuery,\n\t\t});\n\t}\n\n\tgetConversationsByAgents(\n\t\tstart: Date,\n\t\tend: Date,\n\t\tsort: Record<string, 1 | -1>,\n\t\textraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tservedBy: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$servedBy._id',\n\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'users',\n\t\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\t\tas: 'agent',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$set: {\n\t\t\t\t\t\tagent: { $first: '$agent' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$addFields: {\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t$ifNull: ['$agent.name', '$_id'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: sort || { name: 1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: '$name',\n\t\t\t\t\t\t\t\tvalue: '$total',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'servedBy_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetTotalConversationsWithoutAgentsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\tt: 'l',\n\t\t\tts: {\n\t\t\t\t$gte: start,\n\t\t\t\t$lt: end,\n\t\t\t},\n\t\t\tservedBy: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t...extraQuery,\n\t\t});\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      LivechatRoomsRawEE: () => LivechatRoomsRawEE\n    });\n    let LivechatPriorityWeight, DEFAULT_SLA_CONFIG;\n    module.link(\"@rocket.chat/core-typings\", {\n      LivechatPriorityWeight(v) {\n        LivechatPriorityWeight = v;\n      },\n      DEFAULT_SLA_CONFIG(v) {\n        DEFAULT_SLA_CONFIG = v;\n      }\n    }, 0);\n    let readSecondaryPreferred;\n    module.link(\"../../../../server/database/readSecondaryPreferred\", {\n      readSecondaryPreferred(v) {\n        readSecondaryPreferred = v;\n      }\n    }, 1);\n    let LivechatRoomsRaw;\n    module.link(\"../../../../server/models/raw/LivechatRooms\", {\n      LivechatRoomsRaw(v) {\n        LivechatRoomsRaw = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class LivechatRoomsRawEE extends LivechatRoomsRaw {\n      constructor(db, trash) {\n        super(db, trash);\n      }\n      countPrioritizedRooms() {\n        return this.col.countDocuments({\n          priorityId: {\n            $exists: true\n          }\n        });\n      }\n      countRoomsWithSla() {\n        return this.col.countDocuments({\n          slaId: {\n            $exists: true\n          }\n        });\n      }\n      countRoomsWithPdfTranscriptRequested() {\n        return this.col.countDocuments({\n          pdfTranscriptRequested: true\n        });\n      }\n      countRoomsWithTranscriptSent() {\n        return this.col.countDocuments({\n          pdfTranscriptFileId: {\n            $exists: true\n          }\n        });\n      }\n      async unsetAllPredictedVisitorAbandonment() {\n        return this.updateMany({\n          'open': true,\n          't': 'l',\n          'omnichannel.predictedVisitorAbandonmentAt': {\n            $exists: true\n          }\n        }, {\n          $unset: {\n            'omnichannel.predictedVisitorAbandonmentAt': 1\n          }\n        }).then();\n      }\n      setOnHoldByRoomId(roomId) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $set: {\n            onHold: true\n          }\n        });\n      }\n      unsetOnHoldByRoomId(roomId) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $unset: {\n            onHold: 1\n          }\n        });\n      }\n      unsetOnHoldAndPredictedVisitorAbandonmentByRoomId(roomId) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $unset: {\n            'omnichannel.predictedVisitorAbandonmentAt': 1,\n            'onHold': 1\n          }\n        });\n      }\n      setSlaForRoomById(roomId, sla) {\n        const {\n          _id: slaId,\n          dueTimeInMinutes\n        } = sla;\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $set: {\n            slaId,\n            estimatedWaitingTimeQueue: dueTimeInMinutes\n          }\n        });\n      }\n      removeSlaFromRoomById(roomId) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $unset: {\n            slaId: 1\n          },\n          $set: {\n            estimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE\n          }\n        });\n      }\n      bulkRemoveSlaFromRoomsById(slaId) {\n        return this.updateMany({\n          open: true,\n          t: 'l',\n          slaId\n        }, {\n          $unset: {\n            slaId: 1\n          },\n          $set: {\n            estimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE\n          }\n        });\n      }\n      findOpenBySlaId(slaId, options, extraQuery) {\n        const query = _objectSpread({\n          t: 'l',\n          open: true,\n          slaId\n        }, extraQuery);\n        return this.find(query, options);\n      }\n      async setPriorityByRoomId(roomId, priority) {\n        const {\n          _id: priorityId,\n          sortItem: priorityWeight\n        } = priority;\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $set: {\n            priorityId,\n            priorityWeight\n          }\n        });\n      }\n      async unsetPriorityByRoomId(roomId) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $unset: {\n            priorityId: 1\n          },\n          $set: {\n            priorityWeight: LivechatPriorityWeight.NOT_SPECIFIED\n          }\n        });\n      }\n      getPredictedVisitorAbandonmentByRoomIdUpdateQuery(date) {\n        let roomUpdater = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getUpdater();\n        return roomUpdater.set('omnichannel.predictedVisitorAbandonmentAt', date);\n      }\n      setPredictedVisitorAbandonmentByRoomId(rid, willBeAbandonedAt) {\n        const query = {\n          _id: rid\n        };\n        const update = {\n          $set: {\n            'omnichannel.predictedVisitorAbandonmentAt': willBeAbandonedAt\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      findAbandonedOpenRooms(date, extraQuery) {\n        return this.find(_objectSpread({\n          'omnichannel.predictedVisitorAbandonmentAt': {\n            $lte: date\n          },\n          'waitingResponse': {\n            $exists: false\n          },\n          'closedAt': {\n            $exists: false\n          },\n          'open': true\n        }, extraQuery));\n      }\n      async unsetPredictedVisitorAbandonmentByRoomId(roomId) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $unset: {\n            'omnichannel.predictedVisitorAbandonmentAt': 1\n          }\n        });\n      }\n      async associateRoomsWithDepartmentToUnit(departments, unitId) {\n        const query = {\n          $and: [{\n            departmentId: {\n              $in: departments\n            }\n          }, {\n            $or: [{\n              departmentAncestors: {\n                $exists: false\n              }\n            }, {\n              $and: [{\n                departmentAncestors: {\n                  $exists: true\n                }\n              }, {\n                departmentAncestors: {\n                  $ne: unitId\n                }\n              }]\n            }]\n          }]\n        };\n        const update = {\n          $set: {\n            departmentAncestors: [unitId]\n          }\n        };\n        await this.updateMany(query, update);\n        const queryToDisassociateOldRoomsConnectedToUnit = {\n          departmentAncestors: unitId,\n          departmentId: {\n            $nin: departments\n          }\n        };\n        const updateToDisassociateRooms = {\n          $unset: {\n            departmentAncestors: 1\n          }\n        };\n        await this.updateMany(queryToDisassociateOldRoomsConnectedToUnit, updateToDisassociateRooms);\n      }\n      async removeUnitAssociationFromRooms(unitId) {\n        const query = {\n          departmentAncestors: unitId\n        };\n        const update = {\n          $unset: {\n            departmentAncestors: 1\n          }\n        };\n        await this.updateMany(query, update);\n      }\n      async updateDepartmentAncestorsById(rid, departmentAncestors) {\n        const query = {\n          _id: rid\n        };\n        const update = departmentAncestors ? {\n          $set: {\n            departmentAncestors\n          }\n        } : {\n          $unset: {\n            departmentAncestors: 1\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      getConversationsBySource(start, end, extraQuery) {\n        return this.col.aggregate([{\n          $match: _objectSpread({\n            source: {\n              $exists: true\n            },\n            t: 'l',\n            ts: {\n              $gte: start,\n              $lt: end\n            }\n          }, extraQuery)\n        }, {\n          $group: {\n            _id: {\n              type: '$source.type',\n              alias: '$source.alias'\n            },\n            value: {\n              $sum: 1\n            }\n          }\n        }, {\n          $sort: {\n            value: -1\n          }\n        }, {\n          $group: {\n            _id: null,\n            total: {\n              $sum: '$value'\n            },\n            data: {\n              $push: {\n                label: {\n                  $ifNull: ['$_id.alias', '$_id.type']\n                },\n                value: '$value'\n              }\n            }\n          }\n        }, {\n          $project: {\n            _id: 0\n          }\n        }], {\n          hint: 'source_1_ts_1',\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      getConversationsByStatus(start, end, extraQuery) {\n        return this.col.aggregate([{\n          $match: _objectSpread({\n            t: 'l',\n            ts: {\n              $gte: start,\n              $lt: end\n            }\n          }, extraQuery)\n        }, {\n          $group: {\n            _id: null,\n            total: {\n              $sum: 1\n            },\n            open: {\n              $sum: {\n                $cond: [{\n                  $and: [{\n                    $eq: ['$open', true]\n                  }, {\n                    $or: [{\n                      $not: ['$onHold']\n                    }, {\n                      $eq: ['$onHold', false]\n                    }]\n                  }, {\n                    $ifNull: ['$servedBy', false]\n                  }]\n                }, 1, 0]\n              }\n            },\n            closed: {\n              $sum: {\n                $cond: [{\n                  $ifNull: ['$metrics.chatDuration', false]\n                }, 1, 0]\n              }\n            },\n            queued: {\n              $sum: {\n                $cond: [{\n                  $and: [{\n                    $eq: ['$open', true]\n                  }, {\n                    $eq: [{\n                      $ifNull: ['$servedBy', null]\n                    }, null]\n                  }]\n                }, 1, 0]\n              }\n            },\n            onhold: {\n              $sum: {\n                $cond: [{\n                  $eq: ['$onHold', true]\n                }, 1, 0]\n              }\n            }\n          }\n        }, {\n          $project: {\n            total: 1,\n            data: [{\n              label: 'Open',\n              value: '$open'\n            }, {\n              label: 'Closed',\n              value: '$closed'\n            }, {\n              label: 'Queued',\n              value: '$queued'\n            }, {\n              label: 'On_Hold',\n              value: '$onhold'\n            }]\n          }\n        }, {\n          $unwind: '$data'\n        }, {\n          $sort: {\n            'data.value': -1\n          }\n        }, {\n          $group: {\n            _id: '$_id',\n            total: {\n              $first: '$total'\n            },\n            data: {\n              $push: '$data'\n            }\n          }\n        }, {\n          $project: {\n            _id: 0\n          }\n        }], {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      getConversationsByDepartment(start, end, sort, extraQuery) {\n        return this.col.aggregate([{\n          $match: _objectSpread({\n            t: 'l',\n            departmentId: {\n              $exists: true\n            },\n            ts: {\n              $lt: end,\n              $gte: start\n            }\n          }, extraQuery)\n        }, {\n          $group: {\n            _id: '$departmentId',\n            total: {\n              $sum: 1\n            }\n          }\n        }, {\n          $lookup: {\n            from: 'rocketchat_livechat_department',\n            localField: '_id',\n            foreignField: '_id',\n            as: 'department'\n          }\n        }, {\n          $group: {\n            _id: {\n              $arrayElemAt: ['$department.name', 0]\n            },\n            total: {\n              $sum: '$total'\n            }\n          }\n        }, {\n          $match: {\n            _id: {\n              $ne: null\n            }\n          }\n        }, {\n          $sort: sort || {\n            total: 1\n          }\n        }, {\n          $group: {\n            _id: null,\n            total: {\n              $sum: '$total'\n            },\n            data: {\n              $push: {\n                label: '$_id',\n                value: '$total'\n              }\n            }\n          }\n        }, {\n          $project: {\n            _id: 0\n          }\n        }], {\n          hint: 'departmentId_1_ts_1',\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      getTotalConversationsWithoutDepartmentBetweenDates(start, end, extraQuery) {\n        return this.col.countDocuments(_objectSpread({\n          t: 'l',\n          departmentId: {\n            $exists: false\n          },\n          ts: {\n            $gte: start,\n            $lt: end\n          }\n        }, extraQuery));\n      }\n      getConversationsByTags(start, end, sort, extraQuery) {\n        return this.col.aggregate([{\n          $match: _objectSpread({\n            t: 'l',\n            ts: {\n              $lt: end,\n              $gte: start\n            },\n            tags: {\n              $exists: true,\n              $ne: []\n            }\n          }, extraQuery)\n        }, {\n          $group: {\n            _id: '$tags',\n            total: {\n              $sum: 1\n            }\n          }\n        }, {\n          $unwind: '$_id'\n        }, {\n          $group: {\n            _id: '$_id',\n            total: {\n              $sum: '$total'\n            }\n          }\n        }, {\n          $sort: sort || {\n            total: 1\n          }\n        }, {\n          $group: {\n            _id: null,\n            total: {\n              $sum: '$total'\n            },\n            data: {\n              $push: {\n                label: '$_id',\n                value: '$total'\n              }\n            }\n          }\n        }, {\n          $project: {\n            _id: 0\n          }\n        }], {\n          hint: 'tags.0_1_ts_1',\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      getConversationsWithoutTagsBetweenDate(start, end, extraQuery) {\n        return this.col.countDocuments(_objectSpread({\n          t: 'l',\n          ts: {\n            $gte: start,\n            $lt: end\n          },\n          $or: [{\n            tags: {\n              $exists: false\n            }\n          }, {\n            tags: {\n              $eq: []\n            }\n          }]\n        }, extraQuery));\n      }\n      getConversationsByAgents(start, end, sort, extraQuery) {\n        return this.col.aggregate([{\n          $match: _objectSpread({\n            t: 'l',\n            ts: {\n              $gte: start,\n              $lt: end\n            },\n            servedBy: {\n              $exists: true\n            }\n          }, extraQuery)\n        }, {\n          $group: {\n            _id: '$servedBy._id',\n            total: {\n              $sum: 1\n            }\n          }\n        }, {\n          $lookup: {\n            from: 'users',\n            localField: '_id',\n            foreignField: '_id',\n            as: 'agent'\n          }\n        }, {\n          $set: {\n            agent: {\n              $first: '$agent'\n            }\n          }\n        }, {\n          $addFields: {\n            name: {\n              $ifNull: ['$agent.name', '$_id']\n            }\n          }\n        }, {\n          $sort: sort || {\n            name: 1\n          }\n        }, {\n          $group: {\n            _id: null,\n            total: {\n              $sum: '$total'\n            },\n            data: {\n              $push: {\n                label: '$name',\n                value: '$total'\n              }\n            }\n          }\n        }, {\n          $project: {\n            _id: 0\n          }\n        }], {\n          hint: 'servedBy_1_ts_1',\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      getTotalConversationsWithoutAgentsBetweenDate(start, end, extraQuery) {\n        return this.col.countDocuments(_objectSpread({\n          t: 'l',\n          ts: {\n            $gte: start,\n            $lt: end\n          },\n          servedBy: {\n            $exists: false\n          }\n        }, extraQuery));\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","LivechatRoomsRawEE","LivechatPriorityWeight","DEFAULT_SLA_CONFIG","readSecondaryPreferred","LivechatRoomsRaw","__reifyWaitForDeps__","constructor","db","trash","countPrioritizedRooms","col","countDocuments","priorityId","$exists","countRoomsWithSla","slaId","countRoomsWithPdfTranscriptRequested","pdfTranscriptRequested","countRoomsWithTranscriptSent","pdfTranscriptFileId","unsetAllPredictedVisitorAbandonment","updateMany","$unset","then","setOnHoldByRoomId","roomId","updateOne","_id","$set","onHold","unsetOnHoldByRoomId","unsetOnHoldAndPredictedVisitorAbandonmentByRoomId","setSlaForRoomById","sla","dueTimeInMinutes","estimatedWaitingTimeQueue","removeSlaFromRoomById","ESTIMATED_WAITING_TIME_QUEUE","bulkRemoveSlaFromRoomsById","open","t","findOpenBySlaId","options","extraQuery","query","find","setPriorityByRoomId","priority","sortItem","priorityWeight","unsetPriorityByRoomId","NOT_SPECIFIED","getPredictedVisitorAbandonmentByRoomIdUpdateQuery","date","roomUpdater","arguments","length","undefined","getUpdater","set","setPredictedVisitorAbandonmentByRoomId","rid","willBeAbandonedAt","update","findAbandonedOpenRooms","$lte","unsetPredictedVisitorAbandonmentByRoomId","associateRoomsWithDepartmentToUnit","departments","unitId","$and","departmentId","$in","$or","departmentAncestors","$ne","queryToDisassociateOldRoomsConnectedToUnit","$nin","updateToDisassociateRooms","removeUnitAssociationFromRooms","updateDepartmentAncestorsById","getConversationsBySource","start","end","aggregate","$match","source","ts","$gte","$lt","$group","type","alias","value","$sum","$sort","total","data","$push","label","$ifNull","$project","hint","readPreference","getConversationsByStatus","$cond","$eq","$not","closed","queued","onhold","$unwind","$first","getConversationsByDepartment","sort","$lookup","from","localField","foreignField","as","$arrayElemAt","getTotalConversationsWithoutDepartmentBetweenDates","getConversationsByTags","tags","getConversationsWithoutTagsBetweenDate","getConversationsByAgents","servedBy","agent","$addFields","name","getTotalConversationsWithoutAgentsBetweenDate","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/models/raw/LivechatRooms.ts"],"sourcesContent":["import type {\n\tILivechatPriority,\n\tIOmnichannelRoom,\n\tIOmnichannelServiceLevelAgreements,\n\tRocketChatRecordDeleted,\n\tReportResult,\n} from '@rocket.chat/core-typings';\nimport { LivechatPriorityWeight, DEFAULT_SLA_CONFIG } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport type { FindCursor, UpdateResult, Document, FindOptions, Db, Collection, Filter, AggregationCursor } from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../../../server/database/readSecondaryPreferred';\nimport { LivechatRoomsRaw } from '../../../../server/models/raw/LivechatRooms';\n\ndeclare module '@rocket.chat/model-typings' {\n\tinterface ILivechatRoomsModel {\n\t\tassociateRoomsWithDepartmentToUnit: (departments: string[], unit: string) => Promise<void>;\n\t\tremoveUnitAssociationFromRooms: (unit: string) => Promise<void>;\n\t\tupdateDepartmentAncestorsById: (rid: string, ancestors?: string[]) => Promise<UpdateResult>;\n\t\tunsetPredictedVisitorAbandonmentByRoomId(rid: string): Promise<UpdateResult>;\n\t\tfindAbandonedOpenRooms(date: Date, extraQuery?: Filter<IOmnichannelRoom>): FindCursor<IOmnichannelRoom>;\n\t\tsetPredictedVisitorAbandonmentByRoomId(roomId: string, date: Date): Promise<UpdateResult>;\n\t\tgetPredictedVisitorAbandonmentByRoomIdUpdateQuery(date: Date, roomUpdater: Updater<IOmnichannelRoom>): Updater<IOmnichannelRoom>;\n\t\tunsetAllPredictedVisitorAbandonment(): Promise<void>;\n\t\tsetOnHoldByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tunsetOnHoldByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tunsetOnHoldAndPredictedVisitorAbandonmentByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tsetSlaForRoomById(\n\t\t\troomId: string,\n\t\t\tsla: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>,\n\t\t): Promise<UpdateResult | Document>;\n\t\tremoveSlaFromRoomById(roomId: string): Promise<UpdateResult | Document>;\n\t\tbulkRemoveSlaFromRoomsById(slaId: string): Promise<UpdateResult | Document>;\n\t\tfindOpenBySlaId(\n\t\t\tslaId: string,\n\t\t\toptions: FindOptions<IOmnichannelRoom>,\n\t\t\textraQuery?: Filter<IOmnichannelRoom>,\n\t\t): FindCursor<IOmnichannelRoom>;\n\t\tsetPriorityByRoomId(roomId: string, priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<UpdateResult>;\n\t\tunsetPriorityByRoomId(roomId: string): Promise<UpdateResult>;\n\t\tcountPrioritizedRooms(): Promise<number>;\n\t\tcountRoomsWithSla(): Promise<number>;\n\t\tcountRoomsWithPdfTranscriptRequested(): Promise<number>;\n\t\tcountRoomsWithTranscriptSent(): Promise<number>;\n\t\tgetConversationsBySource(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult>;\n\t\tgetConversationsByStatus(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult>;\n\t\tgetConversationsByDepartment(\n\t\t\tstart: Date,\n\t\t\tend: Date,\n\t\t\tsort: Record<string, 1 | -1>,\n\t\t\textraQuery: Filter<IOmnichannelRoom>,\n\t\t): AggregationCursor<ReportResult>;\n\t\tgetConversationsByTags(\n\t\t\tstart: Date,\n\t\t\tend: Date,\n\t\t\tsort: Record<string, 1 | -1>,\n\t\t\textraQuery: Filter<IOmnichannelRoom>,\n\t\t): AggregationCursor<ReportResult>;\n\t\tgetConversationsByAgents(\n\t\t\tstart: Date,\n\t\t\tend: Date,\n\t\t\tsort: Record<string, 1 | -1>,\n\t\t\textraQuery: Filter<IOmnichannelRoom>,\n\t\t): AggregationCursor<ReportResult>;\n\t\tgetConversationsWithoutTagsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number>;\n\t\tgetTotalConversationsWithoutAgentsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number>;\n\t\tgetTotalConversationsWithoutDepartmentBetweenDates(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number>;\n\t}\n}\n\nexport class LivechatRoomsRawEE extends LivechatRoomsRaw implements ILivechatRoomsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IOmnichannelRoom>>) {\n\t\tsuper(db, trash);\n\t}\n\n\tcountPrioritizedRooms(): Promise<number> {\n\t\treturn this.col.countDocuments({ priorityId: { $exists: true } });\n\t}\n\n\tcountRoomsWithSla(): Promise<number> {\n\t\treturn this.col.countDocuments({ slaId: { $exists: true } });\n\t}\n\n\tcountRoomsWithPdfTranscriptRequested(): Promise<number> {\n\t\treturn this.col.countDocuments({ pdfTranscriptRequested: true });\n\t}\n\n\tcountRoomsWithTranscriptSent(): Promise<number> {\n\t\treturn this.col.countDocuments({ pdfTranscriptFileId: { $exists: true } });\n\t}\n\n\tasync unsetAllPredictedVisitorAbandonment(): Promise<void> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'open': true,\n\t\t\t\t't': 'l',\n\t\t\t\t'omnichannel.predictedVisitorAbandonmentAt': { $exists: true },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { 'omnichannel.predictedVisitorAbandonmentAt': 1 },\n\t\t\t},\n\t\t).then();\n\t}\n\n\tsetOnHoldByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { onHold: true } });\n\t}\n\n\tunsetOnHoldByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $unset: { onHold: 1 } });\n\t}\n\n\tunsetOnHoldAndPredictedVisitorAbandonmentByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t'omnichannel.predictedVisitorAbandonmentAt': 1,\n\t\t\t\t\t'onHold': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetSlaForRoomById(\n\t\troomId: string,\n\t\tsla: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>,\n\t): Promise<UpdateResult | Document> {\n\t\tconst { _id: slaId, dueTimeInMinutes } = sla;\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tslaId,\n\t\t\t\t\testimatedWaitingTimeQueue: dueTimeInMinutes,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveSlaFromRoomById(roomId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tslaId: 1,\n\t\t\t\t},\n\t\t\t\t$set: {\n\t\t\t\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tbulkRemoveSlaFromRoomsById(slaId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\topen: true,\n\t\t\t\tt: 'l',\n\t\t\t\tslaId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { slaId: 1 },\n\t\t\t\t$set: {\n\t\t\t\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindOpenBySlaId(\n\t\tslaId: string,\n\t\toptions: FindOptions<IOmnichannelRoom>,\n\t\textraQuery?: Filter<IOmnichannelRoom>,\n\t): FindCursor<IOmnichannelRoom> {\n\t\tconst query = {\n\t\t\tt: 'l' as const,\n\t\t\topen: true,\n\t\t\tslaId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync setPriorityByRoomId(roomId: string, priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<UpdateResult> {\n\t\tconst { _id: priorityId, sortItem: priorityWeight } = priority;\n\n\t\treturn this.updateOne({ _id: roomId }, { $set: { priorityId, priorityWeight } });\n\t}\n\n\tasync unsetPriorityByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id: roomId },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tpriorityId: 1,\n\t\t\t\t},\n\t\t\t\t$set: {\n\t\t\t\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tgetPredictedVisitorAbandonmentByRoomIdUpdateQuery(\n\t\tdate: Date,\n\t\troomUpdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t): Updater<IOmnichannelRoom> {\n\t\treturn roomUpdater.set('omnichannel.predictedVisitorAbandonmentAt', date);\n\t}\n\n\tsetPredictedVisitorAbandonmentByRoomId(rid: string, willBeAbandonedAt: Date): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: rid,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'omnichannel.predictedVisitorAbandonmentAt': willBeAbandonedAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindAbandonedOpenRooms(date: Date, extraQuery?: Filter<IOmnichannelRoom>): FindCursor<IOmnichannelRoom> {\n\t\treturn this.find({\n\t\t\t'omnichannel.predictedVisitorAbandonmentAt': { $lte: date },\n\t\t\t'waitingResponse': { $exists: false },\n\t\t\t'closedAt': { $exists: false },\n\t\t\t'open': true,\n\t\t\t...extraQuery,\n\t\t});\n\t}\n\n\tasync unsetPredictedVisitorAbandonmentByRoomId(roomId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { 'omnichannel.predictedVisitorAbandonmentAt': 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tasync associateRoomsWithDepartmentToUnit(departments: string[], unitId: string): Promise<void> {\n\t\tconst query = {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\tdepartmentId: { $in: departments },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdepartmentAncestors: { $exists: false },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdepartmentAncestors: { $exists: true },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdepartmentAncestors: { $ne: unitId },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t\tconst update = { $set: { departmentAncestors: [unitId] } };\n\t\tawait this.updateMany(query, update);\n\n\t\tconst queryToDisassociateOldRoomsConnectedToUnit = {\n\t\t\tdepartmentAncestors: unitId,\n\t\t\tdepartmentId: { $nin: departments },\n\t\t};\n\t\tconst updateToDisassociateRooms = { $unset: { departmentAncestors: 1 } };\n\t\tawait this.updateMany(queryToDisassociateOldRoomsConnectedToUnit, updateToDisassociateRooms);\n\t}\n\n\tasync removeUnitAssociationFromRooms(unitId: string): Promise<void> {\n\t\tconst query = {\n\t\t\tdepartmentAncestors: unitId,\n\t\t};\n\t\tconst update = { $unset: { departmentAncestors: 1 } };\n\t\tawait this.updateMany(query, update);\n\t}\n\n\tasync updateDepartmentAncestorsById(rid: string, departmentAncestors?: string[]) {\n\t\tconst query = {\n\t\t\t_id: rid,\n\t\t};\n\t\tconst update = departmentAncestors ? { $set: { departmentAncestors } } : { $unset: { departmentAncestors: 1 } };\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetConversationsBySource(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\ttype: '$source.type',\n\t\t\t\t\t\t\talias: '$source.alias',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalue: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: { value: -1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$value' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\t\t\t$ifNull: ['$_id.alias', '$_id.type'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvalue: '$value',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'source_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetConversationsByStatus(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\topen: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{ $eq: ['$open', true] },\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$or: [{ $not: ['$onHold'] }, { $eq: ['$onHold', false] }],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{ $ifNull: ['$servedBy', false] },\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclosed: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$ifNull: ['$metrics.chatDuration', false],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tqueued: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{ $eq: ['$open', true] },\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$eq: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$ifNull: ['$servedBy', null],\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonhold: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$cond: [{ $eq: ['$onHold', true] }, 1, 0],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t{ label: 'Open', value: '$open' },\n\t\t\t\t\t\t\t{ label: 'Closed', value: '$closed' },\n\t\t\t\t\t\t\t{ label: 'Queued', value: '$queued' },\n\t\t\t\t\t\t\t{ label: 'On_Hold', value: '$onhold' },\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$data',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: { 'data.value': -1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\ttotal: { $first: '$total' },\n\t\t\t\t\t\tdata: { $push: '$data' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetConversationsByDepartment(\n\t\tstart: Date,\n\t\tend: Date,\n\t\tsort: Record<string, 1 | -1>,\n\t\textraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tdepartmentId: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$departmentId',\n\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\t\tas: 'department',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t$arrayElemAt: ['$department.name', 0],\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotal: {\n\t\t\t\t\t\t\t$sum: '$total',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t$ne: null,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: sort || { total: 1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: '$_id',\n\t\t\t\t\t\t\t\tvalue: '$total',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'departmentId_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetTotalConversationsWithoutDepartmentBetweenDates(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\tt: 'l',\n\t\t\tdepartmentId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$gte: start,\n\t\t\t\t$lt: end,\n\t\t\t},\n\t\t\t...extraQuery,\n\t\t});\n\t}\n\n\tgetConversationsByTags(\n\t\tstart: Date,\n\t\tend: Date,\n\t\tsort: Record<string, 1 | -1>,\n\t\textraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttags: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: [],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$tags',\n\t\t\t\t\t\ttotal: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$_id',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: sort || { total: 1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: '$_id',\n\t\t\t\t\t\t\t\tvalue: '$total',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'tags.0_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetConversationsWithoutTagsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\tt: 'l',\n\t\t\tts: {\n\t\t\t\t$gte: start,\n\t\t\t\t$lt: end,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\ttags: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttags: {\n\t\t\t\t\t\t$eq: [],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t...extraQuery,\n\t\t});\n\t}\n\n\tgetConversationsByAgents(\n\t\tstart: Date,\n\t\tend: Date,\n\t\tsort: Record<string, 1 | -1>,\n\t\textraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\treturn this.col.aggregate(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tservedBy: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...extraQuery,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$servedBy._id',\n\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'users',\n\t\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\t\tas: 'agent',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$set: {\n\t\t\t\t\t\tagent: { $first: '$agent' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$addFields: {\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t$ifNull: ['$agent.name', '$_id'],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: sort || { name: 1 },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\ttotal: { $sum: '$total' },\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tlabel: '$name',\n\t\t\t\t\t\t\t\tvalue: '$total',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ hint: 'servedBy_1_ts_1', readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetTotalConversationsWithoutAgentsBetweenDate(start: Date, end: Date, extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\tt: 'l',\n\t\t\tts: {\n\t\t\t\t$gte: start,\n\t\t\t\t$lt: end,\n\t\t\t},\n\t\t\tservedBy: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t...extraQuery,\n\t\t});\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"306efada7568a5b2dc44503627ec70d374d94612"}
