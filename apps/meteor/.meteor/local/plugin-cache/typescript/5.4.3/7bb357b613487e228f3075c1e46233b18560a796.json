{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/voip/omnichannel.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/voip/omnichannel.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/voip/omnichannel.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/voip/omnichannel.ts","sourceRoot":"","sources":["app/api/server/v1/voip/omnichannel.ts"],"names":[],"mappings":"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","sourcesContent":["import { LivechatVoip } from '@rocket.chat/core-services';\nimport type { IUser, IVoipExtensionWithAgentInfo } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\n\nimport { logger } from './logger';\nimport { notifyOnUserChange } from '../../../../lib/server/lib/notifyListener';\nimport { API } from '../../api';\nimport { getPaginationItems } from '../../helpers/getPaginationItems';\n\nfunction filter(\n\tarray: IVoipExtensionWithAgentInfo[],\n\t{ queues, extension, agentId, status }: { queues?: string[]; extension?: string; agentId?: string; status?: string },\n): IVoipExtensionWithAgentInfo[] {\n\tconst defaultFunc = (): boolean => true;\n\treturn array.filter((item) => {\n\t\tconst queuesCond = queues && Array.isArray(queues) ? (): boolean => item.queues?.some((q) => queues.includes(q)) || false : defaultFunc;\n\t\tconst extensionCond = extension?.trim() ? (): boolean => item?.extension === extension : defaultFunc;\n\t\tconst agentIdCond = agentId?.trim() ? (): boolean => item?.userId === agentId : defaultFunc;\n\t\tconst statusCond = status?.trim() ? (): boolean => item?.state === status : defaultFunc;\n\n\t\treturn queuesCond() && extensionCond() && agentIdCond() && statusCond();\n\t});\n}\n\nfunction paginate<T>(array: T[], count = 10, offset = 0): T[] {\n\treturn array.slice(offset, offset + count);\n}\n\nconst isUserAndExtensionParams = (p: any): p is { userId: string; extension: string } => p.userId && p.extension;\nconst isUserIdndTypeParams = (p: any): p is { userId: string; type: 'free' | 'allocated' | 'available' } => p.userId && p.type;\n\nAPI.v1.addRoute(\n\t'omnichannel/agent/extension',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tusername: String,\n\t\t\t\t\t\textension: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tuserId: String,\n\t\t\t\t\t\textension: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst { extension } = this.bodyParams;\n\t\t\tlet user: IUser | null = null;\n\n\t\t\tif (!isUserAndExtensionParams(this.bodyParams)) {\n\t\t\t\tif (!this.bodyParams.username) {\n\t\t\t\t\treturn API.v1.notFound();\n\t\t\t\t}\n\t\t\t\tuser = await Users.findOneByAgentUsername(this.bodyParams.username, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (!this.bodyParams.userId) {\n\t\t\t\t\treturn API.v1.notFound();\n\t\t\t\t}\n\t\t\t\tuser = await Users.findOneAgentById(this.bodyParams.userId, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound('User not found or does not have livechat-agent role');\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait Users.setExtension(user._id, extension);\n\n\t\t\t\tvoid notifyOnUserChange({\n\t\t\t\t\tclientAction: 'updated',\n\t\t\t\t\tid: user._id,\n\t\t\t\t\tdiff: {\n\t\t\t\t\t\textension,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\treturn API.v1.success();\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error({ msg: 'Extension already in use' });\n\t\t\t\treturn API.v1.failure(`extension already in use ${extension}`);\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/agent/extension/:username',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: ['view-agent-extension-association'],\n\t\t\tDELETE: ['manage-agent-extension-association'],\n\t\t},\n\t},\n\t{\n\t\t// Get the extensions associated with the agent passed as request params.\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.urlParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { username } = this.urlParams;\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound('User not found');\n\t\t\t}\n\t\t\tconst extension = await Users.getVoipExtensionByUserId(user._id, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\textension: 1,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!extension) {\n\t\t\t\treturn API.v1.notFound('Extension not found');\n\t\t\t}\n\t\t\treturn API.v1.success({ extension });\n\t\t},\n\n\t\tasync delete() {\n\t\t\tcheck(\n\t\t\t\tthis.urlParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { username } = this.urlParams;\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\textension: 1,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound();\n\t\t\t}\n\t\t\tif (!user.extension) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tlogger.debug(`Removing extension association for user ${user._id} (extension was ${user.extension})`);\n\t\t\tawait Users.unsetExtension(user._id);\n\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tid: user._id,\n\t\t\t\tdiff: {\n\t\t\t\t\textension: null,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// Get free extensions\nAPI.v1.addRoute(\n\t'omnichannel/extension',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\ttype: Match.OneOf('free', 'allocated', 'available'),\n\t\t\t\t\t\tuserId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\ttype: Match.OneOf('free', 'allocated', 'available'),\n\t\t\t\t\t\tusername: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tswitch (this.queryParams.type.toLowerCase()) {\n\t\t\t\tcase 'free': {\n\t\t\t\t\tconst extensions = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tif (!extensions) {\n\t\t\t\t\t\treturn API.v1.failure('Error in finding free extensons');\n\t\t\t\t\t}\n\t\t\t\t\treturn API.v1.success({ extensions });\n\t\t\t\t}\n\t\t\t\tcase 'allocated': {\n\t\t\t\t\tconst extensions = await LivechatVoip.getExtensionAllocationDetails();\n\t\t\t\t\tif (!extensions) {\n\t\t\t\t\t\treturn API.v1.failure('Error in allocated extensions');\n\t\t\t\t\t}\n\t\t\t\t\treturn API.v1.success({ extensions: extensions.map((e) => e.extension) });\n\t\t\t\t}\n\t\t\t\tcase 'available': {\n\t\t\t\t\tlet user: IUser | null = null;\n\t\t\t\t\tif (!isUserIdndTypeParams(this.queryParams)) {\n\t\t\t\t\t\tuser = await Users.findOneByAgentUsername(this.queryParams.username, {\n\t\t\t\t\t\t\tprojection: { _id: 1, extension: 1 },\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuser = await Users.findOneAgentById(this.queryParams.userId, {\n\t\t\t\t\t\t\tprojection: { _id: 1, extension: 1 },\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst freeExt = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tconst extensions = user?.extension ? [user.extension, ...freeExt] : freeExt;\n\t\t\t\t\treturn API.v1.success({ extensions });\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\treturn API.v1.notFound(`${this.queryParams.type} not found `);\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/extensions',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { status, agentId, queues, extension } = this.queryParams;\n\n\t\t\tcheck(status, Match.Maybe(String));\n\t\t\tcheck(agentId, Match.Maybe(String));\n\t\t\tcheck(queues, Match.Maybe([String]));\n\t\t\tcheck(extension, Match.Maybe(String));\n\n\t\t\tconst extensions = await LivechatVoip.getExtensionListWithAgentData();\n\t\t\tconst filteredExts = filter(extensions, {\n\t\t\t\tstatus: status ?? undefined,\n\t\t\t\tagentId: agentId ?? undefined,\n\t\t\t\tqueues: queues ?? undefined,\n\t\t\t\textension: extension ?? undefined,\n\t\t\t});\n\n\t\t\t// paginating in memory as Asterisk doesn't provide pagination for commands\n\t\t\treturn API.v1.success({\n\t\t\t\textensions: paginate(filteredExts, count, offset),\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\ttotal: filteredExts.length,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/agents/available',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { text, includeExtension = '' } = this.queryParams;\n\n\t\t\tconst { agents, total } = await LivechatVoip.getAvailableAgents(includeExtension, text, count, offset, sort);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tagents,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/voip/omnichannel.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/voip/omnichannel.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/voip/omnichannel.ts","sourceRoot":"","sources":["app/api/server/v1/voip/omnichannel.ts"],"names":[],"mappings":"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","sourcesContent":["import { LivechatVoip } from '@rocket.chat/core-services';\nimport type { IUser, IVoipExtensionWithAgentInfo } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\n\nimport { logger } from './logger';\nimport { notifyOnUserChange } from '../../../../lib/server/lib/notifyListener';\nimport { API } from '../../api';\nimport { getPaginationItems } from '../../helpers/getPaginationItems';\n\nfunction filter(\n\tarray: IVoipExtensionWithAgentInfo[],\n\t{ queues, extension, agentId, status }: { queues?: string[]; extension?: string; agentId?: string; status?: string },\n): IVoipExtensionWithAgentInfo[] {\n\tconst defaultFunc = (): boolean => true;\n\treturn array.filter((item) => {\n\t\tconst queuesCond = queues && Array.isArray(queues) ? (): boolean => item.queues?.some((q) => queues.includes(q)) || false : defaultFunc;\n\t\tconst extensionCond = extension?.trim() ? (): boolean => item?.extension === extension : defaultFunc;\n\t\tconst agentIdCond = agentId?.trim() ? (): boolean => item?.userId === agentId : defaultFunc;\n\t\tconst statusCond = status?.trim() ? (): boolean => item?.state === status : defaultFunc;\n\n\t\treturn queuesCond() && extensionCond() && agentIdCond() && statusCond();\n\t});\n}\n\nfunction paginate<T>(array: T[], count = 10, offset = 0): T[] {\n\treturn array.slice(offset, offset + count);\n}\n\nconst isUserAndExtensionParams = (p: any): p is { userId: string; extension: string } => p.userId && p.extension;\nconst isUserIdndTypeParams = (p: any): p is { userId: string; type: 'free' | 'allocated' | 'available' } => p.userId && p.type;\n\nAPI.v1.addRoute(\n\t'omnichannel/agent/extension',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tusername: String,\n\t\t\t\t\t\textension: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tuserId: String,\n\t\t\t\t\t\textension: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst { extension } = this.bodyParams;\n\t\t\tlet user: IUser | null = null;\n\n\t\t\tif (!isUserAndExtensionParams(this.bodyParams)) {\n\t\t\t\tif (!this.bodyParams.username) {\n\t\t\t\t\treturn API.v1.notFound();\n\t\t\t\t}\n\t\t\t\tuser = await Users.findOneByAgentUsername(this.bodyParams.username, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (!this.bodyParams.userId) {\n\t\t\t\t\treturn API.v1.notFound();\n\t\t\t\t}\n\t\t\t\tuser = await Users.findOneAgentById(this.bodyParams.userId, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound('User not found or does not have livechat-agent role');\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait Users.setExtension(user._id, extension);\n\n\t\t\t\tvoid notifyOnUserChange({\n\t\t\t\t\tclientAction: 'updated',\n\t\t\t\t\tid: user._id,\n\t\t\t\t\tdiff: {\n\t\t\t\t\t\textension,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\treturn API.v1.success();\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error({ msg: 'Extension already in use' });\n\t\t\t\treturn API.v1.failure(`extension already in use ${extension}`);\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/agent/extension/:username',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: ['view-agent-extension-association'],\n\t\t\tDELETE: ['manage-agent-extension-association'],\n\t\t},\n\t},\n\t{\n\t\t// Get the extensions associated with the agent passed as request params.\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.urlParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { username } = this.urlParams;\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound('User not found');\n\t\t\t}\n\t\t\tconst extension = await Users.getVoipExtensionByUserId(user._id, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\textension: 1,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!extension) {\n\t\t\t\treturn API.v1.notFound('Extension not found');\n\t\t\t}\n\t\t\treturn API.v1.success({ extension });\n\t\t},\n\n\t\tasync delete() {\n\t\t\tcheck(\n\t\t\t\tthis.urlParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { username } = this.urlParams;\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\textension: 1,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound();\n\t\t\t}\n\t\t\tif (!user.extension) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tlogger.debug(`Removing extension association for user ${user._id} (extension was ${user.extension})`);\n\t\t\tawait Users.unsetExtension(user._id);\n\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tid: user._id,\n\t\t\t\tdiff: {\n\t\t\t\t\textension: null,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// Get free extensions\nAPI.v1.addRoute(\n\t'omnichannel/extension',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\ttype: Match.OneOf('free', 'allocated', 'available'),\n\t\t\t\t\t\tuserId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\ttype: Match.OneOf('free', 'allocated', 'available'),\n\t\t\t\t\t\tusername: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tswitch (this.queryParams.type.toLowerCase()) {\n\t\t\t\tcase 'free': {\n\t\t\t\t\tconst extensions = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tif (!extensions) {\n\t\t\t\t\t\treturn API.v1.failure('Error in finding free extensons');\n\t\t\t\t\t}\n\t\t\t\t\treturn API.v1.success({ extensions });\n\t\t\t\t}\n\t\t\t\tcase 'allocated': {\n\t\t\t\t\tconst extensions = await LivechatVoip.getExtensionAllocationDetails();\n\t\t\t\t\tif (!extensions) {\n\t\t\t\t\t\treturn API.v1.failure('Error in allocated extensions');\n\t\t\t\t\t}\n\t\t\t\t\treturn API.v1.success({ extensions: extensions.map((e) => e.extension) });\n\t\t\t\t}\n\t\t\t\tcase 'available': {\n\t\t\t\t\tlet user: IUser | null = null;\n\t\t\t\t\tif (!isUserIdndTypeParams(this.queryParams)) {\n\t\t\t\t\t\tuser = await Users.findOneByAgentUsername(this.queryParams.username, {\n\t\t\t\t\t\t\tprojection: { _id: 1, extension: 1 },\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuser = await Users.findOneAgentById(this.queryParams.userId, {\n\t\t\t\t\t\t\tprojection: { _id: 1, extension: 1 },\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst freeExt = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tconst extensions = user?.extension ? [user.extension, ...freeExt] : freeExt;\n\t\t\t\t\treturn API.v1.success({ extensions });\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\treturn API.v1.notFound(`${this.queryParams.type} not found `);\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/extensions',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { status, agentId, queues, extension } = this.queryParams;\n\n\t\t\tcheck(status, Match.Maybe(String));\n\t\t\tcheck(agentId, Match.Maybe(String));\n\t\t\tcheck(queues, Match.Maybe([String]));\n\t\t\tcheck(extension, Match.Maybe(String));\n\n\t\t\tconst extensions = await LivechatVoip.getExtensionListWithAgentData();\n\t\t\tconst filteredExts = filter(extensions, {\n\t\t\t\tstatus: status ?? undefined,\n\t\t\t\tagentId: agentId ?? undefined,\n\t\t\t\tqueues: queues ?? undefined,\n\t\t\t\textension: extension ?? undefined,\n\t\t\t});\n\n\t\t\t// paginating in memory as Asterisk doesn't provide pagination for commands\n\t\t\treturn API.v1.success({\n\t\t\t\textensions: paginate(filteredExts, count, offset),\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\ttotal: filteredExts.length,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/agents/available',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { text, includeExtension = '' } = this.queryParams;\n\n\t\t\tconst { agents, total } = await LivechatVoip.getAvailableAgents(includeExtension, text, count, offset, sort);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tagents,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let LivechatVoip;\n    module.link(\"@rocket.chat/core-services\", {\n      LivechatVoip(v) {\n        LivechatVoip = v;\n      }\n    }, 0);\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 2);\n    let logger;\n    module.link(\"./logger\", {\n      logger(v) {\n        logger = v;\n      }\n    }, 3);\n    let notifyOnUserChange;\n    module.link(\"../../../../lib/server/lib/notifyListener\", {\n      notifyOnUserChange(v) {\n        notifyOnUserChange = v;\n      }\n    }, 4);\n    let API;\n    module.link(\"../../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 5);\n    let getPaginationItems;\n    module.link(\"../../helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    function filter(array, _ref) {\n      let {\n        queues,\n        extension,\n        agentId,\n        status\n      } = _ref;\n      const defaultFunc = () => true;\n      return array.filter(item => {\n        const queuesCond = queues && Array.isArray(queues) ? () => {\n          var _item$queues;\n          return ((_item$queues = item.queues) === null || _item$queues === void 0 ? void 0 : _item$queues.some(q => queues.includes(q))) || false;\n        } : defaultFunc;\n        const extensionCond = extension !== null && extension !== void 0 && extension.trim() ? () => (item === null || item === void 0 ? void 0 : item.extension) === extension : defaultFunc;\n        const agentIdCond = agentId !== null && agentId !== void 0 && agentId.trim() ? () => (item === null || item === void 0 ? void 0 : item.userId) === agentId : defaultFunc;\n        const statusCond = status !== null && status !== void 0 && status.trim() ? () => (item === null || item === void 0 ? void 0 : item.state) === status : defaultFunc;\n        return queuesCond() && extensionCond() && agentIdCond() && statusCond();\n      });\n    }\n    function paginate(array) {\n      let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n      let offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return array.slice(offset, offset + count);\n    }\n    const isUserAndExtensionParams = p => p.userId && p.extension;\n    const isUserIdndTypeParams = p => p.userId && p.type;\n    API.v1.addRoute('omnichannel/agent/extension', {\n      authRequired: true,\n      permissionsRequired: ['manage-agent-extension-association']\n    }, {\n      async post() {\n        check(this.bodyParams, Match.OneOf(Match.ObjectIncluding({\n          username: String,\n          extension: String\n        }), Match.ObjectIncluding({\n          userId: String,\n          extension: String\n        })));\n        const {\n          extension\n        } = this.bodyParams;\n        let user = null;\n        if (!isUserAndExtensionParams(this.bodyParams)) {\n          if (!this.bodyParams.username) {\n            return API.v1.notFound();\n          }\n          user = await Users.findOneByAgentUsername(this.bodyParams.username, {\n            projection: {\n              _id: 1,\n              username: 1\n            }\n          });\n        } else {\n          if (!this.bodyParams.userId) {\n            return API.v1.notFound();\n          }\n          user = await Users.findOneAgentById(this.bodyParams.userId, {\n            projection: {\n              _id: 1,\n              username: 1\n            }\n          });\n        }\n        if (!user) {\n          return API.v1.notFound('User not found or does not have livechat-agent role');\n        }\n        try {\n          await Users.setExtension(user._id, extension);\n          void notifyOnUserChange({\n            clientAction: 'updated',\n            id: user._id,\n            diff: {\n              extension\n            }\n          });\n          return API.v1.success();\n        } catch (e) {\n          logger.error({\n            msg: 'Extension already in use'\n          });\n          return API.v1.failure(\"extension already in use \".concat(extension));\n        }\n      }\n    });\n    API.v1.addRoute('omnichannel/agent/extension/:username', {\n      authRequired: true,\n      permissionsRequired: {\n        GET: ['view-agent-extension-association'],\n        DELETE: ['manage-agent-extension-association']\n      }\n    }, {\n      // Get the extensions associated with the agent passed as request params.\n      async get() {\n        check(this.urlParams, Match.ObjectIncluding({\n          username: String\n        }));\n        const {\n          username\n        } = this.urlParams;\n        const user = await Users.findOneByAgentUsername(username, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!user) {\n          return API.v1.notFound('User not found');\n        }\n        const extension = await Users.getVoipExtensionByUserId(user._id, {\n          projection: {\n            _id: 1,\n            username: 1,\n            extension: 1\n          }\n        });\n        if (!extension) {\n          return API.v1.notFound('Extension not found');\n        }\n        return API.v1.success({\n          extension\n        });\n      },\n      async delete() {\n        check(this.urlParams, Match.ObjectIncluding({\n          username: String\n        }));\n        const {\n          username\n        } = this.urlParams;\n        const user = await Users.findOneByAgentUsername(username, {\n          projection: {\n            _id: 1,\n            username: 1,\n            extension: 1\n          }\n        });\n        if (!user) {\n          return API.v1.notFound();\n        }\n        if (!user.extension) {\n          return API.v1.success();\n        }\n        logger.debug(\"Removing extension association for user \".concat(user._id, \" (extension was \").concat(user.extension, \")\"));\n        await Users.unsetExtension(user._id);\n        void notifyOnUserChange({\n          clientAction: 'updated',\n          id: user._id,\n          diff: {\n            extension: null\n          }\n        });\n        return API.v1.success();\n      }\n    });\n    // Get free extensions\n    API.v1.addRoute('omnichannel/extension', {\n      authRequired: true,\n      permissionsRequired: ['manage-agent-extension-association']\n    }, {\n      async get() {\n        check(this.queryParams, Match.OneOf(Match.ObjectIncluding({\n          type: Match.OneOf('free', 'allocated', 'available'),\n          userId: String\n        }), Match.ObjectIncluding({\n          type: Match.OneOf('free', 'allocated', 'available'),\n          username: String\n        })));\n        switch (this.queryParams.type.toLowerCase()) {\n          case 'free':\n            {\n              const extensions = await LivechatVoip.getFreeExtensions();\n              if (!extensions) {\n                return API.v1.failure('Error in finding free extensons');\n              }\n              return API.v1.success({\n                extensions\n              });\n            }\n          case 'allocated':\n            {\n              const extensions = await LivechatVoip.getExtensionAllocationDetails();\n              if (!extensions) {\n                return API.v1.failure('Error in allocated extensions');\n              }\n              return API.v1.success({\n                extensions: extensions.map(e => e.extension)\n              });\n            }\n          case 'available':\n            {\n              var _user;\n              let user = null;\n              if (!isUserIdndTypeParams(this.queryParams)) {\n                user = await Users.findOneByAgentUsername(this.queryParams.username, {\n                  projection: {\n                    _id: 1,\n                    extension: 1\n                  }\n                });\n              } else {\n                user = await Users.findOneAgentById(this.queryParams.userId, {\n                  projection: {\n                    _id: 1,\n                    extension: 1\n                  }\n                });\n              }\n              const freeExt = await LivechatVoip.getFreeExtensions();\n              const extensions = (_user = user) !== null && _user !== void 0 && _user.extension ? [user.extension, ...freeExt] : freeExt;\n              return API.v1.success({\n                extensions\n              });\n            }\n          default:\n            return API.v1.notFound(\"\".concat(this.queryParams.type, \" not found \"));\n        }\n      }\n    });\n    API.v1.addRoute('omnichannel/extensions', {\n      authRequired: true,\n      permissionsRequired: ['manage-agent-extension-association']\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          status,\n          agentId,\n          queues,\n          extension\n        } = this.queryParams;\n        check(status, Match.Maybe(String));\n        check(agentId, Match.Maybe(String));\n        check(queues, Match.Maybe([String]));\n        check(extension, Match.Maybe(String));\n        const extensions = await LivechatVoip.getExtensionListWithAgentData();\n        const filteredExts = filter(extensions, {\n          status: status !== null && status !== void 0 ? status : undefined,\n          agentId: agentId !== null && agentId !== void 0 ? agentId : undefined,\n          queues: queues !== null && queues !== void 0 ? queues : undefined,\n          extension: extension !== null && extension !== void 0 ? extension : undefined\n        });\n        // paginating in memory as Asterisk doesn't provide pagination for commands\n        return API.v1.success({\n          extensions: paginate(filteredExts, count, offset),\n          offset,\n          count,\n          total: filteredExts.length\n        });\n      }\n    });\n    API.v1.addRoute('omnichannel/agents/available', {\n      authRequired: true,\n      permissionsRequired: ['manage-agent-extension-association']\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          text,\n          includeExtension = ''\n        } = this.queryParams;\n        const {\n          agents,\n          total\n        } = await LivechatVoip.getAvailableAgents(includeExtension, text, count, offset, sort);\n        return API.v1.success({\n          agents,\n          offset,\n          count,\n          total\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["LivechatVoip","module","link","v","Users","Match","check","logger","notifyOnUserChange","API","getPaginationItems","__reifyWaitForDeps__","filter","array","_ref","queues","extension","agentId","status","defaultFunc","item","queuesCond","Array","isArray","_item$queues","some","q","includes","extensionCond","trim","agentIdCond","userId","statusCond","state","paginate","count","arguments","length","undefined","offset","slice","isUserAndExtensionParams","p","isUserIdndTypeParams","type","v1","addRoute","authRequired","permissionsRequired","post","bodyParams","OneOf","ObjectIncluding","username","String","user","notFound","findOneByAgentUsername","projection","_id","findOneAgentById","setExtension","clientAction","id","diff","success","e","error","msg","failure","concat","GET","DELETE","get","urlParams","getVoipExtensionByUserId","delete","debug","unsetExtension","queryParams","toLowerCase","extensions","getFreeExtensions","getExtensionAllocationDetails","map","_user","freeExt","Maybe","getExtensionListWithAgentData","filteredExts","total","sort","parseJsonQuery","text","includeExtension","agents","getAvailableAgents","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/voip/omnichannel.ts"],"sourcesContent":["import { LivechatVoip } from '@rocket.chat/core-services';\nimport type { IUser, IVoipExtensionWithAgentInfo } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\n\nimport { logger } from './logger';\nimport { notifyOnUserChange } from '../../../../lib/server/lib/notifyListener';\nimport { API } from '../../api';\nimport { getPaginationItems } from '../../helpers/getPaginationItems';\n\nfunction filter(\n\tarray: IVoipExtensionWithAgentInfo[],\n\t{ queues, extension, agentId, status }: { queues?: string[]; extension?: string; agentId?: string; status?: string },\n): IVoipExtensionWithAgentInfo[] {\n\tconst defaultFunc = (): boolean => true;\n\treturn array.filter((item) => {\n\t\tconst queuesCond = queues && Array.isArray(queues) ? (): boolean => item.queues?.some((q) => queues.includes(q)) || false : defaultFunc;\n\t\tconst extensionCond = extension?.trim() ? (): boolean => item?.extension === extension : defaultFunc;\n\t\tconst agentIdCond = agentId?.trim() ? (): boolean => item?.userId === agentId : defaultFunc;\n\t\tconst statusCond = status?.trim() ? (): boolean => item?.state === status : defaultFunc;\n\n\t\treturn queuesCond() && extensionCond() && agentIdCond() && statusCond();\n\t});\n}\n\nfunction paginate<T>(array: T[], count = 10, offset = 0): T[] {\n\treturn array.slice(offset, offset + count);\n}\n\nconst isUserAndExtensionParams = (p: any): p is { userId: string; extension: string } => p.userId && p.extension;\nconst isUserIdndTypeParams = (p: any): p is { userId: string; type: 'free' | 'allocated' | 'available' } => p.userId && p.type;\n\nAPI.v1.addRoute(\n\t'omnichannel/agent/extension',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tusername: String,\n\t\t\t\t\t\textension: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tuserId: String,\n\t\t\t\t\t\textension: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst { extension } = this.bodyParams;\n\t\t\tlet user: IUser | null = null;\n\n\t\t\tif (!isUserAndExtensionParams(this.bodyParams)) {\n\t\t\t\tif (!this.bodyParams.username) {\n\t\t\t\t\treturn API.v1.notFound();\n\t\t\t\t}\n\t\t\t\tuser = await Users.findOneByAgentUsername(this.bodyParams.username, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (!this.bodyParams.userId) {\n\t\t\t\t\treturn API.v1.notFound();\n\t\t\t\t}\n\t\t\t\tuser = await Users.findOneAgentById(this.bodyParams.userId, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound('User not found or does not have livechat-agent role');\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait Users.setExtension(user._id, extension);\n\n\t\t\t\tvoid notifyOnUserChange({\n\t\t\t\t\tclientAction: 'updated',\n\t\t\t\t\tid: user._id,\n\t\t\t\t\tdiff: {\n\t\t\t\t\t\textension,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\treturn API.v1.success();\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error({ msg: 'Extension already in use' });\n\t\t\t\treturn API.v1.failure(`extension already in use ${extension}`);\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/agent/extension/:username',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: ['view-agent-extension-association'],\n\t\t\tDELETE: ['manage-agent-extension-association'],\n\t\t},\n\t},\n\t{\n\t\t// Get the extensions associated with the agent passed as request params.\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.urlParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { username } = this.urlParams;\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound('User not found');\n\t\t\t}\n\t\t\tconst extension = await Users.getVoipExtensionByUserId(user._id, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\textension: 1,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!extension) {\n\t\t\t\treturn API.v1.notFound('Extension not found');\n\t\t\t}\n\t\t\treturn API.v1.success({ extension });\n\t\t},\n\n\t\tasync delete() {\n\t\t\tcheck(\n\t\t\t\tthis.urlParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { username } = this.urlParams;\n\t\t\tconst user = await Users.findOneByAgentUsername(username, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\textension: 1,\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.notFound();\n\t\t\t}\n\t\t\tif (!user.extension) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tlogger.debug(`Removing extension association for user ${user._id} (extension was ${user.extension})`);\n\t\t\tawait Users.unsetExtension(user._id);\n\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tid: user._id,\n\t\t\t\tdiff: {\n\t\t\t\t\textension: null,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// Get free extensions\nAPI.v1.addRoute(\n\t'omnichannel/extension',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\ttype: Match.OneOf('free', 'allocated', 'available'),\n\t\t\t\t\t\tuserId: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\ttype: Match.OneOf('free', 'allocated', 'available'),\n\t\t\t\t\t\tusername: String,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tswitch (this.queryParams.type.toLowerCase()) {\n\t\t\t\tcase 'free': {\n\t\t\t\t\tconst extensions = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tif (!extensions) {\n\t\t\t\t\t\treturn API.v1.failure('Error in finding free extensons');\n\t\t\t\t\t}\n\t\t\t\t\treturn API.v1.success({ extensions });\n\t\t\t\t}\n\t\t\t\tcase 'allocated': {\n\t\t\t\t\tconst extensions = await LivechatVoip.getExtensionAllocationDetails();\n\t\t\t\t\tif (!extensions) {\n\t\t\t\t\t\treturn API.v1.failure('Error in allocated extensions');\n\t\t\t\t\t}\n\t\t\t\t\treturn API.v1.success({ extensions: extensions.map((e) => e.extension) });\n\t\t\t\t}\n\t\t\t\tcase 'available': {\n\t\t\t\t\tlet user: IUser | null = null;\n\t\t\t\t\tif (!isUserIdndTypeParams(this.queryParams)) {\n\t\t\t\t\t\tuser = await Users.findOneByAgentUsername(this.queryParams.username, {\n\t\t\t\t\t\t\tprojection: { _id: 1, extension: 1 },\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuser = await Users.findOneAgentById(this.queryParams.userId, {\n\t\t\t\t\t\t\tprojection: { _id: 1, extension: 1 },\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst freeExt = await LivechatVoip.getFreeExtensions();\n\t\t\t\t\tconst extensions = user?.extension ? [user.extension, ...freeExt] : freeExt;\n\t\t\t\t\treturn API.v1.success({ extensions });\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\treturn API.v1.notFound(`${this.queryParams.type} not found `);\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/extensions',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { status, agentId, queues, extension } = this.queryParams;\n\n\t\t\tcheck(status, Match.Maybe(String));\n\t\t\tcheck(agentId, Match.Maybe(String));\n\t\t\tcheck(queues, Match.Maybe([String]));\n\t\t\tcheck(extension, Match.Maybe(String));\n\n\t\t\tconst extensions = await LivechatVoip.getExtensionListWithAgentData();\n\t\t\tconst filteredExts = filter(extensions, {\n\t\t\t\tstatus: status ?? undefined,\n\t\t\t\tagentId: agentId ?? undefined,\n\t\t\t\tqueues: queues ?? undefined,\n\t\t\t\textension: extension ?? undefined,\n\t\t\t});\n\n\t\t\t// paginating in memory as Asterisk doesn't provide pagination for commands\n\t\t\treturn API.v1.success({\n\t\t\t\textensions: paginate(filteredExts, count, offset),\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\ttotal: filteredExts.length,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/agents/available',\n\t{ authRequired: true, permissionsRequired: ['manage-agent-extension-association'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { text, includeExtension = '' } = this.queryParams;\n\n\t\t\tconst { agents, total } = await LivechatVoip.getAvailableAgents(includeExtension, text, count, offset, sort);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tagents,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"7bb357b613487e228f3075c1e46233b18560a796"}
