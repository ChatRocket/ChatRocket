{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/authentication/server/lib/restrictLoginAttempts.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/authentication/server/lib/restrictLoginAttempts.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/authentication/server/lib/restrictLoginAttempts.ts","inputSourceMap":{"version":3,"file":"app/authentication/server/lib/restrictLoginAttempts.ts","sourceRoot":"","sources":["app/authentication/server/lib/restrictLoginAttempts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IServerEvent } from '@rocket.chat/core-typings';\nimport { ServerEventType } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Rooms, ServerEvents, Users } from '@rocket.chat/models';\n\nimport { addMinutesToADate } from '../../../../lib/utils/addMinutesToADate';\nimport { getClientAddress } from '../../../../server/lib/getClientAddress';\nimport { sendMessage } from '../../../lib/server/functions/sendMessage';\nimport { settings } from '../../../settings/server';\nimport type { ILoginAttempt } from '../ILoginAttempt';\n\nconst logger = new Logger('LoginProtection');\n\nconst notifyFailedLogin = async (ipOrUsername: string, blockedUntil: Date, failedAttempts: number): Promise<void> => {\n\tconst channelToNotify = settings.get<string>('Block_Multiple_Failed_Logins_Notify_Failed_Channel');\n\n\tif (!channelToNotify) {\n\t\tlogger.error('Cannot notify failed logins: channel provided is invalid');\n\t\treturn;\n\t}\n\t// verify channel exists\n\t// to avoid issues when \"fname\" is presented in the UI, check if the name matches it as well\n\tconst room = await Rooms.findOneByNameOrFname(channelToNotify);\n\tif (!room) {\n\t\tlogger.error(\"Cannot notify failed logins: channel provided doesn't exists\");\n\t\treturn;\n\t}\n\n\tconst rocketCat = await Users.findOneById('rocket.cat');\n\t// send message\n\tconst message = {\n\t\tattachments: [\n\t\t\t{\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Failed login attempt threshold exceeded',\n\t\t\t\t\t\tvalue: `User or IP: ${ipOrUsername}\\nBlocked until: ${blockedUntil}\\nFailed Attempts: ${failedAttempts}`,\n\t\t\t\t\t\tshort: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tcolor: 'red',\n\t\t\t},\n\t\t],\n\t};\n\n\tawait sendMessage(rocketCat, message, room, false);\n};\n\nexport const isValidLoginAttemptByIp = async (ip: string): Promise<boolean> => {\n\tconst whitelist = String(settings.get('Block_Multiple_Failed_Logins_Ip_Whitelist')).split(',');\n\n\tif (\n\t\t!settings.get('Block_Multiple_Failed_Logins_Enabled') ||\n\t\t!settings.get('Block_Multiple_Failed_Logins_By_Ip') ||\n\t\twhitelist.includes(ip)\n\t) {\n\t\treturn true;\n\t}\n\n\t// misconfigured\n\tconst attemptsUntilBlock = settings.get<number>('Block_Multiple_Failed_Logins_Attempts_Until_Block_By_Ip');\n\tif (!attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\t// if user never failed to login, then it's valid\n\tconst lastFailedAttemptAt = (await ServerEvents.findLastFailedAttemptByIp(ip))?.ts;\n\tif (!lastFailedAttemptAt) {\n\t\treturn true;\n\t}\n\n\tconst minutesUntilUnblock = settings.get<number>('Block_Multiple_Failed_Logins_Time_To_Unblock_By_Ip_In_Minutes');\n\n\tconst lockoutTimeStart = addMinutesToADate(new Date(), minutesUntilUnblock * -1);\n\tconst lastSuccessfulAttemptAt = (await ServerEvents.findLastSuccessfulAttemptByIp(ip))?.ts;\n\n\t// successful logins should reset the counter\n\tconst startTime = lastSuccessfulAttemptAt\n\t\t? new Date(Math.max(lockoutTimeStart.getTime(), lastSuccessfulAttemptAt.getTime()))\n\t\t: lockoutTimeStart;\n\n\tconst failedAttemptsSinceLastLogin = await ServerEvents.countFailedAttemptsByIpSince(ip, startTime);\n\n\t// if user didn't reach the threshold, then it's valid\n\tif (failedAttemptsSinceLastLogin < attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\tif (settings.get('Block_Multiple_Failed_Logins_Notify_Failed')) {\n\t\tconst willBeBlockedUntil = addMinutesToADate(new Date(lastFailedAttemptAt), minutesUntilUnblock);\n\n\t\tawait notifyFailedLogin(ip, willBeBlockedUntil, failedAttemptsSinceLastLogin);\n\t}\n\n\treturn false;\n};\n\nexport const isValidAttemptByUser = async (login: ILoginAttempt): Promise<boolean> => {\n\tif (!settings.get('Block_Multiple_Failed_Logins_Enabled') || !settings.get('Block_Multiple_Failed_Logins_By_User')) {\n\t\treturn true;\n\t}\n\n\tconst loginUsername = login.methodArguments[0].user?.username;\n\tif (!loginUsername) {\n\t\treturn true;\n\t}\n\n\t// misconfigured\n\tconst attemptsUntilBlock = settings.get<number>('Block_Multiple_Failed_Logins_Attempts_Until_Block_by_User');\n\tif (!attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\t// if user never failed to login, then it's valid\n\tconst lastFailedAttemptAt = (await ServerEvents.findLastFailedAttemptByUsername(loginUsername))?.ts;\n\tif (!lastFailedAttemptAt) {\n\t\treturn true;\n\t}\n\n\tconst minutesUntilUnblock = settings.get<number>('Block_Multiple_Failed_Logins_Time_To_Unblock_By_User_In_Minutes');\n\n\tconst lockoutTimeStart = addMinutesToADate(new Date(), minutesUntilUnblock * -1);\n\tconst lastSuccessfulAttemptAt = (await ServerEvents.findLastSuccessfulAttemptByUsername(loginUsername))?.ts;\n\n\t// succesful logins should reset the counter\n\tconst startTime = lastSuccessfulAttemptAt\n\t\t? new Date(Math.max(lockoutTimeStart.getTime(), lastSuccessfulAttemptAt.getTime()))\n\t\t: lockoutTimeStart;\n\n\t// get total failed attempts during the lockout time\n\tconst failedAttemptsSinceLastLogin = await ServerEvents.countFailedAttemptsByUsernameSince(loginUsername, startTime);\n\n\t// if user didn't reach the threshold, then it's valid\n\tif (failedAttemptsSinceLastLogin < attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\tif (settings.get('Block_Multiple_Failed_Logins_Notify_Failed')) {\n\t\tconst willBeBlockedUntil = addMinutesToADate(new Date(lastFailedAttemptAt), minutesUntilUnblock);\n\n\t\tawait notifyFailedLogin(loginUsername, willBeBlockedUntil, failedAttemptsSinceLastLogin);\n\t}\n\n\treturn false;\n};\n\nexport const saveFailedLoginAttempts = async (login: ILoginAttempt): Promise<void> => {\n\tconst user: IServerEvent['u'] = {\n\t\t_id: login.user?._id,\n\t\tusername: login.user?.username || login.methodArguments[0].user?.username,\n\t};\n\n\tawait ServerEvents.insertOne({\n\t\tip: getClientAddress(login.connection),\n\t\tt: ServerEventType.FAILED_LOGIN_ATTEMPT,\n\t\tts: new Date(),\n\t\tu: user,\n\t});\n};\n\nexport const saveSuccessfulLogin = async (login: ILoginAttempt): Promise<void> => {\n\tconst user: IServerEvent['u'] = {\n\t\t_id: login.user?._id,\n\t\tusername: login.user?.username || login.methodArguments[0].user?.username,\n\t};\n\n\tawait ServerEvents.insertOne({\n\t\tip: getClientAddress(login.connection),\n\t\tt: ServerEventType.LOGIN,\n\t\tts: new Date(),\n\t\tu: user,\n\t});\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/authentication/server/lib/restrictLoginAttempts.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/authentication/server/lib/restrictLoginAttempts.ts","inputSourceMap":{"version":3,"file":"app/authentication/server/lib/restrictLoginAttempts.ts","sourceRoot":"","sources":["app/authentication/server/lib/restrictLoginAttempts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IServerEvent } from '@rocket.chat/core-typings';\nimport { ServerEventType } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Rooms, ServerEvents, Users } from '@rocket.chat/models';\n\nimport { addMinutesToADate } from '../../../../lib/utils/addMinutesToADate';\nimport { getClientAddress } from '../../../../server/lib/getClientAddress';\nimport { sendMessage } from '../../../lib/server/functions/sendMessage';\nimport { settings } from '../../../settings/server';\nimport type { ILoginAttempt } from '../ILoginAttempt';\n\nconst logger = new Logger('LoginProtection');\n\nconst notifyFailedLogin = async (ipOrUsername: string, blockedUntil: Date, failedAttempts: number): Promise<void> => {\n\tconst channelToNotify = settings.get<string>('Block_Multiple_Failed_Logins_Notify_Failed_Channel');\n\n\tif (!channelToNotify) {\n\t\tlogger.error('Cannot notify failed logins: channel provided is invalid');\n\t\treturn;\n\t}\n\t// verify channel exists\n\t// to avoid issues when \"fname\" is presented in the UI, check if the name matches it as well\n\tconst room = await Rooms.findOneByNameOrFname(channelToNotify);\n\tif (!room) {\n\t\tlogger.error(\"Cannot notify failed logins: channel provided doesn't exists\");\n\t\treturn;\n\t}\n\n\tconst rocketCat = await Users.findOneById('rocket.cat');\n\t// send message\n\tconst message = {\n\t\tattachments: [\n\t\t\t{\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Failed login attempt threshold exceeded',\n\t\t\t\t\t\tvalue: `User or IP: ${ipOrUsername}\\nBlocked until: ${blockedUntil}\\nFailed Attempts: ${failedAttempts}`,\n\t\t\t\t\t\tshort: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tcolor: 'red',\n\t\t\t},\n\t\t],\n\t};\n\n\tawait sendMessage(rocketCat, message, room, false);\n};\n\nexport const isValidLoginAttemptByIp = async (ip: string): Promise<boolean> => {\n\tconst whitelist = String(settings.get('Block_Multiple_Failed_Logins_Ip_Whitelist')).split(',');\n\n\tif (\n\t\t!settings.get('Block_Multiple_Failed_Logins_Enabled') ||\n\t\t!settings.get('Block_Multiple_Failed_Logins_By_Ip') ||\n\t\twhitelist.includes(ip)\n\t) {\n\t\treturn true;\n\t}\n\n\t// misconfigured\n\tconst attemptsUntilBlock = settings.get<number>('Block_Multiple_Failed_Logins_Attempts_Until_Block_By_Ip');\n\tif (!attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\t// if user never failed to login, then it's valid\n\tconst lastFailedAttemptAt = (await ServerEvents.findLastFailedAttemptByIp(ip))?.ts;\n\tif (!lastFailedAttemptAt) {\n\t\treturn true;\n\t}\n\n\tconst minutesUntilUnblock = settings.get<number>('Block_Multiple_Failed_Logins_Time_To_Unblock_By_Ip_In_Minutes');\n\n\tconst lockoutTimeStart = addMinutesToADate(new Date(), minutesUntilUnblock * -1);\n\tconst lastSuccessfulAttemptAt = (await ServerEvents.findLastSuccessfulAttemptByIp(ip))?.ts;\n\n\t// successful logins should reset the counter\n\tconst startTime = lastSuccessfulAttemptAt\n\t\t? new Date(Math.max(lockoutTimeStart.getTime(), lastSuccessfulAttemptAt.getTime()))\n\t\t: lockoutTimeStart;\n\n\tconst failedAttemptsSinceLastLogin = await ServerEvents.countFailedAttemptsByIpSince(ip, startTime);\n\n\t// if user didn't reach the threshold, then it's valid\n\tif (failedAttemptsSinceLastLogin < attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\tif (settings.get('Block_Multiple_Failed_Logins_Notify_Failed')) {\n\t\tconst willBeBlockedUntil = addMinutesToADate(new Date(lastFailedAttemptAt), minutesUntilUnblock);\n\n\t\tawait notifyFailedLogin(ip, willBeBlockedUntil, failedAttemptsSinceLastLogin);\n\t}\n\n\treturn false;\n};\n\nexport const isValidAttemptByUser = async (login: ILoginAttempt): Promise<boolean> => {\n\tif (!settings.get('Block_Multiple_Failed_Logins_Enabled') || !settings.get('Block_Multiple_Failed_Logins_By_User')) {\n\t\treturn true;\n\t}\n\n\tconst loginUsername = login.methodArguments[0].user?.username;\n\tif (!loginUsername) {\n\t\treturn true;\n\t}\n\n\t// misconfigured\n\tconst attemptsUntilBlock = settings.get<number>('Block_Multiple_Failed_Logins_Attempts_Until_Block_by_User');\n\tif (!attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\t// if user never failed to login, then it's valid\n\tconst lastFailedAttemptAt = (await ServerEvents.findLastFailedAttemptByUsername(loginUsername))?.ts;\n\tif (!lastFailedAttemptAt) {\n\t\treturn true;\n\t}\n\n\tconst minutesUntilUnblock = settings.get<number>('Block_Multiple_Failed_Logins_Time_To_Unblock_By_User_In_Minutes');\n\n\tconst lockoutTimeStart = addMinutesToADate(new Date(), minutesUntilUnblock * -1);\n\tconst lastSuccessfulAttemptAt = (await ServerEvents.findLastSuccessfulAttemptByUsername(loginUsername))?.ts;\n\n\t// succesful logins should reset the counter\n\tconst startTime = lastSuccessfulAttemptAt\n\t\t? new Date(Math.max(lockoutTimeStart.getTime(), lastSuccessfulAttemptAt.getTime()))\n\t\t: lockoutTimeStart;\n\n\t// get total failed attempts during the lockout time\n\tconst failedAttemptsSinceLastLogin = await ServerEvents.countFailedAttemptsByUsernameSince(loginUsername, startTime);\n\n\t// if user didn't reach the threshold, then it's valid\n\tif (failedAttemptsSinceLastLogin < attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\tif (settings.get('Block_Multiple_Failed_Logins_Notify_Failed')) {\n\t\tconst willBeBlockedUntil = addMinutesToADate(new Date(lastFailedAttemptAt), minutesUntilUnblock);\n\n\t\tawait notifyFailedLogin(loginUsername, willBeBlockedUntil, failedAttemptsSinceLastLogin);\n\t}\n\n\treturn false;\n};\n\nexport const saveFailedLoginAttempts = async (login: ILoginAttempt): Promise<void> => {\n\tconst user: IServerEvent['u'] = {\n\t\t_id: login.user?._id,\n\t\tusername: login.user?.username || login.methodArguments[0].user?.username,\n\t};\n\n\tawait ServerEvents.insertOne({\n\t\tip: getClientAddress(login.connection),\n\t\tt: ServerEventType.FAILED_LOGIN_ATTEMPT,\n\t\tts: new Date(),\n\t\tu: user,\n\t});\n};\n\nexport const saveSuccessfulLogin = async (login: ILoginAttempt): Promise<void> => {\n\tconst user: IServerEvent['u'] = {\n\t\t_id: login.user?._id,\n\t\tusername: login.user?.username || login.methodArguments[0].user?.username,\n\t};\n\n\tawait ServerEvents.insertOne({\n\t\tip: getClientAddress(login.connection),\n\t\tt: ServerEventType.LOGIN,\n\t\tts: new Date(),\n\t\tu: user,\n\t});\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      isValidLoginAttemptByIp: () => isValidLoginAttemptByIp,\n      isValidAttemptByUser: () => isValidAttemptByUser,\n      saveFailedLoginAttempts: () => saveFailedLoginAttempts,\n      saveSuccessfulLogin: () => saveSuccessfulLogin\n    });\n    let ServerEventType;\n    module.link(\"@rocket.chat/core-typings\", {\n      ServerEventType(v) {\n        ServerEventType = v;\n      }\n    }, 0);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 1);\n    let Rooms, ServerEvents, Users;\n    module.link(\"@rocket.chat/models\", {\n      Rooms(v) {\n        Rooms = v;\n      },\n      ServerEvents(v) {\n        ServerEvents = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 2);\n    let addMinutesToADate;\n    module.link(\"../../../../lib/utils/addMinutesToADate\", {\n      addMinutesToADate(v) {\n        addMinutesToADate = v;\n      }\n    }, 3);\n    let getClientAddress;\n    module.link(\"../../../../server/lib/getClientAddress\", {\n      getClientAddress(v) {\n        getClientAddress = v;\n      }\n    }, 4);\n    let sendMessage;\n    module.link(\"../../../lib/server/functions/sendMessage\", {\n      sendMessage(v) {\n        sendMessage = v;\n      }\n    }, 5);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const logger = new Logger('LoginProtection');\n    const notifyFailedLogin = async (ipOrUsername, blockedUntil, failedAttempts) => {\n      const channelToNotify = settings.get('Block_Multiple_Failed_Logins_Notify_Failed_Channel');\n      if (!channelToNotify) {\n        logger.error('Cannot notify failed logins: channel provided is invalid');\n        return;\n      }\n      // verify channel exists\n      // to avoid issues when \"fname\" is presented in the UI, check if the name matches it as well\n      const room = await Rooms.findOneByNameOrFname(channelToNotify);\n      if (!room) {\n        logger.error(\"Cannot notify failed logins: channel provided doesn't exists\");\n        return;\n      }\n      const rocketCat = await Users.findOneById('rocket.cat');\n      // send message\n      const message = {\n        attachments: [{\n          fields: [{\n            title: 'Failed login attempt threshold exceeded',\n            value: \"User or IP: \".concat(ipOrUsername, \"\\nBlocked until: \").concat(blockedUntil, \"\\nFailed Attempts: \").concat(failedAttempts),\n            short: true\n          }],\n          color: 'red'\n        }]\n      };\n      await sendMessage(rocketCat, message, room, false);\n    };\n    const isValidLoginAttemptByIp = async ip => {\n      var _await$ServerEvents$f, _await$ServerEvents$f2;\n      const whitelist = String(settings.get('Block_Multiple_Failed_Logins_Ip_Whitelist')).split(',');\n      if (!settings.get('Block_Multiple_Failed_Logins_Enabled') || !settings.get('Block_Multiple_Failed_Logins_By_Ip') || whitelist.includes(ip)) {\n        return true;\n      }\n      // misconfigured\n      const attemptsUntilBlock = settings.get('Block_Multiple_Failed_Logins_Attempts_Until_Block_By_Ip');\n      if (!attemptsUntilBlock) {\n        return true;\n      }\n      // if user never failed to login, then it's valid\n      const lastFailedAttemptAt = (_await$ServerEvents$f = await ServerEvents.findLastFailedAttemptByIp(ip)) === null || _await$ServerEvents$f === void 0 ? void 0 : _await$ServerEvents$f.ts;\n      if (!lastFailedAttemptAt) {\n        return true;\n      }\n      const minutesUntilUnblock = settings.get('Block_Multiple_Failed_Logins_Time_To_Unblock_By_Ip_In_Minutes');\n      const lockoutTimeStart = addMinutesToADate(new Date(), minutesUntilUnblock * -1);\n      const lastSuccessfulAttemptAt = (_await$ServerEvents$f2 = await ServerEvents.findLastSuccessfulAttemptByIp(ip)) === null || _await$ServerEvents$f2 === void 0 ? void 0 : _await$ServerEvents$f2.ts;\n      // successful logins should reset the counter\n      const startTime = lastSuccessfulAttemptAt ? new Date(Math.max(lockoutTimeStart.getTime(), lastSuccessfulAttemptAt.getTime())) : lockoutTimeStart;\n      const failedAttemptsSinceLastLogin = await ServerEvents.countFailedAttemptsByIpSince(ip, startTime);\n      // if user didn't reach the threshold, then it's valid\n      if (failedAttemptsSinceLastLogin < attemptsUntilBlock) {\n        return true;\n      }\n      if (settings.get('Block_Multiple_Failed_Logins_Notify_Failed')) {\n        const willBeBlockedUntil = addMinutesToADate(new Date(lastFailedAttemptAt), minutesUntilUnblock);\n        await notifyFailedLogin(ip, willBeBlockedUntil, failedAttemptsSinceLastLogin);\n      }\n      return false;\n    };\n    const isValidAttemptByUser = async login => {\n      var _login$methodArgument, _await$ServerEvents$f3, _await$ServerEvents$f4;\n      if (!settings.get('Block_Multiple_Failed_Logins_Enabled') || !settings.get('Block_Multiple_Failed_Logins_By_User')) {\n        return true;\n      }\n      const loginUsername = (_login$methodArgument = login.methodArguments[0].user) === null || _login$methodArgument === void 0 ? void 0 : _login$methodArgument.username;\n      if (!loginUsername) {\n        return true;\n      }\n      // misconfigured\n      const attemptsUntilBlock = settings.get('Block_Multiple_Failed_Logins_Attempts_Until_Block_by_User');\n      if (!attemptsUntilBlock) {\n        return true;\n      }\n      // if user never failed to login, then it's valid\n      const lastFailedAttemptAt = (_await$ServerEvents$f3 = await ServerEvents.findLastFailedAttemptByUsername(loginUsername)) === null || _await$ServerEvents$f3 === void 0 ? void 0 : _await$ServerEvents$f3.ts;\n      if (!lastFailedAttemptAt) {\n        return true;\n      }\n      const minutesUntilUnblock = settings.get('Block_Multiple_Failed_Logins_Time_To_Unblock_By_User_In_Minutes');\n      const lockoutTimeStart = addMinutesToADate(new Date(), minutesUntilUnblock * -1);\n      const lastSuccessfulAttemptAt = (_await$ServerEvents$f4 = await ServerEvents.findLastSuccessfulAttemptByUsername(loginUsername)) === null || _await$ServerEvents$f4 === void 0 ? void 0 : _await$ServerEvents$f4.ts;\n      // succesful logins should reset the counter\n      const startTime = lastSuccessfulAttemptAt ? new Date(Math.max(lockoutTimeStart.getTime(), lastSuccessfulAttemptAt.getTime())) : lockoutTimeStart;\n      // get total failed attempts during the lockout time\n      const failedAttemptsSinceLastLogin = await ServerEvents.countFailedAttemptsByUsernameSince(loginUsername, startTime);\n      // if user didn't reach the threshold, then it's valid\n      if (failedAttemptsSinceLastLogin < attemptsUntilBlock) {\n        return true;\n      }\n      if (settings.get('Block_Multiple_Failed_Logins_Notify_Failed')) {\n        const willBeBlockedUntil = addMinutesToADate(new Date(lastFailedAttemptAt), minutesUntilUnblock);\n        await notifyFailedLogin(loginUsername, willBeBlockedUntil, failedAttemptsSinceLastLogin);\n      }\n      return false;\n    };\n    const saveFailedLoginAttempts = async login => {\n      var _login$user, _login$user2, _login$methodArgument2;\n      const user = {\n        _id: (_login$user = login.user) === null || _login$user === void 0 ? void 0 : _login$user._id,\n        username: ((_login$user2 = login.user) === null || _login$user2 === void 0 ? void 0 : _login$user2.username) || ((_login$methodArgument2 = login.methodArguments[0].user) === null || _login$methodArgument2 === void 0 ? void 0 : _login$methodArgument2.username)\n      };\n      await ServerEvents.insertOne({\n        ip: getClientAddress(login.connection),\n        t: ServerEventType.FAILED_LOGIN_ATTEMPT,\n        ts: new Date(),\n        u: user\n      });\n    };\n    const saveSuccessfulLogin = async login => {\n      var _login$user3, _login$user4, _login$methodArgument3;\n      const user = {\n        _id: (_login$user3 = login.user) === null || _login$user3 === void 0 ? void 0 : _login$user3._id,\n        username: ((_login$user4 = login.user) === null || _login$user4 === void 0 ? void 0 : _login$user4.username) || ((_login$methodArgument3 = login.methodArguments[0].user) === null || _login$methodArgument3 === void 0 ? void 0 : _login$methodArgument3.username)\n      };\n      await ServerEvents.insertOne({\n        ip: getClientAddress(login.connection),\n        t: ServerEventType.LOGIN,\n        ts: new Date(),\n        u: user\n      });\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","isValidLoginAttemptByIp","isValidAttemptByUser","saveFailedLoginAttempts","saveSuccessfulLogin","ServerEventType","link","v","Logger","Rooms","ServerEvents","Users","addMinutesToADate","getClientAddress","sendMessage","settings","__reifyWaitForDeps__","logger","notifyFailedLogin","ipOrUsername","blockedUntil","failedAttempts","channelToNotify","get","error","room","findOneByNameOrFname","rocketCat","findOneById","message","attachments","fields","title","value","concat","short","color","ip","_await$ServerEvents$f","_await$ServerEvents$f2","whitelist","String","split","includes","attemptsUntilBlock","lastFailedAttemptAt","findLastFailedAttemptByIp","ts","minutesUntilUnblock","lockoutTimeStart","Date","lastSuccessfulAttemptAt","findLastSuccessfulAttemptByIp","startTime","Math","max","getTime","failedAttemptsSinceLastLogin","countFailedAttemptsByIpSince","willBeBlockedUntil","login","_login$methodArgument","_await$ServerEvents$f3","_await$ServerEvents$f4","loginUsername","methodArguments","user","username","findLastFailedAttemptByUsername","findLastSuccessfulAttemptByUsername","countFailedAttemptsByUsernameSince","_login$user","_login$user2","_login$methodArgument2","_id","insertOne","connection","t","FAILED_LOGIN_ATTEMPT","u","_login$user3","_login$user4","_login$methodArgument3","LOGIN","__reify_async_result__","_reifyError","self","async"],"sources":["app/authentication/server/lib/restrictLoginAttempts.ts"],"sourcesContent":["import type { IServerEvent } from '@rocket.chat/core-typings';\nimport { ServerEventType } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Rooms, ServerEvents, Users } from '@rocket.chat/models';\n\nimport { addMinutesToADate } from '../../../../lib/utils/addMinutesToADate';\nimport { getClientAddress } from '../../../../server/lib/getClientAddress';\nimport { sendMessage } from '../../../lib/server/functions/sendMessage';\nimport { settings } from '../../../settings/server';\nimport type { ILoginAttempt } from '../ILoginAttempt';\n\nconst logger = new Logger('LoginProtection');\n\nconst notifyFailedLogin = async (ipOrUsername: string, blockedUntil: Date, failedAttempts: number): Promise<void> => {\n\tconst channelToNotify = settings.get<string>('Block_Multiple_Failed_Logins_Notify_Failed_Channel');\n\n\tif (!channelToNotify) {\n\t\tlogger.error('Cannot notify failed logins: channel provided is invalid');\n\t\treturn;\n\t}\n\t// verify channel exists\n\t// to avoid issues when \"fname\" is presented in the UI, check if the name matches it as well\n\tconst room = await Rooms.findOneByNameOrFname(channelToNotify);\n\tif (!room) {\n\t\tlogger.error(\"Cannot notify failed logins: channel provided doesn't exists\");\n\t\treturn;\n\t}\n\n\tconst rocketCat = await Users.findOneById('rocket.cat');\n\t// send message\n\tconst message = {\n\t\tattachments: [\n\t\t\t{\n\t\t\t\tfields: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Failed login attempt threshold exceeded',\n\t\t\t\t\t\tvalue: `User or IP: ${ipOrUsername}\\nBlocked until: ${blockedUntil}\\nFailed Attempts: ${failedAttempts}`,\n\t\t\t\t\t\tshort: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tcolor: 'red',\n\t\t\t},\n\t\t],\n\t};\n\n\tawait sendMessage(rocketCat, message, room, false);\n};\n\nexport const isValidLoginAttemptByIp = async (ip: string): Promise<boolean> => {\n\tconst whitelist = String(settings.get('Block_Multiple_Failed_Logins_Ip_Whitelist')).split(',');\n\n\tif (\n\t\t!settings.get('Block_Multiple_Failed_Logins_Enabled') ||\n\t\t!settings.get('Block_Multiple_Failed_Logins_By_Ip') ||\n\t\twhitelist.includes(ip)\n\t) {\n\t\treturn true;\n\t}\n\n\t// misconfigured\n\tconst attemptsUntilBlock = settings.get<number>('Block_Multiple_Failed_Logins_Attempts_Until_Block_By_Ip');\n\tif (!attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\t// if user never failed to login, then it's valid\n\tconst lastFailedAttemptAt = (await ServerEvents.findLastFailedAttemptByIp(ip))?.ts;\n\tif (!lastFailedAttemptAt) {\n\t\treturn true;\n\t}\n\n\tconst minutesUntilUnblock = settings.get<number>('Block_Multiple_Failed_Logins_Time_To_Unblock_By_Ip_In_Minutes');\n\n\tconst lockoutTimeStart = addMinutesToADate(new Date(), minutesUntilUnblock * -1);\n\tconst lastSuccessfulAttemptAt = (await ServerEvents.findLastSuccessfulAttemptByIp(ip))?.ts;\n\n\t// successful logins should reset the counter\n\tconst startTime = lastSuccessfulAttemptAt\n\t\t? new Date(Math.max(lockoutTimeStart.getTime(), lastSuccessfulAttemptAt.getTime()))\n\t\t: lockoutTimeStart;\n\n\tconst failedAttemptsSinceLastLogin = await ServerEvents.countFailedAttemptsByIpSince(ip, startTime);\n\n\t// if user didn't reach the threshold, then it's valid\n\tif (failedAttemptsSinceLastLogin < attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\tif (settings.get('Block_Multiple_Failed_Logins_Notify_Failed')) {\n\t\tconst willBeBlockedUntil = addMinutesToADate(new Date(lastFailedAttemptAt), minutesUntilUnblock);\n\n\t\tawait notifyFailedLogin(ip, willBeBlockedUntil, failedAttemptsSinceLastLogin);\n\t}\n\n\treturn false;\n};\n\nexport const isValidAttemptByUser = async (login: ILoginAttempt): Promise<boolean> => {\n\tif (!settings.get('Block_Multiple_Failed_Logins_Enabled') || !settings.get('Block_Multiple_Failed_Logins_By_User')) {\n\t\treturn true;\n\t}\n\n\tconst loginUsername = login.methodArguments[0].user?.username;\n\tif (!loginUsername) {\n\t\treturn true;\n\t}\n\n\t// misconfigured\n\tconst attemptsUntilBlock = settings.get<number>('Block_Multiple_Failed_Logins_Attempts_Until_Block_by_User');\n\tif (!attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\t// if user never failed to login, then it's valid\n\tconst lastFailedAttemptAt = (await ServerEvents.findLastFailedAttemptByUsername(loginUsername))?.ts;\n\tif (!lastFailedAttemptAt) {\n\t\treturn true;\n\t}\n\n\tconst minutesUntilUnblock = settings.get<number>('Block_Multiple_Failed_Logins_Time_To_Unblock_By_User_In_Minutes');\n\n\tconst lockoutTimeStart = addMinutesToADate(new Date(), minutesUntilUnblock * -1);\n\tconst lastSuccessfulAttemptAt = (await ServerEvents.findLastSuccessfulAttemptByUsername(loginUsername))?.ts;\n\n\t// succesful logins should reset the counter\n\tconst startTime = lastSuccessfulAttemptAt\n\t\t? new Date(Math.max(lockoutTimeStart.getTime(), lastSuccessfulAttemptAt.getTime()))\n\t\t: lockoutTimeStart;\n\n\t// get total failed attempts during the lockout time\n\tconst failedAttemptsSinceLastLogin = await ServerEvents.countFailedAttemptsByUsernameSince(loginUsername, startTime);\n\n\t// if user didn't reach the threshold, then it's valid\n\tif (failedAttemptsSinceLastLogin < attemptsUntilBlock) {\n\t\treturn true;\n\t}\n\n\tif (settings.get('Block_Multiple_Failed_Logins_Notify_Failed')) {\n\t\tconst willBeBlockedUntil = addMinutesToADate(new Date(lastFailedAttemptAt), minutesUntilUnblock);\n\n\t\tawait notifyFailedLogin(loginUsername, willBeBlockedUntil, failedAttemptsSinceLastLogin);\n\t}\n\n\treturn false;\n};\n\nexport const saveFailedLoginAttempts = async (login: ILoginAttempt): Promise<void> => {\n\tconst user: IServerEvent['u'] = {\n\t\t_id: login.user?._id,\n\t\tusername: login.user?.username || login.methodArguments[0].user?.username,\n\t};\n\n\tawait ServerEvents.insertOne({\n\t\tip: getClientAddress(login.connection),\n\t\tt: ServerEventType.FAILED_LOGIN_ATTEMPT,\n\t\tts: new Date(),\n\t\tu: user,\n\t});\n};\n\nexport const saveSuccessfulLogin = async (login: ILoginAttempt): Promise<void> => {\n\tconst user: IServerEvent['u'] = {\n\t\t_id: login.user?._id,\n\t\tusername: login.user?.username || login.methodArguments[0].user?.username,\n\t};\n\n\tawait ServerEvents.insertOne({\n\t\tip: getClientAddress(login.connection),\n\t\tt: ServerEventType.LOGIN,\n\t\tts: new Date(),\n\t\tu: user,\n\t});\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"70b07d3fba9e9e2548ca568837e6b0af8e2462c4"}
