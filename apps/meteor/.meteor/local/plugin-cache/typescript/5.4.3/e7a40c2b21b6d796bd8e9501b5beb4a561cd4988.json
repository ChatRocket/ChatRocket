{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/instance/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/local-services/instance/service.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/instance/service.ts","inputSourceMap":{"version":3,"file":"ee/server/local-services/instance/service.ts","sourceRoot":"","sources":["ee/server/local-services/instance/service.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\n\nimport { License, ServiceClassInternal } from '@rocket.chat/core-services';\nimport { InstanceStatus } from '@rocket.chat/instance-status';\nimport { InstanceStatus as InstanceStatusRaw } from '@rocket.chat/models';\nimport EJSON from 'ejson';\nimport type { BrokerNode } from 'moleculer';\nimport { ServiceBroker, Transporters, Serializers } from 'moleculer';\n\nimport { getLogger } from './getLogger';\nimport { getTransporter } from './getTransporter';\nimport { StreamerCentral } from '../../../../server/modules/streamer/streamer.module';\nimport type { IInstanceService } from '../../sdk/types/IInstanceService';\n\nconst hostIP = process.env.INSTANCE_IP ? String(process.env.INSTANCE_IP).trim() : 'localhost';\n\nconst { Base } = Serializers;\n\nclass EJSONSerializer extends Base {\n\tserialize(obj: any): Buffer {\n\t\treturn Buffer.from(EJSON.stringify(obj));\n\t}\n\n\tdeserialize(buf: Buffer): any {\n\t\treturn EJSON.parse(buf.toString());\n\t}\n}\n\nexport class InstanceService extends ServiceClassInternal implements IInstanceService {\n\tprotected name = 'instance';\n\n\tprivate broadcastStarted = false;\n\n\tprivate transporter: Transporters.TCP | Transporters.NATS;\n\n\tprivate isTransporterTCP = true;\n\n\tprivate broker: ServiceBroker;\n\n\tprivate troubleshootDisableInstanceBroadcast = false;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst tx = getTransporter({ transporter: process.env.TRANSPORTER, port: process.env.TCP_PORT, extra: process.env.TRANSPORTER_EXTRA });\n\t\tif (typeof tx === 'string') {\n\t\t\tthis.transporter = new Transporters.NATS({ url: tx });\n\t\t\tthis.isTransporterTCP = false;\n\t\t} else {\n\t\t\tthis.transporter = new Transporters.TCP(tx);\n\t\t}\n\n\t\tif (this.isTransporterTCP) {\n\t\t\tthis.onEvent('watch.instanceStatus', async ({ clientAction, data }): Promise<void> => {\n\t\t\t\tif (clientAction === 'removed') {\n\t\t\t\t\t(this.broker.transit?.tx as any).nodes.disconnected(data?._id, false);\n\t\t\t\t\t(this.broker.transit?.tx as any).nodes.nodes.delete(data?._id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (clientAction === 'inserted' && data?.extraInformation?.tcpPort) {\n\t\t\t\t\tthis.connectNode(data);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.onEvent('license.module', async ({ module, valid }) => {\n\t\t\tif (module === 'scalability' && valid) {\n\t\t\t\tawait this.startBroadcast();\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.settings', async ({ clientAction, setting }): Promise<void> => {\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { _id, value } = setting;\n\t\t\tif (_id !== 'Troubleshoot_Disable_Instance_Broadcast') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof value !== 'boolean') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.troubleshootDisableInstanceBroadcast === value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.troubleshootDisableInstanceBroadcast = value;\n\t\t});\n\t}\n\n\tasync created() {\n\t\tthis.broker = new ServiceBroker({\n\t\t\tnodeID: InstanceStatus.id(),\n\t\t\ttransporter: this.transporter,\n\t\t\tserializer: new EJSONSerializer(),\n\t\t\t...getLogger(process.env),\n\t\t});\n\n\t\tif ((this.broker.transit?.tx as any)?.nodes?.localNode) {\n\t\t\t(this.broker.transit?.tx as any).nodes.localNode.ipList = [hostIP];\n\t\t}\n\n\t\tthis.broker.createService({\n\t\t\tname: 'matrix',\n\t\t\tevents: {\n\t\t\t\tbroadcast(ctx: any) {\n\t\t\t\t\tconst { eventName, streamName, args } = ctx.params;\n\t\t\t\t\tconst { nodeID } = ctx;\n\n\t\t\t\t\tconst fromLocalNode = nodeID === InstanceStatus.id();\n\t\t\t\t\tif (fromLocalNode) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst instance = StreamerCentral.instances[streamName];\n\t\t\t\t\tif (!instance) {\n\t\t\t\t\t\t// return 'stream-not-exists';\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (instance.serverOnly) {\n\t\t\t\t\t\tinstance.__emit(eventName, ...args);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// @ts-expect-error not sure why it thinks _emit needs an extra argument\n\t\t\t\t\t\tStreamerCentral.instances[streamName]._emit(eventName, args);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tasync started() {\n\t\tawait this.broker.start();\n\n\t\tconst instance = {\n\t\t\thost: hostIP,\n\t\t\tport: String(process.env.PORT).trim(),\n\t\t\ttcpPort: (this.broker.transit?.tx as any)?.nodes?.localNode?.port,\n\t\t\tos: {\n\t\t\t\ttype: os.type(),\n\t\t\t\tplatform: os.platform(),\n\t\t\t\tarch: os.arch(),\n\t\t\t\trelease: os.release(),\n\t\t\t\tuptime: os.uptime(),\n\t\t\t\tloadavg: os.loadavg(),\n\t\t\t\ttotalmem: os.totalmem(),\n\t\t\t\tfreemem: os.freemem(),\n\t\t\t\tcpus: os.cpus().length,\n\t\t\t},\n\t\t\tnodeVersion: process.version,\n\t\t};\n\n\t\tawait InstanceStatus.registerInstance('rocket.chat', instance);\n\n\t\ttry {\n\t\t\tconst hasLicense = await License.hasModule('scalability');\n\t\t\tif (!hasLicense) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait this.startBroadcast();\n\t\t} catch (error) {\n\t\t\tconsole.error('Instance service did not start correctly', error);\n\t\t}\n\t}\n\n\tprivate async startBroadcast() {\n\t\tif (this.broadcastStarted) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastStarted = true;\n\n\t\tStreamerCentral.on('broadcast', this.sendBroadcast.bind(this));\n\n\t\tif (this.isTransporterTCP) {\n\t\t\tawait InstanceStatusRaw.find(\n\t\t\t\t{\n\t\t\t\t\t'extraInformation.tcpPort': {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tsort: {\n\t\t\t\t\t\t_createdAt: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t).forEach(this.connectNode.bind(this));\n\t\t}\n\t}\n\n\tprivate connectNode(record: any) {\n\t\tif (record._id === InstanceStatus.id()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { host, tcpPort } = record.extraInformation;\n\n\t\t(this.broker?.transit?.tx as any).addOfflineNode(record._id, host, tcpPort);\n\t}\n\n\tprivate sendBroadcast(streamName: string, eventName: string, args: unknown[]) {\n\t\tif (this.troubleshootDisableInstanceBroadcast) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid this.broker.broadcast('broadcast', { streamName, eventName, args });\n\t}\n\n\tasync getInstances(): Promise<BrokerNode[]> {\n\t\treturn this.broker.call('$node.list', { onlyAvailable: true });\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/instance/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/local-services/instance/service.ts","inputSourceMap":{"version":3,"file":"ee/server/local-services/instance/service.ts","sourceRoot":"","sources":["ee/server/local-services/instance/service.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\n\nimport { License, ServiceClassInternal } from '@rocket.chat/core-services';\nimport { InstanceStatus } from '@rocket.chat/instance-status';\nimport { InstanceStatus as InstanceStatusRaw } from '@rocket.chat/models';\nimport EJSON from 'ejson';\nimport type { BrokerNode } from 'moleculer';\nimport { ServiceBroker, Transporters, Serializers } from 'moleculer';\n\nimport { getLogger } from './getLogger';\nimport { getTransporter } from './getTransporter';\nimport { StreamerCentral } from '../../../../server/modules/streamer/streamer.module';\nimport type { IInstanceService } from '../../sdk/types/IInstanceService';\n\nconst hostIP = process.env.INSTANCE_IP ? String(process.env.INSTANCE_IP).trim() : 'localhost';\n\nconst { Base } = Serializers;\n\nclass EJSONSerializer extends Base {\n\tserialize(obj: any): Buffer {\n\t\treturn Buffer.from(EJSON.stringify(obj));\n\t}\n\n\tdeserialize(buf: Buffer): any {\n\t\treturn EJSON.parse(buf.toString());\n\t}\n}\n\nexport class InstanceService extends ServiceClassInternal implements IInstanceService {\n\tprotected name = 'instance';\n\n\tprivate broadcastStarted = false;\n\n\tprivate transporter: Transporters.TCP | Transporters.NATS;\n\n\tprivate isTransporterTCP = true;\n\n\tprivate broker: ServiceBroker;\n\n\tprivate troubleshootDisableInstanceBroadcast = false;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst tx = getTransporter({ transporter: process.env.TRANSPORTER, port: process.env.TCP_PORT, extra: process.env.TRANSPORTER_EXTRA });\n\t\tif (typeof tx === 'string') {\n\t\t\tthis.transporter = new Transporters.NATS({ url: tx });\n\t\t\tthis.isTransporterTCP = false;\n\t\t} else {\n\t\t\tthis.transporter = new Transporters.TCP(tx);\n\t\t}\n\n\t\tif (this.isTransporterTCP) {\n\t\t\tthis.onEvent('watch.instanceStatus', async ({ clientAction, data }): Promise<void> => {\n\t\t\t\tif (clientAction === 'removed') {\n\t\t\t\t\t(this.broker.transit?.tx as any).nodes.disconnected(data?._id, false);\n\t\t\t\t\t(this.broker.transit?.tx as any).nodes.nodes.delete(data?._id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (clientAction === 'inserted' && data?.extraInformation?.tcpPort) {\n\t\t\t\t\tthis.connectNode(data);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.onEvent('license.module', async ({ module, valid }) => {\n\t\t\tif (module === 'scalability' && valid) {\n\t\t\t\tawait this.startBroadcast();\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.settings', async ({ clientAction, setting }): Promise<void> => {\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { _id, value } = setting;\n\t\t\tif (_id !== 'Troubleshoot_Disable_Instance_Broadcast') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof value !== 'boolean') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.troubleshootDisableInstanceBroadcast === value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.troubleshootDisableInstanceBroadcast = value;\n\t\t});\n\t}\n\n\tasync created() {\n\t\tthis.broker = new ServiceBroker({\n\t\t\tnodeID: InstanceStatus.id(),\n\t\t\ttransporter: this.transporter,\n\t\t\tserializer: new EJSONSerializer(),\n\t\t\t...getLogger(process.env),\n\t\t});\n\n\t\tif ((this.broker.transit?.tx as any)?.nodes?.localNode) {\n\t\t\t(this.broker.transit?.tx as any).nodes.localNode.ipList = [hostIP];\n\t\t}\n\n\t\tthis.broker.createService({\n\t\t\tname: 'matrix',\n\t\t\tevents: {\n\t\t\t\tbroadcast(ctx: any) {\n\t\t\t\t\tconst { eventName, streamName, args } = ctx.params;\n\t\t\t\t\tconst { nodeID } = ctx;\n\n\t\t\t\t\tconst fromLocalNode = nodeID === InstanceStatus.id();\n\t\t\t\t\tif (fromLocalNode) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst instance = StreamerCentral.instances[streamName];\n\t\t\t\t\tif (!instance) {\n\t\t\t\t\t\t// return 'stream-not-exists';\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (instance.serverOnly) {\n\t\t\t\t\t\tinstance.__emit(eventName, ...args);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// @ts-expect-error not sure why it thinks _emit needs an extra argument\n\t\t\t\t\t\tStreamerCentral.instances[streamName]._emit(eventName, args);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tasync started() {\n\t\tawait this.broker.start();\n\n\t\tconst instance = {\n\t\t\thost: hostIP,\n\t\t\tport: String(process.env.PORT).trim(),\n\t\t\ttcpPort: (this.broker.transit?.tx as any)?.nodes?.localNode?.port,\n\t\t\tos: {\n\t\t\t\ttype: os.type(),\n\t\t\t\tplatform: os.platform(),\n\t\t\t\tarch: os.arch(),\n\t\t\t\trelease: os.release(),\n\t\t\t\tuptime: os.uptime(),\n\t\t\t\tloadavg: os.loadavg(),\n\t\t\t\ttotalmem: os.totalmem(),\n\t\t\t\tfreemem: os.freemem(),\n\t\t\t\tcpus: os.cpus().length,\n\t\t\t},\n\t\t\tnodeVersion: process.version,\n\t\t};\n\n\t\tawait InstanceStatus.registerInstance('rocket.chat', instance);\n\n\t\ttry {\n\t\t\tconst hasLicense = await License.hasModule('scalability');\n\t\t\tif (!hasLicense) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait this.startBroadcast();\n\t\t} catch (error) {\n\t\t\tconsole.error('Instance service did not start correctly', error);\n\t\t}\n\t}\n\n\tprivate async startBroadcast() {\n\t\tif (this.broadcastStarted) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastStarted = true;\n\n\t\tStreamerCentral.on('broadcast', this.sendBroadcast.bind(this));\n\n\t\tif (this.isTransporterTCP) {\n\t\t\tawait InstanceStatusRaw.find(\n\t\t\t\t{\n\t\t\t\t\t'extraInformation.tcpPort': {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tsort: {\n\t\t\t\t\t\t_createdAt: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t).forEach(this.connectNode.bind(this));\n\t\t}\n\t}\n\n\tprivate connectNode(record: any) {\n\t\tif (record._id === InstanceStatus.id()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { host, tcpPort } = record.extraInformation;\n\n\t\t(this.broker?.transit?.tx as any).addOfflineNode(record._id, host, tcpPort);\n\t}\n\n\tprivate sendBroadcast(streamName: string, eventName: string, args: unknown[]) {\n\t\tif (this.troubleshootDisableInstanceBroadcast) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid this.broker.broadcast('broadcast', { streamName, eventName, args });\n\t}\n\n\tasync getInstances(): Promise<BrokerNode[]> {\n\t\treturn this.broker.call('$node.list', { onlyAvailable: true });\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module1, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module1.export({\n      InstanceService: () => InstanceService\n    });\n    let os;\n    module1.link(\"os\", {\n      default(v) {\n        os = v;\n      }\n    }, 0);\n    let License, ServiceClassInternal;\n    module1.link(\"@rocket.chat/core-services\", {\n      License(v) {\n        License = v;\n      },\n      ServiceClassInternal(v) {\n        ServiceClassInternal = v;\n      }\n    }, 1);\n    let InstanceStatus;\n    module1.link(\"@rocket.chat/instance-status\", {\n      InstanceStatus(v) {\n        InstanceStatus = v;\n      }\n    }, 2);\n    let InstanceStatusRaw;\n    module1.link(\"@rocket.chat/models\", {\n      InstanceStatus(v) {\n        InstanceStatusRaw = v;\n      }\n    }, 3);\n    let EJSON;\n    module1.link(\"ejson\", {\n      default(v) {\n        EJSON = v;\n      }\n    }, 4);\n    let ServiceBroker, Transporters, Serializers;\n    module1.link(\"moleculer\", {\n      ServiceBroker(v) {\n        ServiceBroker = v;\n      },\n      Transporters(v) {\n        Transporters = v;\n      },\n      Serializers(v) {\n        Serializers = v;\n      }\n    }, 5);\n    let getLogger;\n    module1.link(\"./getLogger\", {\n      getLogger(v) {\n        getLogger = v;\n      }\n    }, 6);\n    let getTransporter;\n    module1.link(\"./getTransporter\", {\n      getTransporter(v) {\n        getTransporter = v;\n      }\n    }, 7);\n    let StreamerCentral;\n    module1.link(\"../../../../server/modules/streamer/streamer.module\", {\n      StreamerCentral(v) {\n        StreamerCentral = v;\n      }\n    }, 8);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const hostIP = process.env.INSTANCE_IP ? String(process.env.INSTANCE_IP).trim() : 'localhost';\n    const {\n      Base\n    } = Serializers;\n    class EJSONSerializer extends Base {\n      serialize(obj) {\n        return Buffer.from(EJSON.stringify(obj));\n      }\n      deserialize(buf) {\n        return EJSON.parse(buf.toString());\n      }\n    }\n    class InstanceService extends ServiceClassInternal {\n      constructor() {\n        super();\n        this.name = 'instance';\n        this.broadcastStarted = false;\n        this.transporter = void 0;\n        this.isTransporterTCP = true;\n        this.broker = void 0;\n        this.troubleshootDisableInstanceBroadcast = false;\n        const tx = getTransporter({\n          transporter: process.env.TRANSPORTER,\n          port: process.env.TCP_PORT,\n          extra: process.env.TRANSPORTER_EXTRA\n        });\n        if (typeof tx === 'string') {\n          this.transporter = new Transporters.NATS({\n            url: tx\n          });\n          this.isTransporterTCP = false;\n        } else {\n          this.transporter = new Transporters.TCP(tx);\n        }\n        if (this.isTransporterTCP) {\n          this.onEvent('watch.instanceStatus', async _ref => {\n            var _data$extraInformatio;\n            let {\n              clientAction,\n              data\n            } = _ref;\n            if (clientAction === 'removed') {\n              var _this$broker$transit, _this$broker$transit2;\n              ((_this$broker$transit = this.broker.transit) === null || _this$broker$transit === void 0 ? void 0 : _this$broker$transit.tx).nodes.disconnected(data === null || data === void 0 ? void 0 : data._id, false);\n              ((_this$broker$transit2 = this.broker.transit) === null || _this$broker$transit2 === void 0 ? void 0 : _this$broker$transit2.tx).nodes.nodes.delete(data === null || data === void 0 ? void 0 : data._id);\n              return;\n            }\n            if (clientAction === 'inserted' && data !== null && data !== void 0 && (_data$extraInformatio = data.extraInformation) !== null && _data$extraInformatio !== void 0 && _data$extraInformatio.tcpPort) {\n              this.connectNode(data);\n            }\n          });\n        }\n        this.onEvent('license.module', async _ref2 => {\n          let {\n            module,\n            valid\n          } = _ref2;\n          if (module === 'scalability' && valid) {\n            await this.startBroadcast();\n          }\n        });\n        this.onEvent('watch.settings', async _ref3 => {\n          let {\n            clientAction,\n            setting\n          } = _ref3;\n          if (clientAction === 'removed') {\n            return;\n          }\n          const {\n            _id,\n            value\n          } = setting;\n          if (_id !== 'Troubleshoot_Disable_Instance_Broadcast') {\n            return;\n          }\n          if (typeof value !== 'boolean') {\n            return;\n          }\n          if (this.troubleshootDisableInstanceBroadcast === value) {\n            return;\n          }\n          this.troubleshootDisableInstanceBroadcast = value;\n        });\n      }\n      async created() {\n        var _this$broker$transit3, _this$broker$transit4, _this$broker$transit5;\n        this.broker = new ServiceBroker(_objectSpread({\n          nodeID: InstanceStatus.id(),\n          transporter: this.transporter,\n          serializer: new EJSONSerializer()\n        }, getLogger(process.env)));\n        if ((_this$broker$transit3 = this.broker.transit) !== null && _this$broker$transit3 !== void 0 && (_this$broker$transit4 = _this$broker$transit3.tx) !== null && _this$broker$transit4 !== void 0 && (_this$broker$transit5 = _this$broker$transit4.nodes) !== null && _this$broker$transit5 !== void 0 && _this$broker$transit5.localNode) {\n          var _this$broker$transit6;\n          ((_this$broker$transit6 = this.broker.transit) === null || _this$broker$transit6 === void 0 ? void 0 : _this$broker$transit6.tx).nodes.localNode.ipList = [hostIP];\n        }\n        this.broker.createService({\n          name: 'matrix',\n          events: {\n            broadcast(ctx) {\n              const {\n                eventName,\n                streamName,\n                args\n              } = ctx.params;\n              const {\n                nodeID\n              } = ctx;\n              const fromLocalNode = nodeID === InstanceStatus.id();\n              if (fromLocalNode) {\n                return;\n              }\n              const instance = StreamerCentral.instances[streamName];\n              if (!instance) {\n                // return 'stream-not-exists';\n                return;\n              }\n              if (instance.serverOnly) {\n                instance.__emit(eventName, ...args);\n              } else {\n                // @ts-expect-error not sure why it thinks _emit needs an extra argument\n                StreamerCentral.instances[streamName]._emit(eventName, args);\n              }\n            }\n          }\n        });\n      }\n      async started() {\n        var _this$broker$transit7, _this$broker$transit8, _this$broker$transit9, _this$broker$transit10;\n        await this.broker.start();\n        const instance = {\n          host: hostIP,\n          port: String(process.env.PORT).trim(),\n          tcpPort: (_this$broker$transit7 = this.broker.transit) === null || _this$broker$transit7 === void 0 ? void 0 : (_this$broker$transit8 = _this$broker$transit7.tx) === null || _this$broker$transit8 === void 0 ? void 0 : (_this$broker$transit9 = _this$broker$transit8.nodes) === null || _this$broker$transit9 === void 0 ? void 0 : (_this$broker$transit10 = _this$broker$transit9.localNode) === null || _this$broker$transit10 === void 0 ? void 0 : _this$broker$transit10.port,\n          os: {\n            type: os.type(),\n            platform: os.platform(),\n            arch: os.arch(),\n            release: os.release(),\n            uptime: os.uptime(),\n            loadavg: os.loadavg(),\n            totalmem: os.totalmem(),\n            freemem: os.freemem(),\n            cpus: os.cpus().length\n          },\n          nodeVersion: process.version\n        };\n        await InstanceStatus.registerInstance('rocket.chat', instance);\n        try {\n          const hasLicense = await License.hasModule('scalability');\n          if (!hasLicense) {\n            return;\n          }\n          await this.startBroadcast();\n        } catch (error) {\n          console.error('Instance service did not start correctly', error);\n        }\n      }\n      async startBroadcast() {\n        if (this.broadcastStarted) {\n          return;\n        }\n        this.broadcastStarted = true;\n        StreamerCentral.on('broadcast', this.sendBroadcast.bind(this));\n        if (this.isTransporterTCP) {\n          await InstanceStatusRaw.find({\n            'extraInformation.tcpPort': {\n              $exists: true\n            }\n          }, {\n            sort: {\n              _createdAt: -1\n            }\n          }).forEach(this.connectNode.bind(this));\n        }\n      }\n      connectNode(record) {\n        var _this$broker, _this$broker$transit11;\n        if (record._id === InstanceStatus.id()) {\n          return;\n        }\n        const {\n          host,\n          tcpPort\n        } = record.extraInformation;\n        ((_this$broker = this.broker) === null || _this$broker === void 0 ? void 0 : (_this$broker$transit11 = _this$broker.transit) === null || _this$broker$transit11 === void 0 ? void 0 : _this$broker$transit11.tx).addOfflineNode(record._id, host, tcpPort);\n      }\n      sendBroadcast(streamName, eventName, args) {\n        if (this.troubleshootDisableInstanceBroadcast) {\n          return;\n        }\n        void this.broker.broadcast('broadcast', {\n          streamName,\n          eventName,\n          args\n        });\n      }\n      async getInstances() {\n        return this.broker.call('$node.list', {\n          onlyAvailable: true\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module1","link","default","v","export","InstanceService","os","License","ServiceClassInternal","InstanceStatus","InstanceStatusRaw","EJSON","ServiceBroker","Transporters","Serializers","getLogger","getTransporter","StreamerCentral","__reifyWaitForDeps__","hostIP","process","env","INSTANCE_IP","String","trim","Base","EJSONSerializer","serialize","obj","Buffer","from","stringify","deserialize","buf","parse","toString","constructor","name","broadcastStarted","transporter","isTransporterTCP","broker","troubleshootDisableInstanceBroadcast","tx","TRANSPORTER","port","TCP_PORT","extra","TRANSPORTER_EXTRA","NATS","url","TCP","onEvent","_ref","_data$extraInformatio","clientAction","data","_this$broker$transit","_this$broker$transit2","transit","nodes","disconnected","_id","delete","extraInformation","tcpPort","connectNode","_ref2","module","valid","startBroadcast","_ref3","setting","value","created","_this$broker$transit3","_this$broker$transit4","_this$broker$transit5","nodeID","id","serializer","localNode","_this$broker$transit6","ipList","createService","events","broadcast","ctx","eventName","streamName","args","params","fromLocalNode","instance","instances","serverOnly","__emit","_emit","started","_this$broker$transit7","_this$broker$transit8","_this$broker$transit9","_this$broker$transit10","start","host","PORT","type","platform","arch","release","uptime","loadavg","totalmem","freemem","cpus","length","nodeVersion","version","registerInstance","hasLicense","hasModule","error","console","on","sendBroadcast","bind","find","$exists","sort","_createdAt","forEach","record","_this$broker","_this$broker$transit11","addOfflineNode","getInstances","call","onlyAvailable","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/local-services/instance/service.ts"],"sourcesContent":["import os from 'os';\n\nimport { License, ServiceClassInternal } from '@rocket.chat/core-services';\nimport { InstanceStatus } from '@rocket.chat/instance-status';\nimport { InstanceStatus as InstanceStatusRaw } from '@rocket.chat/models';\nimport EJSON from 'ejson';\nimport type { BrokerNode } from 'moleculer';\nimport { ServiceBroker, Transporters, Serializers } from 'moleculer';\n\nimport { getLogger } from './getLogger';\nimport { getTransporter } from './getTransporter';\nimport { StreamerCentral } from '../../../../server/modules/streamer/streamer.module';\nimport type { IInstanceService } from '../../sdk/types/IInstanceService';\n\nconst hostIP = process.env.INSTANCE_IP ? String(process.env.INSTANCE_IP).trim() : 'localhost';\n\nconst { Base } = Serializers;\n\nclass EJSONSerializer extends Base {\n\tserialize(obj: any): Buffer {\n\t\treturn Buffer.from(EJSON.stringify(obj));\n\t}\n\n\tdeserialize(buf: Buffer): any {\n\t\treturn EJSON.parse(buf.toString());\n\t}\n}\n\nexport class InstanceService extends ServiceClassInternal implements IInstanceService {\n\tprotected name = 'instance';\n\n\tprivate broadcastStarted = false;\n\n\tprivate transporter: Transporters.TCP | Transporters.NATS;\n\n\tprivate isTransporterTCP = true;\n\n\tprivate broker: ServiceBroker;\n\n\tprivate troubleshootDisableInstanceBroadcast = false;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst tx = getTransporter({ transporter: process.env.TRANSPORTER, port: process.env.TCP_PORT, extra: process.env.TRANSPORTER_EXTRA });\n\t\tif (typeof tx === 'string') {\n\t\t\tthis.transporter = new Transporters.NATS({ url: tx });\n\t\t\tthis.isTransporterTCP = false;\n\t\t} else {\n\t\t\tthis.transporter = new Transporters.TCP(tx);\n\t\t}\n\n\t\tif (this.isTransporterTCP) {\n\t\t\tthis.onEvent('watch.instanceStatus', async ({ clientAction, data }): Promise<void> => {\n\t\t\t\tif (clientAction === 'removed') {\n\t\t\t\t\t(this.broker.transit?.tx as any).nodes.disconnected(data?._id, false);\n\t\t\t\t\t(this.broker.transit?.tx as any).nodes.nodes.delete(data?._id);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (clientAction === 'inserted' && data?.extraInformation?.tcpPort) {\n\t\t\t\t\tthis.connectNode(data);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.onEvent('license.module', async ({ module, valid }) => {\n\t\t\tif (module === 'scalability' && valid) {\n\t\t\t\tawait this.startBroadcast();\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.settings', async ({ clientAction, setting }): Promise<void> => {\n\t\t\tif (clientAction === 'removed') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { _id, value } = setting;\n\t\t\tif (_id !== 'Troubleshoot_Disable_Instance_Broadcast') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof value !== 'boolean') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.troubleshootDisableInstanceBroadcast === value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.troubleshootDisableInstanceBroadcast = value;\n\t\t});\n\t}\n\n\tasync created() {\n\t\tthis.broker = new ServiceBroker({\n\t\t\tnodeID: InstanceStatus.id(),\n\t\t\ttransporter: this.transporter,\n\t\t\tserializer: new EJSONSerializer(),\n\t\t\t...getLogger(process.env),\n\t\t});\n\n\t\tif ((this.broker.transit?.tx as any)?.nodes?.localNode) {\n\t\t\t(this.broker.transit?.tx as any).nodes.localNode.ipList = [hostIP];\n\t\t}\n\n\t\tthis.broker.createService({\n\t\t\tname: 'matrix',\n\t\t\tevents: {\n\t\t\t\tbroadcast(ctx: any) {\n\t\t\t\t\tconst { eventName, streamName, args } = ctx.params;\n\t\t\t\t\tconst { nodeID } = ctx;\n\n\t\t\t\t\tconst fromLocalNode = nodeID === InstanceStatus.id();\n\t\t\t\t\tif (fromLocalNode) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst instance = StreamerCentral.instances[streamName];\n\t\t\t\t\tif (!instance) {\n\t\t\t\t\t\t// return 'stream-not-exists';\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (instance.serverOnly) {\n\t\t\t\t\t\tinstance.__emit(eventName, ...args);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// @ts-expect-error not sure why it thinks _emit needs an extra argument\n\t\t\t\t\t\tStreamerCentral.instances[streamName]._emit(eventName, args);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tasync started() {\n\t\tawait this.broker.start();\n\n\t\tconst instance = {\n\t\t\thost: hostIP,\n\t\t\tport: String(process.env.PORT).trim(),\n\t\t\ttcpPort: (this.broker.transit?.tx as any)?.nodes?.localNode?.port,\n\t\t\tos: {\n\t\t\t\ttype: os.type(),\n\t\t\t\tplatform: os.platform(),\n\t\t\t\tarch: os.arch(),\n\t\t\t\trelease: os.release(),\n\t\t\t\tuptime: os.uptime(),\n\t\t\t\tloadavg: os.loadavg(),\n\t\t\t\ttotalmem: os.totalmem(),\n\t\t\t\tfreemem: os.freemem(),\n\t\t\t\tcpus: os.cpus().length,\n\t\t\t},\n\t\t\tnodeVersion: process.version,\n\t\t};\n\n\t\tawait InstanceStatus.registerInstance('rocket.chat', instance);\n\n\t\ttry {\n\t\t\tconst hasLicense = await License.hasModule('scalability');\n\t\t\tif (!hasLicense) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait this.startBroadcast();\n\t\t} catch (error) {\n\t\t\tconsole.error('Instance service did not start correctly', error);\n\t\t}\n\t}\n\n\tprivate async startBroadcast() {\n\t\tif (this.broadcastStarted) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastStarted = true;\n\n\t\tStreamerCentral.on('broadcast', this.sendBroadcast.bind(this));\n\n\t\tif (this.isTransporterTCP) {\n\t\t\tawait InstanceStatusRaw.find(\n\t\t\t\t{\n\t\t\t\t\t'extraInformation.tcpPort': {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tsort: {\n\t\t\t\t\t\t_createdAt: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t).forEach(this.connectNode.bind(this));\n\t\t}\n\t}\n\n\tprivate connectNode(record: any) {\n\t\tif (record._id === InstanceStatus.id()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { host, tcpPort } = record.extraInformation;\n\n\t\t(this.broker?.transit?.tx as any).addOfflineNode(record._id, host, tcpPort);\n\t}\n\n\tprivate sendBroadcast(streamName: string, eventName: string, args: unknown[]) {\n\t\tif (this.troubleshootDisableInstanceBroadcast) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid this.broker.broadcast('broadcast', { streamName, eventName, args });\n\t}\n\n\tasync getInstances(): Promise<BrokerNode[]> {\n\t\treturn this.broker.call('$node.list', { onlyAvailable: true });\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"e7a40c2b21b6d796bd8e9501b5beb4a561cd4988"}
