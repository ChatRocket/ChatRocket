{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/twilio.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/omnichannel-integrations/providers/twilio.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/twilio.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-integrations/providers/twilio.ts","sourceRoot":"","sources":["server/services/omnichannel-integrations/providers/twilio.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,4BAA4B,CAAC;AAEjD,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAE5C,OAAO,QAAQ,MAAM,UAAU,CAAC;AAChC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,QAAQ,EAAE,MAAM,iCAAiC,CAAC;AAC3D,OAAO,EAAE,4BAA4B,EAAE,MAAM,2CAA2C,CAAC;AACzF,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAoB1D,MAAM,YAAY,GAAG,CAAC,IAAa,EAAsB,EAAE;IAC1D,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;QAC/C,OAAO,KAAK,CAAC;IACd,CAAC;IAED,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,IAA+B,CAAC;IAE3D,OAAO,OAAO,IAAI,KAAK,QAAQ,IAAI,OAAO,EAAE,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,QAAQ,CAAC;AACvF,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,OAAO,CAAC;AAE9B,MAAM,WAAW,GAAG,CAAC,MAA0B,EAAE,GAAuB,EAAE,GAAW,EAAE,EAAE,CACxF,MAAM;IACN,GAAG;IACH,KAAK,GAAG,CAAC,SAAS,CAAC,yBAAyB,EAAE,MAAM,EAAE,GAAG,EAAE;QAC1D,GAAG;KACH,CAAC,CAAC;AAEJ,MAAM,OAAO,MAAM;IAClB,KAAK,CAAC,IAAa;QAClB,IAAI,QAAQ,GAAG,CAAC,CAAC;QAEjB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QACjC,CAAC;QAED,MAAM,UAAU,GAAgB;YAC/B,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,IAAI,EAAE,IAAI,CAAC,IAAI;YAEf,KAAK,EAAE;gBACN,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,YAAY,EAAE,IAAI,CAAC,QAAQ;gBAC3B,aAAa,EAAE,IAAI,CAAC,SAAS;aAC7B;SACD,CAAC;QAEF,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QACxC,CAAC;QAED,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;YACrB,YAAY,CAAC,KAAK,CAAC,0BAA0B,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC9D,OAAO,UAAU,CAAC;QACnB,CAAC;QAED,UAAU,CAAC,KAAK,GAAG,EAAE,CAAC;QAEtB,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,QAAQ,EAAE,UAAU,EAAE,EAAE,CAAC;YAC9D,MAAM,KAAK,GAAG;gBACb,GAAG,EAAE,EAAE;gBACP,WAAW,EAAE,EAAE;aACf,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,UAAU,EAAE,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,UAAU,EAAE,CAAC,CAAC;YAE1D,KAAK,CAAC,GAAG,GAAG,QAAQ,CAAC;YACrB,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;YAEhC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;QAED,OAAO,UAAU,CAAC;IACnB,CAAC;IAEO,KAAK,CAAC,SAAS,CAAC,GAAY,EAAE,MAAe;QACpD,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAS,wBAAwB,CAAC,CAAC;QAC3D,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAS,sBAAsB,CAAC,CAAC;QAC3D,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;YACpB,MAAM,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC;YACnE,OAAO;QACR,CAAC;QAED,IAAI,CAAC;YACJ,OAAO,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,MAAM,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC;YACxE,YAAY,CAAC,KAAK,CAAC,eAAe,KAAK,EAAE,CAAC,CAAC;QAC5C,CAAC;IACF,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAC/B,SAKC,EACD,IAAY;QAEZ,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,GAAG,SAAS,CAAC;QAC7G,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACnG,MAAM,GAAG,GAAG,IAAI,EAAE,QAAQ,IAAI,IAAI,CAAC;QAEnC,IAAI,MAAM,CAAC;QACX,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,+BAA+B,CAAC,EAAE,CAAC;YACpD,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,qBAAqB,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;QACjD,CAAC;aAAM,IAAI,IAAI,GAAG,aAAa,EAAE,CAAC;YACjC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,oCAAoC,EAAE;gBACrD,IAAI,EAAE,QAAQ,CAAC,aAAa,CAAC;gBAC7B,GAAG;aACH,CAAC,CAAC;QACJ,CAAC;aAAM,IAAI,CAAC,4BAA4B,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC,EAAE,CAAC;YAC1G,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,2BAA2B,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;QACvD,CAAC;aAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5B,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,uBAAuB,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;QACnD,CAAC;QAED,uEAAuE;QACvE,qDAAqD;QACrD,MAAM,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACnE,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;QAC9E,MAAM,WAAW,GAAG,UAAU,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;QAE/F,IAAI,kBAAkB,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YACzD,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,0CAA0C,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;QACtE,CAAC;QAED,IAAI,MAAM,EAAE,CAAC;YACZ,MAAM,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;YACvC,YAAY,CAAC,KAAK,CAAC,eAAe,MAAM,EAAE,CAAC,CAAC;YAC5C,OAAO,EAAE,CAAC;QACX,CAAC;QAED,oEAAoE;QACpE,OAAO,cAAe,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,IAAI,CACT,UAAkB,EAClB,QAAgB,EAChB,OAAe,EACf,SAKC;QAED,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,SAAS,IAAI,EAAE,CAAC;QAExC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,EAAE,CAAC;YACb,OAAO;gBACN,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,uBAAuB;aAClC,CAAC;QACH,CAAC;QAED,IAAI,IAAI,GAAG,OAAO,CAAC;QAEnB,IAAI,QAAQ,CAAC;QACb,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAS,UAAU,CAAC,IAAI,IAAI,CAAC;QACjE,IAAI,SAAS,EAAE,UAAU,EAAE,CAAC;YAC3B,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;YACjF,IAAI,CAAC,cAAc,EAAE,CAAC;gBACrB,OAAO;oBACN,SAAS,EAAE,KAAK;oBAChB,SAAS,EAAE,yBAAyB;iBACpC,CAAC;YACH,CAAC;YACD,QAAQ,GAAG,CAAC,cAAc,CAAC,CAAC;QAC7B,CAAC;QAED,IAAI,gBAAgB,CAAC;QACrB,IAAI,SAAS,EAAE,QAAQ,EAAE,CAAC;YACzB,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,GAAG,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC;YAC7D,gBAAgB,GAAG,OAAO,QAAQ,IAAI,SAAS,EAAE,CAAC;YAClD,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,UAAU,EAAE,EAAE,GAAG,EAAE,eAAe,EAAE,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,CAAC;YACJ,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC3C,EAAE,EAAE,QAAQ;gBACZ,IAAI,EAAE,UAAU;gBAChB,IAAI;gBACJ,GAAG,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,CAAC;gBAC7B,GAAG,CAAC,gBAAgB,IAAI,EAAE,gBAAgB,EAAE,CAAC;aAC7C,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;gBACtB,MAAM,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;gBACpD,YAAY,CAAC,KAAK,CAAC,eAAe,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;YACvD,CAAC;YAED,OAAO;gBACN,SAAS,EAAE,MAAM,CAAC,MAAM,KAAK,QAAQ;gBACrC,SAAS,EAAE,MAAM,CAAC,MAAM;aACxB,CAAC;QACH,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YACjB,MAAM,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;YAC1C,OAAO;gBACN,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,CAAC,CAAC,OAAO;aACpB,CAAC;QACH,CAAC;IACF,CAAC;IAED,QAAQ;QACP,OAAO;YACN,OAAO,EAAE;gBACR,cAAc,EAAE,UAAU;aAC1B;YACD,IAAI,EAAE,uBAAuB;SAC7B,CAAC;IACH,CAAC;IAED,mBAAmB,CAAC,SAAiB,EAAE,OAAgB;QACtD,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAS,sBAAsB,CAAC,CAAC;QAC/D,IAAI,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAS,UAAU,CAAC,CAAC;QAC/C,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YAC3B,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACrC,CAAC;QAED,IAAI,CAAC,SAAS,IAAI,CAAC,OAAO,EAAE,CAAC;YAC5B,YAAY,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;YACtE,OAAO,KAAK,CAAC;QACd,CAAC;QAED,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO,sCAAsC,CAAC;QAE9H,OAAO,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9E,CAAC;IAED,eAAe,CAAC,OAAgB;QAC/B,sDAAsD;QACtD,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,KAAK,MAAM,EAAE,CAAC;YACtC,OAAO,IAAI,CAAC;QACb,CAAC;QACD,MAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;QACjE,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;QACrF,OAAO,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,KAAkC;QACvC,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;YAClB,OAAO,GAAG,YAAY,KAAK,CAAC,MAAM,YAAY,CAAC;QAChD,CAAC;QACD,OAAO;YACN,OAAO,EAAE;gBACR,cAAc,EAAE,UAAU;aAC1B;YACD,IAAI,EAAE,aAAa,OAAO,aAAa;SACvC,CAAC;IACH,CAAC;CACD","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { ISMSProvider, ServiceData, SMSProviderResponse, SMSProviderResult } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport type { Request } from 'express';\nimport filesize from 'filesize';\nimport twilio from 'twilio';\n\nimport { settings } from '../../../../app/settings/server';\nimport { fileUploadIsValidContentType } from '../../../../app/utils/server/restrictions';\nimport { i18n } from '../../../lib/i18n';\nimport { SystemLogger } from '../../../lib/logger/system';\n\ntype TwilioData = {\n\tFrom: string;\n\tTo: string;\n\tBody: string;\n\tNumMedia?: string;\n\tToCountry?: string;\n\tToState?: string;\n\tToCity?: string;\n\tToZip?: string;\n\tFromCountry?: string;\n\tFromState?: string;\n\tFromCity?: string;\n\tFromZip?: string;\n\tLatitude?: string;\n\tLongitude?: string;\n} & Record<`MediaUrl${number}`, string> &\n\tRecord<`MediaContentType${number}`, string>;\n\nconst isTwilioData = (data: unknown): data is TwilioData => {\n\tif (typeof data !== 'object' || data === null) {\n\t\treturn false;\n\t}\n\n\tconst { From, To, Body } = data as Record<string, unknown>;\n\n\treturn typeof From === 'string' && typeof To === 'string' && typeof Body === 'string';\n};\n\nconst MAX_FILE_SIZE = 5242880;\n\nconst notifyAgent = (userId: string | undefined, rid: string | undefined, msg: string) =>\n\tuserId &&\n\trid &&\n\tvoid api.broadcast('notify.ephemeralMessage', userId, rid, {\n\t\tmsg,\n\t});\n\nexport class Twilio implements ISMSProvider {\n\tparse(data: unknown): ServiceData {\n\t\tlet numMedia = 0;\n\n\t\tif (!isTwilioData(data)) {\n\t\t\tthrow new Error('Invalid data');\n\t\t}\n\n\t\tconst returnData: ServiceData = {\n\t\t\tfrom: data.From,\n\t\t\tto: data.To,\n\t\t\tbody: data.Body,\n\n\t\t\textra: {\n\t\t\t\ttoCountry: data.ToCountry,\n\t\t\t\ttoState: data.ToState,\n\t\t\t\ttoCity: data.ToCity,\n\t\t\t\ttoZip: data.ToZip,\n\t\t\t\tfromCountry: data.FromCountry,\n\t\t\t\tfromState: data.FromState,\n\t\t\t\tfromCity: data.FromCity,\n\t\t\t\tfromZip: data.FromZip,\n\t\t\t\tfromLatitude: data.Latitude,\n\t\t\t\tfromLongitude: data.Longitude,\n\t\t\t},\n\t\t};\n\n\t\tif (data.NumMedia) {\n\t\t\tnumMedia = parseInt(data.NumMedia, 10);\n\t\t}\n\n\t\tif (isNaN(numMedia)) {\n\t\t\tSystemLogger.error(`Error parsing NumMedia ${data.NumMedia}`);\n\t\t\treturn returnData;\n\t\t}\n\n\t\treturnData.media = [];\n\n\t\tfor (let mediaIndex = 0; mediaIndex < numMedia; mediaIndex++) {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data[`MediaUrl${mediaIndex}`];\n\t\t\tconst contentType = data[`MediaContentType${mediaIndex}`];\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType;\n\n\t\t\treturnData.media.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\tprivate async getClient(rid?: string, userId?: string) {\n\t\tconst sid = settings.get<string>('SMS_Twilio_Account_SID');\n\t\tconst token = settings.get<string>('SMS_Twilio_authToken');\n\t\tif (!sid || !token) {\n\t\t\tawait notifyAgent(userId, rid, i18n.t('SMS_Twilio_NotConfigured'));\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\treturn twilio(sid, token);\n\t\t} catch (error) {\n\t\t\tawait notifyAgent(userId, rid, i18n.t('SMS_Twilio_InvalidCredentials'));\n\t\t\tSystemLogger.error(`(Twilio) -> ${error}`);\n\t\t}\n\t}\n\n\tprivate async validateFileUpload(\n\t\textraData: {\n\t\t\tfileUpload?: { size: number; type: string; publicFilePath: string };\n\t\t\tlocation?: { coordinates: [number, number] };\n\t\t\trid?: string;\n\t\t\tuserId?: string;\n\t\t},\n\t\tlang: string,\n\t): Promise<string> {\n\t\tconst { rid, userId, fileUpload: { size, type, publicFilePath } = { size: 0, type: 'invalid' } } = extraData;\n\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;\n\t\tconst lng = user?.language || lang;\n\n\t\tlet reason;\n\t\tif (!settings.get('SMS_Twilio_FileUpload_Enabled')) {\n\t\t\treason = i18n.t('FileUpload_Disabled', { lng });\n\t\t} else if (size > MAX_FILE_SIZE) {\n\t\t\treason = i18n.t('File_exceeds_allowed_size_of_bytes', {\n\t\t\t\tsize: filesize(MAX_FILE_SIZE),\n\t\t\t\tlng,\n\t\t\t});\n\t\t} else if (!fileUploadIsValidContentType(type, settings.get('SMS_Twilio_FileUpload_MediaTypeWhiteList'))) {\n\t\t\treason = i18n.t('File_type_is_not_accepted', { lng });\n\t\t} else if (!publicFilePath) {\n\t\t\treason = i18n.t('FileUpload_NotAllowed', { lng });\n\t\t}\n\n\t\t// Check if JWT is set for public file uploads when protect_files is on\n\t\t// If it's not, notify user upload won't go to twilio\n\t\tconst protectFileUploads = settings.get('FileUpload_ProtectFiles');\n\t\tconst jwtEnabled = settings.get('FileUpload_Enable_json_web_token_for_files');\n\t\tconst isJWTKeySet = jwtEnabled && !!settings.get('FileUpload_json_web_token_secret_for_files');\n\n\t\tif (protectFileUploads && (!jwtEnabled || !isJWTKeySet)) {\n\t\t\treason = i18n.t('FileUpload_ProtectFilesEnabled_JWTNotSet', { lng });\n\t\t}\n\n\t\tif (reason) {\n\t\t\tawait notifyAgent(userId, rid, reason);\n\t\t\tSystemLogger.error(`(Twilio) -> ${reason}`);\n\t\t\treturn '';\n\t\t}\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\treturn publicFilePath!;\n\t}\n\n\tasync send(\n\t\tfromNumber: string,\n\t\ttoNumber: string,\n\t\tmessage: string,\n\t\textraData?: {\n\t\t\tfileUpload?: { size: number; type: string; publicFilePath: string };\n\t\t\tlocation?: { coordinates: [number, number] };\n\t\t\trid?: string;\n\t\t\tuserId?: string;\n\t\t},\n\t): Promise<SMSProviderResult> {\n\t\tconst { rid, userId } = extraData || {};\n\n\t\tconst client = await this.getClient(rid, userId);\n\t\tif (!client) {\n\t\t\treturn {\n\t\t\t\tisSuccess: false,\n\t\t\t\tresultMsg: 'Twilio not configured',\n\t\t\t};\n\t\t}\n\n\t\tlet body = message;\n\n\t\tlet mediaUrl;\n\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tif (extraData?.fileUpload) {\n\t\t\tconst publicFilePath = await this.validateFileUpload(extraData, defaultLanguage);\n\t\t\tif (!publicFilePath) {\n\t\t\t\treturn {\n\t\t\t\t\tisSuccess: false,\n\t\t\t\t\tresultMsg: 'File upload not allowed',\n\t\t\t\t};\n\t\t\t}\n\t\t\tmediaUrl = [publicFilePath];\n\t\t}\n\n\t\tlet persistentAction;\n\t\tif (extraData?.location) {\n\t\t\tconst [longitude, latitude] = extraData.location.coordinates;\n\t\t\tpersistentAction = `geo:${latitude},${longitude}`;\n\t\t\tbody = i18n.t('Location', { lng: defaultLanguage });\n\t\t}\n\n\t\ttry {\n\t\t\tconst result = await client.messages.create({\n\t\t\t\tto: toNumber,\n\t\t\t\tfrom: fromNumber,\n\t\t\t\tbody,\n\t\t\t\t...(mediaUrl && { mediaUrl }),\n\t\t\t\t...(persistentAction && { persistentAction }),\n\t\t\t});\n\n\t\t\tif (result.errorCode) {\n\t\t\t\tawait notifyAgent(userId, rid, result.errorMessage);\n\t\t\t\tSystemLogger.error(`(Twilio) -> ${result.errorCode}`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisSuccess: result.status !== 'failed',\n\t\t\t\tresultMsg: result.status,\n\t\t\t};\n\t\t} catch (e: any) {\n\t\t\tawait notifyAgent(userId, rid, e.message);\n\t\t\treturn {\n\t\t\t\tisSuccess: false,\n\t\t\t\tresultMsg: e.message,\n\t\t\t};\n\t\t}\n\t}\n\n\tresponse(): SMSProviderResponse {\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: '<Response></Response>',\n\t\t};\n\t}\n\n\tisRequestFromTwilio(signature: string, request: Request): boolean {\n\t\tconst authToken = settings.get<string>('SMS_Twilio_authToken');\n\t\tlet siteUrl = settings.get<string>('Site_Url');\n\t\tif (siteUrl.endsWith('/')) {\n\t\t\tsiteUrl = siteUrl.replace(/.$/, '');\n\t\t}\n\n\t\tif (!authToken || !siteUrl) {\n\t\t\tSystemLogger.error(`(Twilio) -> URL or Twilio token not configured.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst twilioUrl = request.originalUrl ? `${siteUrl}${request.originalUrl}` : `${siteUrl}/api/v1/livechat/sms-incoming/twilio`;\n\n\t\treturn twilio.validateRequest(authToken, signature, twilioUrl, request.body);\n\t}\n\n\tvalidateRequest(request: Request): boolean {\n\t\t// We're not getting original twilio requests on CI :p\n\t\tif (process.env.TEST_MODE === 'true') {\n\t\t\treturn true;\n\t\t}\n\t\tconst twilioHeader = request.headers['x-twilio-signature'] || '';\n\t\tconst twilioSignature = Array.isArray(twilioHeader) ? twilioHeader[0] : twilioHeader;\n\t\treturn this.isRequestFromTwilio(twilioSignature, request);\n\t}\n\n\terror(error: Error & { reason?: string }): SMSProviderResponse {\n\t\tlet message = '';\n\t\tif (error.reason) {\n\t\t\tmessage = `<Message>${error.reason}</Message>`;\n\t\t}\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: `<Response>${message}</Response>`,\n\t\t};\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/twilio.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/omnichannel-integrations/providers/twilio.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-integrations/providers/twilio.ts","sourceRoot":"","sources":["server/services/omnichannel-integrations/providers/twilio.ts"],"names":[],"mappings":"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","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { ISMSProvider, ServiceData, SMSProviderResponse, SMSProviderResult } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport type { Request } from 'express';\nimport filesize from 'filesize';\nimport twilio from 'twilio';\n\nimport { settings } from '../../../../app/settings/server';\nimport { fileUploadIsValidContentType } from '../../../../app/utils/server/restrictions';\nimport { i18n } from '../../../lib/i18n';\nimport { SystemLogger } from '../../../lib/logger/system';\n\ntype TwilioData = {\n\tFrom: string;\n\tTo: string;\n\tBody: string;\n\tNumMedia?: string;\n\tToCountry?: string;\n\tToState?: string;\n\tToCity?: string;\n\tToZip?: string;\n\tFromCountry?: string;\n\tFromState?: string;\n\tFromCity?: string;\n\tFromZip?: string;\n\tLatitude?: string;\n\tLongitude?: string;\n} & Record<`MediaUrl${number}`, string> &\n\tRecord<`MediaContentType${number}`, string>;\n\nconst isTwilioData = (data: unknown): data is TwilioData => {\n\tif (typeof data !== 'object' || data === null) {\n\t\treturn false;\n\t}\n\n\tconst { From, To, Body } = data as Record<string, unknown>;\n\n\treturn typeof From === 'string' && typeof To === 'string' && typeof Body === 'string';\n};\n\nconst MAX_FILE_SIZE = 5242880;\n\nconst notifyAgent = (userId: string | undefined, rid: string | undefined, msg: string) =>\n\tuserId &&\n\trid &&\n\tvoid api.broadcast('notify.ephemeralMessage', userId, rid, {\n\t\tmsg,\n\t});\n\nexport class Twilio implements ISMSProvider {\n\tparse(data: unknown): ServiceData {\n\t\tlet numMedia = 0;\n\n\t\tif (!isTwilioData(data)) {\n\t\t\tthrow new Error('Invalid data');\n\t\t}\n\n\t\tconst returnData: ServiceData = {\n\t\t\tfrom: data.From,\n\t\t\tto: data.To,\n\t\t\tbody: data.Body,\n\n\t\t\textra: {\n\t\t\t\ttoCountry: data.ToCountry,\n\t\t\t\ttoState: data.ToState,\n\t\t\t\ttoCity: data.ToCity,\n\t\t\t\ttoZip: data.ToZip,\n\t\t\t\tfromCountry: data.FromCountry,\n\t\t\t\tfromState: data.FromState,\n\t\t\t\tfromCity: data.FromCity,\n\t\t\t\tfromZip: data.FromZip,\n\t\t\t\tfromLatitude: data.Latitude,\n\t\t\t\tfromLongitude: data.Longitude,\n\t\t\t},\n\t\t};\n\n\t\tif (data.NumMedia) {\n\t\t\tnumMedia = parseInt(data.NumMedia, 10);\n\t\t}\n\n\t\tif (isNaN(numMedia)) {\n\t\t\tSystemLogger.error(`Error parsing NumMedia ${data.NumMedia}`);\n\t\t\treturn returnData;\n\t\t}\n\n\t\treturnData.media = [];\n\n\t\tfor (let mediaIndex = 0; mediaIndex < numMedia; mediaIndex++) {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data[`MediaUrl${mediaIndex}`];\n\t\t\tconst contentType = data[`MediaContentType${mediaIndex}`];\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType;\n\n\t\t\treturnData.media.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\tprivate async getClient(rid?: string, userId?: string) {\n\t\tconst sid = settings.get<string>('SMS_Twilio_Account_SID');\n\t\tconst token = settings.get<string>('SMS_Twilio_authToken');\n\t\tif (!sid || !token) {\n\t\t\tawait notifyAgent(userId, rid, i18n.t('SMS_Twilio_NotConfigured'));\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\treturn twilio(sid, token);\n\t\t} catch (error) {\n\t\t\tawait notifyAgent(userId, rid, i18n.t('SMS_Twilio_InvalidCredentials'));\n\t\t\tSystemLogger.error(`(Twilio) -> ${error}`);\n\t\t}\n\t}\n\n\tprivate async validateFileUpload(\n\t\textraData: {\n\t\t\tfileUpload?: { size: number; type: string; publicFilePath: string };\n\t\t\tlocation?: { coordinates: [number, number] };\n\t\t\trid?: string;\n\t\t\tuserId?: string;\n\t\t},\n\t\tlang: string,\n\t): Promise<string> {\n\t\tconst { rid, userId, fileUpload: { size, type, publicFilePath } = { size: 0, type: 'invalid' } } = extraData;\n\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;\n\t\tconst lng = user?.language || lang;\n\n\t\tlet reason;\n\t\tif (!settings.get('SMS_Twilio_FileUpload_Enabled')) {\n\t\t\treason = i18n.t('FileUpload_Disabled', { lng });\n\t\t} else if (size > MAX_FILE_SIZE) {\n\t\t\treason = i18n.t('File_exceeds_allowed_size_of_bytes', {\n\t\t\t\tsize: filesize(MAX_FILE_SIZE),\n\t\t\t\tlng,\n\t\t\t});\n\t\t} else if (!fileUploadIsValidContentType(type, settings.get('SMS_Twilio_FileUpload_MediaTypeWhiteList'))) {\n\t\t\treason = i18n.t('File_type_is_not_accepted', { lng });\n\t\t} else if (!publicFilePath) {\n\t\t\treason = i18n.t('FileUpload_NotAllowed', { lng });\n\t\t}\n\n\t\t// Check if JWT is set for public file uploads when protect_files is on\n\t\t// If it's not, notify user upload won't go to twilio\n\t\tconst protectFileUploads = settings.get('FileUpload_ProtectFiles');\n\t\tconst jwtEnabled = settings.get('FileUpload_Enable_json_web_token_for_files');\n\t\tconst isJWTKeySet = jwtEnabled && !!settings.get('FileUpload_json_web_token_secret_for_files');\n\n\t\tif (protectFileUploads && (!jwtEnabled || !isJWTKeySet)) {\n\t\t\treason = i18n.t('FileUpload_ProtectFilesEnabled_JWTNotSet', { lng });\n\t\t}\n\n\t\tif (reason) {\n\t\t\tawait notifyAgent(userId, rid, reason);\n\t\t\tSystemLogger.error(`(Twilio) -> ${reason}`);\n\t\t\treturn '';\n\t\t}\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\treturn publicFilePath!;\n\t}\n\n\tasync send(\n\t\tfromNumber: string,\n\t\ttoNumber: string,\n\t\tmessage: string,\n\t\textraData?: {\n\t\t\tfileUpload?: { size: number; type: string; publicFilePath: string };\n\t\t\tlocation?: { coordinates: [number, number] };\n\t\t\trid?: string;\n\t\t\tuserId?: string;\n\t\t},\n\t): Promise<SMSProviderResult> {\n\t\tconst { rid, userId } = extraData || {};\n\n\t\tconst client = await this.getClient(rid, userId);\n\t\tif (!client) {\n\t\t\treturn {\n\t\t\t\tisSuccess: false,\n\t\t\t\tresultMsg: 'Twilio not configured',\n\t\t\t};\n\t\t}\n\n\t\tlet body = message;\n\n\t\tlet mediaUrl;\n\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tif (extraData?.fileUpload) {\n\t\t\tconst publicFilePath = await this.validateFileUpload(extraData, defaultLanguage);\n\t\t\tif (!publicFilePath) {\n\t\t\t\treturn {\n\t\t\t\t\tisSuccess: false,\n\t\t\t\t\tresultMsg: 'File upload not allowed',\n\t\t\t\t};\n\t\t\t}\n\t\t\tmediaUrl = [publicFilePath];\n\t\t}\n\n\t\tlet persistentAction;\n\t\tif (extraData?.location) {\n\t\t\tconst [longitude, latitude] = extraData.location.coordinates;\n\t\t\tpersistentAction = `geo:${latitude},${longitude}`;\n\t\t\tbody = i18n.t('Location', { lng: defaultLanguage });\n\t\t}\n\n\t\ttry {\n\t\t\tconst result = await client.messages.create({\n\t\t\t\tto: toNumber,\n\t\t\t\tfrom: fromNumber,\n\t\t\t\tbody,\n\t\t\t\t...(mediaUrl && { mediaUrl }),\n\t\t\t\t...(persistentAction && { persistentAction }),\n\t\t\t});\n\n\t\t\tif (result.errorCode) {\n\t\t\t\tawait notifyAgent(userId, rid, result.errorMessage);\n\t\t\t\tSystemLogger.error(`(Twilio) -> ${result.errorCode}`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisSuccess: result.status !== 'failed',\n\t\t\t\tresultMsg: result.status,\n\t\t\t};\n\t\t} catch (e: any) {\n\t\t\tawait notifyAgent(userId, rid, e.message);\n\t\t\treturn {\n\t\t\t\tisSuccess: false,\n\t\t\t\tresultMsg: e.message,\n\t\t\t};\n\t\t}\n\t}\n\n\tresponse(): SMSProviderResponse {\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: '<Response></Response>',\n\t\t};\n\t}\n\n\tisRequestFromTwilio(signature: string, request: Request): boolean {\n\t\tconst authToken = settings.get<string>('SMS_Twilio_authToken');\n\t\tlet siteUrl = settings.get<string>('Site_Url');\n\t\tif (siteUrl.endsWith('/')) {\n\t\t\tsiteUrl = siteUrl.replace(/.$/, '');\n\t\t}\n\n\t\tif (!authToken || !siteUrl) {\n\t\t\tSystemLogger.error(`(Twilio) -> URL or Twilio token not configured.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst twilioUrl = request.originalUrl ? `${siteUrl}${request.originalUrl}` : `${siteUrl}/api/v1/livechat/sms-incoming/twilio`;\n\n\t\treturn twilio.validateRequest(authToken, signature, twilioUrl, request.body);\n\t}\n\n\tvalidateRequest(request: Request): boolean {\n\t\t// We're not getting original twilio requests on CI :p\n\t\tif (process.env.TEST_MODE === 'true') {\n\t\t\treturn true;\n\t\t}\n\t\tconst twilioHeader = request.headers['x-twilio-signature'] || '';\n\t\tconst twilioSignature = Array.isArray(twilioHeader) ? twilioHeader[0] : twilioHeader;\n\t\treturn this.isRequestFromTwilio(twilioSignature, request);\n\t}\n\n\terror(error: Error & { reason?: string }): SMSProviderResponse {\n\t\tlet message = '';\n\t\tif (error.reason) {\n\t\t\tmessage = `<Message>${error.reason}</Message>`;\n\t\t}\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: `<Response>${message}</Response>`,\n\t\t};\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      Twilio: () => Twilio\n    });\n    let api;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      }\n    }, 0);\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let filesize;\n    module.link(\"filesize\", {\n      default(v) {\n        filesize = v;\n      }\n    }, 2);\n    let twilio;\n    module.link(\"twilio\", {\n      default(v) {\n        twilio = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    let fileUploadIsValidContentType;\n    module.link(\"../../../../app/utils/server/restrictions\", {\n      fileUploadIsValidContentType(v) {\n        fileUploadIsValidContentType = v;\n      }\n    }, 5);\n    let i18n;\n    module.link(\"../../../lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 6);\n    let SystemLogger;\n    module.link(\"../../../lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const isTwilioData = data => {\n      if (typeof data !== 'object' || data === null) {\n        return false;\n      }\n      const {\n        From,\n        To,\n        Body\n      } = data;\n      return typeof From === 'string' && typeof To === 'string' && typeof Body === 'string';\n    };\n    const MAX_FILE_SIZE = 5242880;\n    const notifyAgent = (userId, rid, msg) => userId && rid && void api.broadcast('notify.ephemeralMessage', userId, rid, {\n      msg\n    });\n    class Twilio {\n      parse(data) {\n        let numMedia = 0;\n        if (!isTwilioData(data)) {\n          throw new Error('Invalid data');\n        }\n        const returnData = {\n          from: data.From,\n          to: data.To,\n          body: data.Body,\n          extra: {\n            toCountry: data.ToCountry,\n            toState: data.ToState,\n            toCity: data.ToCity,\n            toZip: data.ToZip,\n            fromCountry: data.FromCountry,\n            fromState: data.FromState,\n            fromCity: data.FromCity,\n            fromZip: data.FromZip,\n            fromLatitude: data.Latitude,\n            fromLongitude: data.Longitude\n          }\n        };\n        if (data.NumMedia) {\n          numMedia = parseInt(data.NumMedia, 10);\n        }\n        if (isNaN(numMedia)) {\n          SystemLogger.error(\"Error parsing NumMedia \".concat(data.NumMedia));\n          return returnData;\n        }\n        returnData.media = [];\n        for (let mediaIndex = 0; mediaIndex < numMedia; mediaIndex++) {\n          const media = {\n            url: '',\n            contentType: ''\n          };\n          const mediaUrl = data[\"MediaUrl\".concat(mediaIndex)];\n          const contentType = data[\"MediaContentType\".concat(mediaIndex)];\n          media.url = mediaUrl;\n          media.contentType = contentType;\n          returnData.media.push(media);\n        }\n        return returnData;\n      }\n      async getClient(rid, userId) {\n        const sid = settings.get('SMS_Twilio_Account_SID');\n        const token = settings.get('SMS_Twilio_authToken');\n        if (!sid || !token) {\n          await notifyAgent(userId, rid, i18n.t('SMS_Twilio_NotConfigured'));\n          return;\n        }\n        try {\n          return twilio(sid, token);\n        } catch (error) {\n          await notifyAgent(userId, rid, i18n.t('SMS_Twilio_InvalidCredentials'));\n          SystemLogger.error(\"(Twilio) -> \".concat(error));\n        }\n      }\n      async validateFileUpload(extraData, lang) {\n        const {\n          rid,\n          userId,\n          fileUpload: {\n            size,\n            type,\n            publicFilePath\n          } = {\n            size: 0,\n            type: 'invalid'\n          }\n        } = extraData;\n        const user = userId ? await Users.findOne({\n          _id: userId\n        }, {\n          projection: {\n            language: 1\n          }\n        }) : null;\n        const lng = (user === null || user === void 0 ? void 0 : user.language) || lang;\n        let reason;\n        if (!settings.get('SMS_Twilio_FileUpload_Enabled')) {\n          reason = i18n.t('FileUpload_Disabled', {\n            lng\n          });\n        } else if (size > MAX_FILE_SIZE) {\n          reason = i18n.t('File_exceeds_allowed_size_of_bytes', {\n            size: filesize(MAX_FILE_SIZE),\n            lng\n          });\n        } else if (!fileUploadIsValidContentType(type, settings.get('SMS_Twilio_FileUpload_MediaTypeWhiteList'))) {\n          reason = i18n.t('File_type_is_not_accepted', {\n            lng\n          });\n        } else if (!publicFilePath) {\n          reason = i18n.t('FileUpload_NotAllowed', {\n            lng\n          });\n        }\n        // Check if JWT is set for public file uploads when protect_files is on\n        // If it's not, notify user upload won't go to twilio\n        const protectFileUploads = settings.get('FileUpload_ProtectFiles');\n        const jwtEnabled = settings.get('FileUpload_Enable_json_web_token_for_files');\n        const isJWTKeySet = jwtEnabled && !!settings.get('FileUpload_json_web_token_secret_for_files');\n        if (protectFileUploads && (!jwtEnabled || !isJWTKeySet)) {\n          reason = i18n.t('FileUpload_ProtectFilesEnabled_JWTNotSet', {\n            lng\n          });\n        }\n        if (reason) {\n          await notifyAgent(userId, rid, reason);\n          SystemLogger.error(\"(Twilio) -> \".concat(reason));\n          return '';\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return publicFilePath;\n      }\n      async send(fromNumber, toNumber, message, extraData) {\n        const {\n          rid,\n          userId\n        } = extraData || {};\n        const client = await this.getClient(rid, userId);\n        if (!client) {\n          return {\n            isSuccess: false,\n            resultMsg: 'Twilio not configured'\n          };\n        }\n        let body = message;\n        let mediaUrl;\n        const defaultLanguage = settings.get('Language') || 'en';\n        if (extraData !== null && extraData !== void 0 && extraData.fileUpload) {\n          const publicFilePath = await this.validateFileUpload(extraData, defaultLanguage);\n          if (!publicFilePath) {\n            return {\n              isSuccess: false,\n              resultMsg: 'File upload not allowed'\n            };\n          }\n          mediaUrl = [publicFilePath];\n        }\n        let persistentAction;\n        if (extraData !== null && extraData !== void 0 && extraData.location) {\n          const [longitude, latitude] = extraData.location.coordinates;\n          persistentAction = \"geo:\".concat(latitude, \",\").concat(longitude);\n          body = i18n.t('Location', {\n            lng: defaultLanguage\n          });\n        }\n        try {\n          const result = await client.messages.create(_objectSpread(_objectSpread({\n            to: toNumber,\n            from: fromNumber,\n            body\n          }, mediaUrl && {\n            mediaUrl\n          }), persistentAction && {\n            persistentAction\n          }));\n          if (result.errorCode) {\n            await notifyAgent(userId, rid, result.errorMessage);\n            SystemLogger.error(\"(Twilio) -> \".concat(result.errorCode));\n          }\n          return {\n            isSuccess: result.status !== 'failed',\n            resultMsg: result.status\n          };\n        } catch (e) {\n          await notifyAgent(userId, rid, e.message);\n          return {\n            isSuccess: false,\n            resultMsg: e.message\n          };\n        }\n      }\n      response() {\n        return {\n          headers: {\n            'Content-Type': 'text/xml'\n          },\n          body: '<Response></Response>'\n        };\n      }\n      isRequestFromTwilio(signature, request) {\n        const authToken = settings.get('SMS_Twilio_authToken');\n        let siteUrl = settings.get('Site_Url');\n        if (siteUrl.endsWith('/')) {\n          siteUrl = siteUrl.replace(/.$/, '');\n        }\n        if (!authToken || !siteUrl) {\n          SystemLogger.error(\"(Twilio) -> URL or Twilio token not configured.\");\n          return false;\n        }\n        const twilioUrl = request.originalUrl ? \"\".concat(siteUrl).concat(request.originalUrl) : \"\".concat(siteUrl, \"/api/v1/livechat/sms-incoming/twilio\");\n        return twilio.validateRequest(authToken, signature, twilioUrl, request.body);\n      }\n      validateRequest(request) {\n        // We're not getting original twilio requests on CI :p\n        if (process.env.TEST_MODE === 'true') {\n          return true;\n        }\n        const twilioHeader = request.headers['x-twilio-signature'] || '';\n        const twilioSignature = Array.isArray(twilioHeader) ? twilioHeader[0] : twilioHeader;\n        return this.isRequestFromTwilio(twilioSignature, request);\n      }\n      error(error) {\n        let message = '';\n        if (error.reason) {\n          message = \"<Message>\".concat(error.reason, \"</Message>\");\n        }\n        return {\n          headers: {\n            'Content-Type': 'text/xml'\n          },\n          body: \"<Response>\".concat(message, \"</Response>\")\n        };\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","Twilio","api","Users","filesize","twilio","settings","fileUploadIsValidContentType","i18n","SystemLogger","__reifyWaitForDeps__","isTwilioData","data","From","To","Body","MAX_FILE_SIZE","notifyAgent","userId","rid","msg","broadcast","parse","numMedia","Error","returnData","from","to","body","extra","toCountry","ToCountry","toState","ToState","toCity","ToCity","toZip","ToZip","fromCountry","FromCountry","fromState","FromState","fromCity","FromCity","fromZip","FromZip","fromLatitude","Latitude","fromLongitude","Longitude","NumMedia","parseInt","isNaN","error","concat","media","mediaIndex","url","contentType","mediaUrl","push","getClient","sid","get","token","t","validateFileUpload","extraData","lang","fileUpload","size","type","publicFilePath","user","findOne","_id","projection","language","lng","reason","protectFileUploads","jwtEnabled","isJWTKeySet","send","fromNumber","toNumber","message","client","isSuccess","resultMsg","defaultLanguage","persistentAction","location","longitude","latitude","coordinates","result","messages","create","errorCode","errorMessage","status","e","response","headers","isRequestFromTwilio","signature","request","authToken","siteUrl","endsWith","replace","twilioUrl","originalUrl","validateRequest","process","env","TEST_MODE","twilioHeader","twilioSignature","Array","isArray","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/omnichannel-integrations/providers/twilio.ts"],"sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { ISMSProvider, ServiceData, SMSProviderResponse, SMSProviderResult } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport type { Request } from 'express';\nimport filesize from 'filesize';\nimport twilio from 'twilio';\n\nimport { settings } from '../../../../app/settings/server';\nimport { fileUploadIsValidContentType } from '../../../../app/utils/server/restrictions';\nimport { i18n } from '../../../lib/i18n';\nimport { SystemLogger } from '../../../lib/logger/system';\n\ntype TwilioData = {\n\tFrom: string;\n\tTo: string;\n\tBody: string;\n\tNumMedia?: string;\n\tToCountry?: string;\n\tToState?: string;\n\tToCity?: string;\n\tToZip?: string;\n\tFromCountry?: string;\n\tFromState?: string;\n\tFromCity?: string;\n\tFromZip?: string;\n\tLatitude?: string;\n\tLongitude?: string;\n} & Record<`MediaUrl${number}`, string> &\n\tRecord<`MediaContentType${number}`, string>;\n\nconst isTwilioData = (data: unknown): data is TwilioData => {\n\tif (typeof data !== 'object' || data === null) {\n\t\treturn false;\n\t}\n\n\tconst { From, To, Body } = data as Record<string, unknown>;\n\n\treturn typeof From === 'string' && typeof To === 'string' && typeof Body === 'string';\n};\n\nconst MAX_FILE_SIZE = 5242880;\n\nconst notifyAgent = (userId: string | undefined, rid: string | undefined, msg: string) =>\n\tuserId &&\n\trid &&\n\tvoid api.broadcast('notify.ephemeralMessage', userId, rid, {\n\t\tmsg,\n\t});\n\nexport class Twilio implements ISMSProvider {\n\tparse(data: unknown): ServiceData {\n\t\tlet numMedia = 0;\n\n\t\tif (!isTwilioData(data)) {\n\t\t\tthrow new Error('Invalid data');\n\t\t}\n\n\t\tconst returnData: ServiceData = {\n\t\t\tfrom: data.From,\n\t\t\tto: data.To,\n\t\t\tbody: data.Body,\n\n\t\t\textra: {\n\t\t\t\ttoCountry: data.ToCountry,\n\t\t\t\ttoState: data.ToState,\n\t\t\t\ttoCity: data.ToCity,\n\t\t\t\ttoZip: data.ToZip,\n\t\t\t\tfromCountry: data.FromCountry,\n\t\t\t\tfromState: data.FromState,\n\t\t\t\tfromCity: data.FromCity,\n\t\t\t\tfromZip: data.FromZip,\n\t\t\t\tfromLatitude: data.Latitude,\n\t\t\t\tfromLongitude: data.Longitude,\n\t\t\t},\n\t\t};\n\n\t\tif (data.NumMedia) {\n\t\t\tnumMedia = parseInt(data.NumMedia, 10);\n\t\t}\n\n\t\tif (isNaN(numMedia)) {\n\t\t\tSystemLogger.error(`Error parsing NumMedia ${data.NumMedia}`);\n\t\t\treturn returnData;\n\t\t}\n\n\t\treturnData.media = [];\n\n\t\tfor (let mediaIndex = 0; mediaIndex < numMedia; mediaIndex++) {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data[`MediaUrl${mediaIndex}`];\n\t\t\tconst contentType = data[`MediaContentType${mediaIndex}`];\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType;\n\n\t\t\treturnData.media.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\tprivate async getClient(rid?: string, userId?: string) {\n\t\tconst sid = settings.get<string>('SMS_Twilio_Account_SID');\n\t\tconst token = settings.get<string>('SMS_Twilio_authToken');\n\t\tif (!sid || !token) {\n\t\t\tawait notifyAgent(userId, rid, i18n.t('SMS_Twilio_NotConfigured'));\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\treturn twilio(sid, token);\n\t\t} catch (error) {\n\t\t\tawait notifyAgent(userId, rid, i18n.t('SMS_Twilio_InvalidCredentials'));\n\t\t\tSystemLogger.error(`(Twilio) -> ${error}`);\n\t\t}\n\t}\n\n\tprivate async validateFileUpload(\n\t\textraData: {\n\t\t\tfileUpload?: { size: number; type: string; publicFilePath: string };\n\t\t\tlocation?: { coordinates: [number, number] };\n\t\t\trid?: string;\n\t\t\tuserId?: string;\n\t\t},\n\t\tlang: string,\n\t): Promise<string> {\n\t\tconst { rid, userId, fileUpload: { size, type, publicFilePath } = { size: 0, type: 'invalid' } } = extraData;\n\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;\n\t\tconst lng = user?.language || lang;\n\n\t\tlet reason;\n\t\tif (!settings.get('SMS_Twilio_FileUpload_Enabled')) {\n\t\t\treason = i18n.t('FileUpload_Disabled', { lng });\n\t\t} else if (size > MAX_FILE_SIZE) {\n\t\t\treason = i18n.t('File_exceeds_allowed_size_of_bytes', {\n\t\t\t\tsize: filesize(MAX_FILE_SIZE),\n\t\t\t\tlng,\n\t\t\t});\n\t\t} else if (!fileUploadIsValidContentType(type, settings.get('SMS_Twilio_FileUpload_MediaTypeWhiteList'))) {\n\t\t\treason = i18n.t('File_type_is_not_accepted', { lng });\n\t\t} else if (!publicFilePath) {\n\t\t\treason = i18n.t('FileUpload_NotAllowed', { lng });\n\t\t}\n\n\t\t// Check if JWT is set for public file uploads when protect_files is on\n\t\t// If it's not, notify user upload won't go to twilio\n\t\tconst protectFileUploads = settings.get('FileUpload_ProtectFiles');\n\t\tconst jwtEnabled = settings.get('FileUpload_Enable_json_web_token_for_files');\n\t\tconst isJWTKeySet = jwtEnabled && !!settings.get('FileUpload_json_web_token_secret_for_files');\n\n\t\tif (protectFileUploads && (!jwtEnabled || !isJWTKeySet)) {\n\t\t\treason = i18n.t('FileUpload_ProtectFilesEnabled_JWTNotSet', { lng });\n\t\t}\n\n\t\tif (reason) {\n\t\t\tawait notifyAgent(userId, rid, reason);\n\t\t\tSystemLogger.error(`(Twilio) -> ${reason}`);\n\t\t\treturn '';\n\t\t}\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\treturn publicFilePath!;\n\t}\n\n\tasync send(\n\t\tfromNumber: string,\n\t\ttoNumber: string,\n\t\tmessage: string,\n\t\textraData?: {\n\t\t\tfileUpload?: { size: number; type: string; publicFilePath: string };\n\t\t\tlocation?: { coordinates: [number, number] };\n\t\t\trid?: string;\n\t\t\tuserId?: string;\n\t\t},\n\t): Promise<SMSProviderResult> {\n\t\tconst { rid, userId } = extraData || {};\n\n\t\tconst client = await this.getClient(rid, userId);\n\t\tif (!client) {\n\t\t\treturn {\n\t\t\t\tisSuccess: false,\n\t\t\t\tresultMsg: 'Twilio not configured',\n\t\t\t};\n\t\t}\n\n\t\tlet body = message;\n\n\t\tlet mediaUrl;\n\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tif (extraData?.fileUpload) {\n\t\t\tconst publicFilePath = await this.validateFileUpload(extraData, defaultLanguage);\n\t\t\tif (!publicFilePath) {\n\t\t\t\treturn {\n\t\t\t\t\tisSuccess: false,\n\t\t\t\t\tresultMsg: 'File upload not allowed',\n\t\t\t\t};\n\t\t\t}\n\t\t\tmediaUrl = [publicFilePath];\n\t\t}\n\n\t\tlet persistentAction;\n\t\tif (extraData?.location) {\n\t\t\tconst [longitude, latitude] = extraData.location.coordinates;\n\t\t\tpersistentAction = `geo:${latitude},${longitude}`;\n\t\t\tbody = i18n.t('Location', { lng: defaultLanguage });\n\t\t}\n\n\t\ttry {\n\t\t\tconst result = await client.messages.create({\n\t\t\t\tto: toNumber,\n\t\t\t\tfrom: fromNumber,\n\t\t\t\tbody,\n\t\t\t\t...(mediaUrl && { mediaUrl }),\n\t\t\t\t...(persistentAction && { persistentAction }),\n\t\t\t});\n\n\t\t\tif (result.errorCode) {\n\t\t\t\tawait notifyAgent(userId, rid, result.errorMessage);\n\t\t\t\tSystemLogger.error(`(Twilio) -> ${result.errorCode}`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisSuccess: result.status !== 'failed',\n\t\t\t\tresultMsg: result.status,\n\t\t\t};\n\t\t} catch (e: any) {\n\t\t\tawait notifyAgent(userId, rid, e.message);\n\t\t\treturn {\n\t\t\t\tisSuccess: false,\n\t\t\t\tresultMsg: e.message,\n\t\t\t};\n\t\t}\n\t}\n\n\tresponse(): SMSProviderResponse {\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: '<Response></Response>',\n\t\t};\n\t}\n\n\tisRequestFromTwilio(signature: string, request: Request): boolean {\n\t\tconst authToken = settings.get<string>('SMS_Twilio_authToken');\n\t\tlet siteUrl = settings.get<string>('Site_Url');\n\t\tif (siteUrl.endsWith('/')) {\n\t\t\tsiteUrl = siteUrl.replace(/.$/, '');\n\t\t}\n\n\t\tif (!authToken || !siteUrl) {\n\t\t\tSystemLogger.error(`(Twilio) -> URL or Twilio token not configured.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst twilioUrl = request.originalUrl ? `${siteUrl}${request.originalUrl}` : `${siteUrl}/api/v1/livechat/sms-incoming/twilio`;\n\n\t\treturn twilio.validateRequest(authToken, signature, twilioUrl, request.body);\n\t}\n\n\tvalidateRequest(request: Request): boolean {\n\t\t// We're not getting original twilio requests on CI :p\n\t\tif (process.env.TEST_MODE === 'true') {\n\t\t\treturn true;\n\t\t}\n\t\tconst twilioHeader = request.headers['x-twilio-signature'] || '';\n\t\tconst twilioSignature = Array.isArray(twilioHeader) ? twilioHeader[0] : twilioHeader;\n\t\treturn this.isRequestFromTwilio(twilioSignature, request);\n\t}\n\n\terror(error: Error & { reason?: string }): SMSProviderResponse {\n\t\tlet message = '';\n\t\tif (error.reason) {\n\t\t\tmessage = `<Message>${error.reason}</Message>`;\n\t\t}\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: `<Response>${message}</Response>`,\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"5079fc1a79e9b2b920efb07f81aad0e417e58362"}
