{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/sendTranscript.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/sendTranscript.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/sendTranscript.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/sendTranscript.ts","sourceRoot":"","sources":["app/livechat/server/lib/sendTranscript.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport {\n\ttype IUser,\n\ttype MessageTypesValues,\n\ttype IOmnichannelSystemMessage,\n\ttype ILivechatVisitor,\n\tisFileAttachment,\n\tisFileImageAttachment,\n} from '@rocket.chat/core-typings';\nimport colors from '@rocket.chat/fuselage-tokens/colors';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatRooms, Messages, Uploads, Users } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport moment from 'moment-timezone';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { FileUpload } from '../../../file-upload/server';\nimport * as Mailer from '../../../mailer/server/api';\nimport { settings } from '../../../settings/server';\nimport { MessageTypes } from '../../../ui-utils/lib/MessageTypes';\nimport { getTimezone } from '../../../utils/server/lib/getTimezone';\n\nconst logger = new Logger('Livechat-SendTranscript');\n\nexport async function sendTranscript({\n\ttoken,\n\trid,\n\temail,\n\tsubject,\n\tuser,\n}: {\n\ttoken: string;\n\trid: string;\n\temail: string;\n\tsubject?: string;\n\tuser?: Pick<IUser, '_id' | 'name' | 'username' | 'utcOffset'> | null;\n}): Promise<boolean> {\n\tcheck(rid, String);\n\tcheck(email, String);\n\tlogger.debug(`Sending conversation transcript of room ${rid} to user with token ${token}`);\n\n\tconst room = await LivechatRooms.findOneById(rid);\n\n\tconst visitor = room?.v as ILivechatVisitor;\n\tif (token !== visitor?.token) {\n\t\tthrow new Error('error-invalid-visitor');\n\t}\n\n\tconst userLanguage = settings.get<string>('Language') || 'en';\n\tconst timezone = getTimezone(user);\n\tlogger.debug(`Transcript will be sent using ${timezone} as timezone`);\n\n\tif (!room) {\n\t\tthrow new Error('error-invalid-room');\n\t}\n\n\t// allow to only user to send transcripts from their own chats\n\tif (room.t !== 'l') {\n\t\tthrow new Error('error-invalid-room');\n\t}\n\n\tconst showAgentInfo = settings.get<boolean>('Livechat_show_agent_info');\n\tconst showSystemMessages = settings.get<boolean>('Livechat_transcript_show_system_messages');\n\tconst closingMessage = await Messages.findLivechatClosingMessage(rid, { projection: { ts: 1 } });\n\tconst ignoredMessageTypes: MessageTypesValues[] = [\n\t\t'livechat_navigation_history',\n\t\t'livechat_transcript_history',\n\t\t'command',\n\t\t'livechat-close',\n\t\t'livechat-started',\n\t\t'livechat_video_call',\n\t\t'omnichannel_priority_change_history',\n\t];\n\tconst acceptableImageMimeTypes = ['image/jpeg', 'image/png', 'image/jpg'];\n\tconst messages = await Messages.findVisibleByRoomIdNotContainingTypesBeforeTs(\n\t\trid,\n\t\tignoredMessageTypes,\n\t\tclosingMessage?.ts ? new Date(closingMessage.ts) : new Date(),\n\t\tshowSystemMessages,\n\t\t{\n\t\t\tsort: { ts: 1 },\n\t\t},\n\t);\n\n\tlet html = '<div> <hr>';\n\tconst InvalidFileMessage = `<div style=\"background-color: ${colors.n100}; text-align: center; border-color: ${\n\t\tcolors.n250\n\t}; border-width: 1px; border-style: solid; border-radius: 4px; padding-top: 8px; padding-bottom: 8px; margin-top: 4px;\">${i18n.t(\n\t\t'This_attachment_is_not_supported',\n\t\t{ lng: userLanguage },\n\t)}</div>`;\n\n\tfor await (const message of messages) {\n\t\tlet author;\n\t\tif (message.u._id === visitor._id) {\n\t\t\tauthor = i18n.t('You', { lng: userLanguage });\n\t\t} else {\n\t\t\tauthor = showAgentInfo ? message.u.name || message.u.username : i18n.t('Agent', { lng: userLanguage });\n\t\t}\n\n\t\tconst isSystemMessage = MessageTypes.isSystemMessage(message);\n\t\tconst messageType = isSystemMessage && MessageTypes.getType(message);\n\n\t\tlet messageContent = messageType\n\t\t\t? `<i>${i18n.t(\n\t\t\t\t\tmessageType.message,\n\t\t\t\t\tmessageType.data\n\t\t\t\t\t\t? { ...messageType.data(message), interpolation: { escapeValue: false } }\n\t\t\t\t\t\t: { interpolation: { escapeValue: false } },\n\t\t\t\t)}</i>`\n\t\t\t: message.msg;\n\n\t\tlet filesHTML = '';\n\n\t\tif (message.attachments && message.attachments?.length > 0) {\n\t\t\tmessageContent = message.attachments[0].description || '';\n\n\t\t\tfor await (const attachment of message.attachments) {\n\t\t\t\tif (!isFileAttachment(attachment)) {\n\t\t\t\t\t// ignore other types of attachments\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!isFileImageAttachment(attachment)) {\n\t\t\t\t\tfilesHTML += `<div>${attachment.title || ''}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!attachment.image_type || !acceptableImageMimeTypes.includes(attachment.image_type)) {\n\t\t\t\t\tfilesHTML += `<div>${attachment.title || ''}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Image attachment can be rendered in email body\n\t\t\t\tconst file = message.files?.find((file) => file.name === attachment.title);\n\n\t\t\t\tif (!file) {\n\t\t\t\t\tfilesHTML += `<div>${attachment.title || ''}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst uploadedFile = await Uploads.findOneById(file._id);\n\n\t\t\t\tif (!uploadedFile) {\n\t\t\t\t\tfilesHTML += `<div>${file.name}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst uploadedFileBuffer = await FileUpload.getBuffer(uploadedFile);\n\t\t\t\tfilesHTML += `<div styles=\"color: ${colors.n700}; margin-top: 4px; flex-direction: \"column\";\"><p>${file.name}</p><img src=\"data:${\n\t\t\t\t\tattachment.image_type\n\t\t\t\t};base64,${uploadedFileBuffer.toString(\n\t\t\t\t\t'base64',\n\t\t\t\t)}\" style=\"width: 400px; max-height: 240px; object-fit: contain; object-position: 0;\"/></div>`;\n\t\t\t}\n\t\t}\n\n\t\tconst datetime = moment.tz(message.ts, timezone).locale(userLanguage).format('LLL');\n\t\tconst singleMessage = `\n\t\t\t<p><strong>${author}</strong>  <em>${datetime}</em></p>\n\t\t\t<p>${messageContent}</p>\n\t\t\t<p>${filesHTML}</p>\n\t\t`;\n\t\thtml += singleMessage;\n\t}\n\n\thtml = `${html}</div>`;\n\n\tconst fromEmail = settings.get<string>('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n\tlet emailFromRegexp = '';\n\tif (fromEmail) {\n\t\temailFromRegexp = fromEmail[0];\n\t} else {\n\t\temailFromRegexp = settings.get<string>('From_Email');\n\t}\n\n\t// Some endpoints allow the caller to pass a different `subject` via parameter.\n\t// IF subject is passed, we'll use that one and treat it as an override\n\t// IF no subject is passed, we fallback to the setting `Livechat_transcript_email_subject`\n\t// IF that is not configured, we fallback to 'Transcript of your livechat conversation', which is the default value\n\t// As subject and setting value are user input, we don't translate them\n\tconst mailSubject =\n\t\tsubject ||\n\t\tsettings.get<string>('Livechat_transcript_email_subject') ||\n\t\ti18n.t('Transcript_of_your_livechat_conversation', { lng: userLanguage });\n\n\tawait Mailer.send({\n\t\tto: email,\n\t\tfrom: emailFromRegexp,\n\t\treplyTo: emailFromRegexp,\n\t\tsubject: mailSubject,\n\t\thtml,\n\t});\n\n\tsetImmediate(() => {\n\t\tvoid callbacks.run('livechat.sendTranscript', messages, email);\n\t});\n\n\tconst requestData: IOmnichannelSystemMessage['requestData'] = {\n\t\ttype: 'user',\n\t\tvisitor,\n\t\tuser,\n\t};\n\n\tif (!user?.username) {\n\t\tconst cat = await Users.findOneById('rocket.cat', { projection: { _id: 1, username: 1, name: 1 } });\n\t\tif (cat) {\n\t\t\trequestData.user = cat;\n\t\t\trequestData.type = 'visitor';\n\t\t}\n\t}\n\n\tif (!requestData.user) {\n\t\tlogger.error('rocket.cat user not found');\n\t\tthrow new Error('No user provided and rocket.cat not found');\n\t}\n\n\tawait Message.saveSystemMessage<IOmnichannelSystemMessage>('livechat_transcript_history', room._id, '', requestData.user, {\n\t\trequestData,\n\t});\n\n\treturn true;\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/sendTranscript.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/sendTranscript.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/sendTranscript.ts","sourceRoot":"","sources":["app/livechat/server/lib/sendTranscript.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport {\n\ttype IUser,\n\ttype MessageTypesValues,\n\ttype IOmnichannelSystemMessage,\n\ttype ILivechatVisitor,\n\tisFileAttachment,\n\tisFileImageAttachment,\n} from '@rocket.chat/core-typings';\nimport colors from '@rocket.chat/fuselage-tokens/colors';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatRooms, Messages, Uploads, Users } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport moment from 'moment-timezone';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { FileUpload } from '../../../file-upload/server';\nimport * as Mailer from '../../../mailer/server/api';\nimport { settings } from '../../../settings/server';\nimport { MessageTypes } from '../../../ui-utils/lib/MessageTypes';\nimport { getTimezone } from '../../../utils/server/lib/getTimezone';\n\nconst logger = new Logger('Livechat-SendTranscript');\n\nexport async function sendTranscript({\n\ttoken,\n\trid,\n\temail,\n\tsubject,\n\tuser,\n}: {\n\ttoken: string;\n\trid: string;\n\temail: string;\n\tsubject?: string;\n\tuser?: Pick<IUser, '_id' | 'name' | 'username' | 'utcOffset'> | null;\n}): Promise<boolean> {\n\tcheck(rid, String);\n\tcheck(email, String);\n\tlogger.debug(`Sending conversation transcript of room ${rid} to user with token ${token}`);\n\n\tconst room = await LivechatRooms.findOneById(rid);\n\n\tconst visitor = room?.v as ILivechatVisitor;\n\tif (token !== visitor?.token) {\n\t\tthrow new Error('error-invalid-visitor');\n\t}\n\n\tconst userLanguage = settings.get<string>('Language') || 'en';\n\tconst timezone = getTimezone(user);\n\tlogger.debug(`Transcript will be sent using ${timezone} as timezone`);\n\n\tif (!room) {\n\t\tthrow new Error('error-invalid-room');\n\t}\n\n\t// allow to only user to send transcripts from their own chats\n\tif (room.t !== 'l') {\n\t\tthrow new Error('error-invalid-room');\n\t}\n\n\tconst showAgentInfo = settings.get<boolean>('Livechat_show_agent_info');\n\tconst showSystemMessages = settings.get<boolean>('Livechat_transcript_show_system_messages');\n\tconst closingMessage = await Messages.findLivechatClosingMessage(rid, { projection: { ts: 1 } });\n\tconst ignoredMessageTypes: MessageTypesValues[] = [\n\t\t'livechat_navigation_history',\n\t\t'livechat_transcript_history',\n\t\t'command',\n\t\t'livechat-close',\n\t\t'livechat-started',\n\t\t'livechat_video_call',\n\t\t'omnichannel_priority_change_history',\n\t];\n\tconst acceptableImageMimeTypes = ['image/jpeg', 'image/png', 'image/jpg'];\n\tconst messages = await Messages.findVisibleByRoomIdNotContainingTypesBeforeTs(\n\t\trid,\n\t\tignoredMessageTypes,\n\t\tclosingMessage?.ts ? new Date(closingMessage.ts) : new Date(),\n\t\tshowSystemMessages,\n\t\t{\n\t\t\tsort: { ts: 1 },\n\t\t},\n\t);\n\n\tlet html = '<div> <hr>';\n\tconst InvalidFileMessage = `<div style=\"background-color: ${colors.n100}; text-align: center; border-color: ${\n\t\tcolors.n250\n\t}; border-width: 1px; border-style: solid; border-radius: 4px; padding-top: 8px; padding-bottom: 8px; margin-top: 4px;\">${i18n.t(\n\t\t'This_attachment_is_not_supported',\n\t\t{ lng: userLanguage },\n\t)}</div>`;\n\n\tfor await (const message of messages) {\n\t\tlet author;\n\t\tif (message.u._id === visitor._id) {\n\t\t\tauthor = i18n.t('You', { lng: userLanguage });\n\t\t} else {\n\t\t\tauthor = showAgentInfo ? message.u.name || message.u.username : i18n.t('Agent', { lng: userLanguage });\n\t\t}\n\n\t\tconst isSystemMessage = MessageTypes.isSystemMessage(message);\n\t\tconst messageType = isSystemMessage && MessageTypes.getType(message);\n\n\t\tlet messageContent = messageType\n\t\t\t? `<i>${i18n.t(\n\t\t\t\t\tmessageType.message,\n\t\t\t\t\tmessageType.data\n\t\t\t\t\t\t? { ...messageType.data(message), interpolation: { escapeValue: false } }\n\t\t\t\t\t\t: { interpolation: { escapeValue: false } },\n\t\t\t\t)}</i>`\n\t\t\t: message.msg;\n\n\t\tlet filesHTML = '';\n\n\t\tif (message.attachments && message.attachments?.length > 0) {\n\t\t\tmessageContent = message.attachments[0].description || '';\n\n\t\t\tfor await (const attachment of message.attachments) {\n\t\t\t\tif (!isFileAttachment(attachment)) {\n\t\t\t\t\t// ignore other types of attachments\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!isFileImageAttachment(attachment)) {\n\t\t\t\t\tfilesHTML += `<div>${attachment.title || ''}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!attachment.image_type || !acceptableImageMimeTypes.includes(attachment.image_type)) {\n\t\t\t\t\tfilesHTML += `<div>${attachment.title || ''}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Image attachment can be rendered in email body\n\t\t\t\tconst file = message.files?.find((file) => file.name === attachment.title);\n\n\t\t\t\tif (!file) {\n\t\t\t\t\tfilesHTML += `<div>${attachment.title || ''}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst uploadedFile = await Uploads.findOneById(file._id);\n\n\t\t\t\tif (!uploadedFile) {\n\t\t\t\t\tfilesHTML += `<div>${file.name}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst uploadedFileBuffer = await FileUpload.getBuffer(uploadedFile);\n\t\t\t\tfilesHTML += `<div styles=\"color: ${colors.n700}; margin-top: 4px; flex-direction: \"column\";\"><p>${file.name}</p><img src=\"data:${\n\t\t\t\t\tattachment.image_type\n\t\t\t\t};base64,${uploadedFileBuffer.toString(\n\t\t\t\t\t'base64',\n\t\t\t\t)}\" style=\"width: 400px; max-height: 240px; object-fit: contain; object-position: 0;\"/></div>`;\n\t\t\t}\n\t\t}\n\n\t\tconst datetime = moment.tz(message.ts, timezone).locale(userLanguage).format('LLL');\n\t\tconst singleMessage = `\n\t\t\t<p><strong>${author}</strong>  <em>${datetime}</em></p>\n\t\t\t<p>${messageContent}</p>\n\t\t\t<p>${filesHTML}</p>\n\t\t`;\n\t\thtml += singleMessage;\n\t}\n\n\thtml = `${html}</div>`;\n\n\tconst fromEmail = settings.get<string>('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n\tlet emailFromRegexp = '';\n\tif (fromEmail) {\n\t\temailFromRegexp = fromEmail[0];\n\t} else {\n\t\temailFromRegexp = settings.get<string>('From_Email');\n\t}\n\n\t// Some endpoints allow the caller to pass a different `subject` via parameter.\n\t// IF subject is passed, we'll use that one and treat it as an override\n\t// IF no subject is passed, we fallback to the setting `Livechat_transcript_email_subject`\n\t// IF that is not configured, we fallback to 'Transcript of your livechat conversation', which is the default value\n\t// As subject and setting value are user input, we don't translate them\n\tconst mailSubject =\n\t\tsubject ||\n\t\tsettings.get<string>('Livechat_transcript_email_subject') ||\n\t\ti18n.t('Transcript_of_your_livechat_conversation', { lng: userLanguage });\n\n\tawait Mailer.send({\n\t\tto: email,\n\t\tfrom: emailFromRegexp,\n\t\treplyTo: emailFromRegexp,\n\t\tsubject: mailSubject,\n\t\thtml,\n\t});\n\n\tsetImmediate(() => {\n\t\tvoid callbacks.run('livechat.sendTranscript', messages, email);\n\t});\n\n\tconst requestData: IOmnichannelSystemMessage['requestData'] = {\n\t\ttype: 'user',\n\t\tvisitor,\n\t\tuser,\n\t};\n\n\tif (!user?.username) {\n\t\tconst cat = await Users.findOneById('rocket.cat', { projection: { _id: 1, username: 1, name: 1 } });\n\t\tif (cat) {\n\t\t\trequestData.user = cat;\n\t\t\trequestData.type = 'visitor';\n\t\t}\n\t}\n\n\tif (!requestData.user) {\n\t\tlogger.error('rocket.cat user not found');\n\t\tthrow new Error('No user provided and rocket.cat not found');\n\t}\n\n\tawait Message.saveSystemMessage<IOmnichannelSystemMessage>('livechat_transcript_history', room._id, '', requestData.user, {\n\t\trequestData,\n\t});\n\n\treturn true;\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      sendTranscript: () => sendTranscript\n    });\n    let Message;\n    module.link(\"@rocket.chat/core-services\", {\n      Message(v) {\n        Message = v;\n      }\n    }, 0);\n    let isFileAttachment, isFileImageAttachment;\n    module.link(\"@rocket.chat/core-typings\", {\n      isFileAttachment(v) {\n        isFileAttachment = v;\n      },\n      isFileImageAttachment(v) {\n        isFileImageAttachment = v;\n      }\n    }, 1);\n    let colors;\n    module.link(\"@rocket.chat/fuselage-tokens/colors\", {\n      default(v) {\n        colors = v;\n      }\n    }, 2);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 3);\n    let LivechatRooms, Messages, Uploads, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      Messages(v) {\n        Messages = v;\n      },\n      Uploads(v) {\n        Uploads = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 4);\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 5);\n    let moment;\n    module.link(\"moment-timezone\", {\n      default(v) {\n        moment = v;\n      }\n    }, 6);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 7);\n    let i18n;\n    module.link(\"../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 8);\n    let FileUpload;\n    module.link(\"../../../file-upload/server\", {\n      FileUpload(v) {\n        FileUpload = v;\n      }\n    }, 9);\n    let Mailer;\n    module.link(\"../../../mailer/server/api\", {\n      \"*\"(v) {\n        Mailer = v;\n      }\n    }, 10);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 11);\n    let MessageTypes;\n    module.link(\"../../../ui-utils/lib/MessageTypes\", {\n      MessageTypes(v) {\n        MessageTypes = v;\n      }\n    }, 12);\n    let getTimezone;\n    module.link(\"../../../utils/server/lib/getTimezone\", {\n      getTimezone(v) {\n        getTimezone = v;\n      }\n    }, 13);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const logger = new Logger('Livechat-SendTranscript');\n    async function sendTranscript(_ref) {\n      let {\n        token,\n        rid,\n        email,\n        subject,\n        user\n      } = _ref;\n      check(rid, String);\n      check(email, String);\n      logger.debug(\"Sending conversation transcript of room \".concat(rid, \" to user with token \").concat(token));\n      const room = await LivechatRooms.findOneById(rid);\n      const visitor = room === null || room === void 0 ? void 0 : room.v;\n      if (token !== (visitor === null || visitor === void 0 ? void 0 : visitor.token)) {\n        throw new Error('error-invalid-visitor');\n      }\n      const userLanguage = settings.get('Language') || 'en';\n      const timezone = getTimezone(user);\n      logger.debug(\"Transcript will be sent using \".concat(timezone, \" as timezone\"));\n      if (!room) {\n        throw new Error('error-invalid-room');\n      }\n      // allow to only user to send transcripts from their own chats\n      if (room.t !== 'l') {\n        throw new Error('error-invalid-room');\n      }\n      const showAgentInfo = settings.get('Livechat_show_agent_info');\n      const showSystemMessages = settings.get('Livechat_transcript_show_system_messages');\n      const closingMessage = await Messages.findLivechatClosingMessage(rid, {\n        projection: {\n          ts: 1\n        }\n      });\n      const ignoredMessageTypes = ['livechat_navigation_history', 'livechat_transcript_history', 'command', 'livechat-close', 'livechat-started', 'livechat_video_call', 'omnichannel_priority_change_history'];\n      const acceptableImageMimeTypes = ['image/jpeg', 'image/png', 'image/jpg'];\n      const messages = await Messages.findVisibleByRoomIdNotContainingTypesBeforeTs(rid, ignoredMessageTypes, closingMessage !== null && closingMessage !== void 0 && closingMessage.ts ? new Date(closingMessage.ts) : new Date(), showSystemMessages, {\n        sort: {\n          ts: 1\n        }\n      });\n      let html = '<div> <hr>';\n      const InvalidFileMessage = \"<div style=\\\"background-color: \".concat(colors.n100, \"; text-align: center; border-color: \").concat(colors.n250, \"; border-width: 1px; border-style: solid; border-radius: 4px; padding-top: 8px; padding-bottom: 8px; margin-top: 4px;\\\">\").concat(i18n.t('This_attachment_is_not_supported', {\n        lng: userLanguage\n      }), \"</div>\");\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(messages), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const message = _step.value;\n          {\n            var _message$attachments;\n            let author;\n            if (message.u._id === visitor._id) {\n              author = i18n.t('You', {\n                lng: userLanguage\n              });\n            } else {\n              author = showAgentInfo ? message.u.name || message.u.username : i18n.t('Agent', {\n                lng: userLanguage\n              });\n            }\n            const isSystemMessage = MessageTypes.isSystemMessage(message);\n            const messageType = isSystemMessage && MessageTypes.getType(message);\n            let messageContent = messageType ? \"<i>\".concat(i18n.t(messageType.message, messageType.data ? _objectSpread(_objectSpread({}, messageType.data(message)), {}, {\n              interpolation: {\n                escapeValue: false\n              }\n            }) : {\n              interpolation: {\n                escapeValue: false\n              }\n            }), \"</i>\") : message.msg;\n            let filesHTML = '';\n            if (message.attachments && ((_message$attachments = message.attachments) === null || _message$attachments === void 0 ? void 0 : _message$attachments.length) > 0) {\n              messageContent = message.attachments[0].description || '';\n              var _iteratorAbruptCompletion2 = false;\n              var _didIteratorError2 = false;\n              var _iteratorError2;\n              try {\n                for (var _iterator2 = _asyncIterator(message.attachments), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n                  const attachment = _step2.value;\n                  {\n                    var _message$files;\n                    if (!isFileAttachment(attachment)) {\n                      // ignore other types of attachments\n                      continue;\n                    }\n                    if (!isFileImageAttachment(attachment)) {\n                      filesHTML += \"<div>\".concat(attachment.title || '').concat(InvalidFileMessage, \"</div>\");\n                      continue;\n                    }\n                    if (!attachment.image_type || !acceptableImageMimeTypes.includes(attachment.image_type)) {\n                      filesHTML += \"<div>\".concat(attachment.title || '').concat(InvalidFileMessage, \"</div>\");\n                      continue;\n                    }\n                    // Image attachment can be rendered in email body\n                    const file = (_message$files = message.files) === null || _message$files === void 0 ? void 0 : _message$files.find(file => file.name === attachment.title);\n                    if (!file) {\n                      filesHTML += \"<div>\".concat(attachment.title || '').concat(InvalidFileMessage, \"</div>\");\n                      continue;\n                    }\n                    const uploadedFile = await Uploads.findOneById(file._id);\n                    if (!uploadedFile) {\n                      filesHTML += \"<div>\".concat(file.name).concat(InvalidFileMessage, \"</div>\");\n                      continue;\n                    }\n                    const uploadedFileBuffer = await FileUpload.getBuffer(uploadedFile);\n                    filesHTML += \"<div styles=\\\"color: \".concat(colors.n700, \"; margin-top: 4px; flex-direction: \\\"column\\\";\\\"><p>\").concat(file.name, \"</p><img src=\\\"data:\").concat(attachment.image_type, \";base64,\").concat(uploadedFileBuffer.toString('base64'), \"\\\" style=\\\"width: 400px; max-height: 240px; object-fit: contain; object-position: 0;\\\"/></div>\");\n                  }\n                }\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n                    await _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n            }\n            const datetime = moment.tz(message.ts, timezone).locale(userLanguage).format('LLL');\n            const singleMessage = \"\\n\\t\\t\\t<p><strong>\".concat(author, \"</strong>  <em>\").concat(datetime, \"</em></p>\\n\\t\\t\\t<p>\").concat(messageContent, \"</p>\\n\\t\\t\\t<p>\").concat(filesHTML, \"</p>\\n\\t\\t\");\n            html += singleMessage;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      html = \"\".concat(html, \"</div>\");\n      const fromEmail = settings.get('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n      let emailFromRegexp = '';\n      if (fromEmail) {\n        emailFromRegexp = fromEmail[0];\n      } else {\n        emailFromRegexp = settings.get('From_Email');\n      }\n      // Some endpoints allow the caller to pass a different `subject` via parameter.\n      // IF subject is passed, we'll use that one and treat it as an override\n      // IF no subject is passed, we fallback to the setting `Livechat_transcript_email_subject`\n      // IF that is not configured, we fallback to 'Transcript of your livechat conversation', which is the default value\n      // As subject and setting value are user input, we don't translate them\n      const mailSubject = subject || settings.get('Livechat_transcript_email_subject') || i18n.t('Transcript_of_your_livechat_conversation', {\n        lng: userLanguage\n      });\n      await Mailer.send({\n        to: email,\n        from: emailFromRegexp,\n        replyTo: emailFromRegexp,\n        subject: mailSubject,\n        html\n      });\n      setImmediate(() => {\n        void callbacks.run('livechat.sendTranscript', messages, email);\n      });\n      const requestData = {\n        type: 'user',\n        visitor,\n        user\n      };\n      if (!(user !== null && user !== void 0 && user.username)) {\n        const cat = await Users.findOneById('rocket.cat', {\n          projection: {\n            _id: 1,\n            username: 1,\n            name: 1\n          }\n        });\n        if (cat) {\n          requestData.user = cat;\n          requestData.type = 'visitor';\n        }\n      }\n      if (!requestData.user) {\n        logger.error('rocket.cat user not found');\n        throw new Error('No user provided and rocket.cat not found');\n      }\n      await Message.saveSystemMessage('livechat_transcript_history', room._id, '', requestData.user, {\n        requestData\n      });\n      return true;\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","sendTranscript","Message","isFileAttachment","isFileImageAttachment","colors","Logger","LivechatRooms","Messages","Uploads","Users","check","moment","callbacks","i18n","FileUpload","Mailer","*","settings","MessageTypes","getTimezone","__reifyWaitForDeps__","logger","_ref","token","rid","email","subject","user","String","debug","concat","room","findOneById","visitor","Error","userLanguage","get","timezone","t","showAgentInfo","showSystemMessages","closingMessage","findLivechatClosingMessage","projection","ts","ignoredMessageTypes","acceptableImageMimeTypes","messages","findVisibleByRoomIdNotContainingTypesBeforeTs","Date","sort","html","InvalidFileMessage","n100","n250","lng","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","message","value","_message$attachments","author","u","_id","name","username","isSystemMessage","messageType","getType","messageContent","data","interpolation","escapeValue","msg","filesHTML","attachments","length","description","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","attachment","_message$files","title","image_type","includes","file","files","find","uploadedFile","uploadedFileBuffer","getBuffer","n700","toString","err","return","datetime","tz","locale","format","singleMessage","fromEmail","match","emailFromRegexp","mailSubject","send","to","from","replyTo","setImmediate","run","requestData","type","cat","error","saveSystemMessage","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/lib/sendTranscript.ts"],"sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport {\n\ttype IUser,\n\ttype MessageTypesValues,\n\ttype IOmnichannelSystemMessage,\n\ttype ILivechatVisitor,\n\tisFileAttachment,\n\tisFileImageAttachment,\n} from '@rocket.chat/core-typings';\nimport colors from '@rocket.chat/fuselage-tokens/colors';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatRooms, Messages, Uploads, Users } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport moment from 'moment-timezone';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { FileUpload } from '../../../file-upload/server';\nimport * as Mailer from '../../../mailer/server/api';\nimport { settings } from '../../../settings/server';\nimport { MessageTypes } from '../../../ui-utils/lib/MessageTypes';\nimport { getTimezone } from '../../../utils/server/lib/getTimezone';\n\nconst logger = new Logger('Livechat-SendTranscript');\n\nexport async function sendTranscript({\n\ttoken,\n\trid,\n\temail,\n\tsubject,\n\tuser,\n}: {\n\ttoken: string;\n\trid: string;\n\temail: string;\n\tsubject?: string;\n\tuser?: Pick<IUser, '_id' | 'name' | 'username' | 'utcOffset'> | null;\n}): Promise<boolean> {\n\tcheck(rid, String);\n\tcheck(email, String);\n\tlogger.debug(`Sending conversation transcript of room ${rid} to user with token ${token}`);\n\n\tconst room = await LivechatRooms.findOneById(rid);\n\n\tconst visitor = room?.v as ILivechatVisitor;\n\tif (token !== visitor?.token) {\n\t\tthrow new Error('error-invalid-visitor');\n\t}\n\n\tconst userLanguage = settings.get<string>('Language') || 'en';\n\tconst timezone = getTimezone(user);\n\tlogger.debug(`Transcript will be sent using ${timezone} as timezone`);\n\n\tif (!room) {\n\t\tthrow new Error('error-invalid-room');\n\t}\n\n\t// allow to only user to send transcripts from their own chats\n\tif (room.t !== 'l') {\n\t\tthrow new Error('error-invalid-room');\n\t}\n\n\tconst showAgentInfo = settings.get<boolean>('Livechat_show_agent_info');\n\tconst showSystemMessages = settings.get<boolean>('Livechat_transcript_show_system_messages');\n\tconst closingMessage = await Messages.findLivechatClosingMessage(rid, { projection: { ts: 1 } });\n\tconst ignoredMessageTypes: MessageTypesValues[] = [\n\t\t'livechat_navigation_history',\n\t\t'livechat_transcript_history',\n\t\t'command',\n\t\t'livechat-close',\n\t\t'livechat-started',\n\t\t'livechat_video_call',\n\t\t'omnichannel_priority_change_history',\n\t];\n\tconst acceptableImageMimeTypes = ['image/jpeg', 'image/png', 'image/jpg'];\n\tconst messages = await Messages.findVisibleByRoomIdNotContainingTypesBeforeTs(\n\t\trid,\n\t\tignoredMessageTypes,\n\t\tclosingMessage?.ts ? new Date(closingMessage.ts) : new Date(),\n\t\tshowSystemMessages,\n\t\t{\n\t\t\tsort: { ts: 1 },\n\t\t},\n\t);\n\n\tlet html = '<div> <hr>';\n\tconst InvalidFileMessage = `<div style=\"background-color: ${colors.n100}; text-align: center; border-color: ${\n\t\tcolors.n250\n\t}; border-width: 1px; border-style: solid; border-radius: 4px; padding-top: 8px; padding-bottom: 8px; margin-top: 4px;\">${i18n.t(\n\t\t'This_attachment_is_not_supported',\n\t\t{ lng: userLanguage },\n\t)}</div>`;\n\n\tfor await (const message of messages) {\n\t\tlet author;\n\t\tif (message.u._id === visitor._id) {\n\t\t\tauthor = i18n.t('You', { lng: userLanguage });\n\t\t} else {\n\t\t\tauthor = showAgentInfo ? message.u.name || message.u.username : i18n.t('Agent', { lng: userLanguage });\n\t\t}\n\n\t\tconst isSystemMessage = MessageTypes.isSystemMessage(message);\n\t\tconst messageType = isSystemMessage && MessageTypes.getType(message);\n\n\t\tlet messageContent = messageType\n\t\t\t? `<i>${i18n.t(\n\t\t\t\t\tmessageType.message,\n\t\t\t\t\tmessageType.data\n\t\t\t\t\t\t? { ...messageType.data(message), interpolation: { escapeValue: false } }\n\t\t\t\t\t\t: { interpolation: { escapeValue: false } },\n\t\t\t\t)}</i>`\n\t\t\t: message.msg;\n\n\t\tlet filesHTML = '';\n\n\t\tif (message.attachments && message.attachments?.length > 0) {\n\t\t\tmessageContent = message.attachments[0].description || '';\n\n\t\t\tfor await (const attachment of message.attachments) {\n\t\t\t\tif (!isFileAttachment(attachment)) {\n\t\t\t\t\t// ignore other types of attachments\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!isFileImageAttachment(attachment)) {\n\t\t\t\t\tfilesHTML += `<div>${attachment.title || ''}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!attachment.image_type || !acceptableImageMimeTypes.includes(attachment.image_type)) {\n\t\t\t\t\tfilesHTML += `<div>${attachment.title || ''}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Image attachment can be rendered in email body\n\t\t\t\tconst file = message.files?.find((file) => file.name === attachment.title);\n\n\t\t\t\tif (!file) {\n\t\t\t\t\tfilesHTML += `<div>${attachment.title || ''}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst uploadedFile = await Uploads.findOneById(file._id);\n\n\t\t\t\tif (!uploadedFile) {\n\t\t\t\t\tfilesHTML += `<div>${file.name}${InvalidFileMessage}</div>`;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst uploadedFileBuffer = await FileUpload.getBuffer(uploadedFile);\n\t\t\t\tfilesHTML += `<div styles=\"color: ${colors.n700}; margin-top: 4px; flex-direction: \"column\";\"><p>${file.name}</p><img src=\"data:${\n\t\t\t\t\tattachment.image_type\n\t\t\t\t};base64,${uploadedFileBuffer.toString(\n\t\t\t\t\t'base64',\n\t\t\t\t)}\" style=\"width: 400px; max-height: 240px; object-fit: contain; object-position: 0;\"/></div>`;\n\t\t\t}\n\t\t}\n\n\t\tconst datetime = moment.tz(message.ts, timezone).locale(userLanguage).format('LLL');\n\t\tconst singleMessage = `\n\t\t\t<p><strong>${author}</strong>  <em>${datetime}</em></p>\n\t\t\t<p>${messageContent}</p>\n\t\t\t<p>${filesHTML}</p>\n\t\t`;\n\t\thtml += singleMessage;\n\t}\n\n\thtml = `${html}</div>`;\n\n\tconst fromEmail = settings.get<string>('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n\tlet emailFromRegexp = '';\n\tif (fromEmail) {\n\t\temailFromRegexp = fromEmail[0];\n\t} else {\n\t\temailFromRegexp = settings.get<string>('From_Email');\n\t}\n\n\t// Some endpoints allow the caller to pass a different `subject` via parameter.\n\t// IF subject is passed, we'll use that one and treat it as an override\n\t// IF no subject is passed, we fallback to the setting `Livechat_transcript_email_subject`\n\t// IF that is not configured, we fallback to 'Transcript of your livechat conversation', which is the default value\n\t// As subject and setting value are user input, we don't translate them\n\tconst mailSubject =\n\t\tsubject ||\n\t\tsettings.get<string>('Livechat_transcript_email_subject') ||\n\t\ti18n.t('Transcript_of_your_livechat_conversation', { lng: userLanguage });\n\n\tawait Mailer.send({\n\t\tto: email,\n\t\tfrom: emailFromRegexp,\n\t\treplyTo: emailFromRegexp,\n\t\tsubject: mailSubject,\n\t\thtml,\n\t});\n\n\tsetImmediate(() => {\n\t\tvoid callbacks.run('livechat.sendTranscript', messages, email);\n\t});\n\n\tconst requestData: IOmnichannelSystemMessage['requestData'] = {\n\t\ttype: 'user',\n\t\tvisitor,\n\t\tuser,\n\t};\n\n\tif (!user?.username) {\n\t\tconst cat = await Users.findOneById('rocket.cat', { projection: { _id: 1, username: 1, name: 1 } });\n\t\tif (cat) {\n\t\t\trequestData.user = cat;\n\t\t\trequestData.type = 'visitor';\n\t\t}\n\t}\n\n\tif (!requestData.user) {\n\t\tlogger.error('rocket.cat user not found');\n\t\tthrow new Error('No user provided and rocket.cat not found');\n\t}\n\n\tawait Message.saveSystemMessage<IOmnichannelSystemMessage>('livechat_transcript_history', room._id, '', requestData.user, {\n\t\trequestData,\n\t});\n\n\treturn true;\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"f0174646a86d53a405d46524ad7b40438a933c65"}
