{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/scheduler.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/bridges/scheduler.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/scheduler.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/scheduler.ts","sourceRoot":"","sources":["app/apps/server/bridges/scheduler.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Job } from '@rocket.chat/agenda';\nimport { Agenda } from '@rocket.chat/agenda';\nimport type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { IProcessor, IOnetimeSchedule, IRecurringSchedule, IJobContext } from '@rocket.chat/apps-engine/definition/scheduler';\nimport { StartupType } from '@rocket.chat/apps-engine/definition/scheduler';\nimport { SchedulerBridge } from '@rocket.chat/apps-engine/server/bridges/SchedulerBridge';\nimport { ObjectID } from 'bson';\nimport { MongoInternals } from 'meteor/mongo';\n\nfunction _callProcessor(processor: IProcessor['processor']): (job: Job) => Promise<void> {\n\treturn (job) => {\n\t\tconst data = job?.attrs?.data || {};\n\n\t\t// This field is for internal use, no need to leak to app processor\n\t\tdelete (data as any).appId;\n\n\t\tdata.jobId = job.attrs._id.toString();\n\n\t\treturn (processor as (jobContext: IJobContext) => Promise<void>)(data).then(async () => {\n\t\t\t// ensure the 'normal' ('onetime' in our vocab) type job is removed after it is run\n\t\t\t// as Agenda does not remove it from the DB\n\t\t\tif (job.attrs.type === 'normal') {\n\t\t\t\tawait job.agenda.cancel({ _id: job.attrs._id });\n\t\t\t}\n\t\t});\n\t};\n}\n\n/**\n * Provides the Apps Engine with task scheduling capabilities.\n * It uses {@link agenda:github.com/agenda/agenda} as backend\n */\nexport class AppSchedulerBridge extends SchedulerBridge {\n\tprivate isConnected: boolean;\n\n\tprivate scheduler: Agenda;\n\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t\tthis.scheduler = new Agenda({\n\t\t\tmongo: (MongoInternals.defaultRemoteCollectionDriver().mongo as any).client.db(),\n\t\t\tdb: { collection: 'rocketchat_apps_scheduler' },\n\t\t\t// this ensures the same job doesn't get executed multiple times in a cluster\n\t\t\tdefaultConcurrency: 1,\n\t\t});\n\t\tthis.isConnected = false;\n\t}\n\n\t/**\n\t * Register processors that can be scheduled to run\n\t *\n\t * @param processors An array of processors\n\t * @param appId\n\t *\n\t * @returns List of task ids run at startup, or void no startup run is set\n\t */\n\tprotected async registerProcessors(processors: Array<IProcessor> = [], appId: string): Promise<void | Array<string>> {\n\t\tconst runAfterRegister: Promise<string>[] = [];\n\t\tthis.orch.debugLog(`The App ${appId} is registering job processors`, processors);\n\t\tprocessors.forEach(({ id, processor, startupSetting }: IProcessor) => {\n\t\t\tthis.scheduler.define(id, _callProcessor(processor));\n\n\t\t\tif (!startupSetting) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (startupSetting.type) {\n\t\t\t\tcase StartupType.ONETIME:\n\t\t\t\t\trunAfterRegister.push(\n\t\t\t\t\t\tthis.scheduleOnceAfterRegister({ id, when: startupSetting.when, data: startupSetting.data }, appId) as Promise<string>,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase StartupType.RECURRING:\n\t\t\t\t\trunAfterRegister.push(\n\t\t\t\t\t\tthis.scheduleRecurring(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tinterval: startupSetting.interval,\n\t\t\t\t\t\t\t\tskipImmediate: startupSetting.skipImmediate,\n\t\t\t\t\t\t\t\tdata: startupSetting.data,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tappId,\n\t\t\t\t\t\t) as Promise<string>,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.orch\n\t\t\t\t\t\t.getRocketChatLogger()\n\t\t\t\t\t\t.error(`Invalid startup setting type (${String((startupSetting as any).type)}) for the processor ${id}`);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tif (runAfterRegister.length) {\n\t\t\treturn Promise.all(runAfterRegister) as Promise<Array<string>>;\n\t\t}\n\t}\n\n\t/**\n\t * Schedules a registered processor to run _once_.\n\t */\n\tprotected async scheduleOnce({ id, when, data }: IOnetimeSchedule, appId: string): Promise<void | string> {\n\t\tthis.orch.debugLog(`The App ${appId} is scheduling an onetime job (processor ${id})`);\n\t\ttry {\n\t\t\tawait this.startScheduler();\n\t\t\tconst job = await this.scheduler.schedule(when, id, this.decorateJobData(data, appId));\n\t\t\treturn job.attrs._id.toString();\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\tprivate async scheduleOnceAfterRegister(job: IOnetimeSchedule, appId: string): Promise<void | string> {\n\t\tconst scheduledJobs = await this.scheduler.jobs({ name: job.id, type: 'normal' }, {}, 1);\n\t\tif (!scheduledJobs.length) {\n\t\t\treturn this.scheduleOnce(job, appId);\n\t\t}\n\t}\n\n\t/**\n\t * Schedules a registered processor to run recurrently according to a given interval.\n\t *\n\t * @param {Object} job\n\t * @param {string} job.id The processor's id\n\t * @param {string} job.interval When the processor will be re executed\n\t * @param {boolean} job.skipImmediate=false Whether to let the first iteration to execute as soon as the task is registered\n\t * @param {Object} [job.data] An optional object that is passed to the processor\n\t * @param {string} appId\n\t *\n\t * @returns {string} taskid\n\t */\n\tprotected async scheduleRecurring(\n\t\t{ id, interval, skipImmediate = false, data }: IRecurringSchedule,\n\t\tappId: string,\n\t): Promise<void | string> {\n\t\tthis.orch.debugLog(`The App ${appId} is scheduling a recurring job (processor ${id})`);\n\t\ttry {\n\t\t\tawait this.startScheduler();\n\t\t\tconst job = await this.scheduler.every(interval, id, this.decorateJobData(data, appId), {\n\t\t\t\tskipImmediate,\n\t\t\t});\n\t\t\treturn job.attrs._id.toString();\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\t/**\n\t * Cancels a running job given its jobId\n\t *\n\t * @param {string} jobId\n\t * @param {string} appId\n\t *\n\t * @returns Promise<void>\n\t */\n\tprotected async cancelJob(jobId: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is canceling a job`, jobId);\n\t\tawait this.startScheduler();\n\n\t\tlet cancelQuery;\n\t\ttry {\n\t\t\tcancelQuery = { _id: new ObjectID(jobId.split('_')[0]) };\n\t\t} catch (jobDocIdError) {\n\t\t\t// it is not a valid objectid, so it won't try to cancel by document id\n\t\t\tcancelQuery = { name: jobId };\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.scheduler.cancel(cancelQuery);\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\t/**\n\t * Cancels all the running jobs from the app\n\t *\n\t * @param {string} appId\n\t *\n\t * @returns Promise<void>\n\t */\n\tprotected async cancelAllJobs(appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`Canceling all jobs of App ${appId}`);\n\t\tawait this.startScheduler();\n\t\tconst matcher = new RegExp(`_${appId}$`);\n\t\ttry {\n\t\t\tawait this.scheduler.cancel({ name: { $regex: matcher } });\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\tpublic async startScheduler(): Promise<void> {\n\t\tif (!this.isConnected) {\n\t\t\tawait this.scheduler.start();\n\t\t\tthis.isConnected = true;\n\t\t}\n\t}\n\n\tprivate decorateJobData(jobData: object | undefined, appId: string): object {\n\t\treturn Object.assign({}, jobData, { appId });\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/scheduler.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/bridges/scheduler.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/scheduler.ts","sourceRoot":"","sources":["app/apps/server/bridges/scheduler.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Job } from '@rocket.chat/agenda';\nimport { Agenda } from '@rocket.chat/agenda';\nimport type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { IProcessor, IOnetimeSchedule, IRecurringSchedule, IJobContext } from '@rocket.chat/apps-engine/definition/scheduler';\nimport { StartupType } from '@rocket.chat/apps-engine/definition/scheduler';\nimport { SchedulerBridge } from '@rocket.chat/apps-engine/server/bridges/SchedulerBridge';\nimport { ObjectID } from 'bson';\nimport { MongoInternals } from 'meteor/mongo';\n\nfunction _callProcessor(processor: IProcessor['processor']): (job: Job) => Promise<void> {\n\treturn (job) => {\n\t\tconst data = job?.attrs?.data || {};\n\n\t\t// This field is for internal use, no need to leak to app processor\n\t\tdelete (data as any).appId;\n\n\t\tdata.jobId = job.attrs._id.toString();\n\n\t\treturn (processor as (jobContext: IJobContext) => Promise<void>)(data).then(async () => {\n\t\t\t// ensure the 'normal' ('onetime' in our vocab) type job is removed after it is run\n\t\t\t// as Agenda does not remove it from the DB\n\t\t\tif (job.attrs.type === 'normal') {\n\t\t\t\tawait job.agenda.cancel({ _id: job.attrs._id });\n\t\t\t}\n\t\t});\n\t};\n}\n\n/**\n * Provides the Apps Engine with task scheduling capabilities.\n * It uses {@link agenda:github.com/agenda/agenda} as backend\n */\nexport class AppSchedulerBridge extends SchedulerBridge {\n\tprivate isConnected: boolean;\n\n\tprivate scheduler: Agenda;\n\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t\tthis.scheduler = new Agenda({\n\t\t\tmongo: (MongoInternals.defaultRemoteCollectionDriver().mongo as any).client.db(),\n\t\t\tdb: { collection: 'rocketchat_apps_scheduler' },\n\t\t\t// this ensures the same job doesn't get executed multiple times in a cluster\n\t\t\tdefaultConcurrency: 1,\n\t\t});\n\t\tthis.isConnected = false;\n\t}\n\n\t/**\n\t * Register processors that can be scheduled to run\n\t *\n\t * @param processors An array of processors\n\t * @param appId\n\t *\n\t * @returns List of task ids run at startup, or void no startup run is set\n\t */\n\tprotected async registerProcessors(processors: Array<IProcessor> = [], appId: string): Promise<void | Array<string>> {\n\t\tconst runAfterRegister: Promise<string>[] = [];\n\t\tthis.orch.debugLog(`The App ${appId} is registering job processors`, processors);\n\t\tprocessors.forEach(({ id, processor, startupSetting }: IProcessor) => {\n\t\t\tthis.scheduler.define(id, _callProcessor(processor));\n\n\t\t\tif (!startupSetting) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (startupSetting.type) {\n\t\t\t\tcase StartupType.ONETIME:\n\t\t\t\t\trunAfterRegister.push(\n\t\t\t\t\t\tthis.scheduleOnceAfterRegister({ id, when: startupSetting.when, data: startupSetting.data }, appId) as Promise<string>,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase StartupType.RECURRING:\n\t\t\t\t\trunAfterRegister.push(\n\t\t\t\t\t\tthis.scheduleRecurring(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tinterval: startupSetting.interval,\n\t\t\t\t\t\t\t\tskipImmediate: startupSetting.skipImmediate,\n\t\t\t\t\t\t\t\tdata: startupSetting.data,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tappId,\n\t\t\t\t\t\t) as Promise<string>,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.orch\n\t\t\t\t\t\t.getRocketChatLogger()\n\t\t\t\t\t\t.error(`Invalid startup setting type (${String((startupSetting as any).type)}) for the processor ${id}`);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tif (runAfterRegister.length) {\n\t\t\treturn Promise.all(runAfterRegister) as Promise<Array<string>>;\n\t\t}\n\t}\n\n\t/**\n\t * Schedules a registered processor to run _once_.\n\t */\n\tprotected async scheduleOnce({ id, when, data }: IOnetimeSchedule, appId: string): Promise<void | string> {\n\t\tthis.orch.debugLog(`The App ${appId} is scheduling an onetime job (processor ${id})`);\n\t\ttry {\n\t\t\tawait this.startScheduler();\n\t\t\tconst job = await this.scheduler.schedule(when, id, this.decorateJobData(data, appId));\n\t\t\treturn job.attrs._id.toString();\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\tprivate async scheduleOnceAfterRegister(job: IOnetimeSchedule, appId: string): Promise<void | string> {\n\t\tconst scheduledJobs = await this.scheduler.jobs({ name: job.id, type: 'normal' }, {}, 1);\n\t\tif (!scheduledJobs.length) {\n\t\t\treturn this.scheduleOnce(job, appId);\n\t\t}\n\t}\n\n\t/**\n\t * Schedules a registered processor to run recurrently according to a given interval.\n\t *\n\t * @param {Object} job\n\t * @param {string} job.id The processor's id\n\t * @param {string} job.interval When the processor will be re executed\n\t * @param {boolean} job.skipImmediate=false Whether to let the first iteration to execute as soon as the task is registered\n\t * @param {Object} [job.data] An optional object that is passed to the processor\n\t * @param {string} appId\n\t *\n\t * @returns {string} taskid\n\t */\n\tprotected async scheduleRecurring(\n\t\t{ id, interval, skipImmediate = false, data }: IRecurringSchedule,\n\t\tappId: string,\n\t): Promise<void | string> {\n\t\tthis.orch.debugLog(`The App ${appId} is scheduling a recurring job (processor ${id})`);\n\t\ttry {\n\t\t\tawait this.startScheduler();\n\t\t\tconst job = await this.scheduler.every(interval, id, this.decorateJobData(data, appId), {\n\t\t\t\tskipImmediate,\n\t\t\t});\n\t\t\treturn job.attrs._id.toString();\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\t/**\n\t * Cancels a running job given its jobId\n\t *\n\t * @param {string} jobId\n\t * @param {string} appId\n\t *\n\t * @returns Promise<void>\n\t */\n\tprotected async cancelJob(jobId: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is canceling a job`, jobId);\n\t\tawait this.startScheduler();\n\n\t\tlet cancelQuery;\n\t\ttry {\n\t\t\tcancelQuery = { _id: new ObjectID(jobId.split('_')[0]) };\n\t\t} catch (jobDocIdError) {\n\t\t\t// it is not a valid objectid, so it won't try to cancel by document id\n\t\t\tcancelQuery = { name: jobId };\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.scheduler.cancel(cancelQuery);\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\t/**\n\t * Cancels all the running jobs from the app\n\t *\n\t * @param {string} appId\n\t *\n\t * @returns Promise<void>\n\t */\n\tprotected async cancelAllJobs(appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`Canceling all jobs of App ${appId}`);\n\t\tawait this.startScheduler();\n\t\tconst matcher = new RegExp(`_${appId}$`);\n\t\ttry {\n\t\t\tawait this.scheduler.cancel({ name: { $regex: matcher } });\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\tpublic async startScheduler(): Promise<void> {\n\t\tif (!this.isConnected) {\n\t\t\tawait this.scheduler.start();\n\t\t\tthis.isConnected = true;\n\t\t}\n\t}\n\n\tprivate decorateJobData(jobData: object | undefined, appId: string): object {\n\t\treturn Object.assign({}, jobData, { appId });\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      AppSchedulerBridge: () => AppSchedulerBridge\n    });\n    let Agenda;\n    module.link(\"@rocket.chat/agenda\", {\n      Agenda(v) {\n        Agenda = v;\n      }\n    }, 0);\n    let StartupType;\n    module.link(\"@rocket.chat/apps-engine/definition/scheduler\", {\n      StartupType(v) {\n        StartupType = v;\n      }\n    }, 1);\n    let SchedulerBridge;\n    module.link(\"@rocket.chat/apps-engine/server/bridges/SchedulerBridge\", {\n      SchedulerBridge(v) {\n        SchedulerBridge = v;\n      }\n    }, 2);\n    let ObjectID;\n    module.link(\"bson\", {\n      ObjectID(v) {\n        ObjectID = v;\n      }\n    }, 3);\n    let MongoInternals;\n    module.link(\"meteor/mongo\", {\n      MongoInternals(v) {\n        MongoInternals = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    function _callProcessor(processor) {\n      return job => {\n        var _job$attrs;\n        const data = (job === null || job === void 0 ? void 0 : (_job$attrs = job.attrs) === null || _job$attrs === void 0 ? void 0 : _job$attrs.data) || {};\n        // This field is for internal use, no need to leak to app processor\n        delete data.appId;\n        data.jobId = job.attrs._id.toString();\n        return processor(data).then(async () => {\n          // ensure the 'normal' ('onetime' in our vocab) type job is removed after it is run\n          // as Agenda does not remove it from the DB\n          if (job.attrs.type === 'normal') {\n            await job.agenda.cancel({\n              _id: job.attrs._id\n            });\n          }\n        });\n      };\n    }\n    /**\n     * Provides the Apps Engine with task scheduling capabilities.\n     * It uses {@link agenda:github.com/agenda/agenda} as backend\n     */\n    class AppSchedulerBridge extends SchedulerBridge {\n      constructor(orch) {\n        super();\n        this.orch = void 0;\n        this.isConnected = void 0;\n        this.scheduler = void 0;\n        this.orch = orch;\n        this.scheduler = new Agenda({\n          mongo: MongoInternals.defaultRemoteCollectionDriver().mongo.client.db(),\n          db: {\n            collection: 'rocketchat_apps_scheduler'\n          },\n          // this ensures the same job doesn't get executed multiple times in a cluster\n          defaultConcurrency: 1\n        });\n        this.isConnected = false;\n      }\n      /**\n       * Register processors that can be scheduled to run\n       *\n       * @param processors An array of processors\n       * @param appId\n       *\n       * @returns List of task ids run at startup, or void no startup run is set\n       */\n      async registerProcessors() {\n        let processors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let appId = arguments.length > 1 ? arguments[1] : undefined;\n        const runAfterRegister = [];\n        this.orch.debugLog(\"The App \".concat(appId, \" is registering job processors\"), processors);\n        processors.forEach(_ref => {\n          let {\n            id,\n            processor,\n            startupSetting\n          } = _ref;\n          this.scheduler.define(id, _callProcessor(processor));\n          if (!startupSetting) {\n            return;\n          }\n          switch (startupSetting.type) {\n            case StartupType.ONETIME:\n              runAfterRegister.push(this.scheduleOnceAfterRegister({\n                id,\n                when: startupSetting.when,\n                data: startupSetting.data\n              }, appId));\n              break;\n            case StartupType.RECURRING:\n              runAfterRegister.push(this.scheduleRecurring({\n                id,\n                interval: startupSetting.interval,\n                skipImmediate: startupSetting.skipImmediate,\n                data: startupSetting.data\n              }, appId));\n              break;\n            default:\n              this.orch.getRocketChatLogger().error(\"Invalid startup setting type (\".concat(String(startupSetting.type), \") for the processor \").concat(id));\n              break;\n          }\n        });\n        if (runAfterRegister.length) {\n          return Promise.all(runAfterRegister);\n        }\n      }\n      /**\n       * Schedules a registered processor to run _once_.\n       */\n      async scheduleOnce(_ref2, appId) {\n        let {\n          id,\n          when,\n          data\n        } = _ref2;\n        this.orch.debugLog(\"The App \".concat(appId, \" is scheduling an onetime job (processor \").concat(id, \")\"));\n        try {\n          await this.startScheduler();\n          const job = await this.scheduler.schedule(when, id, this.decorateJobData(data, appId));\n          return job.attrs._id.toString();\n        } catch (e) {\n          this.orch.getRocketChatLogger().error(e);\n        }\n      }\n      async scheduleOnceAfterRegister(job, appId) {\n        const scheduledJobs = await this.scheduler.jobs({\n          name: job.id,\n          type: 'normal'\n        }, {}, 1);\n        if (!scheduledJobs.length) {\n          return this.scheduleOnce(job, appId);\n        }\n      }\n      /**\n       * Schedules a registered processor to run recurrently according to a given interval.\n       *\n       * @param {Object} job\n       * @param {string} job.id The processor's id\n       * @param {string} job.interval When the processor will be re executed\n       * @param {boolean} job.skipImmediate=false Whether to let the first iteration to execute as soon as the task is registered\n       * @param {Object} [job.data] An optional object that is passed to the processor\n       * @param {string} appId\n       *\n       * @returns {string} taskid\n       */\n      async scheduleRecurring(_ref3, appId) {\n        let {\n          id,\n          interval,\n          skipImmediate = false,\n          data\n        } = _ref3;\n        this.orch.debugLog(\"The App \".concat(appId, \" is scheduling a recurring job (processor \").concat(id, \")\"));\n        try {\n          await this.startScheduler();\n          const job = await this.scheduler.every(interval, id, this.decorateJobData(data, appId), {\n            skipImmediate\n          });\n          return job.attrs._id.toString();\n        } catch (e) {\n          this.orch.getRocketChatLogger().error(e);\n        }\n      }\n      /**\n       * Cancels a running job given its jobId\n       *\n       * @param {string} jobId\n       * @param {string} appId\n       *\n       * @returns Promise<void>\n       */\n      async cancelJob(jobId, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is canceling a job\"), jobId);\n        await this.startScheduler();\n        let cancelQuery;\n        try {\n          cancelQuery = {\n            _id: new ObjectID(jobId.split('_')[0])\n          };\n        } catch (jobDocIdError) {\n          // it is not a valid objectid, so it won't try to cancel by document id\n          cancelQuery = {\n            name: jobId\n          };\n        }\n        try {\n          await this.scheduler.cancel(cancelQuery);\n        } catch (e) {\n          this.orch.getRocketChatLogger().error(e);\n        }\n      }\n      /**\n       * Cancels all the running jobs from the app\n       *\n       * @param {string} appId\n       *\n       * @returns Promise<void>\n       */\n      async cancelAllJobs(appId) {\n        this.orch.debugLog(\"Canceling all jobs of App \".concat(appId));\n        await this.startScheduler();\n        const matcher = new RegExp(\"_\".concat(appId, \"$\"));\n        try {\n          await this.scheduler.cancel({\n            name: {\n              $regex: matcher\n            }\n          });\n        } catch (e) {\n          this.orch.getRocketChatLogger().error(e);\n        }\n      }\n      async startScheduler() {\n        if (!this.isConnected) {\n          await this.scheduler.start();\n          this.isConnected = true;\n        }\n      }\n      decorateJobData(jobData, appId) {\n        return Object.assign({}, jobData, {\n          appId\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","AppSchedulerBridge","Agenda","link","v","StartupType","SchedulerBridge","ObjectID","MongoInternals","__reifyWaitForDeps__","_callProcessor","processor","job","_job$attrs","data","attrs","appId","jobId","_id","toString","then","type","agenda","cancel","constructor","orch","isConnected","scheduler","mongo","defaultRemoteCollectionDriver","client","db","collection","defaultConcurrency","registerProcessors","processors","arguments","length","undefined","runAfterRegister","debugLog","concat","forEach","_ref","id","startupSetting","define","ONETIME","push","scheduleOnceAfterRegister","when","RECURRING","scheduleRecurring","interval","skipImmediate","getRocketChatLogger","error","String","Promise","all","scheduleOnce","_ref2","startScheduler","schedule","decorateJobData","e","scheduledJobs","jobs","name","_ref3","every","cancelJob","cancelQuery","split","jobDocIdError","cancelAllJobs","matcher","RegExp","$regex","start","jobData","Object","assign","__reify_async_result__","_reifyError","self","async"],"sources":["app/apps/server/bridges/scheduler.ts"],"sourcesContent":["import type { Job } from '@rocket.chat/agenda';\nimport { Agenda } from '@rocket.chat/agenda';\nimport type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { IProcessor, IOnetimeSchedule, IRecurringSchedule, IJobContext } from '@rocket.chat/apps-engine/definition/scheduler';\nimport { StartupType } from '@rocket.chat/apps-engine/definition/scheduler';\nimport { SchedulerBridge } from '@rocket.chat/apps-engine/server/bridges/SchedulerBridge';\nimport { ObjectID } from 'bson';\nimport { MongoInternals } from 'meteor/mongo';\n\nfunction _callProcessor(processor: IProcessor['processor']): (job: Job) => Promise<void> {\n\treturn (job) => {\n\t\tconst data = job?.attrs?.data || {};\n\n\t\t// This field is for internal use, no need to leak to app processor\n\t\tdelete (data as any).appId;\n\n\t\tdata.jobId = job.attrs._id.toString();\n\n\t\treturn (processor as (jobContext: IJobContext) => Promise<void>)(data).then(async () => {\n\t\t\t// ensure the 'normal' ('onetime' in our vocab) type job is removed after it is run\n\t\t\t// as Agenda does not remove it from the DB\n\t\t\tif (job.attrs.type === 'normal') {\n\t\t\t\tawait job.agenda.cancel({ _id: job.attrs._id });\n\t\t\t}\n\t\t});\n\t};\n}\n\n/**\n * Provides the Apps Engine with task scheduling capabilities.\n * It uses {@link agenda:github.com/agenda/agenda} as backend\n */\nexport class AppSchedulerBridge extends SchedulerBridge {\n\tprivate isConnected: boolean;\n\n\tprivate scheduler: Agenda;\n\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t\tthis.scheduler = new Agenda({\n\t\t\tmongo: (MongoInternals.defaultRemoteCollectionDriver().mongo as any).client.db(),\n\t\t\tdb: { collection: 'rocketchat_apps_scheduler' },\n\t\t\t// this ensures the same job doesn't get executed multiple times in a cluster\n\t\t\tdefaultConcurrency: 1,\n\t\t});\n\t\tthis.isConnected = false;\n\t}\n\n\t/**\n\t * Register processors that can be scheduled to run\n\t *\n\t * @param processors An array of processors\n\t * @param appId\n\t *\n\t * @returns List of task ids run at startup, or void no startup run is set\n\t */\n\tprotected async registerProcessors(processors: Array<IProcessor> = [], appId: string): Promise<void | Array<string>> {\n\t\tconst runAfterRegister: Promise<string>[] = [];\n\t\tthis.orch.debugLog(`The App ${appId} is registering job processors`, processors);\n\t\tprocessors.forEach(({ id, processor, startupSetting }: IProcessor) => {\n\t\t\tthis.scheduler.define(id, _callProcessor(processor));\n\n\t\t\tif (!startupSetting) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (startupSetting.type) {\n\t\t\t\tcase StartupType.ONETIME:\n\t\t\t\t\trunAfterRegister.push(\n\t\t\t\t\t\tthis.scheduleOnceAfterRegister({ id, when: startupSetting.when, data: startupSetting.data }, appId) as Promise<string>,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase StartupType.RECURRING:\n\t\t\t\t\trunAfterRegister.push(\n\t\t\t\t\t\tthis.scheduleRecurring(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\tinterval: startupSetting.interval,\n\t\t\t\t\t\t\t\tskipImmediate: startupSetting.skipImmediate,\n\t\t\t\t\t\t\t\tdata: startupSetting.data,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tappId,\n\t\t\t\t\t\t) as Promise<string>,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.orch\n\t\t\t\t\t\t.getRocketChatLogger()\n\t\t\t\t\t\t.error(`Invalid startup setting type (${String((startupSetting as any).type)}) for the processor ${id}`);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tif (runAfterRegister.length) {\n\t\t\treturn Promise.all(runAfterRegister) as Promise<Array<string>>;\n\t\t}\n\t}\n\n\t/**\n\t * Schedules a registered processor to run _once_.\n\t */\n\tprotected async scheduleOnce({ id, when, data }: IOnetimeSchedule, appId: string): Promise<void | string> {\n\t\tthis.orch.debugLog(`The App ${appId} is scheduling an onetime job (processor ${id})`);\n\t\ttry {\n\t\t\tawait this.startScheduler();\n\t\t\tconst job = await this.scheduler.schedule(when, id, this.decorateJobData(data, appId));\n\t\t\treturn job.attrs._id.toString();\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\tprivate async scheduleOnceAfterRegister(job: IOnetimeSchedule, appId: string): Promise<void | string> {\n\t\tconst scheduledJobs = await this.scheduler.jobs({ name: job.id, type: 'normal' }, {}, 1);\n\t\tif (!scheduledJobs.length) {\n\t\t\treturn this.scheduleOnce(job, appId);\n\t\t}\n\t}\n\n\t/**\n\t * Schedules a registered processor to run recurrently according to a given interval.\n\t *\n\t * @param {Object} job\n\t * @param {string} job.id The processor's id\n\t * @param {string} job.interval When the processor will be re executed\n\t * @param {boolean} job.skipImmediate=false Whether to let the first iteration to execute as soon as the task is registered\n\t * @param {Object} [job.data] An optional object that is passed to the processor\n\t * @param {string} appId\n\t *\n\t * @returns {string} taskid\n\t */\n\tprotected async scheduleRecurring(\n\t\t{ id, interval, skipImmediate = false, data }: IRecurringSchedule,\n\t\tappId: string,\n\t): Promise<void | string> {\n\t\tthis.orch.debugLog(`The App ${appId} is scheduling a recurring job (processor ${id})`);\n\t\ttry {\n\t\t\tawait this.startScheduler();\n\t\t\tconst job = await this.scheduler.every(interval, id, this.decorateJobData(data, appId), {\n\t\t\t\tskipImmediate,\n\t\t\t});\n\t\t\treturn job.attrs._id.toString();\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\t/**\n\t * Cancels a running job given its jobId\n\t *\n\t * @param {string} jobId\n\t * @param {string} appId\n\t *\n\t * @returns Promise<void>\n\t */\n\tprotected async cancelJob(jobId: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is canceling a job`, jobId);\n\t\tawait this.startScheduler();\n\n\t\tlet cancelQuery;\n\t\ttry {\n\t\t\tcancelQuery = { _id: new ObjectID(jobId.split('_')[0]) };\n\t\t} catch (jobDocIdError) {\n\t\t\t// it is not a valid objectid, so it won't try to cancel by document id\n\t\t\tcancelQuery = { name: jobId };\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.scheduler.cancel(cancelQuery);\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\t/**\n\t * Cancels all the running jobs from the app\n\t *\n\t * @param {string} appId\n\t *\n\t * @returns Promise<void>\n\t */\n\tprotected async cancelAllJobs(appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`Canceling all jobs of App ${appId}`);\n\t\tawait this.startScheduler();\n\t\tconst matcher = new RegExp(`_${appId}$`);\n\t\ttry {\n\t\t\tawait this.scheduler.cancel({ name: { $regex: matcher } });\n\t\t} catch (e) {\n\t\t\tthis.orch.getRocketChatLogger().error(e);\n\t\t}\n\t}\n\n\tpublic async startScheduler(): Promise<void> {\n\t\tif (!this.isConnected) {\n\t\t\tawait this.scheduler.start();\n\t\t\tthis.isConnected = true;\n\t\t}\n\t}\n\n\tprivate decorateJobData(jobData: object | undefined, appId: string): object {\n\t\treturn Object.assign({}, jobData, { appId });\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"23702bea9ee4b067e0cd0ead52bf8803e399bdb3"}
