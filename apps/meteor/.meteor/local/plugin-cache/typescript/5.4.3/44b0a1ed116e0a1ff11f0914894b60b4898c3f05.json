{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/livechat.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/bridges/livechat.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/livechat.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/livechat.ts","sourceRoot":"","sources":["app/apps/server/bridges/livechat.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAppServerOrchestrator, IAppsLivechatMessage, IAppsMessage } from '@rocket.chat/apps';\nimport type { IExtraRoomParams } from '@rocket.chat/apps-engine/definition/accessors/ILivechatCreator';\nimport type { IVisitor, ILivechatRoom, ILivechatTransferData, IDepartment } from '@rocket.chat/apps-engine/definition/livechat';\nimport type { IMessage as IAppsEngineMessage } from '@rocket.chat/apps-engine/definition/messages';\nimport type { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport { LivechatBridge } from '@rocket.chat/apps-engine/server/bridges/LivechatBridge';\nimport type { ILivechatDepartment, IOmnichannelRoom, SelectedAgent, IMessage, ILivechatVisitor } from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, LivechatRooms, LivechatDepartment, Users } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { deasyncPromise } from '../../../../server/deasync/deasync';\nimport { Livechat as LivechatTyped } from '../../../livechat/server/lib/LivechatTyped';\nimport { getRoomMessages } from '../../../livechat/server/lib/getRoomMessages';\nimport type { ILivechatMessage } from '../../../livechat/server/lib/localTypes';\nimport { settings } from '../../../settings/server';\n\ndeclare module '@rocket.chat/apps/dist/converters/IAppMessagesConverter' {\n\texport interface IAppMessagesConverter {\n\t\tconvertMessage(message: IMessage, cacheObj?: object): Promise<IAppsMessage>;\n\t}\n}\n\ndeclare module '@rocket.chat/apps-engine/definition/accessors/ILivechatCreator' {\n\tinterface IExtraRoomParams {\n\t\tcustomFields?: Record<string, unknown>;\n\t}\n}\n\nexport class AppLivechatBridge extends LivechatBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected isOnline(departmentId?: string): boolean {\n\t\t// This function will be converted to sync inside the apps-engine code\n\t\t// TODO: Track Deprecation\n\t\treturn deasyncPromise(LivechatTyped.online(departmentId));\n\t}\n\n\tprotected async isOnlineAsync(departmentId?: string): Promise<boolean> {\n\t\treturn LivechatTyped.online(departmentId);\n\t}\n\n\tprotected async createMessage(message: IAppsLivechatMessage, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new message.`);\n\n\t\tif (!message.token) {\n\t\t\tthrow new Error('Invalid token for livechat message');\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst guest = this.orch.getConverters().get('visitors').convertAppVisitor(message.visitor);\n\t\tconst appMessage = (await this.orch.getConverters().get('messages').convertAppMessage(message)) as IMessage | undefined;\n\t\tconst livechatMessage = appMessage as ILivechatMessage | undefined;\n\n\t\tif (guest) {\n\t\t\tconst visitorSource = {\n\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\tid: appId,\n\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getNameSlug(),\n\t\t\t};\n\t\t\tconst fullVisitor = await LivechatVisitors.findOneEnabledByIdAndSource({\n\t\t\t\t_id: guest._id,\n\t\t\t\tsourceFilter: { 'source.type': visitorSource.type, 'source.id': visitorSource.id, 'source.alias': visitorSource.alias },\n\t\t\t});\n\t\t\tif (!fullVisitor?.source) {\n\t\t\t\tawait LivechatVisitors.setSourceById(guest._id, visitorSource);\n\t\t\t}\n\t\t}\n\n\t\tconst msg = await LivechatTyped.sendMessage({\n\t\t\tguest: guest as ILivechatVisitor,\n\t\t\tmessage: livechatMessage as ILivechatMessage,\n\t\t\tagent: undefined,\n\t\t\troomInfo: {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\t\tid: appId,\n\t\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getNameSlug(),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\treturn msg._id;\n\t}\n\n\tprotected async getMessageById(messageId: string, appId: string): Promise<IAppsLivechatMessage> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the message: \"${messageId}\"`);\n\n\t\tconst message = await this.orch.getConverters().get('messages').convertById(messageId);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn message as IAppsLivechatMessage;\n\t}\n\n\tprotected async updateMessage(message: IAppsLivechatMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a message.`);\n\n\t\tconst data = {\n\t\t\tguest: message.visitor,\n\t\t\tmessage: await this.orch.getConverters()?.get('messages').convertAppMessage(message),\n\t\t};\n\n\t\t// @ts-expect-error IVisitor vs ILivechatVisitor :(\n\t\tawait LivechatTyped.updateMessage(data);\n\t}\n\n\tprotected async createRoom(\n\t\tvisitor: IVisitor,\n\t\tagent: IUser,\n\t\tappId: string,\n\t\t{ source, customFields }: IExtraRoomParams = {},\n\t): Promise<ILivechatRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat room.`);\n\n\t\tlet agentRoom: SelectedAgent | undefined;\n\t\tif (agent?.id) {\n\t\t\tconst user = await Users.getAgentInfo(agent.id, settings.get('Livechat_show_agent_email'));\n\t\t\tif (!user) {\n\t\t\t\tthrow new Error(`The agent with id \"${agent.id}\" was not found.`);\n\t\t\t}\n\t\t\tagentRoom = { agentId: user._id, username: user.username };\n\t\t}\n\n\t\tconst room = await LivechatTyped.createRoom({\n\t\t\tvisitor: this.orch.getConverters()?.get('visitors').convertAppVisitor(visitor),\n\t\t\troomInfo: {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\t\tid: appId,\n\t\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getName(),\n\t\t\t\t\t...(source &&\n\t\t\t\t\t\tsource.type === 'app' && {\n\t\t\t\t\t\t\tsidebarIcon: source.sidebarIcon,\n\t\t\t\t\t\t\tdefaultIcon: source.defaultIcon,\n\t\t\t\t\t\t\tlabel: source.label,\n\t\t\t\t\t\t\tdestination: source.destination,\n\t\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t\tagent: agentRoom,\n\t\t\textraData: customFields && { customFields },\n\t\t});\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn this.orch.getConverters()?.get('rooms').convertRoom(room) as Promise<ILivechatRoom>;\n\t}\n\n\tprotected async closeRoom(room: ILivechatRoom, comment: string, closer: IUser | undefined, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is closing a livechat room.`);\n\n\t\tconst user = closer && this.orch.getConverters()?.get('users').convertToRocketChat(closer);\n\t\tconst visitor = this.orch.getConverters()?.get('visitors').convertAppVisitor(room.visitor);\n\n\t\tconst closeData: any = {\n\t\t\troom: await this.orch.getConverters()?.get('rooms').convertAppRoom(room),\n\t\t\tcomment,\n\t\t\t...(user && { user }),\n\t\t\t...(visitor && { visitor }),\n\t\t};\n\n\t\tawait LivechatTyped.closeRoom(closeData);\n\n\t\treturn true;\n\t}\n\n\tprotected async findOpenRoomsByAgentId(agentId: string, appId: string): Promise<ILivechatRoom[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat rooms associated with agent ${agentId}`);\n\n\t\tif (!agentId) {\n\t\t\tthrow new Error('Invalid agentId');\n\t\t}\n\n\t\tconst rooms = await LivechatRooms.findOpenByAgent(agentId).toArray();\n\t\treturn Promise.all(rooms.map((room) => this.orch.getConverters()?.get('rooms').convertRoom(room) as Promise<ILivechatRoom>));\n\t}\n\n\tprotected async countOpenRoomsByAgentId(agentId: string, appId: string): Promise<number> {\n\t\tthis.orch.debugLog(`The App ${appId} is counting livechat rooms associated with agent ${agentId}`);\n\n\t\tif (!agentId) {\n\t\t\tthrow new Error('Invalid agentId');\n\t\t}\n\n\t\treturn LivechatRooms.countOpenByAgent(agentId);\n\t}\n\n\tprotected async findRooms(visitor: IVisitor, departmentId: string | null, appId: string): Promise<Array<ILivechatRoom>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\tif (!visitor) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet result;\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\n\t\tif (departmentId) {\n\t\t\tresult = await LivechatRooms.findOpenByVisitorTokenAndDepartmentId(visitor.token, departmentId, {}, extraQuery).toArray();\n\t\t} else {\n\t\t\tresult = await LivechatRooms.findOpenByVisitorToken(visitor.token, {}, extraQuery).toArray();\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn Promise.all(result.map((room) => this.orch.getConverters()?.get('rooms').convertRoom(room) as Promise<ILivechatRoom>));\n\t}\n\n\tprotected async createVisitor(visitor: IVisitor, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat visitor.`);\n\n\t\tconst registerData = {\n\t\t\tdepartment: visitor.department,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\temail: '',\n\t\t\tconnectionData: undefined,\n\t\t\tid: visitor.id,\n\t\t\t...(visitor.phone?.length && { phone: { number: visitor.phone[0].phoneNumber } }),\n\t\t\t...(visitor.visitorEmails?.length && { email: visitor.visitorEmails[0].address }),\n\t\t};\n\n\t\tconst livechatVisitor = await LivechatTyped.registerGuest(registerData);\n\n\t\tif (!livechatVisitor) {\n\t\t\tthrow new Error('Invalid visitor, cannot create');\n\t\t}\n\n\t\treturn livechatVisitor._id;\n\t}\n\n\tprotected async createAndReturnVisitor(visitor: IVisitor, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat visitor.`);\n\n\t\tconst registerData = {\n\t\t\tdepartment: visitor.department,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\temail: '',\n\t\t\tconnectionData: undefined,\n\t\t\tid: visitor.id,\n\t\t\t...(visitor.phone?.length && { phone: { number: visitor.phone[0].phoneNumber } }),\n\t\t\t...(visitor.visitorEmails?.length && { email: visitor.visitorEmails[0].address }),\n\t\t};\n\n\t\tconst livechatVisitor = await LivechatTyped.registerGuest(registerData);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertVisitor(livechatVisitor);\n\t}\n\n\tprotected async transferVisitor(visitor: IVisitor, transferData: ILivechatTransferData, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is transfering a livechat.`);\n\n\t\tif (!visitor) {\n\t\t\tthrow new Error('Invalid visitor, cannot transfer');\n\t\t}\n\n\t\tconst { targetAgent, targetDepartment: departmentId, currentRoom } = transferData;\n\n\t\tconst appUser = await Users.findOneByAppId(appId, {});\n\t\tif (!appUser) {\n\t\t\tthrow new Error('Invalid app user, cannot transfer');\n\t\t}\n\t\tconst { _id, username, name, type } = appUser;\n\t\tconst transferredBy = {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\tname,\n\t\t\ttype,\n\t\t\tuserType: 'user',\n\t\t} as const;\n\n\t\tlet userId;\n\t\tlet transferredTo;\n\n\t\tif (targetAgent?.id) {\n\t\t\ttransferredTo = await Users.findOneAgentById(targetAgent.id, {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1 },\n\t\t\t});\n\t\t\tif (!transferredTo) {\n\t\t\t\tthrow new Error('Invalid target agent, cannot transfer');\n\t\t\t}\n\n\t\t\tuserId = transferredTo._id;\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn LivechatTyped.transfer(\n\t\t\t(await this.orch.getConverters()?.get('rooms').convertAppRoom(currentRoom)) as IOmnichannelRoom,\n\t\t\tthis.orch.getConverters()?.get('visitors').convertAppVisitor(visitor),\n\t\t\t{ userId, departmentId, transferredBy, transferredTo },\n\t\t);\n\t}\n\n\tprotected async findVisitors(query: object, appId: string): Promise<Array<IVisitor>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\tif (this.orch.isDebugging()) {\n\t\t\tconsole.warn('The method AppLivechatBridge.findVisitors is deprecated. Please consider using its alternatives');\n\t\t}\n\n\t\treturn Promise.all(\n\t\t\t(await LivechatVisitors.findEnabledBySource({ 'source.type': OmnichannelSourceType.APP, 'source.id': appId }, query).toArray()).map(\n\t\t\t\tasync (visitor) => visitor && this.orch.getConverters()?.get('visitors').convertVisitor(visitor),\n\t\t\t),\n\t\t);\n\t}\n\n\tprotected async findVisitorById(id: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertByIdAndSource(id, appId);\n\t}\n\n\tprotected async findVisitorByEmail(email: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('visitors')\n\t\t\t.convertVisitor(\n\t\t\t\tawait LivechatVisitors.findOneGuestByEmailAddressAndSource(email, { 'source.type': OmnichannelSourceType.APP, 'source.id': appId }),\n\t\t\t);\n\t}\n\n\tprotected async findVisitorByToken(token: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('visitors')\n\t\t\t.convertVisitor(\n\t\t\t\tawait LivechatVisitors.getVisitorByTokenAndSource({\n\t\t\t\t\ttoken,\n\t\t\t\t\tsourceFilter: { 'source.type': OmnichannelSourceType.APP, 'source.id': appId },\n\t\t\t\t}),\n\t\t\t);\n\t}\n\n\tprotected async findVisitorByPhoneNumber(phoneNumber: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('visitors')\n\t\t\t.convertVisitor(\n\t\t\t\tawait LivechatVisitors.findOneVisitorByPhoneAndSource(phoneNumber, {\n\t\t\t\t\t'source.type': OmnichannelSourceType.APP,\n\t\t\t\t\t'source.id': appId,\n\t\t\t\t}),\n\t\t\t);\n\t}\n\n\tprotected async findDepartmentByIdOrName(value: string, appId: string): Promise<IDepartment | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat departments.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('departments')\n\t\t\t.convertDepartment(await LivechatDepartment.findOneByIdOrName(value, {}));\n\t}\n\n\tprotected async findDepartmentsEnabledWithAgents(appId: string): Promise<Array<IDepartment>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat departments.`);\n\n\t\tconst converter = this.orch.getConverters()?.get('departments');\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst boundConverter = converter.convertDepartment.bind(converter) as (_: ILivechatDepartment) => Promise<IDepartment>;\n\n\t\treturn Promise.all((await LivechatDepartment.findEnabledWithAgents().toArray()).map(boundConverter));\n\t}\n\n\tprotected async _fetchLivechatRoomMessages(appId: string, roomId: string): Promise<Array<IAppsEngineMessage>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the transcript for livechat room ${roomId}.`);\n\t\tconst messageConverter = this.orch.getConverters()?.get('messages');\n\n\t\tif (!messageConverter) {\n\t\t\tthrow new Error('Could not get the message converter to process livechat room messages');\n\t\t}\n\n\t\tconst livechatMessages = await getRoomMessages({ rid: roomId });\n\t\treturn Promise.all(await livechatMessages.map((message) => messageConverter.convertMessage(message, livechatMessages)).toArray());\n\t}\n\n\tprotected async setCustomFields(\n\t\tdata: { token: IVisitor['token']; key: string; value: string; overwrite: boolean },\n\t\tappId: string,\n\t): Promise<number> {\n\t\tthis.orch.debugLog(`The App ${appId} is setting livechat visitor's custom fields.`);\n\n\t\treturn LivechatTyped.setCustomFields(data);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/livechat.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/bridges/livechat.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/livechat.ts","sourceRoot":"","sources":["app/apps/server/bridges/livechat.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAppServerOrchestrator, IAppsLivechatMessage, IAppsMessage } from '@rocket.chat/apps';\nimport type { IExtraRoomParams } from '@rocket.chat/apps-engine/definition/accessors/ILivechatCreator';\nimport type { IVisitor, ILivechatRoom, ILivechatTransferData, IDepartment } from '@rocket.chat/apps-engine/definition/livechat';\nimport type { IMessage as IAppsEngineMessage } from '@rocket.chat/apps-engine/definition/messages';\nimport type { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport { LivechatBridge } from '@rocket.chat/apps-engine/server/bridges/LivechatBridge';\nimport type { ILivechatDepartment, IOmnichannelRoom, SelectedAgent, IMessage, ILivechatVisitor } from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, LivechatRooms, LivechatDepartment, Users } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { deasyncPromise } from '../../../../server/deasync/deasync';\nimport { Livechat as LivechatTyped } from '../../../livechat/server/lib/LivechatTyped';\nimport { getRoomMessages } from '../../../livechat/server/lib/getRoomMessages';\nimport type { ILivechatMessage } from '../../../livechat/server/lib/localTypes';\nimport { settings } from '../../../settings/server';\n\ndeclare module '@rocket.chat/apps/dist/converters/IAppMessagesConverter' {\n\texport interface IAppMessagesConverter {\n\t\tconvertMessage(message: IMessage, cacheObj?: object): Promise<IAppsMessage>;\n\t}\n}\n\ndeclare module '@rocket.chat/apps-engine/definition/accessors/ILivechatCreator' {\n\tinterface IExtraRoomParams {\n\t\tcustomFields?: Record<string, unknown>;\n\t}\n}\n\nexport class AppLivechatBridge extends LivechatBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected isOnline(departmentId?: string): boolean {\n\t\t// This function will be converted to sync inside the apps-engine code\n\t\t// TODO: Track Deprecation\n\t\treturn deasyncPromise(LivechatTyped.online(departmentId));\n\t}\n\n\tprotected async isOnlineAsync(departmentId?: string): Promise<boolean> {\n\t\treturn LivechatTyped.online(departmentId);\n\t}\n\n\tprotected async createMessage(message: IAppsLivechatMessage, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new message.`);\n\n\t\tif (!message.token) {\n\t\t\tthrow new Error('Invalid token for livechat message');\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst guest = this.orch.getConverters().get('visitors').convertAppVisitor(message.visitor);\n\t\tconst appMessage = (await this.orch.getConverters().get('messages').convertAppMessage(message)) as IMessage | undefined;\n\t\tconst livechatMessage = appMessage as ILivechatMessage | undefined;\n\n\t\tif (guest) {\n\t\t\tconst visitorSource = {\n\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\tid: appId,\n\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getNameSlug(),\n\t\t\t};\n\t\t\tconst fullVisitor = await LivechatVisitors.findOneEnabledByIdAndSource({\n\t\t\t\t_id: guest._id,\n\t\t\t\tsourceFilter: { 'source.type': visitorSource.type, 'source.id': visitorSource.id, 'source.alias': visitorSource.alias },\n\t\t\t});\n\t\t\tif (!fullVisitor?.source) {\n\t\t\t\tawait LivechatVisitors.setSourceById(guest._id, visitorSource);\n\t\t\t}\n\t\t}\n\n\t\tconst msg = await LivechatTyped.sendMessage({\n\t\t\tguest: guest as ILivechatVisitor,\n\t\t\tmessage: livechatMessage as ILivechatMessage,\n\t\t\tagent: undefined,\n\t\t\troomInfo: {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\t\tid: appId,\n\t\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getNameSlug(),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\treturn msg._id;\n\t}\n\n\tprotected async getMessageById(messageId: string, appId: string): Promise<IAppsLivechatMessage> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the message: \"${messageId}\"`);\n\n\t\tconst message = await this.orch.getConverters().get('messages').convertById(messageId);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn message as IAppsLivechatMessage;\n\t}\n\n\tprotected async updateMessage(message: IAppsLivechatMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a message.`);\n\n\t\tconst data = {\n\t\t\tguest: message.visitor,\n\t\t\tmessage: await this.orch.getConverters()?.get('messages').convertAppMessage(message),\n\t\t};\n\n\t\t// @ts-expect-error IVisitor vs ILivechatVisitor :(\n\t\tawait LivechatTyped.updateMessage(data);\n\t}\n\n\tprotected async createRoom(\n\t\tvisitor: IVisitor,\n\t\tagent: IUser,\n\t\tappId: string,\n\t\t{ source, customFields }: IExtraRoomParams = {},\n\t): Promise<ILivechatRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat room.`);\n\n\t\tlet agentRoom: SelectedAgent | undefined;\n\t\tif (agent?.id) {\n\t\t\tconst user = await Users.getAgentInfo(agent.id, settings.get('Livechat_show_agent_email'));\n\t\t\tif (!user) {\n\t\t\t\tthrow new Error(`The agent with id \"${agent.id}\" was not found.`);\n\t\t\t}\n\t\t\tagentRoom = { agentId: user._id, username: user.username };\n\t\t}\n\n\t\tconst room = await LivechatTyped.createRoom({\n\t\t\tvisitor: this.orch.getConverters()?.get('visitors').convertAppVisitor(visitor),\n\t\t\troomInfo: {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\t\tid: appId,\n\t\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getName(),\n\t\t\t\t\t...(source &&\n\t\t\t\t\t\tsource.type === 'app' && {\n\t\t\t\t\t\t\tsidebarIcon: source.sidebarIcon,\n\t\t\t\t\t\t\tdefaultIcon: source.defaultIcon,\n\t\t\t\t\t\t\tlabel: source.label,\n\t\t\t\t\t\t\tdestination: source.destination,\n\t\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t\tagent: agentRoom,\n\t\t\textraData: customFields && { customFields },\n\t\t});\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn this.orch.getConverters()?.get('rooms').convertRoom(room) as Promise<ILivechatRoom>;\n\t}\n\n\tprotected async closeRoom(room: ILivechatRoom, comment: string, closer: IUser | undefined, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is closing a livechat room.`);\n\n\t\tconst user = closer && this.orch.getConverters()?.get('users').convertToRocketChat(closer);\n\t\tconst visitor = this.orch.getConverters()?.get('visitors').convertAppVisitor(room.visitor);\n\n\t\tconst closeData: any = {\n\t\t\troom: await this.orch.getConverters()?.get('rooms').convertAppRoom(room),\n\t\t\tcomment,\n\t\t\t...(user && { user }),\n\t\t\t...(visitor && { visitor }),\n\t\t};\n\n\t\tawait LivechatTyped.closeRoom(closeData);\n\n\t\treturn true;\n\t}\n\n\tprotected async findOpenRoomsByAgentId(agentId: string, appId: string): Promise<ILivechatRoom[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat rooms associated with agent ${agentId}`);\n\n\t\tif (!agentId) {\n\t\t\tthrow new Error('Invalid agentId');\n\t\t}\n\n\t\tconst rooms = await LivechatRooms.findOpenByAgent(agentId).toArray();\n\t\treturn Promise.all(rooms.map((room) => this.orch.getConverters()?.get('rooms').convertRoom(room) as Promise<ILivechatRoom>));\n\t}\n\n\tprotected async countOpenRoomsByAgentId(agentId: string, appId: string): Promise<number> {\n\t\tthis.orch.debugLog(`The App ${appId} is counting livechat rooms associated with agent ${agentId}`);\n\n\t\tif (!agentId) {\n\t\t\tthrow new Error('Invalid agentId');\n\t\t}\n\n\t\treturn LivechatRooms.countOpenByAgent(agentId);\n\t}\n\n\tprotected async findRooms(visitor: IVisitor, departmentId: string | null, appId: string): Promise<Array<ILivechatRoom>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\tif (!visitor) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet result;\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\n\t\tif (departmentId) {\n\t\t\tresult = await LivechatRooms.findOpenByVisitorTokenAndDepartmentId(visitor.token, departmentId, {}, extraQuery).toArray();\n\t\t} else {\n\t\t\tresult = await LivechatRooms.findOpenByVisitorToken(visitor.token, {}, extraQuery).toArray();\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn Promise.all(result.map((room) => this.orch.getConverters()?.get('rooms').convertRoom(room) as Promise<ILivechatRoom>));\n\t}\n\n\tprotected async createVisitor(visitor: IVisitor, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat visitor.`);\n\n\t\tconst registerData = {\n\t\t\tdepartment: visitor.department,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\temail: '',\n\t\t\tconnectionData: undefined,\n\t\t\tid: visitor.id,\n\t\t\t...(visitor.phone?.length && { phone: { number: visitor.phone[0].phoneNumber } }),\n\t\t\t...(visitor.visitorEmails?.length && { email: visitor.visitorEmails[0].address }),\n\t\t};\n\n\t\tconst livechatVisitor = await LivechatTyped.registerGuest(registerData);\n\n\t\tif (!livechatVisitor) {\n\t\t\tthrow new Error('Invalid visitor, cannot create');\n\t\t}\n\n\t\treturn livechatVisitor._id;\n\t}\n\n\tprotected async createAndReturnVisitor(visitor: IVisitor, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat visitor.`);\n\n\t\tconst registerData = {\n\t\t\tdepartment: visitor.department,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\temail: '',\n\t\t\tconnectionData: undefined,\n\t\t\tid: visitor.id,\n\t\t\t...(visitor.phone?.length && { phone: { number: visitor.phone[0].phoneNumber } }),\n\t\t\t...(visitor.visitorEmails?.length && { email: visitor.visitorEmails[0].address }),\n\t\t};\n\n\t\tconst livechatVisitor = await LivechatTyped.registerGuest(registerData);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertVisitor(livechatVisitor);\n\t}\n\n\tprotected async transferVisitor(visitor: IVisitor, transferData: ILivechatTransferData, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is transfering a livechat.`);\n\n\t\tif (!visitor) {\n\t\t\tthrow new Error('Invalid visitor, cannot transfer');\n\t\t}\n\n\t\tconst { targetAgent, targetDepartment: departmentId, currentRoom } = transferData;\n\n\t\tconst appUser = await Users.findOneByAppId(appId, {});\n\t\tif (!appUser) {\n\t\t\tthrow new Error('Invalid app user, cannot transfer');\n\t\t}\n\t\tconst { _id, username, name, type } = appUser;\n\t\tconst transferredBy = {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\tname,\n\t\t\ttype,\n\t\t\tuserType: 'user',\n\t\t} as const;\n\n\t\tlet userId;\n\t\tlet transferredTo;\n\n\t\tif (targetAgent?.id) {\n\t\t\ttransferredTo = await Users.findOneAgentById(targetAgent.id, {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1 },\n\t\t\t});\n\t\t\tif (!transferredTo) {\n\t\t\t\tthrow new Error('Invalid target agent, cannot transfer');\n\t\t\t}\n\n\t\t\tuserId = transferredTo._id;\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn LivechatTyped.transfer(\n\t\t\t(await this.orch.getConverters()?.get('rooms').convertAppRoom(currentRoom)) as IOmnichannelRoom,\n\t\t\tthis.orch.getConverters()?.get('visitors').convertAppVisitor(visitor),\n\t\t\t{ userId, departmentId, transferredBy, transferredTo },\n\t\t);\n\t}\n\n\tprotected async findVisitors(query: object, appId: string): Promise<Array<IVisitor>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\tif (this.orch.isDebugging()) {\n\t\t\tconsole.warn('The method AppLivechatBridge.findVisitors is deprecated. Please consider using its alternatives');\n\t\t}\n\n\t\treturn Promise.all(\n\t\t\t(await LivechatVisitors.findEnabledBySource({ 'source.type': OmnichannelSourceType.APP, 'source.id': appId }, query).toArray()).map(\n\t\t\t\tasync (visitor) => visitor && this.orch.getConverters()?.get('visitors').convertVisitor(visitor),\n\t\t\t),\n\t\t);\n\t}\n\n\tprotected async findVisitorById(id: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertByIdAndSource(id, appId);\n\t}\n\n\tprotected async findVisitorByEmail(email: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('visitors')\n\t\t\t.convertVisitor(\n\t\t\t\tawait LivechatVisitors.findOneGuestByEmailAddressAndSource(email, { 'source.type': OmnichannelSourceType.APP, 'source.id': appId }),\n\t\t\t);\n\t}\n\n\tprotected async findVisitorByToken(token: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('visitors')\n\t\t\t.convertVisitor(\n\t\t\t\tawait LivechatVisitors.getVisitorByTokenAndSource({\n\t\t\t\t\ttoken,\n\t\t\t\t\tsourceFilter: { 'source.type': OmnichannelSourceType.APP, 'source.id': appId },\n\t\t\t\t}),\n\t\t\t);\n\t}\n\n\tprotected async findVisitorByPhoneNumber(phoneNumber: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('visitors')\n\t\t\t.convertVisitor(\n\t\t\t\tawait LivechatVisitors.findOneVisitorByPhoneAndSource(phoneNumber, {\n\t\t\t\t\t'source.type': OmnichannelSourceType.APP,\n\t\t\t\t\t'source.id': appId,\n\t\t\t\t}),\n\t\t\t);\n\t}\n\n\tprotected async findDepartmentByIdOrName(value: string, appId: string): Promise<IDepartment | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat departments.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('departments')\n\t\t\t.convertDepartment(await LivechatDepartment.findOneByIdOrName(value, {}));\n\t}\n\n\tprotected async findDepartmentsEnabledWithAgents(appId: string): Promise<Array<IDepartment>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat departments.`);\n\n\t\tconst converter = this.orch.getConverters()?.get('departments');\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst boundConverter = converter.convertDepartment.bind(converter) as (_: ILivechatDepartment) => Promise<IDepartment>;\n\n\t\treturn Promise.all((await LivechatDepartment.findEnabledWithAgents().toArray()).map(boundConverter));\n\t}\n\n\tprotected async _fetchLivechatRoomMessages(appId: string, roomId: string): Promise<Array<IAppsEngineMessage>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the transcript for livechat room ${roomId}.`);\n\t\tconst messageConverter = this.orch.getConverters()?.get('messages');\n\n\t\tif (!messageConverter) {\n\t\t\tthrow new Error('Could not get the message converter to process livechat room messages');\n\t\t}\n\n\t\tconst livechatMessages = await getRoomMessages({ rid: roomId });\n\t\treturn Promise.all(await livechatMessages.map((message) => messageConverter.convertMessage(message, livechatMessages)).toArray());\n\t}\n\n\tprotected async setCustomFields(\n\t\tdata: { token: IVisitor['token']; key: string; value: string; overwrite: boolean },\n\t\tappId: string,\n\t): Promise<number> {\n\t\tthis.orch.debugLog(`The App ${appId} is setting livechat visitor's custom fields.`);\n\n\t\treturn LivechatTyped.setCustomFields(data);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      AppLivechatBridge: () => AppLivechatBridge\n    });\n    let LivechatBridge;\n    module.link(\"@rocket.chat/apps-engine/server/bridges/LivechatBridge\", {\n      LivechatBridge(v) {\n        LivechatBridge = v;\n      }\n    }, 0);\n    let OmnichannelSourceType;\n    module.link(\"@rocket.chat/core-typings\", {\n      OmnichannelSourceType(v) {\n        OmnichannelSourceType = v;\n      }\n    }, 1);\n    let LivechatVisitors, LivechatRooms, LivechatDepartment, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      LivechatDepartment(v) {\n        LivechatDepartment = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 2);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 3);\n    let deasyncPromise;\n    module.link(\"../../../../server/deasync/deasync\", {\n      deasyncPromise(v) {\n        deasyncPromise = v;\n      }\n    }, 4);\n    let LivechatTyped;\n    module.link(\"../../../livechat/server/lib/LivechatTyped\", {\n      Livechat(v) {\n        LivechatTyped = v;\n      }\n    }, 5);\n    let getRoomMessages;\n    module.link(\"../../../livechat/server/lib/getRoomMessages\", {\n      getRoomMessages(v) {\n        getRoomMessages = v;\n      }\n    }, 6);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class AppLivechatBridge extends LivechatBridge {\n      constructor(orch) {\n        super();\n        this.orch = void 0;\n        this.orch = orch;\n      }\n      isOnline(departmentId) {\n        // This function will be converted to sync inside the apps-engine code\n        // TODO: Track Deprecation\n        return deasyncPromise(LivechatTyped.online(departmentId));\n      }\n      async isOnlineAsync(departmentId) {\n        return LivechatTyped.online(departmentId);\n      }\n      async createMessage(message, appId) {\n        var _this$orch$getManager3, _this$orch$getManager4;\n        this.orch.debugLog(\"The App \".concat(appId, \" is creating a new message.\"));\n        if (!message.token) {\n          throw new Error('Invalid token for livechat message');\n        }\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        const guest = this.orch.getConverters().get('visitors').convertAppVisitor(message.visitor);\n        const appMessage = await this.orch.getConverters().get('messages').convertAppMessage(message);\n        const livechatMessage = appMessage;\n        if (guest) {\n          var _this$orch$getManager, _this$orch$getManager2;\n          const visitorSource = {\n            type: OmnichannelSourceType.APP,\n            id: appId,\n            alias: (_this$orch$getManager = this.orch.getManager()) === null || _this$orch$getManager === void 0 ? void 0 : (_this$orch$getManager2 = _this$orch$getManager.getOneById(appId)) === null || _this$orch$getManager2 === void 0 ? void 0 : _this$orch$getManager2.getNameSlug()\n          };\n          const fullVisitor = await LivechatVisitors.findOneEnabledByIdAndSource({\n            _id: guest._id,\n            sourceFilter: {\n              'source.type': visitorSource.type,\n              'source.id': visitorSource.id,\n              'source.alias': visitorSource.alias\n            }\n          });\n          if (!(fullVisitor !== null && fullVisitor !== void 0 && fullVisitor.source)) {\n            await LivechatVisitors.setSourceById(guest._id, visitorSource);\n          }\n        }\n        const msg = await LivechatTyped.sendMessage({\n          guest: guest,\n          message: livechatMessage,\n          agent: undefined,\n          roomInfo: {\n            source: {\n              type: OmnichannelSourceType.APP,\n              id: appId,\n              alias: (_this$orch$getManager3 = this.orch.getManager()) === null || _this$orch$getManager3 === void 0 ? void 0 : (_this$orch$getManager4 = _this$orch$getManager3.getOneById(appId)) === null || _this$orch$getManager4 === void 0 ? void 0 : _this$orch$getManager4.getNameSlug()\n            }\n          }\n        });\n        return msg._id;\n      }\n      async getMessageById(messageId, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the message: \\\"\").concat(messageId, \"\\\"\"));\n        const message = await this.orch.getConverters().get('messages').convertById(messageId);\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        return message;\n      }\n      async updateMessage(message, appId) {\n        var _this$orch$getConvert;\n        this.orch.debugLog(\"The App \".concat(appId, \" is updating a message.\"));\n        const data = {\n          guest: message.visitor,\n          message: await ((_this$orch$getConvert = this.orch.getConverters()) === null || _this$orch$getConvert === void 0 ? void 0 : _this$orch$getConvert.get('messages').convertAppMessage(message))\n        };\n        // @ts-expect-error IVisitor vs ILivechatVisitor :(\n        await LivechatTyped.updateMessage(data);\n      }\n      async createRoom(visitor, agent, appId) {\n        var _this$orch$getConvert2, _this$orch$getManager5, _this$orch$getManager6, _this$orch$getConvert3;\n        let {\n          source,\n          customFields\n        } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        this.orch.debugLog(\"The App \".concat(appId, \" is creating a livechat room.\"));\n        let agentRoom;\n        if (agent !== null && agent !== void 0 && agent.id) {\n          const user = await Users.getAgentInfo(agent.id, settings.get('Livechat_show_agent_email'));\n          if (!user) {\n            throw new Error(\"The agent with id \\\"\".concat(agent.id, \"\\\" was not found.\"));\n          }\n          agentRoom = {\n            agentId: user._id,\n            username: user.username\n          };\n        }\n        const room = await LivechatTyped.createRoom({\n          visitor: (_this$orch$getConvert2 = this.orch.getConverters()) === null || _this$orch$getConvert2 === void 0 ? void 0 : _this$orch$getConvert2.get('visitors').convertAppVisitor(visitor),\n          roomInfo: {\n            source: _objectSpread({\n              type: OmnichannelSourceType.APP,\n              id: appId,\n              alias: (_this$orch$getManager5 = this.orch.getManager()) === null || _this$orch$getManager5 === void 0 ? void 0 : (_this$orch$getManager6 = _this$orch$getManager5.getOneById(appId)) === null || _this$orch$getManager6 === void 0 ? void 0 : _this$orch$getManager6.getName()\n            }, source && source.type === 'app' && {\n              sidebarIcon: source.sidebarIcon,\n              defaultIcon: source.defaultIcon,\n              label: source.label,\n              destination: source.destination\n            })\n          },\n          agent: agentRoom,\n          extraData: customFields && {\n            customFields\n          }\n        });\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        return (_this$orch$getConvert3 = this.orch.getConverters()) === null || _this$orch$getConvert3 === void 0 ? void 0 : _this$orch$getConvert3.get('rooms').convertRoom(room);\n      }\n      async closeRoom(room, comment, closer, appId) {\n        var _this$orch$getConvert4, _this$orch$getConvert5, _this$orch$getConvert6;\n        this.orch.debugLog(\"The App \".concat(appId, \" is closing a livechat room.\"));\n        const user = closer && ((_this$orch$getConvert4 = this.orch.getConverters()) === null || _this$orch$getConvert4 === void 0 ? void 0 : _this$orch$getConvert4.get('users').convertToRocketChat(closer));\n        const visitor = (_this$orch$getConvert5 = this.orch.getConverters()) === null || _this$orch$getConvert5 === void 0 ? void 0 : _this$orch$getConvert5.get('visitors').convertAppVisitor(room.visitor);\n        const closeData = _objectSpread(_objectSpread({\n          room: await ((_this$orch$getConvert6 = this.orch.getConverters()) === null || _this$orch$getConvert6 === void 0 ? void 0 : _this$orch$getConvert6.get('rooms').convertAppRoom(room)),\n          comment\n        }, user && {\n          user\n        }), visitor && {\n          visitor\n        });\n        await LivechatTyped.closeRoom(closeData);\n        return true;\n      }\n      async findOpenRoomsByAgentId(agentId, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat rooms associated with agent \").concat(agentId));\n        if (!agentId) {\n          throw new Error('Invalid agentId');\n        }\n        const rooms = await LivechatRooms.findOpenByAgent(agentId).toArray();\n        return Promise.all(rooms.map(room => {\n          var _this$orch$getConvert7;\n          return (_this$orch$getConvert7 = this.orch.getConverters()) === null || _this$orch$getConvert7 === void 0 ? void 0 : _this$orch$getConvert7.get('rooms').convertRoom(room);\n        }));\n      }\n      async countOpenRoomsByAgentId(agentId, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is counting livechat rooms associated with agent \").concat(agentId));\n        if (!agentId) {\n          throw new Error('Invalid agentId');\n        }\n        return LivechatRooms.countOpenByAgent(agentId);\n      }\n      async findRooms(visitor, departmentId, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n        if (!visitor) {\n          return [];\n        }\n        let result;\n        const extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n        if (departmentId) {\n          result = await LivechatRooms.findOpenByVisitorTokenAndDepartmentId(visitor.token, departmentId, {}, extraQuery).toArray();\n        } else {\n          result = await LivechatRooms.findOpenByVisitorToken(visitor.token, {}, extraQuery).toArray();\n        }\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        return Promise.all(result.map(room => {\n          var _this$orch$getConvert8;\n          return (_this$orch$getConvert8 = this.orch.getConverters()) === null || _this$orch$getConvert8 === void 0 ? void 0 : _this$orch$getConvert8.get('rooms').convertRoom(room);\n        }));\n      }\n      async createVisitor(visitor, appId) {\n        var _visitor$phone, _visitor$visitorEmail;\n        this.orch.debugLog(\"The App \".concat(appId, \" is creating a livechat visitor.\"));\n        const registerData = _objectSpread(_objectSpread({\n          department: visitor.department,\n          username: visitor.username,\n          name: visitor.name,\n          token: visitor.token,\n          email: '',\n          connectionData: undefined,\n          id: visitor.id\n        }, ((_visitor$phone = visitor.phone) === null || _visitor$phone === void 0 ? void 0 : _visitor$phone.length) && {\n          phone: {\n            number: visitor.phone[0].phoneNumber\n          }\n        }), ((_visitor$visitorEmail = visitor.visitorEmails) === null || _visitor$visitorEmail === void 0 ? void 0 : _visitor$visitorEmail.length) && {\n          email: visitor.visitorEmails[0].address\n        });\n        const livechatVisitor = await LivechatTyped.registerGuest(registerData);\n        if (!livechatVisitor) {\n          throw new Error('Invalid visitor, cannot create');\n        }\n        return livechatVisitor._id;\n      }\n      async createAndReturnVisitor(visitor, appId) {\n        var _visitor$phone2, _visitor$visitorEmail2, _this$orch$getConvert9;\n        this.orch.debugLog(\"The App \".concat(appId, \" is creating a livechat visitor.\"));\n        const registerData = _objectSpread(_objectSpread({\n          department: visitor.department,\n          username: visitor.username,\n          name: visitor.name,\n          token: visitor.token,\n          email: '',\n          connectionData: undefined,\n          id: visitor.id\n        }, ((_visitor$phone2 = visitor.phone) === null || _visitor$phone2 === void 0 ? void 0 : _visitor$phone2.length) && {\n          phone: {\n            number: visitor.phone[0].phoneNumber\n          }\n        }), ((_visitor$visitorEmail2 = visitor.visitorEmails) === null || _visitor$visitorEmail2 === void 0 ? void 0 : _visitor$visitorEmail2.length) && {\n          email: visitor.visitorEmails[0].address\n        });\n        const livechatVisitor = await LivechatTyped.registerGuest(registerData);\n        return (_this$orch$getConvert9 = this.orch.getConverters()) === null || _this$orch$getConvert9 === void 0 ? void 0 : _this$orch$getConvert9.get('visitors').convertVisitor(livechatVisitor);\n      }\n      async transferVisitor(visitor, transferData, appId) {\n        var _this$orch$getConvert10, _this$orch$getConvert11;\n        this.orch.debugLog(\"The App \".concat(appId, \" is transfering a livechat.\"));\n        if (!visitor) {\n          throw new Error('Invalid visitor, cannot transfer');\n        }\n        const {\n          targetAgent,\n          targetDepartment: departmentId,\n          currentRoom\n        } = transferData;\n        const appUser = await Users.findOneByAppId(appId, {});\n        if (!appUser) {\n          throw new Error('Invalid app user, cannot transfer');\n        }\n        const {\n          _id,\n          username,\n          name,\n          type\n        } = appUser;\n        const transferredBy = {\n          _id,\n          username,\n          name,\n          type,\n          userType: 'user'\n        };\n        let userId;\n        let transferredTo;\n        if (targetAgent !== null && targetAgent !== void 0 && targetAgent.id) {\n          transferredTo = await Users.findOneAgentById(targetAgent.id, {\n            projection: {\n              _id: 1,\n              username: 1,\n              name: 1\n            }\n          });\n          if (!transferredTo) {\n            throw new Error('Invalid target agent, cannot transfer');\n          }\n          userId = transferredTo._id;\n        }\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        return LivechatTyped.transfer(await ((_this$orch$getConvert10 = this.orch.getConverters()) === null || _this$orch$getConvert10 === void 0 ? void 0 : _this$orch$getConvert10.get('rooms').convertAppRoom(currentRoom)), (_this$orch$getConvert11 = this.orch.getConverters()) === null || _this$orch$getConvert11 === void 0 ? void 0 : _this$orch$getConvert11.get('visitors').convertAppVisitor(visitor), {\n          userId,\n          departmentId,\n          transferredBy,\n          transferredTo\n        });\n      }\n      async findVisitors(query, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n        if (this.orch.isDebugging()) {\n          console.warn('The method AppLivechatBridge.findVisitors is deprecated. Please consider using its alternatives');\n        }\n        return Promise.all((await LivechatVisitors.findEnabledBySource({\n          'source.type': OmnichannelSourceType.APP,\n          'source.id': appId\n        }, query).toArray()).map(async visitor => {\n          var _this$orch$getConvert12;\n          return visitor && ((_this$orch$getConvert12 = this.orch.getConverters()) === null || _this$orch$getConvert12 === void 0 ? void 0 : _this$orch$getConvert12.get('visitors').convertVisitor(visitor));\n        }));\n      }\n      async findVisitorById(id, appId) {\n        var _this$orch$getConvert13;\n        this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n        return (_this$orch$getConvert13 = this.orch.getConverters()) === null || _this$orch$getConvert13 === void 0 ? void 0 : _this$orch$getConvert13.get('visitors').convertByIdAndSource(id, appId);\n      }\n      async findVisitorByEmail(email, appId) {\n        var _this$orch$getConvert14;\n        this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n        return (_this$orch$getConvert14 = this.orch.getConverters()) === null || _this$orch$getConvert14 === void 0 ? void 0 : _this$orch$getConvert14.get('visitors').convertVisitor(await LivechatVisitors.findOneGuestByEmailAddressAndSource(email, {\n          'source.type': OmnichannelSourceType.APP,\n          'source.id': appId\n        }));\n      }\n      async findVisitorByToken(token, appId) {\n        var _this$orch$getConvert15;\n        this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n        return (_this$orch$getConvert15 = this.orch.getConverters()) === null || _this$orch$getConvert15 === void 0 ? void 0 : _this$orch$getConvert15.get('visitors').convertVisitor(await LivechatVisitors.getVisitorByTokenAndSource({\n          token,\n          sourceFilter: {\n            'source.type': OmnichannelSourceType.APP,\n            'source.id': appId\n          }\n        }));\n      }\n      async findVisitorByPhoneNumber(phoneNumber, appId) {\n        var _this$orch$getConvert16;\n        this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat visitors.\"));\n        return (_this$orch$getConvert16 = this.orch.getConverters()) === null || _this$orch$getConvert16 === void 0 ? void 0 : _this$orch$getConvert16.get('visitors').convertVisitor(await LivechatVisitors.findOneVisitorByPhoneAndSource(phoneNumber, {\n          'source.type': OmnichannelSourceType.APP,\n          'source.id': appId\n        }));\n      }\n      async findDepartmentByIdOrName(value, appId) {\n        var _this$orch$getConvert17;\n        this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat departments.\"));\n        return (_this$orch$getConvert17 = this.orch.getConverters()) === null || _this$orch$getConvert17 === void 0 ? void 0 : _this$orch$getConvert17.get('departments').convertDepartment(await LivechatDepartment.findOneByIdOrName(value, {}));\n      }\n      async findDepartmentsEnabledWithAgents(appId) {\n        var _this$orch$getConvert18;\n        this.orch.debugLog(\"The App \".concat(appId, \" is looking for livechat departments.\"));\n        const converter = (_this$orch$getConvert18 = this.orch.getConverters()) === null || _this$orch$getConvert18 === void 0 ? void 0 : _this$orch$getConvert18.get('departments');\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        const boundConverter = converter.convertDepartment.bind(converter);\n        return Promise.all((await LivechatDepartment.findEnabledWithAgents().toArray()).map(boundConverter));\n      }\n      async _fetchLivechatRoomMessages(appId, roomId) {\n        var _this$orch$getConvert19;\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the transcript for livechat room \").concat(roomId, \".\"));\n        const messageConverter = (_this$orch$getConvert19 = this.orch.getConverters()) === null || _this$orch$getConvert19 === void 0 ? void 0 : _this$orch$getConvert19.get('messages');\n        if (!messageConverter) {\n          throw new Error('Could not get the message converter to process livechat room messages');\n        }\n        const livechatMessages = await getRoomMessages({\n          rid: roomId\n        });\n        return Promise.all(await livechatMessages.map(message => messageConverter.convertMessage(message, livechatMessages)).toArray());\n      }\n      async setCustomFields(data, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is setting livechat visitor's custom fields.\"));\n        return LivechatTyped.setCustomFields(data);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","AppLivechatBridge","LivechatBridge","OmnichannelSourceType","LivechatVisitors","LivechatRooms","LivechatDepartment","Users","callbacks","deasyncPromise","LivechatTyped","Livechat","getRoomMessages","settings","__reifyWaitForDeps__","constructor","orch","isOnline","departmentId","online","isOnlineAsync","createMessage","message","appId","_this$orch$getManager3","_this$orch$getManager4","debugLog","concat","token","Error","guest","getConverters","get","convertAppVisitor","visitor","appMessage","convertAppMessage","livechatMessage","_this$orch$getManager","_this$orch$getManager2","visitorSource","type","APP","id","alias","getManager","getOneById","getNameSlug","fullVisitor","findOneEnabledByIdAndSource","_id","sourceFilter","source","setSourceById","msg","sendMessage","agent","undefined","roomInfo","getMessageById","messageId","convertById","updateMessage","_this$orch$getConvert","data","createRoom","_this$orch$getConvert2","_this$orch$getManager5","_this$orch$getManager6","_this$orch$getConvert3","customFields","arguments","length","agentRoom","user","getAgentInfo","agentId","username","room","getName","sidebarIcon","defaultIcon","label","destination","extraData","convertRoom","closeRoom","comment","closer","_this$orch$getConvert4","_this$orch$getConvert5","_this$orch$getConvert6","convertToRocketChat","closeData","convertAppRoom","findOpenRoomsByAgentId","rooms","findOpenByAgent","toArray","Promise","all","map","_this$orch$getConvert7","countOpenRoomsByAgentId","countOpenByAgent","findRooms","result","extraQuery","run","findOpenByVisitorTokenAndDepartmentId","findOpenByVisitorToken","_this$orch$getConvert8","createVisitor","_visitor$phone","_visitor$visitorEmail","registerData","department","name","email","connectionData","phone","number","phoneNumber","visitorEmails","address","livechatVisitor","registerGuest","createAndReturnVisitor","_visitor$phone2","_visitor$visitorEmail2","_this$orch$getConvert9","convertVisitor","transferVisitor","transferData","_this$orch$getConvert10","_this$orch$getConvert11","targetAgent","targetDepartment","currentRoom","appUser","findOneByAppId","transferredBy","userType","userId","transferredTo","findOneAgentById","projection","transfer","findVisitors","query","isDebugging","console","warn","findEnabledBySource","_this$orch$getConvert12","findVisitorById","_this$orch$getConvert13","convertByIdAndSource","findVisitorByEmail","_this$orch$getConvert14","findOneGuestByEmailAddressAndSource","findVisitorByToken","_this$orch$getConvert15","getVisitorByTokenAndSource","findVisitorByPhoneNumber","_this$orch$getConvert16","findOneVisitorByPhoneAndSource","findDepartmentByIdOrName","value","_this$orch$getConvert17","convertDepartment","findOneByIdOrName","findDepartmentsEnabledWithAgents","_this$orch$getConvert18","converter","boundConverter","bind","findEnabledWithAgents","_fetchLivechatRoomMessages","roomId","_this$orch$getConvert19","messageConverter","livechatMessages","rid","convertMessage","setCustomFields","__reify_async_result__","_reifyError","self","async"],"sources":["app/apps/server/bridges/livechat.ts"],"sourcesContent":["import type { IAppServerOrchestrator, IAppsLivechatMessage, IAppsMessage } from '@rocket.chat/apps';\nimport type { IExtraRoomParams } from '@rocket.chat/apps-engine/definition/accessors/ILivechatCreator';\nimport type { IVisitor, ILivechatRoom, ILivechatTransferData, IDepartment } from '@rocket.chat/apps-engine/definition/livechat';\nimport type { IMessage as IAppsEngineMessage } from '@rocket.chat/apps-engine/definition/messages';\nimport type { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport { LivechatBridge } from '@rocket.chat/apps-engine/server/bridges/LivechatBridge';\nimport type { ILivechatDepartment, IOmnichannelRoom, SelectedAgent, IMessage, ILivechatVisitor } from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, LivechatRooms, LivechatDepartment, Users } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { deasyncPromise } from '../../../../server/deasync/deasync';\nimport { Livechat as LivechatTyped } from '../../../livechat/server/lib/LivechatTyped';\nimport { getRoomMessages } from '../../../livechat/server/lib/getRoomMessages';\nimport type { ILivechatMessage } from '../../../livechat/server/lib/localTypes';\nimport { settings } from '../../../settings/server';\n\ndeclare module '@rocket.chat/apps/dist/converters/IAppMessagesConverter' {\n\texport interface IAppMessagesConverter {\n\t\tconvertMessage(message: IMessage, cacheObj?: object): Promise<IAppsMessage>;\n\t}\n}\n\ndeclare module '@rocket.chat/apps-engine/definition/accessors/ILivechatCreator' {\n\tinterface IExtraRoomParams {\n\t\tcustomFields?: Record<string, unknown>;\n\t}\n}\n\nexport class AppLivechatBridge extends LivechatBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected isOnline(departmentId?: string): boolean {\n\t\t// This function will be converted to sync inside the apps-engine code\n\t\t// TODO: Track Deprecation\n\t\treturn deasyncPromise(LivechatTyped.online(departmentId));\n\t}\n\n\tprotected async isOnlineAsync(departmentId?: string): Promise<boolean> {\n\t\treturn LivechatTyped.online(departmentId);\n\t}\n\n\tprotected async createMessage(message: IAppsLivechatMessage, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new message.`);\n\n\t\tif (!message.token) {\n\t\t\tthrow new Error('Invalid token for livechat message');\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst guest = this.orch.getConverters().get('visitors').convertAppVisitor(message.visitor);\n\t\tconst appMessage = (await this.orch.getConverters().get('messages').convertAppMessage(message)) as IMessage | undefined;\n\t\tconst livechatMessage = appMessage as ILivechatMessage | undefined;\n\n\t\tif (guest) {\n\t\t\tconst visitorSource = {\n\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\tid: appId,\n\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getNameSlug(),\n\t\t\t};\n\t\t\tconst fullVisitor = await LivechatVisitors.findOneEnabledByIdAndSource({\n\t\t\t\t_id: guest._id,\n\t\t\t\tsourceFilter: { 'source.type': visitorSource.type, 'source.id': visitorSource.id, 'source.alias': visitorSource.alias },\n\t\t\t});\n\t\t\tif (!fullVisitor?.source) {\n\t\t\t\tawait LivechatVisitors.setSourceById(guest._id, visitorSource);\n\t\t\t}\n\t\t}\n\n\t\tconst msg = await LivechatTyped.sendMessage({\n\t\t\tguest: guest as ILivechatVisitor,\n\t\t\tmessage: livechatMessage as ILivechatMessage,\n\t\t\tagent: undefined,\n\t\t\troomInfo: {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\t\tid: appId,\n\t\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getNameSlug(),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\treturn msg._id;\n\t}\n\n\tprotected async getMessageById(messageId: string, appId: string): Promise<IAppsLivechatMessage> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the message: \"${messageId}\"`);\n\n\t\tconst message = await this.orch.getConverters().get('messages').convertById(messageId);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn message as IAppsLivechatMessage;\n\t}\n\n\tprotected async updateMessage(message: IAppsLivechatMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a message.`);\n\n\t\tconst data = {\n\t\t\tguest: message.visitor,\n\t\t\tmessage: await this.orch.getConverters()?.get('messages').convertAppMessage(message),\n\t\t};\n\n\t\t// @ts-expect-error IVisitor vs ILivechatVisitor :(\n\t\tawait LivechatTyped.updateMessage(data);\n\t}\n\n\tprotected async createRoom(\n\t\tvisitor: IVisitor,\n\t\tagent: IUser,\n\t\tappId: string,\n\t\t{ source, customFields }: IExtraRoomParams = {},\n\t): Promise<ILivechatRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat room.`);\n\n\t\tlet agentRoom: SelectedAgent | undefined;\n\t\tif (agent?.id) {\n\t\t\tconst user = await Users.getAgentInfo(agent.id, settings.get('Livechat_show_agent_email'));\n\t\t\tif (!user) {\n\t\t\t\tthrow new Error(`The agent with id \"${agent.id}\" was not found.`);\n\t\t\t}\n\t\t\tagentRoom = { agentId: user._id, username: user.username };\n\t\t}\n\n\t\tconst room = await LivechatTyped.createRoom({\n\t\t\tvisitor: this.orch.getConverters()?.get('visitors').convertAppVisitor(visitor),\n\t\t\troomInfo: {\n\t\t\t\tsource: {\n\t\t\t\t\ttype: OmnichannelSourceType.APP,\n\t\t\t\t\tid: appId,\n\t\t\t\t\talias: this.orch.getManager()?.getOneById(appId)?.getName(),\n\t\t\t\t\t...(source &&\n\t\t\t\t\t\tsource.type === 'app' && {\n\t\t\t\t\t\t\tsidebarIcon: source.sidebarIcon,\n\t\t\t\t\t\t\tdefaultIcon: source.defaultIcon,\n\t\t\t\t\t\t\tlabel: source.label,\n\t\t\t\t\t\t\tdestination: source.destination,\n\t\t\t\t\t\t}),\n\t\t\t\t},\n\t\t\t},\n\t\t\tagent: agentRoom,\n\t\t\textraData: customFields && { customFields },\n\t\t});\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn this.orch.getConverters()?.get('rooms').convertRoom(room) as Promise<ILivechatRoom>;\n\t}\n\n\tprotected async closeRoom(room: ILivechatRoom, comment: string, closer: IUser | undefined, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is closing a livechat room.`);\n\n\t\tconst user = closer && this.orch.getConverters()?.get('users').convertToRocketChat(closer);\n\t\tconst visitor = this.orch.getConverters()?.get('visitors').convertAppVisitor(room.visitor);\n\n\t\tconst closeData: any = {\n\t\t\troom: await this.orch.getConverters()?.get('rooms').convertAppRoom(room),\n\t\t\tcomment,\n\t\t\t...(user && { user }),\n\t\t\t...(visitor && { visitor }),\n\t\t};\n\n\t\tawait LivechatTyped.closeRoom(closeData);\n\n\t\treturn true;\n\t}\n\n\tprotected async findOpenRoomsByAgentId(agentId: string, appId: string): Promise<ILivechatRoom[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat rooms associated with agent ${agentId}`);\n\n\t\tif (!agentId) {\n\t\t\tthrow new Error('Invalid agentId');\n\t\t}\n\n\t\tconst rooms = await LivechatRooms.findOpenByAgent(agentId).toArray();\n\t\treturn Promise.all(rooms.map((room) => this.orch.getConverters()?.get('rooms').convertRoom(room) as Promise<ILivechatRoom>));\n\t}\n\n\tprotected async countOpenRoomsByAgentId(agentId: string, appId: string): Promise<number> {\n\t\tthis.orch.debugLog(`The App ${appId} is counting livechat rooms associated with agent ${agentId}`);\n\n\t\tif (!agentId) {\n\t\t\tthrow new Error('Invalid agentId');\n\t\t}\n\n\t\treturn LivechatRooms.countOpenByAgent(agentId);\n\t}\n\n\tprotected async findRooms(visitor: IVisitor, departmentId: string | null, appId: string): Promise<Array<ILivechatRoom>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\tif (!visitor) {\n\t\t\treturn [];\n\t\t}\n\n\t\tlet result;\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\n\t\tif (departmentId) {\n\t\t\tresult = await LivechatRooms.findOpenByVisitorTokenAndDepartmentId(visitor.token, departmentId, {}, extraQuery).toArray();\n\t\t} else {\n\t\t\tresult = await LivechatRooms.findOpenByVisitorToken(visitor.token, {}, extraQuery).toArray();\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn Promise.all(result.map((room) => this.orch.getConverters()?.get('rooms').convertRoom(room) as Promise<ILivechatRoom>));\n\t}\n\n\tprotected async createVisitor(visitor: IVisitor, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat visitor.`);\n\n\t\tconst registerData = {\n\t\t\tdepartment: visitor.department,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\temail: '',\n\t\t\tconnectionData: undefined,\n\t\t\tid: visitor.id,\n\t\t\t...(visitor.phone?.length && { phone: { number: visitor.phone[0].phoneNumber } }),\n\t\t\t...(visitor.visitorEmails?.length && { email: visitor.visitorEmails[0].address }),\n\t\t};\n\n\t\tconst livechatVisitor = await LivechatTyped.registerGuest(registerData);\n\n\t\tif (!livechatVisitor) {\n\t\t\tthrow new Error('Invalid visitor, cannot create');\n\t\t}\n\n\t\treturn livechatVisitor._id;\n\t}\n\n\tprotected async createAndReturnVisitor(visitor: IVisitor, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a livechat visitor.`);\n\n\t\tconst registerData = {\n\t\t\tdepartment: visitor.department,\n\t\t\tusername: visitor.username,\n\t\t\tname: visitor.name,\n\t\t\ttoken: visitor.token,\n\t\t\temail: '',\n\t\t\tconnectionData: undefined,\n\t\t\tid: visitor.id,\n\t\t\t...(visitor.phone?.length && { phone: { number: visitor.phone[0].phoneNumber } }),\n\t\t\t...(visitor.visitorEmails?.length && { email: visitor.visitorEmails[0].address }),\n\t\t};\n\n\t\tconst livechatVisitor = await LivechatTyped.registerGuest(registerData);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertVisitor(livechatVisitor);\n\t}\n\n\tprotected async transferVisitor(visitor: IVisitor, transferData: ILivechatTransferData, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is transfering a livechat.`);\n\n\t\tif (!visitor) {\n\t\t\tthrow new Error('Invalid visitor, cannot transfer');\n\t\t}\n\n\t\tconst { targetAgent, targetDepartment: departmentId, currentRoom } = transferData;\n\n\t\tconst appUser = await Users.findOneByAppId(appId, {});\n\t\tif (!appUser) {\n\t\t\tthrow new Error('Invalid app user, cannot transfer');\n\t\t}\n\t\tconst { _id, username, name, type } = appUser;\n\t\tconst transferredBy = {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\tname,\n\t\t\ttype,\n\t\t\tuserType: 'user',\n\t\t} as const;\n\n\t\tlet userId;\n\t\tlet transferredTo;\n\n\t\tif (targetAgent?.id) {\n\t\t\ttransferredTo = await Users.findOneAgentById(targetAgent.id, {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1 },\n\t\t\t});\n\t\t\tif (!transferredTo) {\n\t\t\t\tthrow new Error('Invalid target agent, cannot transfer');\n\t\t\t}\n\n\t\t\tuserId = transferredTo._id;\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\treturn LivechatTyped.transfer(\n\t\t\t(await this.orch.getConverters()?.get('rooms').convertAppRoom(currentRoom)) as IOmnichannelRoom,\n\t\t\tthis.orch.getConverters()?.get('visitors').convertAppVisitor(visitor),\n\t\t\t{ userId, departmentId, transferredBy, transferredTo },\n\t\t);\n\t}\n\n\tprotected async findVisitors(query: object, appId: string): Promise<Array<IVisitor>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\tif (this.orch.isDebugging()) {\n\t\t\tconsole.warn('The method AppLivechatBridge.findVisitors is deprecated. Please consider using its alternatives');\n\t\t}\n\n\t\treturn Promise.all(\n\t\t\t(await LivechatVisitors.findEnabledBySource({ 'source.type': OmnichannelSourceType.APP, 'source.id': appId }, query).toArray()).map(\n\t\t\t\tasync (visitor) => visitor && this.orch.getConverters()?.get('visitors').convertVisitor(visitor),\n\t\t\t),\n\t\t);\n\t}\n\n\tprotected async findVisitorById(id: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch.getConverters()?.get('visitors').convertByIdAndSource(id, appId);\n\t}\n\n\tprotected async findVisitorByEmail(email: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('visitors')\n\t\t\t.convertVisitor(\n\t\t\t\tawait LivechatVisitors.findOneGuestByEmailAddressAndSource(email, { 'source.type': OmnichannelSourceType.APP, 'source.id': appId }),\n\t\t\t);\n\t}\n\n\tprotected async findVisitorByToken(token: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('visitors')\n\t\t\t.convertVisitor(\n\t\t\t\tawait LivechatVisitors.getVisitorByTokenAndSource({\n\t\t\t\t\ttoken,\n\t\t\t\t\tsourceFilter: { 'source.type': OmnichannelSourceType.APP, 'source.id': appId },\n\t\t\t\t}),\n\t\t\t);\n\t}\n\n\tprotected async findVisitorByPhoneNumber(phoneNumber: string, appId: string): Promise<IVisitor | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat visitors.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('visitors')\n\t\t\t.convertVisitor(\n\t\t\t\tawait LivechatVisitors.findOneVisitorByPhoneAndSource(phoneNumber, {\n\t\t\t\t\t'source.type': OmnichannelSourceType.APP,\n\t\t\t\t\t'source.id': appId,\n\t\t\t\t}),\n\t\t\t);\n\t}\n\n\tprotected async findDepartmentByIdOrName(value: string, appId: string): Promise<IDepartment | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat departments.`);\n\n\t\treturn this.orch\n\t\t\t.getConverters()\n\t\t\t?.get('departments')\n\t\t\t.convertDepartment(await LivechatDepartment.findOneByIdOrName(value, {}));\n\t}\n\n\tprotected async findDepartmentsEnabledWithAgents(appId: string): Promise<Array<IDepartment>> {\n\t\tthis.orch.debugLog(`The App ${appId} is looking for livechat departments.`);\n\n\t\tconst converter = this.orch.getConverters()?.get('departments');\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst boundConverter = converter.convertDepartment.bind(converter) as (_: ILivechatDepartment) => Promise<IDepartment>;\n\n\t\treturn Promise.all((await LivechatDepartment.findEnabledWithAgents().toArray()).map(boundConverter));\n\t}\n\n\tprotected async _fetchLivechatRoomMessages(appId: string, roomId: string): Promise<Array<IAppsEngineMessage>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the transcript for livechat room ${roomId}.`);\n\t\tconst messageConverter = this.orch.getConverters()?.get('messages');\n\n\t\tif (!messageConverter) {\n\t\t\tthrow new Error('Could not get the message converter to process livechat room messages');\n\t\t}\n\n\t\tconst livechatMessages = await getRoomMessages({ rid: roomId });\n\t\treturn Promise.all(await livechatMessages.map((message) => messageConverter.convertMessage(message, livechatMessages)).toArray());\n\t}\n\n\tprotected async setCustomFields(\n\t\tdata: { token: IVisitor['token']; key: string; value: string; overwrite: boolean },\n\t\tappId: string,\n\t): Promise<number> {\n\t\tthis.orch.debugLog(`The App ${appId} is setting livechat visitor's custom fields.`);\n\n\t\treturn LivechatTyped.setCustomFields(data);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"44b0a1ed116e0a1ff11f0914894b60b4898c3f05"}
