{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/users.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/users.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/users.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/users.ts","sourceRoot":"","sources":["app/api/server/v1/users.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,4BAA4B,CAAC;AAEpE,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAC3D,OAAO,EACN,sBAAsB,EACtB,+BAA+B,EAC/B,8BAA8B,EAC9B,yBAAyB,EACzB,sBAAsB,EACtB,4BAA4B,EAC5B,wBAAwB,EACxB,sBAAsB,EACtB,qBAAqB,EACrB,wBAAwB,EACxB,qBAAqB,EACrB,uBAAuB,EACvB,mCAAmC,EACnC,+BAA+B,EAC/B,yCAAyC,EACzC,sCAAsC,GACtC,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,sBAAsB,EAAE,MAAM,oBAAoB,CAAC;AAC5D,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAGvC,OAAO,EAAE,IAAI,EAAE,MAAM,6BAA6B,CAAC;AACnD,OAAO,EAAE,yBAAyB,EAAE,MAAM,wCAAwC,CAAC;AACnF,OAAO,EAAE,gBAAgB,EAAE,MAAM,yCAAyC,CAAC;AAC3E,OAAO,EAAE,mBAAmB,EAAE,MAAM,gDAAgD,CAAC;AACrF,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACvE,OAAO,EAAE,SAAS,EAAE,MAAM,yCAAyC,CAAC;AACpE,OAAO,EAAE,kBAAkB,EAAE,MAAM,uDAAuD,CAAC;AAC3F,OAAO,EACN,yBAAyB,EACzB,uCAAuC,GACvC,MAAM,yDAAyD,CAAC;AACjE,OAAO,EAAE,uCAAuC,EAAE,MAAM,+CAA+C,CAAC;AACxG,OAAO,EAAE,gBAAgB,EAAE,MAAM,gDAAgD,CAAC;AAClF,OAAO,EAAE,iCAAiC,EAAE,MAAM,iEAAiE,CAAC;AACpH,OAAO,EAAE,QAAQ,EAAE,MAAM,wCAAwC,CAAC;AAClE,OAAO,EAAE,aAAa,EAAE,MAAM,6CAA6C,CAAC;AAC5E,OAAO,EAAE,aAAa,EAAE,MAAM,6CAA6C,CAAC;AAC5E,OAAO,EAAE,yBAAyB,EAAE,MAAM,2CAA2C,CAAC;AACtF,OAAO,EAAE,oBAAoB,EAAE,MAAM,oDAAoD,CAAC;AAC1F,OAAO,EAAE,iBAAiB,EAAE,MAAM,iDAAiD,CAAC;AACpF,OAAO,EAAE,gBAAgB,EAAE,MAAM,gDAAgD,CAAC;AAClF,OAAO,EAAE,kBAAkB,EAAE,uBAAuB,EAAE,MAAM,wCAAwC,CAAC;AACrG,OAAO,EAAE,mBAAmB,EAAE,MAAM,yCAAyC,CAAC;AAC9E,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,8BAA8B,CAAC;AACtD,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAC;AACnE,OAAO,EAAE,iBAAiB,EAAE,MAAM,8BAA8B,CAAC;AACjE,OAAO,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAC;AAC/D,OAAO,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAC;AAC7D,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AACnD,OAAO,EAAE,0BAA0B,EAAE,uBAAuB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAE5I,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,KAAK,EAAE,EACvB;IACC,KAAK,CAAC,GAAG;QACR,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEvD,MAAM,GAAG,GAAG,MAAM,CAAC,WAAW,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3E,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;QAEzC,OAAO;YACN,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,GAAG;SACT,CAAC;IACH,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,2BAA2B,EAC3B;IACC,YAAY,EAAE,IAAI;CAClB,EACD;IACC,KAAK,CAAC,GAAG;QACR,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;QAElE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;IACxC,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,cAAc,EACd,EAAE,YAAY,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,cAAc,EAAE,uBAAuB,EAAE,EACxF;IACC,KAAK,CAAC,IAAI;QACT,MAAM,QAAQ,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QAE1E,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YACxD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;QAC3D,CAAC;QAED,MAAM,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEtC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvC,MAAM,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;YACxD,MAAM,EACL,MAAM,EACN,IAAI,EAAE,EAAE,MAAM,EAAE,EAChB,iBAAiB,GACjB,GAAG,IAAI,CAAC,UAAU,CAAC;YAEpB,MAAM,MAAM,CAAC,SAAS,CAAC,qBAAqB,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC3F,CAAC;QACD,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE/C,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC;QACrF,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACzC,CAAC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IACjC,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,0BAA0B,EAC1B,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,mCAAmC,EAAE,EAC3E;IACC,KAAK,CAAC,IAAI;QACT,MAAM,QAAQ,GAAG;YAChB,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK;YACjC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI;YACnC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ;YACvC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ;YACvC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG;YAC7B,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU;YAC3C,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU;YAC3C,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW;YAC7C,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe;SACnD,CAAC;QAEF,IAAI,QAAQ,CAAC,QAAQ,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YAChE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;QAC3D,CAAC;QAED,wGAAwG;QACxG,MAAM,gBAAgB,GAAG,CAAC,QAAQ,CAAC,aAAa;YAC/C,CAAC,CAAC,IAAI;YACN,CAAC,CAAC;gBACA,aAAa,EAAE,QAAQ,CAAC,aAAa;gBACrC,eAAe,EAAE,UAAU;aAC1B,CAAC;QAEL,MAAM,MAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;QAEpG,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,GAAG,CAAC,EAAE,CAAC,sBAAsB,EAAE,CAAC;SACzF,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,sBAAsB,EACtB,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,+BAA+B,EAAE,EACvE;IACC,KAAK,CAAC,IAAI;QACT,IACC,IAAI,CAAC,UAAU,CAAC,MAAM;YACtB,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM;YACtC,CAAC,CAAC,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC,EAC/D,CAAC;YACF,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QACnF,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;QAC7E,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;YACxC,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,+DAA+D,CAAC,CAAC;QAC/G,CAAC;QAED,MAAM,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACxD,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE;YAC5C,UAAU,EAAE;gBACX,sBAAsB,EAAE,CAAC;gBACzB,UAAU,EAAE,CAAC;aACb;SACD,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACzC,CAAC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,IAAI,EAAE;gBACL,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,QAAQ,EAAE;oBACT,WAAW,EAAE;wBACZ,GAAG,IAAI,CAAC,QAAQ,EAAE,WAAW;wBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;qBACvB;iBACD;aACuD;SACzD,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,qBAAqB,EAAE,EAC7D;IACC,KAAK,CAAC,IAAI;QACT,MAAM,sBAAsB,GAAG,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC;QAE/F,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gCAAgC,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAChF,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,8BAA8B,EAAE;gBAC3E,MAAM,EAAE,iBAAiB;aACzB,CAAC,CAAC;QACJ,CAAC;QAED,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,IAErB,EAAE;YACH,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC/D,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACvC,CAAC;YACD,IAAI,sBAAsB,EAAE,CAAC;gBAC5B,OAAO,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC3C,CAAC;QACF,CAAC,CAAC,EAAE,CAAC;QAEL,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;QAC9B,CAAC;QAED,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;YAC/B,MAAM,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAChE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;QAED,MAAM,KAAK,GAAG,MAAM,iBAAiB,CACpC;YACC,OAAO,EAAE,IAAI,CAAC,OAAO;SACrB,EACD,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,EAAE,CACrE,CAAC;QAEF,IAAI,CAAC,KAAK,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;QACxD,CAAC;QAED,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;QAE/C,MAAM,qBAAqB,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC;QAC/D,IAAI,qBAAqB,EAAE,CAAC;YAC3B,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;gBACnB,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAChF,CAAC;iBAAM,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAC5B,IAAI,GAAG,MAAM,KAAK,CAAC,6BAA6B,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YACpG,CAAC;YAED,IAAI,CAAC,IAAI,EAAE,CAAC;gBACX,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,6EAA6E,CAAC,CAAC;YAC7H,CAAC;YAED,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC;YAC/C,IAAI,aAAa,IAAI,CAAC,CAAC,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,EAAE,CAAC;gBACzF,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;YAC5D,CAAC;QACF,CAAC;QAED,MAAM,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QAExD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,cAAc,EACd,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,sBAAsB,EAAE,EAC9D;IACC,KAAK,CAAC,IAAI;QACT,wCAAwC;QACxC,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,KAAK,WAAW,EAAE,CAAC;YAChE,IAAI,CAAC,UAAU,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAC5C,CAAC;QAED,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;YACtE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;QAC3D,CAAC;QAED,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;YAClC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/D,MAAM,MAAM,GAAG,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;QAEvE,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;YAClC,MAAM,iCAAiC,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAC/E,CAAC;QAED,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;YACnD,MAAM,MAAM,CAAC,SAAS,CAAC,qBAAqB,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAC/E,CAAC;QAED,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE/C,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACzC,CAAC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IACjC,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,cAAc,EACd,EAAE,YAAY,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,aAAa,CAAC,EAAE,EAC5D;IACC,KAAK,CAAC,IAAI;QACT,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtD,MAAM,EAAE,iBAAiB,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAEtD,MAAM,MAAM,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAElE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,wBAAwB,EACxB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACf,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,wCAAwC,CAAC,CAAC;QACjE,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gCAAgC,CAAC,EAAE,CAAC;YACrD,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;QAC5D,CAAC;QAED,MAAM,EAAE,iBAAiB,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAEtD,MAAM,MAAM,CAAC,SAAS,CAAC,sBAAsB,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QAE5E,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,uBAAuB,EACvB;IACC,YAAY,EAAE,IAAI;IAClB,cAAc,EAAE,+BAA+B;IAC/C,mBAAmB,EAAE;QACpB,IAAI,EAAE,EAAE,WAAW,EAAE,CAAC,+BAA+B,EAAE,2BAA2B,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE;KAC1G;CACD,EACD;IACC,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,iBAAiB,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAC5E,MAAM,MAAM,CAAC,SAAS,CAAC,qBAAqB,EAAE,MAAM,EAAE,YAAY,EAAE,iBAAiB,CAAC,CAAC;QAEvF,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5F,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACzC,CAAC;QACD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,IAAI;SACJ,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,sBAAsB,EACtB,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,8BAA8B,EAAE,mBAAmB,EAAE,CAAC,+BAA+B,CAAC,EAAE,EAC9H;IACC,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,QAAQ,EAAE,IAAI,GAAG,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAEpD,MAAM,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC;QAChC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,CAAC;QAExD,gGAAgG;QAChG,MAAM,EAAE,aAAa,EAAE,KAAK,EAAE,GAAG,MAAM,KAAK,CAAC,iCAAiC,CAAC,YAAY,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAE1G,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,KAAK;SACL,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,YAAY,EACZ,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,yBAAyB,EAAE,EACjE;IACC,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE/C,MAAM,WAAW,GAChB,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC9F,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YAC1G,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;QAE5G,IAAI,CAAC,WAAW,EAAE,CAAC;YAClB,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;QAChD,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,uCAAuC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,CAAC;QAExF,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC1C,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,MAAM,CAAC;QACxC,IAAI,MAAM,CAAC,SAAS,KAAK,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,0BAA0B,CAAC,CAAC,CAAC,EAAE,CAAC;YAC/G,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;gBACrB,IAAI,EAAE;oBACL,GAAG,IAAI;oBACP,KAAK,EAAE,MAAM,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE;wBACjD,UAAU,EAAE;4BACX,GAAG,EAAE,CAAC;4BACN,IAAI,EAAE,CAAC;4BACP,CAAC,EAAE,CAAC;4BACJ,KAAK,EAAE,CAAC;4BACR,MAAM,EAAE,CAAC;4BACT,SAAS,EAAE,CAAC;yBACZ;wBACD,IAAI,EAAE;4BACL,CAAC,EAAE,CAAC;4BACJ,IAAI,EAAE,CAAC;yBACP;qBACD,CAAC,CAAC,OAAO,EAAE;iBACZ;aACD,CAAC,CAAC;QACJ,CAAC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,IAAI;SACJ,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,YAAY,EACZ;IACC,YAAY,EAAE,IAAI;IAClB,eAAe,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;IAChC,mBAAmB,EAAE,CAAC,aAAa,CAAC;CACpC,EACD;IACC,KAAK,CAAC,GAAG;QACR,IACC,QAAQ,CAAC,GAAG,CAAC,sDAAsD,CAAC;YACpE,CAAC,CAAC,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC,EAC5D,CAAC;YACF,OAAO,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;QAC9B,CAAC;QAED,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5D,MAAM,aAAa,GAAG,gBAAgB,CAAC,KAAK,EAAE,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,2BAA2B,CAAC,CAAC,CAAC;QAClH,MAAM,cAAc,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAEjD,MAAM,eAAe,GAAG,kBAAkB,CAAC,cAAc,CAAC,CAAC;QAE3D,MAAM,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAEzD,IACC,CAAC,YAAY,CACZ,aAAa,EACb;YACC,GAAG,mBAAmB;YACtB,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,kBAAkB;YAC5D,mBAAmB,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,YAAY;YACxD,mBAAmB,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ;YAChD,mBAAmB,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ;YAChD,mBAAmB,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,gBAAgB;SAChE,CAAC,MAAM,CAAC,OAAO,CAAa,EAC7B,IAAI,CAAC,eAAe,CACpB,EACA,CAAC;YACF,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/E,CAAC;QAED,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;QAE3C,IAAI,IAAI,EAAE,MAAM,EAAE,CAAC;YAClB,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,EAAE,IAAI,EAAE,CAAC;YAChB,UAAU,CAAC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC;QACxC,CAAC;QAED,MAAM,KAAK,GACV,KAAK,KAAK,CAAC;YACV,CAAC,CAAC;gBACA;oBACC,MAAM,EAAE,KAAK;iBACb;aACA;YACH,CAAC,CAAC,EAAE,CAAC;QAEP,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,GAAG;aAC5B,SAAS,CAA8D;YACvE;gBACC,MAAM,EAAE,aAAa;aACrB;YACD;gBACC,QAAQ,EAAE,eAAe;aACzB;YACD;gBACC,UAAU,EAAE;oBACX,eAAe,EAAE;wBAChB,QAAQ,EAAE,OAAO;qBACjB;iBACD;aACD;YACD;gBACC,MAAM,EAAE;oBACP,aAAa,EAAE;wBACd;4BACC,KAAK,EAAE,UAAU;yBACjB;wBACD;4BACC,KAAK,EAAE,MAAM;yBACb;wBACD,GAAG,KAAK;qBACR;oBACD,UAAU,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;iBAC3D;aACD;SACD,CAAC;aACD,OAAO,EAAE,CAAC;QAEZ,MAAM,EACL,aAAa,EAAE,KAAK,EACpB,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,GACtC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAEd,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,KAAK;YACL,KAAK,EAAE,KAAK,CAAC,MAAM;YACnB,MAAM;YACN,KAAK;SACL,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,oBAAoB,EACpB;IACC,YAAY,EAAE,IAAI;IAClB,cAAc,EAAE,sBAAsB;IACtC,mBAAmB,EAAE,CAAC,aAAa,CAAC;CACpC,EACD;IACC,KAAK,CAAC,GAAG;QACR,IACC,QAAQ,CAAC,GAAG,CAAC,sDAAsD,CAAC;YACpE,CAAC,CAAC,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC,EAC5D,CAAC;YACF,OAAO,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;QAC9B,CAAC;QAED,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC7C,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAE1E,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CACpB,MAAM,0BAA0B,CAAC;YAChC,GAAG,EAAE,IAAI,CAAC,MAAM;YAChB,MAAM;YACN,KAAK;YACL,IAAI;YACJ,MAAM;YACN,KAAK;YACL,UAAU;YACV,WAAW;YACX,IAAI;SACJ,CAAC,CACF,CAAC;IACH,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,wBAAwB,EACxB;IACC,YAAY,EAAE,IAAI;IAClB,cAAc,EAAE,4BAA4B;IAC5C,mBAAmB,EAAE,CAAC,WAAW,CAAC;CAClC,EACD;IACC,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,MAAM,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAE9B,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,gBAAgB,EAChB;IACC,YAAY,EAAE,KAAK;IACnB,kBAAkB,EAAE;QACnB,kBAAkB,EAAE,QAAQ,CAAC,GAAG,CAAC,iCAAiC,CAAC,IAAI,CAAC;QACxE,gBAAgB,EAAE,QAAQ,CAAC,GAAG,CAAC,4CAA4C,CAAC;KAC5E;IACD,cAAc,EAAE,wBAAwB;CACxC,EACD;IACC,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAEzD,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAC;QAClE,CAAC;QAED,IAAI,MAAM,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;YACpD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;QAC3D,CAAC;QAED,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;YACjD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAC;QAC7D,CAAC;QAED,IAAI,CAAC,CAAC,MAAM,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;YAClE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;YAClC,IAAI,CAAC;gBACJ,MAAM,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAC1D,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACZ,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC;QACF,CAAC;QAED,oBAAoB;QACpB,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,cAAc,EAAE;YACrD,GAAG,MAAM;YACT,GAAG,CAAC,SAAS,IAAI,EAAE,SAAS,EAAE,CAAC;SAC/B,CAAC,CAAC;QAEH,yBAAyB;QACzB,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC/C,MAAM,yBAAyB,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAElE,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QACzC,CAAC;QAED,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;YAClC,MAAM,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAC9D,CAAC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IACjC,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,mBAAmB,EACnB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,IAAI;QACT,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEtD,IAAI,QAAQ,CAAC,GAAG,CAAC,gCAAgC,CAAC,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC;YAChF,MAAM,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QACvC,CAAC;aAAM,IACN,CAAC,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC;YACjE,CAAC,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,2BAA2B,CAAC,CAAC,EACnE,CAAC;YACF,MAAM,MAAM,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QACjD,CAAC;aAAM,CAAC;YACP,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,6BAA6B,EAAE;gBAC1E,MAAM,EAAE,mBAAmB;aAC3B,CAAC,CAAC;QACJ,CAAC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,mBAAmB,EACnB,EAAE,YAAY,EAAE,IAAI,EAAE,kBAAkB,EAAE,OAAO,EAAE,EACnD;IACC,KAAK,CAAC,IAAI;QACT,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEtD,MAAM,IAAI,GAAG,MAAM,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QAE9D,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;IAChE,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,sBAAsB,EACtB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,GAAG;QACR,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,IAAI,EAAE,QAAQ,EAAE,CAAC;YACpB,MAAM,EAAE,WAAW,GAAG,EAAE,EAAE,GAAG,IAAI,EAAE,QAAQ,CAAC;YAC5C,WAAW,CAAC,QAAQ,GAAG,IAAI,EAAE,QAAQ,CAAC;YAEtC,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;gBACrB,WAAW;aACX,CAAC,CAAC;QACJ,CAAC;QACD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,iDAAiD,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;IAChG,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,sBAAsB,EACtB,EAAE,YAAY,EAAE,KAAK,EAAE,EACvB;IACC,KAAK,CAAC,IAAI;QACT,MAAM,sBAAsB,GAAG,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAEtE,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC7B,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;QACxD,CAAC;QAED,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,KAAK,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;QACxD,CAAC;QAED,MAAM,MAAM,CAAC,SAAS,CAAC,yBAAyB,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;QACvE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,6BAA6B,EAC7B,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,GAAG;QACR,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;QAE/D,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IACnC,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iCAAiC,EACjC;IACC,YAAY,EAAE,IAAI;IAClB,cAAc,EAAE,yCAAyC;CACzD,EACD;IACC,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAEtC,MAAM,MAAM,GAAG,MAAM,uCAAuC,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpF,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IACnC,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,mCAAmC,EACnC,EAAE,YAAY,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAC/C;IACC,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,SAAS,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QACvD,IAAI,CAAC,SAAS,EAAE,CAAC;YAChB,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,oCAAoC,EAAE,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC;QAE3G,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAClC,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,qCAAqC,EACrC,EAAE,YAAY,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAC/C;IACC,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QACtC,IAAI,CAAC,SAAS,EAAE,CAAC;YAChB,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,sCAAsC,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;QAE5F,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAClC,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,+BAA+B,EAC/B,EAAE,YAAY,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,+BAA+B,CAAC,EAAE,EAC9E;IACC,KAAK,CAAC,GAAG;QACR,MAAM,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAiC,CAAC;QAE5G,MAAM,qBAAqB,GAAG,CAAC,UAA8C,EAAsC,EAAE,CACpH,MAAM,IAAI,UAAU,IAAI,UAAU,CAAC,IAAI,KAAK,qBAAqB,CAAC;QAEnE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,MAAM,EACL,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,CAAC,qBAAqB,CAAC,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;gBACvF,IAAI,EAAE,UAAU,CAAC,IAAI;gBACrB,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,WAAW,EAAE;gBAC7C,aAAa,EAAE,UAAU,CAAC,aAAa;gBACvC,eAAe,EAAE,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC;aACpD,CAAC,CAAC,IAAI,EAAE;SACV,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iCAAiC,EACjC,EAAE,YAAY,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAC/C;IACC,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QACtC,IAAI,CAAC,SAAS,EAAE,CAAC;YAChB,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,MAAM,CAAC,SAAS,CAAC,kCAAkC,EAAE;YAC1D,SAAS;SACT,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,uBAAuB,EACvB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,IAAI;QACT,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC9E,IAAI,kBAAkB,EAAE,CAAC;YACxB,MAAM,IAAI,WAAW,CAAC,oBAAoB,EAAE,sDAAsD,CAAC,CAAC;QACrG,CAAC;QAED,MAAM,KAAK,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEhD,iDAAiD;QACjD,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAW,CAAC;QAClE,IAAI,CAAC,UAAU,EAAE,CAAC;YACjB,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;QAED,MAAM,WAAW,GAAG,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAEzD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,6BAA6B,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,EAAE,CAAC;YAC5E,MAAM,IAAI,WAAW,CAAC,iCAAiC,EAAE,iCAAiC,CAAC,CAAC;QAC7F,CAAC;QAED,qGAAqG;QACrG,yDAAyD;QACzD,KAAK,uBAAuB,CAAC,KAAK,IAAI,EAAE;YACvC,MAAM,UAAU,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,6BAA6B,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YAC9G,IAAI,CAAC,UAAU,EAAE,CAAC;gBACjB,OAAO;YACR,CAAC;YAED,OAAO;gBACN,YAAY,EAAE,SAAS;gBACvB,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG;gBACjB,IAAI,EAAE,EAAE,6BAA6B,EAAE,UAAU,CAAC,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE;aACjF,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,wBAAwB,EACxB,EAAE,YAAY,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,gBAAgB,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAAE,EAC9F;IACC,KAAK,CAAC,IAAI;QACT,MAAM,KAAK,CAAC,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEjD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,yBAAyB,EAAE;IAC1C,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAE5C,IAAI,CAAC,eAAe,EAAE,CAAC;YACtB,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,6BAA6B,CAAC,CAAC;QACnF,CAAC;QAED,MAAM,MAAM,GAAG,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,mBAAmB,CAAC;QAC7F,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,KAAK,CAAC,MAAM,CAAC,CAAC,eAAe,EAAE,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;QAEtG,IAAI,CAAC,MAAM,EAAE,CAAC;YACb,gFAAgF;YAChF,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;QACD,MAAM,IAAI,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,gFAAgF;YAChF,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;QAED,MAAM,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAErC,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CAAC,CAAC;AAEH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,6BAA6B,EAC7B;IACC,YAAY,EAAE,IAAI;IAClB,cAAc,EAAE,sCAAsC;CACtD,EACD;IACC,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAElC,IAAI,MAAM,MAAM,CAAC,SAAS,CAAC,uBAAuB,EAAE,KAAK,CAAC,EAAE,CAAC;YAC5D,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;QACD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,gBAAgB,EAChB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,GAAG;QACR,qFAAqF;QACrF,IAAI,QAAQ,CAAC,GAAG,CAAC,6BAA6B,CAAC,EAAE,CAAC;YACjD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;gBACrB,KAAK,EAAE,EAAE;gBACT,IAAI,EAAE,IAAI;aACV,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAEvC,MAAM,OAAO,GAAG;YACf,UAAU,EAAE;gBACX,QAAQ,EAAE,CAAC;gBACX,IAAI,EAAE,CAAC;gBACP,MAAM,EAAE,CAAC;gBACT,SAAS,EAAE,CAAC;gBACZ,UAAU,EAAE,CAAC;gBACb,UAAU,EAAE,CAAC;aACb;SACD,CAAC;QAEF,IAAI,GAAG,EAAE,CAAC;YACT,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;gBACrB,KAAK,EAAE,MAAM,KAAK,CAAC,mBAAmB,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE;gBACpG,IAAI,EAAE,KAAK;aACX,CAAC,CAAC;QACJ,CAAC;QAED,IAAI,IAAI,EAAE,CAAC;YACV,MAAM,EAAE,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1B,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;YAEnD,IAAI,IAAI,GAAG,EAAE,EAAE,CAAC;gBACf,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;oBACrB,KAAK,EAAE,MAAM,KAAK,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE;oBAC3E,IAAI,EAAE,KAAK;iBACX,CAAC,CAAC;YACJ,CAAC;QACF,CAAC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,KAAK,EAAE,MAAM,KAAK,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE;YACzD,IAAI,EAAE,IAAI;SACV,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,2BAA2B,EAC3B,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,UAAU,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAChD,MAAM,MAAM,GAAG,CAAC,MAAM,MAAM,CAAC,SAAS,CAAC,qBAAqB,EAAE,EAAE,UAAU,EAAE,UAAU,KAAK,MAAM,EAAE,CAAC,CAGnG,CAAC;QAEF,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC;YACpC,eAAe,EAAE,MAAM,CAAC,eAAe;SACvC,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,0BAA0B,EAC1B,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,IAAI;QACT,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAW,CAAC;QAElE,IAAI,CAAC,UAAU,EAAE,CAAC;YACjB,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QAChF,CAAC;QACD,MAAM,WAAW,GAAG,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAEzD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,6BAA6B,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,EAAE,CAAC;YAC5E,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,iBAAiB,CAAC,CAAC;QACpE,CAAC;QAED,MAAM,EAAE,GAAG,CAAC,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,6BAA6B,EAAE,CAAC,EAAE,EAAE,CAAC,CAA4B,CAAC;QAEnI,KAAK,kBAAkB,CAAC;YACvB,YAAY,EAAE,SAAS;YACvB,EAAE,EAAE,IAAI,CAAC,MAAM;YACf,IAAI,EAAE,EAAE,6BAA6B,EAAE,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE;SACzE,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,WAAW,KAAK,WAAW,CAAC,CAAC;QAEnG,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAS,0BAA0B,CAAC,CAAC;QAElE,MAAM,YAAY,GAAG,CAAC,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,sBAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC;QAElI,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,KAAK,EAAE,UAAU;YACjB,YAAY,EAAE,YAAY,EAAE,WAAW,EAAE,IAAI,EAAE;SAC/C,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,oBAAoB,EACpB,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,wBAAwB,EAAE,EAChE;IACC,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAEnD,MAAM,QAAQ,GAA2F,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAEjI,IAAI,CAAC;YACJ,IAAI,QAAQ,EAAE,UAAU,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC;gBACxF,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACxC,CAAC;QACF,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CACpB,MAAM,uBAAuB,CAAC;YAC7B,GAAG,EAAE,IAAI,CAAC,MAAM;YAChB,QAAQ;SACR,CAAC,CACF,CAAC;IACH,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,yBAAyB,EACzB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,IAAI;QACT,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC;IACpE,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,mBAAmB,EACnB,EAAE,YAAY,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,gBAAgB,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAAE,EAC9F;IACC,KAAK,CAAC,IAAI;QACT,IAAI,QAAQ,IAAI,IAAI,CAAC,UAAU,IAAI,UAAU,IAAI,IAAI,CAAC,UAAU,IAAI,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAC/F,wBAAwB;YACxB,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACtD,IAAI,CAAC,IAAI,EAAE,CAAC;gBACX,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,iBAAiB,CAAC,CAAC;YACpE,CAAC;YAED,IAAI,CAAC,CAAC,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC,EAAE,CAAC;gBACtE,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;YAC5D,CAAC;YAED,IAAI,CAAC,CAAC,MAAM,yBAAyB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC;gBACxD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;YACzB,CAAC;YAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;QACD,MAAM,yBAAyB,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACpD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,gBAAgB,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAAE,EAC9F;IACC,KAAK,CAAC,IAAI;QACT,oBAAoB;QACpB,IAAI,QAAQ,IAAI,IAAI,CAAC,UAAU,IAAI,UAAU,IAAI,IAAI,CAAC,UAAU,IAAI,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAC/F,wBAAwB;YACxB,IAAI,CAAC,CAAC,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC,EAAE,CAAC;gBACtE,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;YAC5D,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,0CAA0C,CAAC,EAAE,CAAC;gBAC/D,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,8BAA8B,EAAE,0CAA0C,CAAC,CAAC;YACpG,CAAC;YAED,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACtD,IAAI,CAAC,IAAI,EAAE,CAAC;gBACX,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,iBAAiB,CAAC,CAAC;YACpE,CAAC;YAED,MAAM,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAEhC,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;QACD,MAAM,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACpC,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,qBAAqB,EAAE,EAC7D;IACC,KAAK,CAAC,GAAG;QACR,KAAK,CACJ,IAAI,CAAC,WAAW,EAChB,KAAK,CAAC,eAAe,CAAC;YACrB,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;SAC3B,CAAC,CACF,CAAC;QAEF,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAEpC,sFAAsF;QACtF,MAAM,OAAO,GAAG,CAAC,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;QAEpG,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAElE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,KAAK;SACL,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,cAAc,EACd,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,sBAAsB,EAAE,EAC9D;IACC,KAAK,CAAC,IAAI;QACT,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC;QAErD,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC,EAAE,CAAC;YAC7F,OAAO,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;QAC9B,CAAC;QAED,oFAAoF;QACpF,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;YAC7C,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,iBAAiB,CAAC,CAAC;QACpE,CAAC;QAED,KAAK,kBAAkB,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,6BAA6B,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAE9G,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,OAAO,EAAE,QAAQ,MAAM,uBAAuB;SAC9C,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,mBAAmB,EACnB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,GAAG;QACR,IAAI,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAChE,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAClD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;gBACrB,QAAQ,EAAE,CAAC,IAAI,EAAE,MAAM,IAAI,SAAS,CAAe;gBACnD,gBAAgB,EAAE,IAAI,EAAE,gBAAgB,IAAI,SAAS;gBACrD,GAAG,CAAC,IAAI,EAAE,SAAS,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;aACtD,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEvD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,QAAQ,EAAE,IAAI,CAAC,MAAM,IAAK,SAAwB;SAClD,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,IAAI;QACT,KAAK,CACJ,IAAI,CAAC,UAAU,EACf,KAAK,CAAC,KAAK,CACV,KAAK,CAAC,eAAe,CAAC;YACrB,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YAC3B,OAAO,EAAE,MAAM;SACf,CAAC,EACF,KAAK,CAAC,eAAe,CAAC;YACrB,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;SAC5B,CAAC,CACF,CACD,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,uCAAuC,CAAC,EAAE,CAAC;YAC5D,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,8BAA8B,EAAE;gBAC3E,MAAM,EAAE,iBAAiB;aACzB,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,IAEvB,EAAE;YACH,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC/D,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACvC,CAAC;YACD,IAAI,MAAM,kBAAkB,CAAC,IAAI,CAAC,MAAM,EAAE,sBAAsB,CAAC,EAAE,CAAC;gBACnE,OAAO,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC3C,CAAC;QACF,CAAC,CAAC,EAAE,CAAC;QAEL,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;QAC9B,CAAC;QAED,4HAA4H;QAE5H,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,KAAK,EAAE,EAAE,CAAC;YAC/D,MAAM,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACxD,CAAC;QACD,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;YAC5B,MAAM,WAAW,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;YAC1D,IAAI,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;gBAClD,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;gBAEnC,IAAI,MAAM,KAAK,SAAS,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,qCAAqC,CAAC,EAAE,CAAC;oBAClF,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,8BAA8B,EAAE;wBAClF,MAAM,EAAE,iBAAiB;qBACzB,CAAC,CAAC;gBACJ,CAAC;gBAED,MAAM,KAAK,CAAC,SAAS,CACpB,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EACjB;oBACC,IAAI,EAAE;wBACL,MAAM;wBACN,aAAa,EAAE,MAAM;qBACrB;iBACD,CACD,CAAC;gBAEF,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;gBACxD,KAAK,GAAG,CAAC,SAAS,CAAC,iBAAiB,EAAE;oBACrC,IAAI,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE;oBACxD,cAAc,EAAE,IAAI,CAAC,MAAM;iBAC3B,CAAC,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACP,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,6DAA6D,EAAE;oBAC7G,MAAM,EAAE,iBAAiB;iBACzB,CAAC,CAAC;YACJ,CAAC;QACF,CAAC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC;AAEF,kDAAkD;AAClD,oBAAoB;AACpB,eAAe;AACf,6DAA6D;AAC7D,KAAK;AAEL,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,GAAG;QACR,IAAI,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAChE,MAAM,IAAI,GAAiB,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;gBACrB,GAAG,EAAE,IAAI,EAAE,GAAG;gBACd,4BAA4B;gBAC5B,gBAAgB,EAAE,CAAC,IAAI,EAAE,gBAAgB,IAAI,SAAS,CAA2C;gBACjG,MAAM,EAAE,CAAC,IAAI,EAAE,MAAM,IAAI,SAAS,CAA2C;aAC7E,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEvD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,4BAA4B;YAC5B,MAAM,EAAE,CAAC,IAAI,CAAC,MAAM,IAAI,SAAS,CAA2C;SAC5E,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,QAAQ,CAAC,KAAK,CAAS,iCAAiC,EAAE,CAAC,KAAK,EAAE,EAAE;IACnE,MAAM,iBAAiB,GAAG,4BAA4B,CAAC;IAEvD,GAAG,CAAC,EAAE,CAAC,mCAAmC,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC","sourcesContent":["import { MeteorError, Team, api } from '@rocket.chat/core-services';\nimport type { IExportOperation, ILoginToken, IPersonalAccessToken, IUser, UserStatus } from '@rocket.chat/core-typings';\nimport { Users, Subscriptions } from '@rocket.chat/models';\nimport {\n\tisUserCreateParamsPOST,\n\tisUserSetActiveStatusParamsPOST,\n\tisUserDeactivateIdleParamsPOST,\n\tisUsersInfoParamsGetProps,\n\tisUsersListStatusProps,\n\tisUsersSendWelcomeEmailProps,\n\tisUserRegisterParamsPOST,\n\tisUserLogoutParamsPOST,\n\tisUsersListTeamsProps,\n\tisUsersAutocompleteProps,\n\tisUsersSetAvatarProps,\n\tisUsersUpdateParamsPOST,\n\tisUsersUpdateOwnBasicInfoParamsPOST,\n\tisUsersSetPreferencesParamsPOST,\n\tisUsersCheckUsernameAvailabilityParamsGET,\n\tisUsersSendConfirmationEmailParamsPOST,\n} from '@rocket.chat/rest-typings';\nimport { getLoginExpirationInMs } from '@rocket.chat/tools';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { Filter } from 'mongodb';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { resetUserE2EEncriptionKey } from '../../../../server/lib/resetUserE2EKey';\nimport { sendWelcomeEmail } from '../../../../server/lib/sendWelcomeEmail';\nimport { saveUserPreferences } from '../../../../server/methods/saveUserPreferences';\nimport { getUserForCheck, emailCheck } from '../../../2fa/server/code';\nimport { resetTOTP } from '../../../2fa/server/functions/resetTOTP';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport {\n\tcheckUsernameAvailability,\n\tcheckUsernameAvailabilityWithValidation,\n} from '../../../lib/server/functions/checkUsernameAvailability';\nimport { getFullUserDataByIdOrUsernameOrImportId } from '../../../lib/server/functions/getFullUserData';\nimport { saveCustomFields } from '../../../lib/server/functions/saveCustomFields';\nimport { saveCustomFieldsWithoutValidation } from '../../../lib/server/functions/saveCustomFieldsWithoutValidation';\nimport { saveUser } from '../../../lib/server/functions/saveUser';\nimport { setStatusText } from '../../../lib/server/functions/setStatusText';\nimport { setUserAvatar } from '../../../lib/server/functions/setUserAvatar';\nimport { setUsernameWithValidation } from '../../../lib/server/functions/setUsername';\nimport { validateCustomFields } from '../../../lib/server/functions/validateCustomFields';\nimport { validateNameChars } from '../../../lib/server/functions/validateNameChars';\nimport { validateUsername } from '../../../lib/server/functions/validateUsername';\nimport { notifyOnUserChange, notifyOnUserChangeAsync } from '../../../lib/server/lib/notifyListener';\nimport { generateAccessToken } from '../../../lib/server/methods/createToken';\nimport { settings } from '../../../settings/server';\nimport { getURL } from '../../../utils/server/getURL';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams } from '../helpers/getUserFromParams';\nimport { isUserFromParams } from '../helpers/isUserFromParams';\nimport { getUploadFormData } from '../lib/getUploadFormData';\nimport { isValidQuery } from '../lib/isValidQuery';\nimport { findPaginatedUsersByStatus, findUsersToAutocomplete, getInclusiveFields, getNonEmptyFields, getNonEmptyQuery } from '../lib/users';\n\nAPI.v1.addRoute(\n\t'users.getAvatar',\n\t{ authRequired: false },\n\t{\n\t\tasync get() {\n\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\tconst url = getURL(`/avatar/${user.username}`, { cdn: false, full: true });\n\t\t\tthis.response.setHeader('Location', url);\n\n\t\t\treturn {\n\t\t\t\tstatusCode: 307,\n\t\t\t\tbody: url,\n\t\t\t};\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getAvatarSuggestion',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst suggestions = await Meteor.callAsync('getAvatarSuggestion');\n\n\t\t\treturn API.v1.success({ suggestions });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.update',\n\t{ authRequired: true, twoFactorRequired: true, validateParams: isUsersUpdateParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tconst userData = { _id: this.bodyParams.userId, ...this.bodyParams.data };\n\n\t\t\tif (userData.name && !validateNameChars(userData.name)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\tawait saveUser(this.userId, userData);\n\n\t\t\tif (this.bodyParams.data.customFields) {\n\t\t\t\tawait saveCustomFields(this.bodyParams.userId, this.bodyParams.data.customFields);\n\t\t\t}\n\n\t\t\tif (typeof this.bodyParams.data.active !== 'undefined') {\n\t\t\t\tconst {\n\t\t\t\t\tuserId,\n\t\t\t\t\tdata: { active },\n\t\t\t\t\tconfirmRelinquish,\n\t\t\t\t} = this.bodyParams;\n\n\t\t\t\tawait Meteor.callAsync('setUserActiveStatus', userId, active, Boolean(confirmRelinquish));\n\t\t\t}\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tconst user = await Users.findOneById(this.bodyParams.userId, { projection: fields });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ user });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.updateOwnBasicInfo',\n\t{ authRequired: true, validateParams: isUsersUpdateOwnBasicInfoParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tconst userData = {\n\t\t\t\temail: this.bodyParams.data.email,\n\t\t\t\trealname: this.bodyParams.data.name,\n\t\t\t\tusername: this.bodyParams.data.username,\n\t\t\t\tnickname: this.bodyParams.data.nickname,\n\t\t\t\tbio: this.bodyParams.data.bio,\n\t\t\t\tstatusText: this.bodyParams.data.statusText,\n\t\t\t\tstatusType: this.bodyParams.data.statusType,\n\t\t\t\tnewPassword: this.bodyParams.data.newPassword,\n\t\t\t\ttypedPassword: this.bodyParams.data.currentPassword,\n\t\t\t};\n\n\t\t\tif (userData.realname && !validateNameChars(userData.realname)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\t// saveUserProfile now uses the default two factor authentication procedures, so we need to provide that\n\t\t\tconst twoFactorOptions = !userData.typedPassword\n\t\t\t\t? null\n\t\t\t\t: {\n\t\t\t\t\t\ttwoFactorCode: userData.typedPassword,\n\t\t\t\t\t\ttwoFactorMethod: 'password',\n\t\t\t\t  };\n\n\t\t\tawait Meteor.callAsync('saveUserProfile', userData, this.bodyParams.customFields, twoFactorOptions);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser: await Users.findOneById(this.userId, { projection: API.v1.defaultFieldsToExclude }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setPreferences',\n\t{ authRequired: true, validateParams: isUsersSetPreferencesParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tif (\n\t\t\t\tthis.bodyParams.userId &&\n\t\t\t\tthis.bodyParams.userId !== this.userId &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'edit-other-user-info'))\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Editing user is not allowed');\n\t\t\t}\n\t\t\tconst userId = this.bodyParams.userId ? this.bodyParams.userId : this.userId;\n\t\t\tif (!(await Users.findOneById(userId))) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'The optional \"userId\" param provided does not match any users');\n\t\t\t}\n\n\t\t\tawait saveUserPreferences(this.bodyParams.data, userId);\n\t\t\tconst user = await Users.findOneById(userId, {\n\t\t\t\tprojection: {\n\t\t\t\t\t'settings.preferences': 1,\n\t\t\t\t\t'language': 1,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tpreferences: {\n\t\t\t\t\t\t\t...user.settings?.preferences,\n\t\t\t\t\t\t\tlanguage: user.language,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t} as unknown as Required<Pick<IUser, '_id' | 'settings'>>,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setAvatar',\n\t{ authRequired: true, validateParams: isUsersSetAvatarProps },\n\t{\n\t\tasync post() {\n\t\t\tconst canEditOtherUserAvatar = await hasPermissionAsync(this.userId, 'edit-other-user-avatar');\n\n\t\t\tif (!settings.get('Accounts_AllowUserAvatarChange') && !canEditOtherUserAvatar) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Change avatar is not allowed', {\n\t\t\t\t\tmethod: 'users.setAvatar',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet user = await (async (): Promise<\n\t\t\t\tPick<IUser, '_id' | 'roles' | 'username' | 'name' | 'status' | 'statusText'> | undefined | null\n\t\t\t> => {\n\t\t\t\tif (isUserFromParams(this.bodyParams, this.userId, this.user)) {\n\t\t\t\t\treturn Users.findOneById(this.userId);\n\t\t\t\t}\n\t\t\t\tif (canEditOtherUserAvatar) {\n\t\t\t\t\treturn getUserFromParams(this.bodyParams);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tif (this.bodyParams.avatarUrl) {\n\t\t\t\tawait setUserAvatar(user, this.bodyParams.avatarUrl, '', 'url');\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tconst image = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'image', sizeLimit: settings.get('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tif (!image) {\n\t\t\t\treturn API.v1.failure(\"The 'image' param is required\");\n\t\t\t}\n\n\t\t\tconst { fields, fileBuffer, mimetype } = image;\n\n\t\t\tconst sentTheUserByFormData = fields.userId || fields.username;\n\t\t\tif (sentTheUserByFormData) {\n\t\t\t\tif (fields.userId) {\n\t\t\t\t\tuser = await Users.findOneById(fields.userId, { projection: { username: 1 } });\n\t\t\t\t} else if (fields.username) {\n\t\t\t\t\tuser = await Users.findOneByUsernameIgnoringCase(fields.username, { projection: { username: 1 } });\n\t\t\t\t}\n\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'The optional \"userId\" or \"username\" param provided does not match any users');\n\t\t\t\t}\n\n\t\t\t\tconst isAnotherUser = this.userId !== user._id;\n\t\t\t\tif (isAnotherUser && !(await hasPermissionAsync(this.userId, 'edit-other-user-avatar'))) {\n\t\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait setUserAvatar(user, fileBuffer, mimetype, 'rest');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.create',\n\t{ authRequired: true, validateParams: isUserCreateParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\t// New change made by pull request #5152\n\t\t\tif (typeof this.bodyParams.joinDefaultChannels === 'undefined') {\n\t\t\t\tthis.bodyParams.joinDefaultChannels = true;\n\t\t\t}\n\n\t\t\tif (this.bodyParams.name && !validateNameChars(this.bodyParams.name)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\tvalidateCustomFields(this.bodyParams.customFields);\n\t\t\t}\n\n\t\t\tconst newUserId = await saveUser(this.userId, this.bodyParams);\n\t\t\tconst userId = typeof newUserId !== 'string' ? this.userId : newUserId;\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\tawait saveCustomFieldsWithoutValidation(userId, this.bodyParams.customFields);\n\t\t\t}\n\n\t\t\tif (typeof this.bodyParams.active !== 'undefined') {\n\t\t\t\tawait Meteor.callAsync('setUserActiveStatus', userId, this.bodyParams.active);\n\t\t\t}\n\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tconst user = await Users.findOneById(userId, { projection: fields });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ user });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.delete',\n\t{ authRequired: true, permissionsRequired: ['delete-user'] },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst { confirmRelinquish = false } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('deleteUser', user._id, confirmRelinquish);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.deleteOwnAccount',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { password } = this.bodyParams;\n\t\t\tif (!password) {\n\t\t\t\treturn API.v1.failure('Body parameter \"password\" is required.');\n\t\t\t}\n\t\t\tif (!settings.get('Accounts_AllowDeleteOwnAccount')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tconst { confirmRelinquish = false } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('deleteUserOwnAccount', password, confirmRelinquish);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setActiveStatus',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUserSetActiveStatusParamsPOST,\n\t\tpermissionsRequired: {\n\t\t\tPOST: { permissions: ['edit-other-user-active-status', 'manage-moderation-actions'], operation: 'hasAny' },\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, activeStatus, confirmRelinquish = false } = this.bodyParams;\n\t\t\tawait Meteor.callAsync('setUserActiveStatus', userId, activeStatus, confirmRelinquish);\n\n\t\t\tconst user = await Users.findOneById(this.bodyParams.userId, { projection: { active: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.deactivateIdle',\n\t{ authRequired: true, validateParams: isUserDeactivateIdleParamsPOST, permissionsRequired: ['edit-other-user-active-status'] },\n\t{\n\t\tasync post() {\n\t\t\tconst { daysIdle, role = 'user' } = this.bodyParams;\n\n\t\t\tconst lastLoggedIn = new Date();\n\t\t\tlastLoggedIn.setDate(lastLoggedIn.getDate() - daysIdle);\n\n\t\t\t// since we're deactiving users that are not logged in, there is no need to send data through WS\n\t\t\tconst { modifiedCount: count } = await Users.setActiveNotLoggedInAfterWithRole(lastLoggedIn, role, false);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tcount,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.info',\n\t{ authRequired: true, validateParams: isUsersInfoParamsGetProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tconst searchTerms: [string, 'id' | 'username' | 'importId'] | false =\n\t\t\t\t('userId' in this.queryParams && !!this.queryParams.userId && [this.queryParams.userId, 'id']) ||\n\t\t\t\t('username' in this.queryParams && !!this.queryParams.username && [this.queryParams.username, 'username']) ||\n\t\t\t\t('importId' in this.queryParams && !!this.queryParams.importId && [this.queryParams.importId, 'importId']);\n\n\t\t\tif (!searchTerms) {\n\t\t\t\treturn API.v1.failure('Invalid search query.');\n\t\t\t}\n\n\t\t\tconst user = await getFullUserDataByIdOrUsernameOrImportId(this.userId, ...searchTerms);\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found.');\n\t\t\t}\n\t\t\tconst myself = user._id === this.userId;\n\t\t\tif (fields.userRooms === 1 && (myself || (await hasPermissionAsync(this.userId, 'view-other-user-channels')))) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tuser: {\n\t\t\t\t\t\t...user,\n\t\t\t\t\t\trooms: await Subscriptions.findByUserId(user._id, {\n\t\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\t\trid: 1,\n\t\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\t\tunread: 1,\n\t\t\t\t\t\t\t\tfederated: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}).toArray(),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.list',\n\t{\n\t\tauthRequired: true,\n\t\tqueryOperations: ['$or', '$and'],\n\t\tpermissionsRequired: ['view-d-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (\n\t\t\t\tsettings.get('API_Apply_permission_view-outside-room_on_users-list') &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'view-outside-room'))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst nonEmptyQuery = getNonEmptyQuery(query, await hasPermissionAsync(this.userId, 'view-full-other-user-info'));\n\t\t\tconst nonEmptyFields = getNonEmptyFields(fields);\n\n\t\t\tconst inclusiveFields = getInclusiveFields(nonEmptyFields);\n\n\t\t\tconst inclusiveFieldsKeys = Object.keys(inclusiveFields);\n\n\t\t\tif (\n\t\t\t\t!isValidQuery(\n\t\t\t\t\tnonEmptyQuery,\n\t\t\t\t\t[\n\t\t\t\t\t\t...inclusiveFieldsKeys,\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('emails') && 'emails.address.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('username') && 'username.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('name') && 'name.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('type') && 'type.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('customFields') && 'customFields.*',\n\t\t\t\t\t].filter(Boolean) as string[],\n\t\t\t\t\tthis.queryOperations,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-query', isValidQuery.errors.join('\\n'));\n\t\t\t}\n\n\t\t\tconst actualSort = sort || { username: 1 };\n\n\t\t\tif (sort?.status) {\n\t\t\t\tactualSort.active = sort.status;\n\t\t\t}\n\n\t\t\tif (sort?.name) {\n\t\t\t\tactualSort.nameInsensitive = sort.name;\n\t\t\t}\n\n\t\t\tconst limit =\n\t\t\t\tcount !== 0\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$limit: count,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  ]\n\t\t\t\t\t: [];\n\n\t\t\tconst result = await Users.col\n\t\t\t\t.aggregate<{ sortedResults: IUser[]; totalCount: { total: number }[] }>([\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: nonEmptyQuery,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: inclusiveFields,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$addFields: {\n\t\t\t\t\t\t\tnameInsensitive: {\n\t\t\t\t\t\t\t\t$toLower: '$name',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$facet: {\n\t\t\t\t\t\t\tsortedResults: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$sort: actualSort,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$skip: offset,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t...limit,\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttotalCount: [{ $group: { _id: null, total: { $sum: 1 } } }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t\t.toArray();\n\n\t\t\tconst {\n\t\t\t\tsortedResults: users,\n\t\t\t\ttotalCount: [{ total } = { total: 0 }],\n\t\t\t} = result[0];\n\n\t\t\treturn API.v1.success({\n\t\t\t\tusers,\n\t\t\t\tcount: users.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.listByStatus',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersListStatusProps,\n\t\tpermissionsRequired: ['view-d-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (\n\t\t\t\tsettings.get('API_Apply_permission_view-outside-room_on_users-list') &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'view-outside-room'))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { status, hasLoggedIn, type, roles, searchTerm } = this.queryParams;\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findPaginatedUsersByStatus({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t\tstatus,\n\t\t\t\t\troles,\n\t\t\t\t\tsearchTerm,\n\t\t\t\t\thasLoggedIn,\n\t\t\t\t\ttype,\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.sendWelcomeEmail',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersSendWelcomeEmailProps,\n\t\tpermissionsRequired: ['send-mail'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { email } = this.bodyParams;\n\t\t\tawait sendWelcomeEmail(email);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.register',\n\t{\n\t\tauthRequired: false,\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: settings.get('Rate_Limiter_Limit_RegisterUser') ?? 1,\n\t\t\tintervalTimeInMS: settings.get('API_Enable_Rate_Limiter_Limit_Time_Default'),\n\t\t},\n\t\tvalidateParams: isUserRegisterParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { secret: secretURL, ...params } = this.bodyParams;\n\n\t\t\tif (this.userId) {\n\t\t\t\treturn API.v1.failure('Logged in users can not register again.');\n\t\t\t}\n\n\t\t\tif (params.name && !validateNameChars(params.name)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\tif (!validateUsername(this.bodyParams.username)) {\n\t\t\t\treturn API.v1.failure(`The username provided is not valid`);\n\t\t\t}\n\n\t\t\tif (!(await checkUsernameAvailability(this.bodyParams.username))) {\n\t\t\t\treturn API.v1.failure('Username is already in use');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\ttry {\n\t\t\t\t\tawait validateCustomFields(this.bodyParams.customFields);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn API.v1.failure(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Register the user\n\t\t\tconst userId = await Meteor.callAsync('registerUser', {\n\t\t\t\t...params,\n\t\t\t\t...(secretURL && { secretURL }),\n\t\t\t});\n\n\t\t\t// Now set their username\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\t\t\tawait setUsernameWithValidation(userId, this.bodyParams.username);\n\n\t\t\tconst user = await Users.findOneById(userId, { projection: fields });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\tawait saveCustomFields(userId, this.bodyParams.customFields);\n\t\t\t}\n\n\t\t\treturn API.v1.success({ user });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.resetAvatar',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tif (settings.get('Accounts_AllowUserAvatarChange') && user._id === this.userId) {\n\t\t\t\tawait Meteor.callAsync('resetAvatar');\n\t\t\t} else if (\n\t\t\t\t(await hasPermissionAsync(this.userId, 'edit-other-user-avatar')) ||\n\t\t\t\t(await hasPermissionAsync(this.userId, 'manage-moderation-actions'))\n\t\t\t) {\n\t\t\t\tawait Meteor.callAsync('resetAvatar', user._id);\n\t\t\t} else {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Reset avatar is not allowed', {\n\t\t\t\t\tmethod: 'users.resetAvatar',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.createToken',\n\t{ authRequired: true, deprecationVersion: '8.0.0' },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tconst data = await generateAccessToken(this.userId, user._id);\n\n\t\t\treturn data ? API.v1.success({ data }) : API.v1.unauthorized();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getPreferences',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (user?.settings) {\n\t\t\t\tconst { preferences = {} } = user?.settings;\n\t\t\t\tpreferences.language = user?.language;\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tpreferences,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn API.v1.failure(i18n.t('Accounts_Default_User_Preferences_not_available').toUpperCase());\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.forgotPassword',\n\t{ authRequired: false },\n\t{\n\t\tasync post() {\n\t\t\tconst isPasswordResetEnabled = settings.get('Accounts_PasswordReset');\n\n\t\t\tif (!isPasswordResetEnabled) {\n\t\t\t\treturn API.v1.failure('Password reset is not enabled');\n\t\t\t}\n\n\t\t\tconst { email } = this.bodyParams;\n\t\t\tif (!email) {\n\t\t\t\treturn API.v1.failure(\"The 'email' param is required\");\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('sendForgotPasswordEmail', email.toLowerCase());\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getUsernameSuggestion',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst result = await Meteor.callAsync('getUsernameSuggestion');\n\n\t\t\treturn API.v1.success({ result });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.checkUsernameAvailability',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersCheckUsernameAvailabilityParamsGET,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { username } = this.queryParams;\n\n\t\t\tconst result = await checkUsernameAvailabilityWithValidation(this.userId, username);\n\n\t\t\treturn API.v1.success({ result });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.generatePersonalAccessToken',\n\t{ authRequired: true, twoFactorRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { tokenName, bypassTwoFactor } = this.bodyParams;\n\t\t\tif (!tokenName) {\n\t\t\t\treturn API.v1.failure(\"The 'tokenName' param is required\");\n\t\t\t}\n\t\t\tconst token = await Meteor.callAsync('personalAccessTokens:generateToken', { tokenName, bypassTwoFactor });\n\n\t\t\treturn API.v1.success({ token });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.regeneratePersonalAccessToken',\n\t{ authRequired: true, twoFactorRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { tokenName } = this.bodyParams;\n\t\t\tif (!tokenName) {\n\t\t\t\treturn API.v1.failure(\"The 'tokenName' param is required\");\n\t\t\t}\n\t\t\tconst token = await Meteor.callAsync('personalAccessTokens:regenerateToken', { tokenName });\n\n\t\t\treturn API.v1.success({ token });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getPersonalAccessTokens',\n\t{ authRequired: true, permissionsRequired: ['create-personal-access-tokens'] },\n\t{\n\t\tasync get() {\n\t\t\tconst user = (await Users.getLoginTokensByUserId(this.userId).toArray())[0] as unknown as IUser | undefined;\n\n\t\t\tconst isPersonalAccessToken = (loginToken: ILoginToken | IPersonalAccessToken): loginToken is IPersonalAccessToken =>\n\t\t\t\t'type' in loginToken && loginToken.type === 'personalAccessToken';\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttokens:\n\t\t\t\t\tuser?.services?.resume?.loginTokens?.filter(isPersonalAccessToken).map((loginToken) => ({\n\t\t\t\t\t\tname: loginToken.name,\n\t\t\t\t\t\tcreatedAt: loginToken.createdAt.toISOString(),\n\t\t\t\t\t\tlastTokenPart: loginToken.lastTokenPart,\n\t\t\t\t\t\tbypassTwoFactor: Boolean(loginToken.bypassTwoFactor),\n\t\t\t\t\t})) || [],\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.removePersonalAccessToken',\n\t{ authRequired: true, twoFactorRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { tokenName } = this.bodyParams;\n\t\t\tif (!tokenName) {\n\t\t\t\treturn API.v1.failure(\"The 'tokenName' param is required\");\n\t\t\t}\n\t\t\tawait Meteor.callAsync('personalAccessTokens:removeToken', {\n\t\t\t\ttokenName,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.2fa.enableEmail',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst hasUnverifiedEmail = this.user.emails?.some((email) => !email.verified);\n\t\t\tif (hasUnverifiedEmail) {\n\t\t\t\tthrow new MeteorError('error-invalid-user', 'You need to verify your emails before setting up 2FA');\n\t\t\t}\n\n\t\t\tawait Users.enableEmail2FAByUserId(this.userId);\n\n\t\t\t// When 2FA is enable we logout all other clients\n\t\t\tconst xAuthToken = this.request.headers['x-auth-token'] as string;\n\t\t\tif (!xAuthToken) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tconst hashedToken = Accounts._hashLoginToken(xAuthToken);\n\n\t\t\tif (!(await Users.removeNonPATLoginTokensExcept(this.userId, hashedToken))) {\n\t\t\t\tthrow new MeteorError('error-logging-out-other-clients', 'Error logging out other clients');\n\t\t\t}\n\n\t\t\t// TODO this can be optmized so places that care about loginTokens being removed are invoked directly\n\t\t\t// instead of having to listen to every watch.users event\n\t\t\tvoid notifyOnUserChangeAsync(async () => {\n\t\t\t\tconst userTokens = await Users.findOneById(this.userId, { projection: { 'services.resume.loginTokens': 1 } });\n\t\t\t\tif (!userTokens) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tclientAction: 'updated',\n\t\t\t\t\tid: this.user._id,\n\t\t\t\t\tdiff: { 'services.resume.loginTokens': userTokens.services?.resume?.loginTokens },\n\t\t\t\t};\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.2fa.disableEmail',\n\t{ authRequired: true, twoFactorRequired: true, twoFactorOptions: { disableRememberMe: true } },\n\t{\n\t\tasync post() {\n\t\t\tawait Users.disableEmail2FAByUserId(this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute('users.2fa.sendEmailCode', {\n\tasync post() {\n\t\tconst { emailOrUsername } = this.bodyParams;\n\n\t\tif (!emailOrUsername) {\n\t\t\tthrow new Meteor.Error('error-parameter-required', 'emailOrUsername is required');\n\t\t}\n\n\t\tconst method = emailOrUsername.includes('@') ? 'findOneByEmailAddress' : 'findOneByUsername';\n\t\tconst userId = this.userId || (await Users[method](emailOrUsername, { projection: { _id: 1 } }))?._id;\n\n\t\tif (!userId) {\n\t\t\t// this.logger.error('[2fa] User was not found when requesting 2fa email code');\n\t\t\treturn API.v1.success();\n\t\t}\n\t\tconst user = await getUserForCheck(userId);\n\t\tif (!user) {\n\t\t\t// this.logger.error('[2fa] User was not found when requesting 2fa email code');\n\t\t\treturn API.v1.success();\n\t\t}\n\n\t\tawait emailCheck.sendEmailCode(user);\n\n\t\treturn API.v1.success();\n\t},\n});\n\nAPI.v1.addRoute(\n\t'users.sendConfirmationEmail',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersSendConfirmationEmailParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { email } = this.bodyParams;\n\n\t\t\tif (await Meteor.callAsync('sendConfirmationEmail', email)) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.presence',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\t// if presence broadcast is disabled, return an empty array (all users are \"offline\")\n\t\t\tif (settings.get('Presence_broadcast_disabled')) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tusers: [],\n\t\t\t\t\tfull: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { from, ids } = this.queryParams;\n\n\t\t\tconst options = {\n\t\t\t\tprojection: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tstatus: 1,\n\t\t\t\t\tutcOffset: 1,\n\t\t\t\t\tstatusText: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (ids) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tusers: await Users.findNotOfflineByIds(Array.isArray(ids) ? ids : ids.split(','), options).toArray(),\n\t\t\t\t\tfull: false,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (from) {\n\t\t\t\tconst ts = new Date(from);\n\t\t\t\tconst diff = (Date.now() - Number(ts)) / 1000 / 60;\n\n\t\t\t\tif (diff < 10) {\n\t\t\t\t\treturn API.v1.success({\n\t\t\t\t\t\tusers: await Users.findNotIdUpdatedFrom(this.userId, ts, options).toArray(),\n\t\t\t\t\t\tfull: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tusers: await Users.findUsersNotOffline(options).toArray(),\n\t\t\t\tfull: true,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.requestDataDownload',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { fullExport = false } = this.queryParams;\n\t\t\tconst result = (await Meteor.callAsync('requestDataDownload', { fullExport: fullExport === 'true' })) as {\n\t\t\t\trequested: boolean;\n\t\t\t\texportOperation: IExportOperation;\n\t\t\t};\n\n\t\t\treturn API.v1.success({\n\t\t\t\trequested: Boolean(result.requested),\n\t\t\t\texportOperation: result.exportOperation,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.logoutOtherClients',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst xAuthToken = this.request.headers['x-auth-token'] as string;\n\n\t\t\tif (!xAuthToken) {\n\t\t\t\tthrow new Meteor.Error('error-parameter-required', 'x-auth-token is required');\n\t\t\t}\n\t\t\tconst hashedToken = Accounts._hashLoginToken(xAuthToken);\n\n\t\t\tif (!(await Users.removeNonPATLoginTokensExcept(this.userId, hashedToken))) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t}\n\n\t\t\tconst me = (await Users.findOneById(this.userId, { projection: { 'services.resume.loginTokens': 1 } })) as Pick<IUser, 'services'>;\n\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tid: this.userId,\n\t\t\t\tdiff: { 'services.resume.loginTokens': me.services?.resume?.loginTokens },\n\t\t\t});\n\n\t\t\tconst token = me.services?.resume?.loginTokens?.find((token) => token.hashedToken === hashedToken);\n\n\t\t\tconst loginExp = settings.get<number>('Accounts_LoginExpiration');\n\n\t\t\tconst tokenExpires = (token && 'when' in token && new Date(token.when.getTime() + getLoginExpirationInMs(loginExp))) || undefined;\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttoken: xAuthToken,\n\t\t\t\ttokenExpires: tokenExpires?.toISOString() || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.autocomplete',\n\t{ authRequired: true, validateParams: isUsersAutocompleteProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector: selectorRaw } = this.queryParams;\n\n\t\t\tconst selector: { exceptions: Required<IUser>['username'][]; conditions: Filter<IUser>; term: string } = JSON.parse(selectorRaw);\n\n\t\t\ttry {\n\t\t\t\tif (selector?.conditions && !isValidQuery(selector.conditions, ['*'], ['$or', '$and'])) {\n\t\t\t\t\tthrow new Error('error-invalid-query');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treturn API.v1.failure(e);\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findUsersToAutocomplete({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector,\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.removeOtherTokens',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\treturn API.v1.success(await Meteor.callAsync('removeOtherTokens'));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.resetE2EKey',\n\t{ authRequired: true, twoFactorRequired: true, twoFactorOptions: { disableRememberMe: true } },\n\t{\n\t\tasync post() {\n\t\t\tif ('userId' in this.bodyParams || 'username' in this.bodyParams || 'user' in this.bodyParams) {\n\t\t\t\t// reset other user keys\n\t\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t\t}\n\n\t\t\t\tif (!(await hasPermissionAsync(this.userId, 'edit-other-user-e2ee'))) {\n\t\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t\t}\n\n\t\t\t\tif (!(await resetUserE2EEncriptionKey(user._id, true))) {\n\t\t\t\t\treturn API.v1.failure();\n\t\t\t\t}\n\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\t\t\tawait resetUserE2EEncriptionKey(this.userId, false);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.resetTOTP',\n\t{ authRequired: true, twoFactorRequired: true, twoFactorOptions: { disableRememberMe: true } },\n\t{\n\t\tasync post() {\n\t\t\t// // reset own keys\n\t\t\tif ('userId' in this.bodyParams || 'username' in this.bodyParams || 'user' in this.bodyParams) {\n\t\t\t\t// reset other user keys\n\t\t\t\tif (!(await hasPermissionAsync(this.userId, 'edit-other-user-totp'))) {\n\t\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t\t}\n\n\t\t\t\tif (!settings.get('Accounts_TwoFactorAuthentication_Enabled')) {\n\t\t\t\t\tthrow new Meteor.Error('error-two-factor-not-enabled', 'Two factor authentication is not enabled');\n\t\t\t\t}\n\n\t\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t\t}\n\n\t\t\t\tawait resetTOTP(user._id, true);\n\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\t\t\tawait resetTOTP(this.userId, false);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.listTeams',\n\t{ authRequired: true, validateParams: isUsersListTeamsProps },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tuserId: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { userId } = this.queryParams;\n\n\t\t\t// If the caller has permission to view all teams, there's no need to filter the teams\n\t\t\tconst adminId = (await hasPermissionAsync(this.userId, 'view-all-teams')) ? undefined : this.userId;\n\n\t\t\tconst teams = await Team.findBySubscribedUserIds(userId, adminId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tteams,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.logout',\n\t{ authRequired: true, validateParams: isUserLogoutParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tconst userId = this.bodyParams.userId || this.userId;\n\n\t\t\tif (userId !== this.userId && !(await hasPermissionAsync(this.userId, 'logout-other-user'))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\t// this method logs the user out automatically, if successful returns 1, otherwise 0\n\t\t\tif (!(await Users.unsetLoginTokens(userId))) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t}\n\n\t\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: userId, diff: { 'services.resume.loginTokens': [] } });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage: `User ${userId} has been logged out!`,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getPresence',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tif (isUserFromParams(this.queryParams, this.userId, this.user)) {\n\t\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tpresence: (user?.status || 'offline') as UserStatus,\n\t\t\t\t\tconnectionStatus: user?.statusConnection || 'offline',\n\t\t\t\t\t...(user?.lastLogin && { lastLogin: user?.lastLogin }),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpresence: user.status || ('offline' as UserStatus),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setStatus',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tstatus: Match.Maybe(String),\n\t\t\t\t\t\tmessage: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tstatus: String,\n\t\t\t\t\t\tmessage: Match.Maybe(String),\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (!settings.get('Accounts_AllowUserStatusMessageChange')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Change status is not allowed', {\n\t\t\t\t\tmethod: 'users.setStatus',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst user = await (async (): Promise<\n\t\t\t\tPick<IUser, '_id' | 'username' | 'name' | 'status' | 'statusText' | 'roles'> | undefined | null\n\t\t\t> => {\n\t\t\t\tif (isUserFromParams(this.bodyParams, this.userId, this.user)) {\n\t\t\t\t\treturn Users.findOneById(this.userId);\n\t\t\t\t}\n\t\t\t\tif (await hasPermissionAsync(this.userId, 'edit-other-user-info')) {\n\t\t\t\t\treturn getUserFromParams(this.bodyParams);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\t// TODO refactor to not update the user twice (one inside of `setStatusText` and then later just the status + statusDefault)\n\n\t\t\tif (this.bodyParams.message || this.bodyParams.message === '') {\n\t\t\t\tawait setStatusText(user._id, this.bodyParams.message);\n\t\t\t}\n\t\t\tif (this.bodyParams.status) {\n\t\t\t\tconst validStatus = ['online', 'away', 'offline', 'busy'];\n\t\t\t\tif (validStatus.includes(this.bodyParams.status)) {\n\t\t\t\t\tconst { status } = this.bodyParams;\n\n\t\t\t\t\tif (status === 'offline' && !settings.get('Accounts_AllowInvisibleStatusOption')) {\n\t\t\t\t\t\tthrow new Meteor.Error('error-status-not-allowed', 'Invisible status is disabled', {\n\t\t\t\t\t\t\tmethod: 'users.setStatus',\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tawait Users.updateOne(\n\t\t\t\t\t\t{ _id: user._id },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\t\tstatusDefault: status,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\tconst { _id, username, statusText, roles, name } = user;\n\t\t\t\t\tvoid api.broadcast('presence.status', {\n\t\t\t\t\t\tuser: { status, _id, username, statusText, roles, name },\n\t\t\t\t\t\tpreviousStatus: user.status,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-status', 'Valid status types include online, away, offline, and busy.', {\n\t\t\t\t\t\tmethod: 'users.setStatus',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// status: 'online' | 'offline' | 'away' | 'busy';\n// message?: string;\n// _id: string;\n// connectionStatus?: 'online' | 'offline' | 'away' | 'busy';\n// };\n\nAPI.v1.addRoute(\n\t'users.getStatus',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tif (isUserFromParams(this.queryParams, this.userId, this.user)) {\n\t\t\t\tconst user: IUser | null = await Users.findOneById(this.userId);\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\t_id: user?._id,\n\t\t\t\t\t// message: user.statusText,\n\t\t\t\t\tconnectionStatus: (user?.statusConnection || 'offline') as 'online' | 'offline' | 'away' | 'busy',\n\t\t\t\t\tstatus: (user?.status || 'offline') as 'online' | 'offline' | 'away' | 'busy',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\treturn API.v1.success({\n\t\t\t\t_id: user._id,\n\t\t\t\t// message: user.statusText,\n\t\t\t\tstatus: (user.status || 'offline') as 'online' | 'offline' | 'away' | 'busy',\n\t\t\t});\n\t\t},\n\t},\n);\n\nsettings.watch<number>('Rate_Limiter_Limit_RegisterUser', (value) => {\n\tconst userRegisterRoute = '/api/v1/users.registerpost';\n\n\tAPI.v1.updateRateLimiterDictionaryForRoute(userRegisterRoute, value);\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/users.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/users.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/users.ts","sourceRoot":"","sources":["app/api/server/v1/users.ts"],"names":[],"mappings":"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","sourcesContent":["import { MeteorError, Team, api } from '@rocket.chat/core-services';\nimport type { IExportOperation, ILoginToken, IPersonalAccessToken, IUser, UserStatus } from '@rocket.chat/core-typings';\nimport { Users, Subscriptions } from '@rocket.chat/models';\nimport {\n\tisUserCreateParamsPOST,\n\tisUserSetActiveStatusParamsPOST,\n\tisUserDeactivateIdleParamsPOST,\n\tisUsersInfoParamsGetProps,\n\tisUsersListStatusProps,\n\tisUsersSendWelcomeEmailProps,\n\tisUserRegisterParamsPOST,\n\tisUserLogoutParamsPOST,\n\tisUsersListTeamsProps,\n\tisUsersAutocompleteProps,\n\tisUsersSetAvatarProps,\n\tisUsersUpdateParamsPOST,\n\tisUsersUpdateOwnBasicInfoParamsPOST,\n\tisUsersSetPreferencesParamsPOST,\n\tisUsersCheckUsernameAvailabilityParamsGET,\n\tisUsersSendConfirmationEmailParamsPOST,\n} from '@rocket.chat/rest-typings';\nimport { getLoginExpirationInMs } from '@rocket.chat/tools';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { Filter } from 'mongodb';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { resetUserE2EEncriptionKey } from '../../../../server/lib/resetUserE2EKey';\nimport { sendWelcomeEmail } from '../../../../server/lib/sendWelcomeEmail';\nimport { saveUserPreferences } from '../../../../server/methods/saveUserPreferences';\nimport { getUserForCheck, emailCheck } from '../../../2fa/server/code';\nimport { resetTOTP } from '../../../2fa/server/functions/resetTOTP';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport {\n\tcheckUsernameAvailability,\n\tcheckUsernameAvailabilityWithValidation,\n} from '../../../lib/server/functions/checkUsernameAvailability';\nimport { getFullUserDataByIdOrUsernameOrImportId } from '../../../lib/server/functions/getFullUserData';\nimport { saveCustomFields } from '../../../lib/server/functions/saveCustomFields';\nimport { saveCustomFieldsWithoutValidation } from '../../../lib/server/functions/saveCustomFieldsWithoutValidation';\nimport { saveUser } from '../../../lib/server/functions/saveUser';\nimport { setStatusText } from '../../../lib/server/functions/setStatusText';\nimport { setUserAvatar } from '../../../lib/server/functions/setUserAvatar';\nimport { setUsernameWithValidation } from '../../../lib/server/functions/setUsername';\nimport { validateCustomFields } from '../../../lib/server/functions/validateCustomFields';\nimport { validateNameChars } from '../../../lib/server/functions/validateNameChars';\nimport { validateUsername } from '../../../lib/server/functions/validateUsername';\nimport { notifyOnUserChange, notifyOnUserChangeAsync } from '../../../lib/server/lib/notifyListener';\nimport { generateAccessToken } from '../../../lib/server/methods/createToken';\nimport { settings } from '../../../settings/server';\nimport { getURL } from '../../../utils/server/getURL';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams } from '../helpers/getUserFromParams';\nimport { isUserFromParams } from '../helpers/isUserFromParams';\nimport { getUploadFormData } from '../lib/getUploadFormData';\nimport { isValidQuery } from '../lib/isValidQuery';\nimport { findPaginatedUsersByStatus, findUsersToAutocomplete, getInclusiveFields, getNonEmptyFields, getNonEmptyQuery } from '../lib/users';\n\nAPI.v1.addRoute(\n\t'users.getAvatar',\n\t{ authRequired: false },\n\t{\n\t\tasync get() {\n\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\tconst url = getURL(`/avatar/${user.username}`, { cdn: false, full: true });\n\t\t\tthis.response.setHeader('Location', url);\n\n\t\t\treturn {\n\t\t\t\tstatusCode: 307,\n\t\t\t\tbody: url,\n\t\t\t};\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getAvatarSuggestion',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst suggestions = await Meteor.callAsync('getAvatarSuggestion');\n\n\t\t\treturn API.v1.success({ suggestions });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.update',\n\t{ authRequired: true, twoFactorRequired: true, validateParams: isUsersUpdateParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tconst userData = { _id: this.bodyParams.userId, ...this.bodyParams.data };\n\n\t\t\tif (userData.name && !validateNameChars(userData.name)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\tawait saveUser(this.userId, userData);\n\n\t\t\tif (this.bodyParams.data.customFields) {\n\t\t\t\tawait saveCustomFields(this.bodyParams.userId, this.bodyParams.data.customFields);\n\t\t\t}\n\n\t\t\tif (typeof this.bodyParams.data.active !== 'undefined') {\n\t\t\t\tconst {\n\t\t\t\t\tuserId,\n\t\t\t\t\tdata: { active },\n\t\t\t\t\tconfirmRelinquish,\n\t\t\t\t} = this.bodyParams;\n\n\t\t\t\tawait Meteor.callAsync('setUserActiveStatus', userId, active, Boolean(confirmRelinquish));\n\t\t\t}\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tconst user = await Users.findOneById(this.bodyParams.userId, { projection: fields });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ user });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.updateOwnBasicInfo',\n\t{ authRequired: true, validateParams: isUsersUpdateOwnBasicInfoParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tconst userData = {\n\t\t\t\temail: this.bodyParams.data.email,\n\t\t\t\trealname: this.bodyParams.data.name,\n\t\t\t\tusername: this.bodyParams.data.username,\n\t\t\t\tnickname: this.bodyParams.data.nickname,\n\t\t\t\tbio: this.bodyParams.data.bio,\n\t\t\t\tstatusText: this.bodyParams.data.statusText,\n\t\t\t\tstatusType: this.bodyParams.data.statusType,\n\t\t\t\tnewPassword: this.bodyParams.data.newPassword,\n\t\t\t\ttypedPassword: this.bodyParams.data.currentPassword,\n\t\t\t};\n\n\t\t\tif (userData.realname && !validateNameChars(userData.realname)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\t// saveUserProfile now uses the default two factor authentication procedures, so we need to provide that\n\t\t\tconst twoFactorOptions = !userData.typedPassword\n\t\t\t\t? null\n\t\t\t\t: {\n\t\t\t\t\t\ttwoFactorCode: userData.typedPassword,\n\t\t\t\t\t\ttwoFactorMethod: 'password',\n\t\t\t\t  };\n\n\t\t\tawait Meteor.callAsync('saveUserProfile', userData, this.bodyParams.customFields, twoFactorOptions);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser: await Users.findOneById(this.userId, { projection: API.v1.defaultFieldsToExclude }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setPreferences',\n\t{ authRequired: true, validateParams: isUsersSetPreferencesParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tif (\n\t\t\t\tthis.bodyParams.userId &&\n\t\t\t\tthis.bodyParams.userId !== this.userId &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'edit-other-user-info'))\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Editing user is not allowed');\n\t\t\t}\n\t\t\tconst userId = this.bodyParams.userId ? this.bodyParams.userId : this.userId;\n\t\t\tif (!(await Users.findOneById(userId))) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'The optional \"userId\" param provided does not match any users');\n\t\t\t}\n\n\t\t\tawait saveUserPreferences(this.bodyParams.data, userId);\n\t\t\tconst user = await Users.findOneById(userId, {\n\t\t\t\tprojection: {\n\t\t\t\t\t'settings.preferences': 1,\n\t\t\t\t\t'language': 1,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tpreferences: {\n\t\t\t\t\t\t\t...user.settings?.preferences,\n\t\t\t\t\t\t\tlanguage: user.language,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t} as unknown as Required<Pick<IUser, '_id' | 'settings'>>,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setAvatar',\n\t{ authRequired: true, validateParams: isUsersSetAvatarProps },\n\t{\n\t\tasync post() {\n\t\t\tconst canEditOtherUserAvatar = await hasPermissionAsync(this.userId, 'edit-other-user-avatar');\n\n\t\t\tif (!settings.get('Accounts_AllowUserAvatarChange') && !canEditOtherUserAvatar) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Change avatar is not allowed', {\n\t\t\t\t\tmethod: 'users.setAvatar',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet user = await (async (): Promise<\n\t\t\t\tPick<IUser, '_id' | 'roles' | 'username' | 'name' | 'status' | 'statusText'> | undefined | null\n\t\t\t> => {\n\t\t\t\tif (isUserFromParams(this.bodyParams, this.userId, this.user)) {\n\t\t\t\t\treturn Users.findOneById(this.userId);\n\t\t\t\t}\n\t\t\t\tif (canEditOtherUserAvatar) {\n\t\t\t\t\treturn getUserFromParams(this.bodyParams);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tif (this.bodyParams.avatarUrl) {\n\t\t\t\tawait setUserAvatar(user, this.bodyParams.avatarUrl, '', 'url');\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tconst image = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'image', sizeLimit: settings.get('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tif (!image) {\n\t\t\t\treturn API.v1.failure(\"The 'image' param is required\");\n\t\t\t}\n\n\t\t\tconst { fields, fileBuffer, mimetype } = image;\n\n\t\t\tconst sentTheUserByFormData = fields.userId || fields.username;\n\t\t\tif (sentTheUserByFormData) {\n\t\t\t\tif (fields.userId) {\n\t\t\t\t\tuser = await Users.findOneById(fields.userId, { projection: { username: 1 } });\n\t\t\t\t} else if (fields.username) {\n\t\t\t\t\tuser = await Users.findOneByUsernameIgnoringCase(fields.username, { projection: { username: 1 } });\n\t\t\t\t}\n\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'The optional \"userId\" or \"username\" param provided does not match any users');\n\t\t\t\t}\n\n\t\t\t\tconst isAnotherUser = this.userId !== user._id;\n\t\t\t\tif (isAnotherUser && !(await hasPermissionAsync(this.userId, 'edit-other-user-avatar'))) {\n\t\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait setUserAvatar(user, fileBuffer, mimetype, 'rest');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.create',\n\t{ authRequired: true, validateParams: isUserCreateParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\t// New change made by pull request #5152\n\t\t\tif (typeof this.bodyParams.joinDefaultChannels === 'undefined') {\n\t\t\t\tthis.bodyParams.joinDefaultChannels = true;\n\t\t\t}\n\n\t\t\tif (this.bodyParams.name && !validateNameChars(this.bodyParams.name)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\tvalidateCustomFields(this.bodyParams.customFields);\n\t\t\t}\n\n\t\t\tconst newUserId = await saveUser(this.userId, this.bodyParams);\n\t\t\tconst userId = typeof newUserId !== 'string' ? this.userId : newUserId;\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\tawait saveCustomFieldsWithoutValidation(userId, this.bodyParams.customFields);\n\t\t\t}\n\n\t\t\tif (typeof this.bodyParams.active !== 'undefined') {\n\t\t\t\tawait Meteor.callAsync('setUserActiveStatus', userId, this.bodyParams.active);\n\t\t\t}\n\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tconst user = await Users.findOneById(userId, { projection: fields });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ user });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.delete',\n\t{ authRequired: true, permissionsRequired: ['delete-user'] },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst { confirmRelinquish = false } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('deleteUser', user._id, confirmRelinquish);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.deleteOwnAccount',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { password } = this.bodyParams;\n\t\t\tif (!password) {\n\t\t\t\treturn API.v1.failure('Body parameter \"password\" is required.');\n\t\t\t}\n\t\t\tif (!settings.get('Accounts_AllowDeleteOwnAccount')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tconst { confirmRelinquish = false } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('deleteUserOwnAccount', password, confirmRelinquish);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setActiveStatus',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUserSetActiveStatusParamsPOST,\n\t\tpermissionsRequired: {\n\t\t\tPOST: { permissions: ['edit-other-user-active-status', 'manage-moderation-actions'], operation: 'hasAny' },\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, activeStatus, confirmRelinquish = false } = this.bodyParams;\n\t\t\tawait Meteor.callAsync('setUserActiveStatus', userId, activeStatus, confirmRelinquish);\n\n\t\t\tconst user = await Users.findOneById(this.bodyParams.userId, { projection: { active: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.deactivateIdle',\n\t{ authRequired: true, validateParams: isUserDeactivateIdleParamsPOST, permissionsRequired: ['edit-other-user-active-status'] },\n\t{\n\t\tasync post() {\n\t\t\tconst { daysIdle, role = 'user' } = this.bodyParams;\n\n\t\t\tconst lastLoggedIn = new Date();\n\t\t\tlastLoggedIn.setDate(lastLoggedIn.getDate() - daysIdle);\n\n\t\t\t// since we're deactiving users that are not logged in, there is no need to send data through WS\n\t\t\tconst { modifiedCount: count } = await Users.setActiveNotLoggedInAfterWithRole(lastLoggedIn, role, false);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tcount,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.info',\n\t{ authRequired: true, validateParams: isUsersInfoParamsGetProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tconst searchTerms: [string, 'id' | 'username' | 'importId'] | false =\n\t\t\t\t('userId' in this.queryParams && !!this.queryParams.userId && [this.queryParams.userId, 'id']) ||\n\t\t\t\t('username' in this.queryParams && !!this.queryParams.username && [this.queryParams.username, 'username']) ||\n\t\t\t\t('importId' in this.queryParams && !!this.queryParams.importId && [this.queryParams.importId, 'importId']);\n\n\t\t\tif (!searchTerms) {\n\t\t\t\treturn API.v1.failure('Invalid search query.');\n\t\t\t}\n\n\t\t\tconst user = await getFullUserDataByIdOrUsernameOrImportId(this.userId, ...searchTerms);\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found.');\n\t\t\t}\n\t\t\tconst myself = user._id === this.userId;\n\t\t\tif (fields.userRooms === 1 && (myself || (await hasPermissionAsync(this.userId, 'view-other-user-channels')))) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tuser: {\n\t\t\t\t\t\t...user,\n\t\t\t\t\t\trooms: await Subscriptions.findByUserId(user._id, {\n\t\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\t\trid: 1,\n\t\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\t\tunread: 1,\n\t\t\t\t\t\t\t\tfederated: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}).toArray(),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.list',\n\t{\n\t\tauthRequired: true,\n\t\tqueryOperations: ['$or', '$and'],\n\t\tpermissionsRequired: ['view-d-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (\n\t\t\t\tsettings.get('API_Apply_permission_view-outside-room_on_users-list') &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'view-outside-room'))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst nonEmptyQuery = getNonEmptyQuery(query, await hasPermissionAsync(this.userId, 'view-full-other-user-info'));\n\t\t\tconst nonEmptyFields = getNonEmptyFields(fields);\n\n\t\t\tconst inclusiveFields = getInclusiveFields(nonEmptyFields);\n\n\t\t\tconst inclusiveFieldsKeys = Object.keys(inclusiveFields);\n\n\t\t\tif (\n\t\t\t\t!isValidQuery(\n\t\t\t\t\tnonEmptyQuery,\n\t\t\t\t\t[\n\t\t\t\t\t\t...inclusiveFieldsKeys,\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('emails') && 'emails.address.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('username') && 'username.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('name') && 'name.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('type') && 'type.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('customFields') && 'customFields.*',\n\t\t\t\t\t].filter(Boolean) as string[],\n\t\t\t\t\tthis.queryOperations,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-query', isValidQuery.errors.join('\\n'));\n\t\t\t}\n\n\t\t\tconst actualSort = sort || { username: 1 };\n\n\t\t\tif (sort?.status) {\n\t\t\t\tactualSort.active = sort.status;\n\t\t\t}\n\n\t\t\tif (sort?.name) {\n\t\t\t\tactualSort.nameInsensitive = sort.name;\n\t\t\t}\n\n\t\t\tconst limit =\n\t\t\t\tcount !== 0\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$limit: count,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  ]\n\t\t\t\t\t: [];\n\n\t\t\tconst result = await Users.col\n\t\t\t\t.aggregate<{ sortedResults: IUser[]; totalCount: { total: number }[] }>([\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: nonEmptyQuery,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: inclusiveFields,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$addFields: {\n\t\t\t\t\t\t\tnameInsensitive: {\n\t\t\t\t\t\t\t\t$toLower: '$name',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$facet: {\n\t\t\t\t\t\t\tsortedResults: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$sort: actualSort,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$skip: offset,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t...limit,\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttotalCount: [{ $group: { _id: null, total: { $sum: 1 } } }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t\t.toArray();\n\n\t\t\tconst {\n\t\t\t\tsortedResults: users,\n\t\t\t\ttotalCount: [{ total } = { total: 0 }],\n\t\t\t} = result[0];\n\n\t\t\treturn API.v1.success({\n\t\t\t\tusers,\n\t\t\t\tcount: users.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.listByStatus',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersListStatusProps,\n\t\tpermissionsRequired: ['view-d-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (\n\t\t\t\tsettings.get('API_Apply_permission_view-outside-room_on_users-list') &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'view-outside-room'))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { status, hasLoggedIn, type, roles, searchTerm } = this.queryParams;\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findPaginatedUsersByStatus({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t\tstatus,\n\t\t\t\t\troles,\n\t\t\t\t\tsearchTerm,\n\t\t\t\t\thasLoggedIn,\n\t\t\t\t\ttype,\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.sendWelcomeEmail',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersSendWelcomeEmailProps,\n\t\tpermissionsRequired: ['send-mail'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { email } = this.bodyParams;\n\t\t\tawait sendWelcomeEmail(email);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.register',\n\t{\n\t\tauthRequired: false,\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: settings.get('Rate_Limiter_Limit_RegisterUser') ?? 1,\n\t\t\tintervalTimeInMS: settings.get('API_Enable_Rate_Limiter_Limit_Time_Default'),\n\t\t},\n\t\tvalidateParams: isUserRegisterParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { secret: secretURL, ...params } = this.bodyParams;\n\n\t\t\tif (this.userId) {\n\t\t\t\treturn API.v1.failure('Logged in users can not register again.');\n\t\t\t}\n\n\t\t\tif (params.name && !validateNameChars(params.name)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\tif (!validateUsername(this.bodyParams.username)) {\n\t\t\t\treturn API.v1.failure(`The username provided is not valid`);\n\t\t\t}\n\n\t\t\tif (!(await checkUsernameAvailability(this.bodyParams.username))) {\n\t\t\t\treturn API.v1.failure('Username is already in use');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\ttry {\n\t\t\t\t\tawait validateCustomFields(this.bodyParams.customFields);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn API.v1.failure(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Register the user\n\t\t\tconst userId = await Meteor.callAsync('registerUser', {\n\t\t\t\t...params,\n\t\t\t\t...(secretURL && { secretURL }),\n\t\t\t});\n\n\t\t\t// Now set their username\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\t\t\tawait setUsernameWithValidation(userId, this.bodyParams.username);\n\n\t\t\tconst user = await Users.findOneById(userId, { projection: fields });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\tawait saveCustomFields(userId, this.bodyParams.customFields);\n\t\t\t}\n\n\t\t\treturn API.v1.success({ user });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.resetAvatar',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tif (settings.get('Accounts_AllowUserAvatarChange') && user._id === this.userId) {\n\t\t\t\tawait Meteor.callAsync('resetAvatar');\n\t\t\t} else if (\n\t\t\t\t(await hasPermissionAsync(this.userId, 'edit-other-user-avatar')) ||\n\t\t\t\t(await hasPermissionAsync(this.userId, 'manage-moderation-actions'))\n\t\t\t) {\n\t\t\t\tawait Meteor.callAsync('resetAvatar', user._id);\n\t\t\t} else {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Reset avatar is not allowed', {\n\t\t\t\t\tmethod: 'users.resetAvatar',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.createToken',\n\t{ authRequired: true, deprecationVersion: '8.0.0' },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tconst data = await generateAccessToken(this.userId, user._id);\n\n\t\t\treturn data ? API.v1.success({ data }) : API.v1.unauthorized();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getPreferences',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (user?.settings) {\n\t\t\t\tconst { preferences = {} } = user?.settings;\n\t\t\t\tpreferences.language = user?.language;\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tpreferences,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn API.v1.failure(i18n.t('Accounts_Default_User_Preferences_not_available').toUpperCase());\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.forgotPassword',\n\t{ authRequired: false },\n\t{\n\t\tasync post() {\n\t\t\tconst isPasswordResetEnabled = settings.get('Accounts_PasswordReset');\n\n\t\t\tif (!isPasswordResetEnabled) {\n\t\t\t\treturn API.v1.failure('Password reset is not enabled');\n\t\t\t}\n\n\t\t\tconst { email } = this.bodyParams;\n\t\t\tif (!email) {\n\t\t\t\treturn API.v1.failure(\"The 'email' param is required\");\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('sendForgotPasswordEmail', email.toLowerCase());\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getUsernameSuggestion',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst result = await Meteor.callAsync('getUsernameSuggestion');\n\n\t\t\treturn API.v1.success({ result });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.checkUsernameAvailability',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersCheckUsernameAvailabilityParamsGET,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { username } = this.queryParams;\n\n\t\t\tconst result = await checkUsernameAvailabilityWithValidation(this.userId, username);\n\n\t\t\treturn API.v1.success({ result });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.generatePersonalAccessToken',\n\t{ authRequired: true, twoFactorRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { tokenName, bypassTwoFactor } = this.bodyParams;\n\t\t\tif (!tokenName) {\n\t\t\t\treturn API.v1.failure(\"The 'tokenName' param is required\");\n\t\t\t}\n\t\t\tconst token = await Meteor.callAsync('personalAccessTokens:generateToken', { tokenName, bypassTwoFactor });\n\n\t\t\treturn API.v1.success({ token });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.regeneratePersonalAccessToken',\n\t{ authRequired: true, twoFactorRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { tokenName } = this.bodyParams;\n\t\t\tif (!tokenName) {\n\t\t\t\treturn API.v1.failure(\"The 'tokenName' param is required\");\n\t\t\t}\n\t\t\tconst token = await Meteor.callAsync('personalAccessTokens:regenerateToken', { tokenName });\n\n\t\t\treturn API.v1.success({ token });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getPersonalAccessTokens',\n\t{ authRequired: true, permissionsRequired: ['create-personal-access-tokens'] },\n\t{\n\t\tasync get() {\n\t\t\tconst user = (await Users.getLoginTokensByUserId(this.userId).toArray())[0] as unknown as IUser | undefined;\n\n\t\t\tconst isPersonalAccessToken = (loginToken: ILoginToken | IPersonalAccessToken): loginToken is IPersonalAccessToken =>\n\t\t\t\t'type' in loginToken && loginToken.type === 'personalAccessToken';\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttokens:\n\t\t\t\t\tuser?.services?.resume?.loginTokens?.filter(isPersonalAccessToken).map((loginToken) => ({\n\t\t\t\t\t\tname: loginToken.name,\n\t\t\t\t\t\tcreatedAt: loginToken.createdAt.toISOString(),\n\t\t\t\t\t\tlastTokenPart: loginToken.lastTokenPart,\n\t\t\t\t\t\tbypassTwoFactor: Boolean(loginToken.bypassTwoFactor),\n\t\t\t\t\t})) || [],\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.removePersonalAccessToken',\n\t{ authRequired: true, twoFactorRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { tokenName } = this.bodyParams;\n\t\t\tif (!tokenName) {\n\t\t\t\treturn API.v1.failure(\"The 'tokenName' param is required\");\n\t\t\t}\n\t\t\tawait Meteor.callAsync('personalAccessTokens:removeToken', {\n\t\t\t\ttokenName,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.2fa.enableEmail',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst hasUnverifiedEmail = this.user.emails?.some((email) => !email.verified);\n\t\t\tif (hasUnverifiedEmail) {\n\t\t\t\tthrow new MeteorError('error-invalid-user', 'You need to verify your emails before setting up 2FA');\n\t\t\t}\n\n\t\t\tawait Users.enableEmail2FAByUserId(this.userId);\n\n\t\t\t// When 2FA is enable we logout all other clients\n\t\t\tconst xAuthToken = this.request.headers['x-auth-token'] as string;\n\t\t\tif (!xAuthToken) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tconst hashedToken = Accounts._hashLoginToken(xAuthToken);\n\n\t\t\tif (!(await Users.removeNonPATLoginTokensExcept(this.userId, hashedToken))) {\n\t\t\t\tthrow new MeteorError('error-logging-out-other-clients', 'Error logging out other clients');\n\t\t\t}\n\n\t\t\t// TODO this can be optmized so places that care about loginTokens being removed are invoked directly\n\t\t\t// instead of having to listen to every watch.users event\n\t\t\tvoid notifyOnUserChangeAsync(async () => {\n\t\t\t\tconst userTokens = await Users.findOneById(this.userId, { projection: { 'services.resume.loginTokens': 1 } });\n\t\t\t\tif (!userTokens) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tclientAction: 'updated',\n\t\t\t\t\tid: this.user._id,\n\t\t\t\t\tdiff: { 'services.resume.loginTokens': userTokens.services?.resume?.loginTokens },\n\t\t\t\t};\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.2fa.disableEmail',\n\t{ authRequired: true, twoFactorRequired: true, twoFactorOptions: { disableRememberMe: true } },\n\t{\n\t\tasync post() {\n\t\t\tawait Users.disableEmail2FAByUserId(this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute('users.2fa.sendEmailCode', {\n\tasync post() {\n\t\tconst { emailOrUsername } = this.bodyParams;\n\n\t\tif (!emailOrUsername) {\n\t\t\tthrow new Meteor.Error('error-parameter-required', 'emailOrUsername is required');\n\t\t}\n\n\t\tconst method = emailOrUsername.includes('@') ? 'findOneByEmailAddress' : 'findOneByUsername';\n\t\tconst userId = this.userId || (await Users[method](emailOrUsername, { projection: { _id: 1 } }))?._id;\n\n\t\tif (!userId) {\n\t\t\t// this.logger.error('[2fa] User was not found when requesting 2fa email code');\n\t\t\treturn API.v1.success();\n\t\t}\n\t\tconst user = await getUserForCheck(userId);\n\t\tif (!user) {\n\t\t\t// this.logger.error('[2fa] User was not found when requesting 2fa email code');\n\t\t\treturn API.v1.success();\n\t\t}\n\n\t\tawait emailCheck.sendEmailCode(user);\n\n\t\treturn API.v1.success();\n\t},\n});\n\nAPI.v1.addRoute(\n\t'users.sendConfirmationEmail',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersSendConfirmationEmailParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { email } = this.bodyParams;\n\n\t\t\tif (await Meteor.callAsync('sendConfirmationEmail', email)) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.presence',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\t// if presence broadcast is disabled, return an empty array (all users are \"offline\")\n\t\t\tif (settings.get('Presence_broadcast_disabled')) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tusers: [],\n\t\t\t\t\tfull: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { from, ids } = this.queryParams;\n\n\t\t\tconst options = {\n\t\t\t\tprojection: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tstatus: 1,\n\t\t\t\t\tutcOffset: 1,\n\t\t\t\t\tstatusText: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (ids) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tusers: await Users.findNotOfflineByIds(Array.isArray(ids) ? ids : ids.split(','), options).toArray(),\n\t\t\t\t\tfull: false,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (from) {\n\t\t\t\tconst ts = new Date(from);\n\t\t\t\tconst diff = (Date.now() - Number(ts)) / 1000 / 60;\n\n\t\t\t\tif (diff < 10) {\n\t\t\t\t\treturn API.v1.success({\n\t\t\t\t\t\tusers: await Users.findNotIdUpdatedFrom(this.userId, ts, options).toArray(),\n\t\t\t\t\t\tfull: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tusers: await Users.findUsersNotOffline(options).toArray(),\n\t\t\t\tfull: true,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.requestDataDownload',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { fullExport = false } = this.queryParams;\n\t\t\tconst result = (await Meteor.callAsync('requestDataDownload', { fullExport: fullExport === 'true' })) as {\n\t\t\t\trequested: boolean;\n\t\t\t\texportOperation: IExportOperation;\n\t\t\t};\n\n\t\t\treturn API.v1.success({\n\t\t\t\trequested: Boolean(result.requested),\n\t\t\t\texportOperation: result.exportOperation,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.logoutOtherClients',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst xAuthToken = this.request.headers['x-auth-token'] as string;\n\n\t\t\tif (!xAuthToken) {\n\t\t\t\tthrow new Meteor.Error('error-parameter-required', 'x-auth-token is required');\n\t\t\t}\n\t\t\tconst hashedToken = Accounts._hashLoginToken(xAuthToken);\n\n\t\t\tif (!(await Users.removeNonPATLoginTokensExcept(this.userId, hashedToken))) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t}\n\n\t\t\tconst me = (await Users.findOneById(this.userId, { projection: { 'services.resume.loginTokens': 1 } })) as Pick<IUser, 'services'>;\n\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tid: this.userId,\n\t\t\t\tdiff: { 'services.resume.loginTokens': me.services?.resume?.loginTokens },\n\t\t\t});\n\n\t\t\tconst token = me.services?.resume?.loginTokens?.find((token) => token.hashedToken === hashedToken);\n\n\t\t\tconst loginExp = settings.get<number>('Accounts_LoginExpiration');\n\n\t\t\tconst tokenExpires = (token && 'when' in token && new Date(token.when.getTime() + getLoginExpirationInMs(loginExp))) || undefined;\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttoken: xAuthToken,\n\t\t\t\ttokenExpires: tokenExpires?.toISOString() || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.autocomplete',\n\t{ authRequired: true, validateParams: isUsersAutocompleteProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector: selectorRaw } = this.queryParams;\n\n\t\t\tconst selector: { exceptions: Required<IUser>['username'][]; conditions: Filter<IUser>; term: string } = JSON.parse(selectorRaw);\n\n\t\t\ttry {\n\t\t\t\tif (selector?.conditions && !isValidQuery(selector.conditions, ['*'], ['$or', '$and'])) {\n\t\t\t\t\tthrow new Error('error-invalid-query');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treturn API.v1.failure(e);\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findUsersToAutocomplete({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector,\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.removeOtherTokens',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\treturn API.v1.success(await Meteor.callAsync('removeOtherTokens'));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.resetE2EKey',\n\t{ authRequired: true, twoFactorRequired: true, twoFactorOptions: { disableRememberMe: true } },\n\t{\n\t\tasync post() {\n\t\t\tif ('userId' in this.bodyParams || 'username' in this.bodyParams || 'user' in this.bodyParams) {\n\t\t\t\t// reset other user keys\n\t\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t\t}\n\n\t\t\t\tif (!(await hasPermissionAsync(this.userId, 'edit-other-user-e2ee'))) {\n\t\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t\t}\n\n\t\t\t\tif (!(await resetUserE2EEncriptionKey(user._id, true))) {\n\t\t\t\t\treturn API.v1.failure();\n\t\t\t\t}\n\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\t\t\tawait resetUserE2EEncriptionKey(this.userId, false);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.resetTOTP',\n\t{ authRequired: true, twoFactorRequired: true, twoFactorOptions: { disableRememberMe: true } },\n\t{\n\t\tasync post() {\n\t\t\t// // reset own keys\n\t\t\tif ('userId' in this.bodyParams || 'username' in this.bodyParams || 'user' in this.bodyParams) {\n\t\t\t\t// reset other user keys\n\t\t\t\tif (!(await hasPermissionAsync(this.userId, 'edit-other-user-totp'))) {\n\t\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t\t}\n\n\t\t\t\tif (!settings.get('Accounts_TwoFactorAuthentication_Enabled')) {\n\t\t\t\t\tthrow new Meteor.Error('error-two-factor-not-enabled', 'Two factor authentication is not enabled');\n\t\t\t\t}\n\n\t\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t\t}\n\n\t\t\t\tawait resetTOTP(user._id, true);\n\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\t\t\tawait resetTOTP(this.userId, false);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.listTeams',\n\t{ authRequired: true, validateParams: isUsersListTeamsProps },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tuserId: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { userId } = this.queryParams;\n\n\t\t\t// If the caller has permission to view all teams, there's no need to filter the teams\n\t\t\tconst adminId = (await hasPermissionAsync(this.userId, 'view-all-teams')) ? undefined : this.userId;\n\n\t\t\tconst teams = await Team.findBySubscribedUserIds(userId, adminId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tteams,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.logout',\n\t{ authRequired: true, validateParams: isUserLogoutParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tconst userId = this.bodyParams.userId || this.userId;\n\n\t\t\tif (userId !== this.userId && !(await hasPermissionAsync(this.userId, 'logout-other-user'))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\t// this method logs the user out automatically, if successful returns 1, otherwise 0\n\t\t\tif (!(await Users.unsetLoginTokens(userId))) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t}\n\n\t\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: userId, diff: { 'services.resume.loginTokens': [] } });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage: `User ${userId} has been logged out!`,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getPresence',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tif (isUserFromParams(this.queryParams, this.userId, this.user)) {\n\t\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tpresence: (user?.status || 'offline') as UserStatus,\n\t\t\t\t\tconnectionStatus: user?.statusConnection || 'offline',\n\t\t\t\t\t...(user?.lastLogin && { lastLogin: user?.lastLogin }),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpresence: user.status || ('offline' as UserStatus),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setStatus',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tstatus: Match.Maybe(String),\n\t\t\t\t\t\tmessage: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tstatus: String,\n\t\t\t\t\t\tmessage: Match.Maybe(String),\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (!settings.get('Accounts_AllowUserStatusMessageChange')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Change status is not allowed', {\n\t\t\t\t\tmethod: 'users.setStatus',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst user = await (async (): Promise<\n\t\t\t\tPick<IUser, '_id' | 'username' | 'name' | 'status' | 'statusText' | 'roles'> | undefined | null\n\t\t\t> => {\n\t\t\t\tif (isUserFromParams(this.bodyParams, this.userId, this.user)) {\n\t\t\t\t\treturn Users.findOneById(this.userId);\n\t\t\t\t}\n\t\t\t\tif (await hasPermissionAsync(this.userId, 'edit-other-user-info')) {\n\t\t\t\t\treturn getUserFromParams(this.bodyParams);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\t// TODO refactor to not update the user twice (one inside of `setStatusText` and then later just the status + statusDefault)\n\n\t\t\tif (this.bodyParams.message || this.bodyParams.message === '') {\n\t\t\t\tawait setStatusText(user._id, this.bodyParams.message);\n\t\t\t}\n\t\t\tif (this.bodyParams.status) {\n\t\t\t\tconst validStatus = ['online', 'away', 'offline', 'busy'];\n\t\t\t\tif (validStatus.includes(this.bodyParams.status)) {\n\t\t\t\t\tconst { status } = this.bodyParams;\n\n\t\t\t\t\tif (status === 'offline' && !settings.get('Accounts_AllowInvisibleStatusOption')) {\n\t\t\t\t\t\tthrow new Meteor.Error('error-status-not-allowed', 'Invisible status is disabled', {\n\t\t\t\t\t\t\tmethod: 'users.setStatus',\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tawait Users.updateOne(\n\t\t\t\t\t\t{ _id: user._id },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\t\tstatusDefault: status,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\tconst { _id, username, statusText, roles, name } = user;\n\t\t\t\t\tvoid api.broadcast('presence.status', {\n\t\t\t\t\t\tuser: { status, _id, username, statusText, roles, name },\n\t\t\t\t\t\tpreviousStatus: user.status,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-status', 'Valid status types include online, away, offline, and busy.', {\n\t\t\t\t\t\tmethod: 'users.setStatus',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// status: 'online' | 'offline' | 'away' | 'busy';\n// message?: string;\n// _id: string;\n// connectionStatus?: 'online' | 'offline' | 'away' | 'busy';\n// };\n\nAPI.v1.addRoute(\n\t'users.getStatus',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tif (isUserFromParams(this.queryParams, this.userId, this.user)) {\n\t\t\t\tconst user: IUser | null = await Users.findOneById(this.userId);\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\t_id: user?._id,\n\t\t\t\t\t// message: user.statusText,\n\t\t\t\t\tconnectionStatus: (user?.statusConnection || 'offline') as 'online' | 'offline' | 'away' | 'busy',\n\t\t\t\t\tstatus: (user?.status || 'offline') as 'online' | 'offline' | 'away' | 'busy',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\treturn API.v1.success({\n\t\t\t\t_id: user._id,\n\t\t\t\t// message: user.statusText,\n\t\t\t\tstatus: (user.status || 'offline') as 'online' | 'offline' | 'away' | 'busy',\n\t\t\t});\n\t\t},\n\t},\n);\n\nsettings.watch<number>('Rate_Limiter_Limit_RegisterUser', (value) => {\n\tconst userRegisterRoute = '/api/v1/users.registerpost';\n\n\tAPI.v1.updateRateLimiterDictionaryForRoute(userRegisterRoute, value);\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 1);\n    const _excluded = [\"secret\"];\n    var _settings$get;\n    let MeteorError, Team, api;\n    module.link(\"@rocket.chat/core-services\", {\n      MeteorError(v) {\n        MeteorError = v;\n      },\n      Team(v) {\n        Team = v;\n      },\n      api(v) {\n        api = v;\n      }\n    }, 0);\n    let Users, Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 1);\n    let isUserCreateParamsPOST, isUserSetActiveStatusParamsPOST, isUserDeactivateIdleParamsPOST, isUsersInfoParamsGetProps, isUsersListStatusProps, isUsersSendWelcomeEmailProps, isUserRegisterParamsPOST, isUserLogoutParamsPOST, isUsersListTeamsProps, isUsersAutocompleteProps, isUsersSetAvatarProps, isUsersUpdateParamsPOST, isUsersUpdateOwnBasicInfoParamsPOST, isUsersSetPreferencesParamsPOST, isUsersCheckUsernameAvailabilityParamsGET, isUsersSendConfirmationEmailParamsPOST;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isUserCreateParamsPOST(v) {\n        isUserCreateParamsPOST = v;\n      },\n      isUserSetActiveStatusParamsPOST(v) {\n        isUserSetActiveStatusParamsPOST = v;\n      },\n      isUserDeactivateIdleParamsPOST(v) {\n        isUserDeactivateIdleParamsPOST = v;\n      },\n      isUsersInfoParamsGetProps(v) {\n        isUsersInfoParamsGetProps = v;\n      },\n      isUsersListStatusProps(v) {\n        isUsersListStatusProps = v;\n      },\n      isUsersSendWelcomeEmailProps(v) {\n        isUsersSendWelcomeEmailProps = v;\n      },\n      isUserRegisterParamsPOST(v) {\n        isUserRegisterParamsPOST = v;\n      },\n      isUserLogoutParamsPOST(v) {\n        isUserLogoutParamsPOST = v;\n      },\n      isUsersListTeamsProps(v) {\n        isUsersListTeamsProps = v;\n      },\n      isUsersAutocompleteProps(v) {\n        isUsersAutocompleteProps = v;\n      },\n      isUsersSetAvatarProps(v) {\n        isUsersSetAvatarProps = v;\n      },\n      isUsersUpdateParamsPOST(v) {\n        isUsersUpdateParamsPOST = v;\n      },\n      isUsersUpdateOwnBasicInfoParamsPOST(v) {\n        isUsersUpdateOwnBasicInfoParamsPOST = v;\n      },\n      isUsersSetPreferencesParamsPOST(v) {\n        isUsersSetPreferencesParamsPOST = v;\n      },\n      isUsersCheckUsernameAvailabilityParamsGET(v) {\n        isUsersCheckUsernameAvailabilityParamsGET = v;\n      },\n      isUsersSendConfirmationEmailParamsPOST(v) {\n        isUsersSendConfirmationEmailParamsPOST = v;\n      }\n    }, 2);\n    let getLoginExpirationInMs;\n    module.link(\"@rocket.chat/tools\", {\n      getLoginExpirationInMs(v) {\n        getLoginExpirationInMs = v;\n      }\n    }, 3);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 4);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 5);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 6);\n    let i18n;\n    module.link(\"../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 7);\n    let resetUserE2EEncriptionKey;\n    module.link(\"../../../../server/lib/resetUserE2EKey\", {\n      resetUserE2EEncriptionKey(v) {\n        resetUserE2EEncriptionKey = v;\n      }\n    }, 8);\n    let sendWelcomeEmail;\n    module.link(\"../../../../server/lib/sendWelcomeEmail\", {\n      sendWelcomeEmail(v) {\n        sendWelcomeEmail = v;\n      }\n    }, 9);\n    let saveUserPreferences;\n    module.link(\"../../../../server/methods/saveUserPreferences\", {\n      saveUserPreferences(v) {\n        saveUserPreferences = v;\n      }\n    }, 10);\n    let getUserForCheck, emailCheck;\n    module.link(\"../../../2fa/server/code\", {\n      getUserForCheck(v) {\n        getUserForCheck = v;\n      },\n      emailCheck(v) {\n        emailCheck = v;\n      }\n    }, 11);\n    let resetTOTP;\n    module.link(\"../../../2fa/server/functions/resetTOTP\", {\n      resetTOTP(v) {\n        resetTOTP = v;\n      }\n    }, 12);\n    let hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 13);\n    let checkUsernameAvailability, checkUsernameAvailabilityWithValidation;\n    module.link(\"../../../lib/server/functions/checkUsernameAvailability\", {\n      checkUsernameAvailability(v) {\n        checkUsernameAvailability = v;\n      },\n      checkUsernameAvailabilityWithValidation(v) {\n        checkUsernameAvailabilityWithValidation = v;\n      }\n    }, 14);\n    let getFullUserDataByIdOrUsernameOrImportId;\n    module.link(\"../../../lib/server/functions/getFullUserData\", {\n      getFullUserDataByIdOrUsernameOrImportId(v) {\n        getFullUserDataByIdOrUsernameOrImportId = v;\n      }\n    }, 15);\n    let saveCustomFields;\n    module.link(\"../../../lib/server/functions/saveCustomFields\", {\n      saveCustomFields(v) {\n        saveCustomFields = v;\n      }\n    }, 16);\n    let saveCustomFieldsWithoutValidation;\n    module.link(\"../../../lib/server/functions/saveCustomFieldsWithoutValidation\", {\n      saveCustomFieldsWithoutValidation(v) {\n        saveCustomFieldsWithoutValidation = v;\n      }\n    }, 17);\n    let saveUser;\n    module.link(\"../../../lib/server/functions/saveUser\", {\n      saveUser(v) {\n        saveUser = v;\n      }\n    }, 18);\n    let setStatusText;\n    module.link(\"../../../lib/server/functions/setStatusText\", {\n      setStatusText(v) {\n        setStatusText = v;\n      }\n    }, 19);\n    let setUserAvatar;\n    module.link(\"../../../lib/server/functions/setUserAvatar\", {\n      setUserAvatar(v) {\n        setUserAvatar = v;\n      }\n    }, 20);\n    let setUsernameWithValidation;\n    module.link(\"../../../lib/server/functions/setUsername\", {\n      setUsernameWithValidation(v) {\n        setUsernameWithValidation = v;\n      }\n    }, 21);\n    let validateCustomFields;\n    module.link(\"../../../lib/server/functions/validateCustomFields\", {\n      validateCustomFields(v) {\n        validateCustomFields = v;\n      }\n    }, 22);\n    let validateNameChars;\n    module.link(\"../../../lib/server/functions/validateNameChars\", {\n      validateNameChars(v) {\n        validateNameChars = v;\n      }\n    }, 23);\n    let validateUsername;\n    module.link(\"../../../lib/server/functions/validateUsername\", {\n      validateUsername(v) {\n        validateUsername = v;\n      }\n    }, 24);\n    let notifyOnUserChange, notifyOnUserChangeAsync;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnUserChange(v) {\n        notifyOnUserChange = v;\n      },\n      notifyOnUserChangeAsync(v) {\n        notifyOnUserChangeAsync = v;\n      }\n    }, 25);\n    let generateAccessToken;\n    module.link(\"../../../lib/server/methods/createToken\", {\n      generateAccessToken(v) {\n        generateAccessToken = v;\n      }\n    }, 26);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 27);\n    let getURL;\n    module.link(\"../../../utils/server/getURL\", {\n      getURL(v) {\n        getURL = v;\n      }\n    }, 28);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 29);\n    let getPaginationItems;\n    module.link(\"../helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 30);\n    let getUserFromParams;\n    module.link(\"../helpers/getUserFromParams\", {\n      getUserFromParams(v) {\n        getUserFromParams = v;\n      }\n    }, 31);\n    let isUserFromParams;\n    module.link(\"../helpers/isUserFromParams\", {\n      isUserFromParams(v) {\n        isUserFromParams = v;\n      }\n    }, 32);\n    let getUploadFormData;\n    module.link(\"../lib/getUploadFormData\", {\n      getUploadFormData(v) {\n        getUploadFormData = v;\n      }\n    }, 33);\n    let isValidQuery;\n    module.link(\"../lib/isValidQuery\", {\n      isValidQuery(v) {\n        isValidQuery = v;\n      }\n    }, 34);\n    let findPaginatedUsersByStatus, findUsersToAutocomplete, getInclusiveFields, getNonEmptyFields, getNonEmptyQuery;\n    module.link(\"../lib/users\", {\n      findPaginatedUsersByStatus(v) {\n        findPaginatedUsersByStatus = v;\n      },\n      findUsersToAutocomplete(v) {\n        findUsersToAutocomplete = v;\n      },\n      getInclusiveFields(v) {\n        getInclusiveFields = v;\n      },\n      getNonEmptyFields(v) {\n        getNonEmptyFields = v;\n      },\n      getNonEmptyQuery(v) {\n        getNonEmptyQuery = v;\n      }\n    }, 35);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    API.v1.addRoute('users.getAvatar', {\n      authRequired: false\n    }, {\n      async get() {\n        const user = await getUserFromParams(this.queryParams);\n        const url = getURL(\"/avatar/\".concat(user.username), {\n          cdn: false,\n          full: true\n        });\n        this.response.setHeader('Location', url);\n        return {\n          statusCode: 307,\n          body: url\n        };\n      }\n    });\n    API.v1.addRoute('users.getAvatarSuggestion', {\n      authRequired: true\n    }, {\n      async get() {\n        const suggestions = await Meteor.callAsync('getAvatarSuggestion');\n        return API.v1.success({\n          suggestions\n        });\n      }\n    });\n    API.v1.addRoute('users.update', {\n      authRequired: true,\n      twoFactorRequired: true,\n      validateParams: isUsersUpdateParamsPOST\n    }, {\n      async post() {\n        const userData = _objectSpread({\n          _id: this.bodyParams.userId\n        }, this.bodyParams.data);\n        if (userData.name && !validateNameChars(userData.name)) {\n          return API.v1.failure('Name contains invalid characters');\n        }\n        await saveUser(this.userId, userData);\n        if (this.bodyParams.data.customFields) {\n          await saveCustomFields(this.bodyParams.userId, this.bodyParams.data.customFields);\n        }\n        if (typeof this.bodyParams.data.active !== 'undefined') {\n          const {\n            userId,\n            data: {\n              active\n            },\n            confirmRelinquish\n          } = this.bodyParams;\n          await Meteor.callAsync('setUserActiveStatus', userId, active, Boolean(confirmRelinquish));\n        }\n        const {\n          fields\n        } = await this.parseJsonQuery();\n        const user = await Users.findOneById(this.bodyParams.userId, {\n          projection: fields\n        });\n        if (!user) {\n          return API.v1.failure('User not found');\n        }\n        return API.v1.success({\n          user\n        });\n      }\n    });\n    API.v1.addRoute('users.updateOwnBasicInfo', {\n      authRequired: true,\n      validateParams: isUsersUpdateOwnBasicInfoParamsPOST\n    }, {\n      async post() {\n        const userData = {\n          email: this.bodyParams.data.email,\n          realname: this.bodyParams.data.name,\n          username: this.bodyParams.data.username,\n          nickname: this.bodyParams.data.nickname,\n          bio: this.bodyParams.data.bio,\n          statusText: this.bodyParams.data.statusText,\n          statusType: this.bodyParams.data.statusType,\n          newPassword: this.bodyParams.data.newPassword,\n          typedPassword: this.bodyParams.data.currentPassword\n        };\n        if (userData.realname && !validateNameChars(userData.realname)) {\n          return API.v1.failure('Name contains invalid characters');\n        }\n        // saveUserProfile now uses the default two factor authentication procedures, so we need to provide that\n        const twoFactorOptions = !userData.typedPassword ? null : {\n          twoFactorCode: userData.typedPassword,\n          twoFactorMethod: 'password'\n        };\n        await Meteor.callAsync('saveUserProfile', userData, this.bodyParams.customFields, twoFactorOptions);\n        return API.v1.success({\n          user: await Users.findOneById(this.userId, {\n            projection: API.v1.defaultFieldsToExclude\n          })\n        });\n      }\n    });\n    API.v1.addRoute('users.setPreferences', {\n      authRequired: true,\n      validateParams: isUsersSetPreferencesParamsPOST\n    }, {\n      async post() {\n        var _user$settings;\n        if (this.bodyParams.userId && this.bodyParams.userId !== this.userId && !(await hasPermissionAsync(this.userId, 'edit-other-user-info'))) {\n          throw new Meteor.Error('error-action-not-allowed', 'Editing user is not allowed');\n        }\n        const userId = this.bodyParams.userId ? this.bodyParams.userId : this.userId;\n        if (!(await Users.findOneById(userId))) {\n          throw new Meteor.Error('error-invalid-user', 'The optional \"userId\" param provided does not match any users');\n        }\n        await saveUserPreferences(this.bodyParams.data, userId);\n        const user = await Users.findOneById(userId, {\n          projection: {\n            'settings.preferences': 1,\n            'language': 1\n          }\n        });\n        if (!user) {\n          return API.v1.failure('User not found');\n        }\n        return API.v1.success({\n          user: {\n            _id: user._id,\n            settings: {\n              preferences: _objectSpread(_objectSpread({}, (_user$settings = user.settings) === null || _user$settings === void 0 ? void 0 : _user$settings.preferences), {}, {\n                language: user.language\n              })\n            }\n          }\n        });\n      }\n    });\n    API.v1.addRoute('users.setAvatar', {\n      authRequired: true,\n      validateParams: isUsersSetAvatarProps\n    }, {\n      async post() {\n        const canEditOtherUserAvatar = await hasPermissionAsync(this.userId, 'edit-other-user-avatar');\n        if (!settings.get('Accounts_AllowUserAvatarChange') && !canEditOtherUserAvatar) {\n          throw new Meteor.Error('error-not-allowed', 'Change avatar is not allowed', {\n            method: 'users.setAvatar'\n          });\n        }\n        let user = await (async () => {\n          if (isUserFromParams(this.bodyParams, this.userId, this.user)) {\n            return Users.findOneById(this.userId);\n          }\n          if (canEditOtherUserAvatar) {\n            return getUserFromParams(this.bodyParams);\n          }\n        })();\n        if (!user) {\n          return API.v1.unauthorized();\n        }\n        if (this.bodyParams.avatarUrl) {\n          await setUserAvatar(user, this.bodyParams.avatarUrl, '', 'url');\n          return API.v1.success();\n        }\n        const image = await getUploadFormData({\n          request: this.request\n        }, {\n          field: 'image',\n          sizeLimit: settings.get('FileUpload_MaxFileSize')\n        });\n        if (!image) {\n          return API.v1.failure(\"The 'image' param is required\");\n        }\n        const {\n          fields,\n          fileBuffer,\n          mimetype\n        } = image;\n        const sentTheUserByFormData = fields.userId || fields.username;\n        if (sentTheUserByFormData) {\n          if (fields.userId) {\n            user = await Users.findOneById(fields.userId, {\n              projection: {\n                username: 1\n              }\n            });\n          } else if (fields.username) {\n            user = await Users.findOneByUsernameIgnoringCase(fields.username, {\n              projection: {\n                username: 1\n              }\n            });\n          }\n          if (!user) {\n            throw new Meteor.Error('error-invalid-user', 'The optional \"userId\" or \"username\" param provided does not match any users');\n          }\n          const isAnotherUser = this.userId !== user._id;\n          if (isAnotherUser && !(await hasPermissionAsync(this.userId, 'edit-other-user-avatar'))) {\n            throw new Meteor.Error('error-not-allowed', 'Not allowed');\n          }\n        }\n        await setUserAvatar(user, fileBuffer, mimetype, 'rest');\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.create', {\n      authRequired: true,\n      validateParams: isUserCreateParamsPOST\n    }, {\n      async post() {\n        // New change made by pull request #5152\n        if (typeof this.bodyParams.joinDefaultChannels === 'undefined') {\n          this.bodyParams.joinDefaultChannels = true;\n        }\n        if (this.bodyParams.name && !validateNameChars(this.bodyParams.name)) {\n          return API.v1.failure('Name contains invalid characters');\n        }\n        if (this.bodyParams.customFields) {\n          validateCustomFields(this.bodyParams.customFields);\n        }\n        const newUserId = await saveUser(this.userId, this.bodyParams);\n        const userId = typeof newUserId !== 'string' ? this.userId : newUserId;\n        if (this.bodyParams.customFields) {\n          await saveCustomFieldsWithoutValidation(userId, this.bodyParams.customFields);\n        }\n        if (typeof this.bodyParams.active !== 'undefined') {\n          await Meteor.callAsync('setUserActiveStatus', userId, this.bodyParams.active);\n        }\n        const {\n          fields\n        } = await this.parseJsonQuery();\n        const user = await Users.findOneById(userId, {\n          projection: fields\n        });\n        if (!user) {\n          return API.v1.failure('User not found');\n        }\n        return API.v1.success({\n          user\n        });\n      }\n    });\n    API.v1.addRoute('users.delete', {\n      authRequired: true,\n      permissionsRequired: ['delete-user']\n    }, {\n      async post() {\n        const user = await getUserFromParams(this.bodyParams);\n        const {\n          confirmRelinquish = false\n        } = this.bodyParams;\n        await Meteor.callAsync('deleteUser', user._id, confirmRelinquish);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.deleteOwnAccount', {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          password\n        } = this.bodyParams;\n        if (!password) {\n          return API.v1.failure('Body parameter \"password\" is required.');\n        }\n        if (!settings.get('Accounts_AllowDeleteOwnAccount')) {\n          throw new Meteor.Error('error-not-allowed', 'Not allowed');\n        }\n        const {\n          confirmRelinquish = false\n        } = this.bodyParams;\n        await Meteor.callAsync('deleteUserOwnAccount', password, confirmRelinquish);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.setActiveStatus', {\n      authRequired: true,\n      validateParams: isUserSetActiveStatusParamsPOST,\n      permissionsRequired: {\n        POST: {\n          permissions: ['edit-other-user-active-status', 'manage-moderation-actions'],\n          operation: 'hasAny'\n        }\n      }\n    }, {\n      async post() {\n        const {\n          userId,\n          activeStatus,\n          confirmRelinquish = false\n        } = this.bodyParams;\n        await Meteor.callAsync('setUserActiveStatus', userId, activeStatus, confirmRelinquish);\n        const user = await Users.findOneById(this.bodyParams.userId, {\n          projection: {\n            active: 1\n          }\n        });\n        if (!user) {\n          return API.v1.failure('User not found');\n        }\n        return API.v1.success({\n          user\n        });\n      }\n    });\n    API.v1.addRoute('users.deactivateIdle', {\n      authRequired: true,\n      validateParams: isUserDeactivateIdleParamsPOST,\n      permissionsRequired: ['edit-other-user-active-status']\n    }, {\n      async post() {\n        const {\n          daysIdle,\n          role = 'user'\n        } = this.bodyParams;\n        const lastLoggedIn = new Date();\n        lastLoggedIn.setDate(lastLoggedIn.getDate() - daysIdle);\n        // since we're deactiving users that are not logged in, there is no need to send data through WS\n        const {\n          modifiedCount: count\n        } = await Users.setActiveNotLoggedInAfterWithRole(lastLoggedIn, role, false);\n        return API.v1.success({\n          count\n        });\n      }\n    });\n    API.v1.addRoute('users.info', {\n      authRequired: true,\n      validateParams: isUsersInfoParamsGetProps\n    }, {\n      async get() {\n        const {\n          fields\n        } = await this.parseJsonQuery();\n        const searchTerms = 'userId' in this.queryParams && !!this.queryParams.userId && [this.queryParams.userId, 'id'] || 'username' in this.queryParams && !!this.queryParams.username && [this.queryParams.username, 'username'] || 'importId' in this.queryParams && !!this.queryParams.importId && [this.queryParams.importId, 'importId'];\n        if (!searchTerms) {\n          return API.v1.failure('Invalid search query.');\n        }\n        const user = await getFullUserDataByIdOrUsernameOrImportId(this.userId, ...searchTerms);\n        if (!user) {\n          return API.v1.failure('User not found.');\n        }\n        const myself = user._id === this.userId;\n        if (fields.userRooms === 1 && (myself || (await hasPermissionAsync(this.userId, 'view-other-user-channels')))) {\n          return API.v1.success({\n            user: _objectSpread(_objectSpread({}, user), {}, {\n              rooms: await Subscriptions.findByUserId(user._id, {\n                projection: {\n                  rid: 1,\n                  name: 1,\n                  t: 1,\n                  roles: 1,\n                  unread: 1,\n                  federated: 1\n                },\n                sort: {\n                  t: 1,\n                  name: 1\n                }\n              }).toArray()\n            })\n          });\n        }\n        return API.v1.success({\n          user\n        });\n      }\n    });\n    API.v1.addRoute('users.list', {\n      authRequired: true,\n      queryOperations: ['$or', '$and'],\n      permissionsRequired: ['view-d-room']\n    }, {\n      async get() {\n        if (settings.get('API_Apply_permission_view-outside-room_on_users-list') && !(await hasPermissionAsync(this.userId, 'view-outside-room'))) {\n          return API.v1.unauthorized();\n        }\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const nonEmptyQuery = getNonEmptyQuery(query, await hasPermissionAsync(this.userId, 'view-full-other-user-info'));\n        const nonEmptyFields = getNonEmptyFields(fields);\n        const inclusiveFields = getInclusiveFields(nonEmptyFields);\n        const inclusiveFieldsKeys = Object.keys(inclusiveFields);\n        if (!isValidQuery(nonEmptyQuery, [...inclusiveFieldsKeys, inclusiveFieldsKeys.includes('emails') && 'emails.address.*', inclusiveFieldsKeys.includes('username') && 'username.*', inclusiveFieldsKeys.includes('name') && 'name.*', inclusiveFieldsKeys.includes('type') && 'type.*', inclusiveFieldsKeys.includes('customFields') && 'customFields.*'].filter(Boolean), this.queryOperations)) {\n          throw new Meteor.Error('error-invalid-query', isValidQuery.errors.join('\\n'));\n        }\n        const actualSort = sort || {\n          username: 1\n        };\n        if (sort !== null && sort !== void 0 && sort.status) {\n          actualSort.active = sort.status;\n        }\n        if (sort !== null && sort !== void 0 && sort.name) {\n          actualSort.nameInsensitive = sort.name;\n        }\n        const limit = count !== 0 ? [{\n          $limit: count\n        }] : [];\n        const result = await Users.col.aggregate([{\n          $match: nonEmptyQuery\n        }, {\n          $project: inclusiveFields\n        }, {\n          $addFields: {\n            nameInsensitive: {\n              $toLower: '$name'\n            }\n          }\n        }, {\n          $facet: {\n            sortedResults: [{\n              $sort: actualSort\n            }, {\n              $skip: offset\n            }, ...limit],\n            totalCount: [{\n              $group: {\n                _id: null,\n                total: {\n                  $sum: 1\n                }\n              }\n            }]\n          }\n        }]).toArray();\n        const {\n          sortedResults: users,\n          totalCount: [{\n            total\n          } = {\n            total: 0\n          }]\n        } = result[0];\n        return API.v1.success({\n          users,\n          count: users.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('users.listByStatus', {\n      authRequired: true,\n      validateParams: isUsersListStatusProps,\n      permissionsRequired: ['view-d-room']\n    }, {\n      async get() {\n        if (settings.get('API_Apply_permission_view-outside-room_on_users-list') && !(await hasPermissionAsync(this.userId, 'view-outside-room'))) {\n          return API.v1.unauthorized();\n        }\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          status,\n          hasLoggedIn,\n          type,\n          roles,\n          searchTerm\n        } = this.queryParams;\n        return API.v1.success(await findPaginatedUsersByStatus({\n          uid: this.userId,\n          offset,\n          count,\n          sort,\n          status,\n          roles,\n          searchTerm,\n          hasLoggedIn,\n          type\n        }));\n      }\n    });\n    API.v1.addRoute('users.sendWelcomeEmail', {\n      authRequired: true,\n      validateParams: isUsersSendWelcomeEmailProps,\n      permissionsRequired: ['send-mail']\n    }, {\n      async post() {\n        const {\n          email\n        } = this.bodyParams;\n        await sendWelcomeEmail(email);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.register', {\n      authRequired: false,\n      rateLimiterOptions: {\n        numRequestsAllowed: (_settings$get = settings.get('Rate_Limiter_Limit_RegisterUser')) !== null && _settings$get !== void 0 ? _settings$get : 1,\n        intervalTimeInMS: settings.get('API_Enable_Rate_Limiter_Limit_Time_Default')\n      },\n      validateParams: isUserRegisterParamsPOST\n    }, {\n      async post() {\n        const _this$bodyParams = this.bodyParams,\n          {\n            secret: secretURL\n          } = _this$bodyParams,\n          params = _objectWithoutProperties(_this$bodyParams, _excluded);\n        if (this.userId) {\n          return API.v1.failure('Logged in users can not register again.');\n        }\n        if (params.name && !validateNameChars(params.name)) {\n          return API.v1.failure('Name contains invalid characters');\n        }\n        if (!validateUsername(this.bodyParams.username)) {\n          return API.v1.failure(\"The username provided is not valid\");\n        }\n        if (!(await checkUsernameAvailability(this.bodyParams.username))) {\n          return API.v1.failure('Username is already in use');\n        }\n        if (this.bodyParams.customFields) {\n          try {\n            await validateCustomFields(this.bodyParams.customFields);\n          } catch (e) {\n            return API.v1.failure(e);\n          }\n        }\n        // Register the user\n        const userId = await Meteor.callAsync('registerUser', _objectSpread(_objectSpread({}, params), secretURL && {\n          secretURL\n        }));\n        // Now set their username\n        const {\n          fields\n        } = await this.parseJsonQuery();\n        await setUsernameWithValidation(userId, this.bodyParams.username);\n        const user = await Users.findOneById(userId, {\n          projection: fields\n        });\n        if (!user) {\n          return API.v1.failure('User not found');\n        }\n        if (this.bodyParams.customFields) {\n          await saveCustomFields(userId, this.bodyParams.customFields);\n        }\n        return API.v1.success({\n          user\n        });\n      }\n    });\n    API.v1.addRoute('users.resetAvatar', {\n      authRequired: true\n    }, {\n      async post() {\n        const user = await getUserFromParams(this.bodyParams);\n        if (settings.get('Accounts_AllowUserAvatarChange') && user._id === this.userId) {\n          await Meteor.callAsync('resetAvatar');\n        } else if ((await hasPermissionAsync(this.userId, 'edit-other-user-avatar')) || (await hasPermissionAsync(this.userId, 'manage-moderation-actions'))) {\n          await Meteor.callAsync('resetAvatar', user._id);\n        } else {\n          throw new Meteor.Error('error-not-allowed', 'Reset avatar is not allowed', {\n            method: 'users.resetAvatar'\n          });\n        }\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.createToken', {\n      authRequired: true,\n      deprecationVersion: '8.0.0'\n    }, {\n      async post() {\n        const user = await getUserFromParams(this.bodyParams);\n        const data = await generateAccessToken(this.userId, user._id);\n        return data ? API.v1.success({\n          data\n        }) : API.v1.unauthorized();\n      }\n    });\n    API.v1.addRoute('users.getPreferences', {\n      authRequired: true\n    }, {\n      async get() {\n        const user = await Users.findOneById(this.userId);\n        if (user !== null && user !== void 0 && user.settings) {\n          const {\n            preferences = {}\n          } = user === null || user === void 0 ? void 0 : user.settings;\n          preferences.language = user === null || user === void 0 ? void 0 : user.language;\n          return API.v1.success({\n            preferences\n          });\n        }\n        return API.v1.failure(i18n.t('Accounts_Default_User_Preferences_not_available').toUpperCase());\n      }\n    });\n    API.v1.addRoute('users.forgotPassword', {\n      authRequired: false\n    }, {\n      async post() {\n        const isPasswordResetEnabled = settings.get('Accounts_PasswordReset');\n        if (!isPasswordResetEnabled) {\n          return API.v1.failure('Password reset is not enabled');\n        }\n        const {\n          email\n        } = this.bodyParams;\n        if (!email) {\n          return API.v1.failure(\"The 'email' param is required\");\n        }\n        await Meteor.callAsync('sendForgotPasswordEmail', email.toLowerCase());\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.getUsernameSuggestion', {\n      authRequired: true\n    }, {\n      async get() {\n        const result = await Meteor.callAsync('getUsernameSuggestion');\n        return API.v1.success({\n          result\n        });\n      }\n    });\n    API.v1.addRoute('users.checkUsernameAvailability', {\n      authRequired: true,\n      validateParams: isUsersCheckUsernameAvailabilityParamsGET\n    }, {\n      async get() {\n        const {\n          username\n        } = this.queryParams;\n        const result = await checkUsernameAvailabilityWithValidation(this.userId, username);\n        return API.v1.success({\n          result\n        });\n      }\n    });\n    API.v1.addRoute('users.generatePersonalAccessToken', {\n      authRequired: true,\n      twoFactorRequired: true\n    }, {\n      async post() {\n        const {\n          tokenName,\n          bypassTwoFactor\n        } = this.bodyParams;\n        if (!tokenName) {\n          return API.v1.failure(\"The 'tokenName' param is required\");\n        }\n        const token = await Meteor.callAsync('personalAccessTokens:generateToken', {\n          tokenName,\n          bypassTwoFactor\n        });\n        return API.v1.success({\n          token\n        });\n      }\n    });\n    API.v1.addRoute('users.regeneratePersonalAccessToken', {\n      authRequired: true,\n      twoFactorRequired: true\n    }, {\n      async post() {\n        const {\n          tokenName\n        } = this.bodyParams;\n        if (!tokenName) {\n          return API.v1.failure(\"The 'tokenName' param is required\");\n        }\n        const token = await Meteor.callAsync('personalAccessTokens:regenerateToken', {\n          tokenName\n        });\n        return API.v1.success({\n          token\n        });\n      }\n    });\n    API.v1.addRoute('users.getPersonalAccessTokens', {\n      authRequired: true,\n      permissionsRequired: ['create-personal-access-tokens']\n    }, {\n      async get() {\n        var _user$services, _user$services$resume, _user$services$resume2;\n        const user = (await Users.getLoginTokensByUserId(this.userId).toArray())[0];\n        const isPersonalAccessToken = loginToken => 'type' in loginToken && loginToken.type === 'personalAccessToken';\n        return API.v1.success({\n          tokens: (user === null || user === void 0 ? void 0 : (_user$services = user.services) === null || _user$services === void 0 ? void 0 : (_user$services$resume = _user$services.resume) === null || _user$services$resume === void 0 ? void 0 : (_user$services$resume2 = _user$services$resume.loginTokens) === null || _user$services$resume2 === void 0 ? void 0 : _user$services$resume2.filter(isPersonalAccessToken).map(loginToken => ({\n            name: loginToken.name,\n            createdAt: loginToken.createdAt.toISOString(),\n            lastTokenPart: loginToken.lastTokenPart,\n            bypassTwoFactor: Boolean(loginToken.bypassTwoFactor)\n          }))) || []\n        });\n      }\n    });\n    API.v1.addRoute('users.removePersonalAccessToken', {\n      authRequired: true,\n      twoFactorRequired: true\n    }, {\n      async post() {\n        const {\n          tokenName\n        } = this.bodyParams;\n        if (!tokenName) {\n          return API.v1.failure(\"The 'tokenName' param is required\");\n        }\n        await Meteor.callAsync('personalAccessTokens:removeToken', {\n          tokenName\n        });\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.2fa.enableEmail', {\n      authRequired: true\n    }, {\n      async post() {\n        var _this$user$emails;\n        const hasUnverifiedEmail = (_this$user$emails = this.user.emails) === null || _this$user$emails === void 0 ? void 0 : _this$user$emails.some(email => !email.verified);\n        if (hasUnverifiedEmail) {\n          throw new MeteorError('error-invalid-user', 'You need to verify your emails before setting up 2FA');\n        }\n        await Users.enableEmail2FAByUserId(this.userId);\n        // When 2FA is enable we logout all other clients\n        const xAuthToken = this.request.headers['x-auth-token'];\n        if (!xAuthToken) {\n          return API.v1.success();\n        }\n        const hashedToken = Accounts._hashLoginToken(xAuthToken);\n        if (!(await Users.removeNonPATLoginTokensExcept(this.userId, hashedToken))) {\n          throw new MeteorError('error-logging-out-other-clients', 'Error logging out other clients');\n        }\n        // TODO this can be optmized so places that care about loginTokens being removed are invoked directly\n        // instead of having to listen to every watch.users event\n        void notifyOnUserChangeAsync(async () => {\n          var _userTokens$services, _userTokens$services$;\n          const userTokens = await Users.findOneById(this.userId, {\n            projection: {\n              'services.resume.loginTokens': 1\n            }\n          });\n          if (!userTokens) {\n            return;\n          }\n          return {\n            clientAction: 'updated',\n            id: this.user._id,\n            diff: {\n              'services.resume.loginTokens': (_userTokens$services = userTokens.services) === null || _userTokens$services === void 0 ? void 0 : (_userTokens$services$ = _userTokens$services.resume) === null || _userTokens$services$ === void 0 ? void 0 : _userTokens$services$.loginTokens\n            }\n          };\n        });\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.2fa.disableEmail', {\n      authRequired: true,\n      twoFactorRequired: true,\n      twoFactorOptions: {\n        disableRememberMe: true\n      }\n    }, {\n      async post() {\n        await Users.disableEmail2FAByUserId(this.userId);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.2fa.sendEmailCode', {\n      async post() {\n        var _await$Users$method;\n        const {\n          emailOrUsername\n        } = this.bodyParams;\n        if (!emailOrUsername) {\n          throw new Meteor.Error('error-parameter-required', 'emailOrUsername is required');\n        }\n        const method = emailOrUsername.includes('@') ? 'findOneByEmailAddress' : 'findOneByUsername';\n        const userId = this.userId || ((_await$Users$method = await Users[method](emailOrUsername, {\n          projection: {\n            _id: 1\n          }\n        })) === null || _await$Users$method === void 0 ? void 0 : _await$Users$method._id);\n        if (!userId) {\n          // this.logger.error('[2fa] User was not found when requesting 2fa email code');\n          return API.v1.success();\n        }\n        const user = await getUserForCheck(userId);\n        if (!user) {\n          // this.logger.error('[2fa] User was not found when requesting 2fa email code');\n          return API.v1.success();\n        }\n        await emailCheck.sendEmailCode(user);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.sendConfirmationEmail', {\n      authRequired: true,\n      validateParams: isUsersSendConfirmationEmailParamsPOST\n    }, {\n      async post() {\n        const {\n          email\n        } = this.bodyParams;\n        if (await Meteor.callAsync('sendConfirmationEmail', email)) {\n          return API.v1.success();\n        }\n        return API.v1.failure();\n      }\n    });\n    API.v1.addRoute('users.presence', {\n      authRequired: true\n    }, {\n      async get() {\n        // if presence broadcast is disabled, return an empty array (all users are \"offline\")\n        if (settings.get('Presence_broadcast_disabled')) {\n          return API.v1.success({\n            users: [],\n            full: true\n          });\n        }\n        const {\n          from,\n          ids\n        } = this.queryParams;\n        const options = {\n          projection: {\n            username: 1,\n            name: 1,\n            status: 1,\n            utcOffset: 1,\n            statusText: 1,\n            avatarETag: 1\n          }\n        };\n        if (ids) {\n          return API.v1.success({\n            users: await Users.findNotOfflineByIds(Array.isArray(ids) ? ids : ids.split(','), options).toArray(),\n            full: false\n          });\n        }\n        if (from) {\n          const ts = new Date(from);\n          const diff = (Date.now() - Number(ts)) / 1000 / 60;\n          if (diff < 10) {\n            return API.v1.success({\n              users: await Users.findNotIdUpdatedFrom(this.userId, ts, options).toArray(),\n              full: false\n            });\n          }\n        }\n        return API.v1.success({\n          users: await Users.findUsersNotOffline(options).toArray(),\n          full: true\n        });\n      }\n    });\n    API.v1.addRoute('users.requestDataDownload', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          fullExport = false\n        } = this.queryParams;\n        const result = await Meteor.callAsync('requestDataDownload', {\n          fullExport: fullExport === 'true'\n        });\n        return API.v1.success({\n          requested: Boolean(result.requested),\n          exportOperation: result.exportOperation\n        });\n      }\n    });\n    API.v1.addRoute('users.logoutOtherClients', {\n      authRequired: true\n    }, {\n      async post() {\n        var _me$services, _me$services$resume, _me$services2, _me$services2$resume, _me$services2$resume$;\n        const xAuthToken = this.request.headers['x-auth-token'];\n        if (!xAuthToken) {\n          throw new Meteor.Error('error-parameter-required', 'x-auth-token is required');\n        }\n        const hashedToken = Accounts._hashLoginToken(xAuthToken);\n        if (!(await Users.removeNonPATLoginTokensExcept(this.userId, hashedToken))) {\n          throw new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n        }\n        const me = await Users.findOneById(this.userId, {\n          projection: {\n            'services.resume.loginTokens': 1\n          }\n        });\n        void notifyOnUserChange({\n          clientAction: 'updated',\n          id: this.userId,\n          diff: {\n            'services.resume.loginTokens': (_me$services = me.services) === null || _me$services === void 0 ? void 0 : (_me$services$resume = _me$services.resume) === null || _me$services$resume === void 0 ? void 0 : _me$services$resume.loginTokens\n          }\n        });\n        const token = (_me$services2 = me.services) === null || _me$services2 === void 0 ? void 0 : (_me$services2$resume = _me$services2.resume) === null || _me$services2$resume === void 0 ? void 0 : (_me$services2$resume$ = _me$services2$resume.loginTokens) === null || _me$services2$resume$ === void 0 ? void 0 : _me$services2$resume$.find(token => token.hashedToken === hashedToken);\n        const loginExp = settings.get('Accounts_LoginExpiration');\n        const tokenExpires = token && 'when' in token && new Date(token.when.getTime() + getLoginExpirationInMs(loginExp)) || undefined;\n        return API.v1.success({\n          token: xAuthToken,\n          tokenExpires: (tokenExpires === null || tokenExpires === void 0 ? void 0 : tokenExpires.toISOString()) || ''\n        });\n      }\n    });\n    API.v1.addRoute('users.autocomplete', {\n      authRequired: true,\n      validateParams: isUsersAutocompleteProps\n    }, {\n      async get() {\n        const {\n          selector: selectorRaw\n        } = this.queryParams;\n        const selector = JSON.parse(selectorRaw);\n        try {\n          if (selector !== null && selector !== void 0 && selector.conditions && !isValidQuery(selector.conditions, ['*'], ['$or', '$and'])) {\n            throw new Error('error-invalid-query');\n          }\n        } catch (e) {\n          return API.v1.failure(e);\n        }\n        return API.v1.success(await findUsersToAutocomplete({\n          uid: this.userId,\n          selector\n        }));\n      }\n    });\n    API.v1.addRoute('users.removeOtherTokens', {\n      authRequired: true\n    }, {\n      async post() {\n        return API.v1.success(await Meteor.callAsync('removeOtherTokens'));\n      }\n    });\n    API.v1.addRoute('users.resetE2EKey', {\n      authRequired: true,\n      twoFactorRequired: true,\n      twoFactorOptions: {\n        disableRememberMe: true\n      }\n    }, {\n      async post() {\n        if ('userId' in this.bodyParams || 'username' in this.bodyParams || 'user' in this.bodyParams) {\n          // reset other user keys\n          const user = await getUserFromParams(this.bodyParams);\n          if (!user) {\n            throw new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n          }\n          if (!(await hasPermissionAsync(this.userId, 'edit-other-user-e2ee'))) {\n            throw new Meteor.Error('error-not-allowed', 'Not allowed');\n          }\n          if (!(await resetUserE2EEncriptionKey(user._id, true))) {\n            return API.v1.failure();\n          }\n          return API.v1.success();\n        }\n        await resetUserE2EEncriptionKey(this.userId, false);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.resetTOTP', {\n      authRequired: true,\n      twoFactorRequired: true,\n      twoFactorOptions: {\n        disableRememberMe: true\n      }\n    }, {\n      async post() {\n        // // reset own keys\n        if ('userId' in this.bodyParams || 'username' in this.bodyParams || 'user' in this.bodyParams) {\n          // reset other user keys\n          if (!(await hasPermissionAsync(this.userId, 'edit-other-user-totp'))) {\n            throw new Meteor.Error('error-not-allowed', 'Not allowed');\n          }\n          if (!settings.get('Accounts_TwoFactorAuthentication_Enabled')) {\n            throw new Meteor.Error('error-two-factor-not-enabled', 'Two factor authentication is not enabled');\n          }\n          const user = await getUserFromParams(this.bodyParams);\n          if (!user) {\n            throw new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n          }\n          await resetTOTP(user._id, true);\n          return API.v1.success();\n        }\n        await resetTOTP(this.userId, false);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('users.listTeams', {\n      authRequired: true,\n      validateParams: isUsersListTeamsProps\n    }, {\n      async get() {\n        check(this.queryParams, Match.ObjectIncluding({\n          userId: Match.Maybe(String)\n        }));\n        const {\n          userId\n        } = this.queryParams;\n        // If the caller has permission to view all teams, there's no need to filter the teams\n        const adminId = (await hasPermissionAsync(this.userId, 'view-all-teams')) ? undefined : this.userId;\n        const teams = await Team.findBySubscribedUserIds(userId, adminId);\n        return API.v1.success({\n          teams\n        });\n      }\n    });\n    API.v1.addRoute('users.logout', {\n      authRequired: true,\n      validateParams: isUserLogoutParamsPOST\n    }, {\n      async post() {\n        const userId = this.bodyParams.userId || this.userId;\n        if (userId !== this.userId && !(await hasPermissionAsync(this.userId, 'logout-other-user'))) {\n          return API.v1.unauthorized();\n        }\n        // this method logs the user out automatically, if successful returns 1, otherwise 0\n        if (!(await Users.unsetLoginTokens(userId))) {\n          throw new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n        }\n        void notifyOnUserChange({\n          clientAction: 'updated',\n          id: userId,\n          diff: {\n            'services.resume.loginTokens': []\n          }\n        });\n        return API.v1.success({\n          message: \"User \".concat(userId, \" has been logged out!\")\n        });\n      }\n    });\n    API.v1.addRoute('users.getPresence', {\n      authRequired: true\n    }, {\n      async get() {\n        if (isUserFromParams(this.queryParams, this.userId, this.user)) {\n          const user = await Users.findOneById(this.userId);\n          return API.v1.success(_objectSpread({\n            presence: (user === null || user === void 0 ? void 0 : user.status) || 'offline',\n            connectionStatus: (user === null || user === void 0 ? void 0 : user.statusConnection) || 'offline'\n          }, (user === null || user === void 0 ? void 0 : user.lastLogin) && {\n            lastLogin: user === null || user === void 0 ? void 0 : user.lastLogin\n          }));\n        }\n        const user = await getUserFromParams(this.queryParams);\n        return API.v1.success({\n          presence: user.status || 'offline'\n        });\n      }\n    });\n    API.v1.addRoute('users.setStatus', {\n      authRequired: true\n    }, {\n      async post() {\n        check(this.bodyParams, Match.OneOf(Match.ObjectIncluding({\n          status: Match.Maybe(String),\n          message: String\n        }), Match.ObjectIncluding({\n          status: String,\n          message: Match.Maybe(String)\n        })));\n        if (!settings.get('Accounts_AllowUserStatusMessageChange')) {\n          throw new Meteor.Error('error-not-allowed', 'Change status is not allowed', {\n            method: 'users.setStatus'\n          });\n        }\n        const user = await (async () => {\n          if (isUserFromParams(this.bodyParams, this.userId, this.user)) {\n            return Users.findOneById(this.userId);\n          }\n          if (await hasPermissionAsync(this.userId, 'edit-other-user-info')) {\n            return getUserFromParams(this.bodyParams);\n          }\n        })();\n        if (!user) {\n          return API.v1.unauthorized();\n        }\n        // TODO refactor to not update the user twice (one inside of `setStatusText` and then later just the status + statusDefault)\n        if (this.bodyParams.message || this.bodyParams.message === '') {\n          await setStatusText(user._id, this.bodyParams.message);\n        }\n        if (this.bodyParams.status) {\n          const validStatus = ['online', 'away', 'offline', 'busy'];\n          if (validStatus.includes(this.bodyParams.status)) {\n            const {\n              status\n            } = this.bodyParams;\n            if (status === 'offline' && !settings.get('Accounts_AllowInvisibleStatusOption')) {\n              throw new Meteor.Error('error-status-not-allowed', 'Invisible status is disabled', {\n                method: 'users.setStatus'\n              });\n            }\n            await Users.updateOne({\n              _id: user._id\n            }, {\n              $set: {\n                status,\n                statusDefault: status\n              }\n            });\n            const {\n              _id,\n              username,\n              statusText,\n              roles,\n              name\n            } = user;\n            void api.broadcast('presence.status', {\n              user: {\n                status,\n                _id,\n                username,\n                statusText,\n                roles,\n                name\n              },\n              previousStatus: user.status\n            });\n          } else {\n            throw new Meteor.Error('error-invalid-status', 'Valid status types include online, away, offline, and busy.', {\n              method: 'users.setStatus'\n            });\n          }\n        }\n        return API.v1.success();\n      }\n    });\n    // status: 'online' | 'offline' | 'away' | 'busy';\n    // message?: string;\n    // _id: string;\n    // connectionStatus?: 'online' | 'offline' | 'away' | 'busy';\n    // };\n    API.v1.addRoute('users.getStatus', {\n      authRequired: true\n    }, {\n      async get() {\n        if (isUserFromParams(this.queryParams, this.userId, this.user)) {\n          const user = await Users.findOneById(this.userId);\n          return API.v1.success({\n            _id: user === null || user === void 0 ? void 0 : user._id,\n            // message: user.statusText,\n            connectionStatus: (user === null || user === void 0 ? void 0 : user.statusConnection) || 'offline',\n            status: (user === null || user === void 0 ? void 0 : user.status) || 'offline'\n          });\n        }\n        const user = await getUserFromParams(this.queryParams);\n        return API.v1.success({\n          _id: user._id,\n          // message: user.statusText,\n          status: user.status || 'offline'\n        });\n      }\n    });\n    settings.watch('Rate_Limiter_Limit_RegisterUser', value => {\n      const userRegisterRoute = '/api/v1/users.registerpost';\n      API.v1.updateRateLimiterDictionaryForRoute(userRegisterRoute, value);\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_excluded","_settings$get","MeteorError","Team","api","Users","Subscriptions","isUserCreateParamsPOST","isUserSetActiveStatusParamsPOST","isUserDeactivateIdleParamsPOST","isUsersInfoParamsGetProps","isUsersListStatusProps","isUsersSendWelcomeEmailProps","isUserRegisterParamsPOST","isUserLogoutParamsPOST","isUsersListTeamsProps","isUsersAutocompleteProps","isUsersSetAvatarProps","isUsersUpdateParamsPOST","isUsersUpdateOwnBasicInfoParamsPOST","isUsersSetPreferencesParamsPOST","isUsersCheckUsernameAvailabilityParamsGET","isUsersSendConfirmationEmailParamsPOST","getLoginExpirationInMs","Accounts","Match","check","Meteor","i18n","resetUserE2EEncriptionKey","sendWelcomeEmail","saveUserPreferences","getUserForCheck","emailCheck","resetTOTP","hasPermissionAsync","checkUsernameAvailability","checkUsernameAvailabilityWithValidation","getFullUserDataByIdOrUsernameOrImportId","saveCustomFields","saveCustomFieldsWithoutValidation","saveUser","setStatusText","setUserAvatar","setUsernameWithValidation","validateCustomFields","validateNameChars","validateUsername","notifyOnUserChange","notifyOnUserChangeAsync","generateAccessToken","settings","getURL","API","getPaginationItems","getUserFromParams","isUserFromParams","getUploadFormData","isValidQuery","findPaginatedUsersByStatus","findUsersToAutocomplete","getInclusiveFields","getNonEmptyFields","getNonEmptyQuery","__reifyWaitForDeps__","v1","addRoute","authRequired","get","user","queryParams","url","concat","username","cdn","full","response","setHeader","statusCode","body","suggestions","callAsync","success","twoFactorRequired","validateParams","post","userData","_id","bodyParams","userId","data","name","failure","customFields","active","confirmRelinquish","Boolean","fields","parseJsonQuery","findOneById","projection","email","realname","nickname","bio","statusText","statusType","newPassword","typedPassword","currentPassword","twoFactorOptions","twoFactorCode","twoFactorMethod","defaultFieldsToExclude","_user$settings","Error","preferences","language","canEditOtherUserAvatar","method","unauthorized","avatarUrl","image","request","field","sizeLimit","fileBuffer","mimetype","sentTheUserByFormData","findOneByUsernameIgnoringCase","isAnotherUser","joinDefaultChannels","newUserId","permissionsRequired","password","POST","permissions","operation","activeStatus","daysIdle","role","lastLoggedIn","Date","setDate","getDate","modifiedCount","count","setActiveNotLoggedInAfterWithRole","searchTerms","importId","myself","userRooms","rooms","findByUserId","rid","t","roles","unread","federated","sort","toArray","queryOperations","offset","query","nonEmptyQuery","nonEmptyFields","inclusiveFields","inclusiveFieldsKeys","Object","keys","includes","filter","errors","join","actualSort","status","nameInsensitive","limit","$limit","result","col","aggregate","$match","$project","$addFields","$toLower","$facet","sortedResults","$sort","$skip","totalCount","$group","total","$sum","users","length","hasLoggedIn","type","searchTerm","uid","rateLimiterOptions","numRequestsAllowed","intervalTimeInMS","_this$bodyParams","secret","secretURL","params","e","deprecationVersion","toUpperCase","isPasswordResetEnabled","toLowerCase","tokenName","bypassTwoFactor","token","_user$services","_user$services$resume","_user$services$resume2","getLoginTokensByUserId","isPersonalAccessToken","loginToken","tokens","services","resume","loginTokens","map","createdAt","toISOString","lastTokenPart","_this$user$emails","hasUnverifiedEmail","emails","some","verified","enableEmail2FAByUserId","xAuthToken","headers","hashedToken","_hashLoginToken","removeNonPATLoginTokensExcept","_userTokens$services","_userTokens$services$","userTokens","clientAction","id","diff","disableRememberMe","disableEmail2FAByUserId","_await$Users$method","emailOrUsername","sendEmailCode","from","ids","options","utcOffset","avatarETag","findNotOfflineByIds","Array","isArray","split","ts","now","Number","findNotIdUpdatedFrom","findUsersNotOffline","fullExport","requested","exportOperation","_me$services","_me$services$resume","_me$services2","_me$services2$resume","_me$services2$resume$","me","find","loginExp","tokenExpires","when","getTime","undefined","selector","selectorRaw","JSON","parse","conditions","ObjectIncluding","Maybe","String","adminId","teams","findBySubscribedUserIds","unsetLoginTokens","message","presence","connectionStatus","statusConnection","lastLogin","OneOf","validStatus","updateOne","$set","statusDefault","broadcast","previousStatus","watch","value","userRegisterRoute","updateRateLimiterDictionaryForRoute","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/users.ts"],"sourcesContent":["import { MeteorError, Team, api } from '@rocket.chat/core-services';\nimport type { IExportOperation, ILoginToken, IPersonalAccessToken, IUser, UserStatus } from '@rocket.chat/core-typings';\nimport { Users, Subscriptions } from '@rocket.chat/models';\nimport {\n\tisUserCreateParamsPOST,\n\tisUserSetActiveStatusParamsPOST,\n\tisUserDeactivateIdleParamsPOST,\n\tisUsersInfoParamsGetProps,\n\tisUsersListStatusProps,\n\tisUsersSendWelcomeEmailProps,\n\tisUserRegisterParamsPOST,\n\tisUserLogoutParamsPOST,\n\tisUsersListTeamsProps,\n\tisUsersAutocompleteProps,\n\tisUsersSetAvatarProps,\n\tisUsersUpdateParamsPOST,\n\tisUsersUpdateOwnBasicInfoParamsPOST,\n\tisUsersSetPreferencesParamsPOST,\n\tisUsersCheckUsernameAvailabilityParamsGET,\n\tisUsersSendConfirmationEmailParamsPOST,\n} from '@rocket.chat/rest-typings';\nimport { getLoginExpirationInMs } from '@rocket.chat/tools';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { Filter } from 'mongodb';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { resetUserE2EEncriptionKey } from '../../../../server/lib/resetUserE2EKey';\nimport { sendWelcomeEmail } from '../../../../server/lib/sendWelcomeEmail';\nimport { saveUserPreferences } from '../../../../server/methods/saveUserPreferences';\nimport { getUserForCheck, emailCheck } from '../../../2fa/server/code';\nimport { resetTOTP } from '../../../2fa/server/functions/resetTOTP';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport {\n\tcheckUsernameAvailability,\n\tcheckUsernameAvailabilityWithValidation,\n} from '../../../lib/server/functions/checkUsernameAvailability';\nimport { getFullUserDataByIdOrUsernameOrImportId } from '../../../lib/server/functions/getFullUserData';\nimport { saveCustomFields } from '../../../lib/server/functions/saveCustomFields';\nimport { saveCustomFieldsWithoutValidation } from '../../../lib/server/functions/saveCustomFieldsWithoutValidation';\nimport { saveUser } from '../../../lib/server/functions/saveUser';\nimport { setStatusText } from '../../../lib/server/functions/setStatusText';\nimport { setUserAvatar } from '../../../lib/server/functions/setUserAvatar';\nimport { setUsernameWithValidation } from '../../../lib/server/functions/setUsername';\nimport { validateCustomFields } from '../../../lib/server/functions/validateCustomFields';\nimport { validateNameChars } from '../../../lib/server/functions/validateNameChars';\nimport { validateUsername } from '../../../lib/server/functions/validateUsername';\nimport { notifyOnUserChange, notifyOnUserChangeAsync } from '../../../lib/server/lib/notifyListener';\nimport { generateAccessToken } from '../../../lib/server/methods/createToken';\nimport { settings } from '../../../settings/server';\nimport { getURL } from '../../../utils/server/getURL';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams } from '../helpers/getUserFromParams';\nimport { isUserFromParams } from '../helpers/isUserFromParams';\nimport { getUploadFormData } from '../lib/getUploadFormData';\nimport { isValidQuery } from '../lib/isValidQuery';\nimport { findPaginatedUsersByStatus, findUsersToAutocomplete, getInclusiveFields, getNonEmptyFields, getNonEmptyQuery } from '../lib/users';\n\nAPI.v1.addRoute(\n\t'users.getAvatar',\n\t{ authRequired: false },\n\t{\n\t\tasync get() {\n\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\tconst url = getURL(`/avatar/${user.username}`, { cdn: false, full: true });\n\t\t\tthis.response.setHeader('Location', url);\n\n\t\t\treturn {\n\t\t\t\tstatusCode: 307,\n\t\t\t\tbody: url,\n\t\t\t};\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getAvatarSuggestion',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst suggestions = await Meteor.callAsync('getAvatarSuggestion');\n\n\t\t\treturn API.v1.success({ suggestions });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.update',\n\t{ authRequired: true, twoFactorRequired: true, validateParams: isUsersUpdateParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tconst userData = { _id: this.bodyParams.userId, ...this.bodyParams.data };\n\n\t\t\tif (userData.name && !validateNameChars(userData.name)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\tawait saveUser(this.userId, userData);\n\n\t\t\tif (this.bodyParams.data.customFields) {\n\t\t\t\tawait saveCustomFields(this.bodyParams.userId, this.bodyParams.data.customFields);\n\t\t\t}\n\n\t\t\tif (typeof this.bodyParams.data.active !== 'undefined') {\n\t\t\t\tconst {\n\t\t\t\t\tuserId,\n\t\t\t\t\tdata: { active },\n\t\t\t\t\tconfirmRelinquish,\n\t\t\t\t} = this.bodyParams;\n\n\t\t\t\tawait Meteor.callAsync('setUserActiveStatus', userId, active, Boolean(confirmRelinquish));\n\t\t\t}\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tconst user = await Users.findOneById(this.bodyParams.userId, { projection: fields });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ user });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.updateOwnBasicInfo',\n\t{ authRequired: true, validateParams: isUsersUpdateOwnBasicInfoParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tconst userData = {\n\t\t\t\temail: this.bodyParams.data.email,\n\t\t\t\trealname: this.bodyParams.data.name,\n\t\t\t\tusername: this.bodyParams.data.username,\n\t\t\t\tnickname: this.bodyParams.data.nickname,\n\t\t\t\tbio: this.bodyParams.data.bio,\n\t\t\t\tstatusText: this.bodyParams.data.statusText,\n\t\t\t\tstatusType: this.bodyParams.data.statusType,\n\t\t\t\tnewPassword: this.bodyParams.data.newPassword,\n\t\t\t\ttypedPassword: this.bodyParams.data.currentPassword,\n\t\t\t};\n\n\t\t\tif (userData.realname && !validateNameChars(userData.realname)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\t// saveUserProfile now uses the default two factor authentication procedures, so we need to provide that\n\t\t\tconst twoFactorOptions = !userData.typedPassword\n\t\t\t\t? null\n\t\t\t\t: {\n\t\t\t\t\t\ttwoFactorCode: userData.typedPassword,\n\t\t\t\t\t\ttwoFactorMethod: 'password',\n\t\t\t\t  };\n\n\t\t\tawait Meteor.callAsync('saveUserProfile', userData, this.bodyParams.customFields, twoFactorOptions);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser: await Users.findOneById(this.userId, { projection: API.v1.defaultFieldsToExclude }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setPreferences',\n\t{ authRequired: true, validateParams: isUsersSetPreferencesParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tif (\n\t\t\t\tthis.bodyParams.userId &&\n\t\t\t\tthis.bodyParams.userId !== this.userId &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'edit-other-user-info'))\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Editing user is not allowed');\n\t\t\t}\n\t\t\tconst userId = this.bodyParams.userId ? this.bodyParams.userId : this.userId;\n\t\t\tif (!(await Users.findOneById(userId))) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'The optional \"userId\" param provided does not match any users');\n\t\t\t}\n\n\t\t\tawait saveUserPreferences(this.bodyParams.data, userId);\n\t\t\tconst user = await Users.findOneById(userId, {\n\t\t\t\tprojection: {\n\t\t\t\t\t'settings.preferences': 1,\n\t\t\t\t\t'language': 1,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tpreferences: {\n\t\t\t\t\t\t\t...user.settings?.preferences,\n\t\t\t\t\t\t\tlanguage: user.language,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t} as unknown as Required<Pick<IUser, '_id' | 'settings'>>,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setAvatar',\n\t{ authRequired: true, validateParams: isUsersSetAvatarProps },\n\t{\n\t\tasync post() {\n\t\t\tconst canEditOtherUserAvatar = await hasPermissionAsync(this.userId, 'edit-other-user-avatar');\n\n\t\t\tif (!settings.get('Accounts_AllowUserAvatarChange') && !canEditOtherUserAvatar) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Change avatar is not allowed', {\n\t\t\t\t\tmethod: 'users.setAvatar',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet user = await (async (): Promise<\n\t\t\t\tPick<IUser, '_id' | 'roles' | 'username' | 'name' | 'status' | 'statusText'> | undefined | null\n\t\t\t> => {\n\t\t\t\tif (isUserFromParams(this.bodyParams, this.userId, this.user)) {\n\t\t\t\t\treturn Users.findOneById(this.userId);\n\t\t\t\t}\n\t\t\t\tif (canEditOtherUserAvatar) {\n\t\t\t\t\treturn getUserFromParams(this.bodyParams);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tif (this.bodyParams.avatarUrl) {\n\t\t\t\tawait setUserAvatar(user, this.bodyParams.avatarUrl, '', 'url');\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tconst image = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'image', sizeLimit: settings.get('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tif (!image) {\n\t\t\t\treturn API.v1.failure(\"The 'image' param is required\");\n\t\t\t}\n\n\t\t\tconst { fields, fileBuffer, mimetype } = image;\n\n\t\t\tconst sentTheUserByFormData = fields.userId || fields.username;\n\t\t\tif (sentTheUserByFormData) {\n\t\t\t\tif (fields.userId) {\n\t\t\t\t\tuser = await Users.findOneById(fields.userId, { projection: { username: 1 } });\n\t\t\t\t} else if (fields.username) {\n\t\t\t\t\tuser = await Users.findOneByUsernameIgnoringCase(fields.username, { projection: { username: 1 } });\n\t\t\t\t}\n\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'The optional \"userId\" or \"username\" param provided does not match any users');\n\t\t\t\t}\n\n\t\t\t\tconst isAnotherUser = this.userId !== user._id;\n\t\t\t\tif (isAnotherUser && !(await hasPermissionAsync(this.userId, 'edit-other-user-avatar'))) {\n\t\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait setUserAvatar(user, fileBuffer, mimetype, 'rest');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.create',\n\t{ authRequired: true, validateParams: isUserCreateParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\t// New change made by pull request #5152\n\t\t\tif (typeof this.bodyParams.joinDefaultChannels === 'undefined') {\n\t\t\t\tthis.bodyParams.joinDefaultChannels = true;\n\t\t\t}\n\n\t\t\tif (this.bodyParams.name && !validateNameChars(this.bodyParams.name)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\tvalidateCustomFields(this.bodyParams.customFields);\n\t\t\t}\n\n\t\t\tconst newUserId = await saveUser(this.userId, this.bodyParams);\n\t\t\tconst userId = typeof newUserId !== 'string' ? this.userId : newUserId;\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\tawait saveCustomFieldsWithoutValidation(userId, this.bodyParams.customFields);\n\t\t\t}\n\n\t\t\tif (typeof this.bodyParams.active !== 'undefined') {\n\t\t\t\tawait Meteor.callAsync('setUserActiveStatus', userId, this.bodyParams.active);\n\t\t\t}\n\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tconst user = await Users.findOneById(userId, { projection: fields });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ user });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.delete',\n\t{ authRequired: true, permissionsRequired: ['delete-user'] },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tconst { confirmRelinquish = false } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('deleteUser', user._id, confirmRelinquish);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.deleteOwnAccount',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { password } = this.bodyParams;\n\t\t\tif (!password) {\n\t\t\t\treturn API.v1.failure('Body parameter \"password\" is required.');\n\t\t\t}\n\t\t\tif (!settings.get('Accounts_AllowDeleteOwnAccount')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tconst { confirmRelinquish = false } = this.bodyParams;\n\n\t\t\tawait Meteor.callAsync('deleteUserOwnAccount', password, confirmRelinquish);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setActiveStatus',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUserSetActiveStatusParamsPOST,\n\t\tpermissionsRequired: {\n\t\t\tPOST: { permissions: ['edit-other-user-active-status', 'manage-moderation-actions'], operation: 'hasAny' },\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, activeStatus, confirmRelinquish = false } = this.bodyParams;\n\t\t\tawait Meteor.callAsync('setUserActiveStatus', userId, activeStatus, confirmRelinquish);\n\n\t\t\tconst user = await Users.findOneById(this.bodyParams.userId, { projection: { active: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.deactivateIdle',\n\t{ authRequired: true, validateParams: isUserDeactivateIdleParamsPOST, permissionsRequired: ['edit-other-user-active-status'] },\n\t{\n\t\tasync post() {\n\t\t\tconst { daysIdle, role = 'user' } = this.bodyParams;\n\n\t\t\tconst lastLoggedIn = new Date();\n\t\t\tlastLoggedIn.setDate(lastLoggedIn.getDate() - daysIdle);\n\n\t\t\t// since we're deactiving users that are not logged in, there is no need to send data through WS\n\t\t\tconst { modifiedCount: count } = await Users.setActiveNotLoggedInAfterWithRole(lastLoggedIn, role, false);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tcount,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.info',\n\t{ authRequired: true, validateParams: isUsersInfoParamsGetProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tconst searchTerms: [string, 'id' | 'username' | 'importId'] | false =\n\t\t\t\t('userId' in this.queryParams && !!this.queryParams.userId && [this.queryParams.userId, 'id']) ||\n\t\t\t\t('username' in this.queryParams && !!this.queryParams.username && [this.queryParams.username, 'username']) ||\n\t\t\t\t('importId' in this.queryParams && !!this.queryParams.importId && [this.queryParams.importId, 'importId']);\n\n\t\t\tif (!searchTerms) {\n\t\t\t\treturn API.v1.failure('Invalid search query.');\n\t\t\t}\n\n\t\t\tconst user = await getFullUserDataByIdOrUsernameOrImportId(this.userId, ...searchTerms);\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found.');\n\t\t\t}\n\t\t\tconst myself = user._id === this.userId;\n\t\t\tif (fields.userRooms === 1 && (myself || (await hasPermissionAsync(this.userId, 'view-other-user-channels')))) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tuser: {\n\t\t\t\t\t\t...user,\n\t\t\t\t\t\trooms: await Subscriptions.findByUserId(user._id, {\n\t\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\t\trid: 1,\n\t\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\t\tunread: 1,\n\t\t\t\t\t\t\t\tfederated: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}).toArray(),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.list',\n\t{\n\t\tauthRequired: true,\n\t\tqueryOperations: ['$or', '$and'],\n\t\tpermissionsRequired: ['view-d-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (\n\t\t\t\tsettings.get('API_Apply_permission_view-outside-room_on_users-list') &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'view-outside-room'))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst nonEmptyQuery = getNonEmptyQuery(query, await hasPermissionAsync(this.userId, 'view-full-other-user-info'));\n\t\t\tconst nonEmptyFields = getNonEmptyFields(fields);\n\n\t\t\tconst inclusiveFields = getInclusiveFields(nonEmptyFields);\n\n\t\t\tconst inclusiveFieldsKeys = Object.keys(inclusiveFields);\n\n\t\t\tif (\n\t\t\t\t!isValidQuery(\n\t\t\t\t\tnonEmptyQuery,\n\t\t\t\t\t[\n\t\t\t\t\t\t...inclusiveFieldsKeys,\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('emails') && 'emails.address.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('username') && 'username.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('name') && 'name.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('type') && 'type.*',\n\t\t\t\t\t\tinclusiveFieldsKeys.includes('customFields') && 'customFields.*',\n\t\t\t\t\t].filter(Boolean) as string[],\n\t\t\t\t\tthis.queryOperations,\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-query', isValidQuery.errors.join('\\n'));\n\t\t\t}\n\n\t\t\tconst actualSort = sort || { username: 1 };\n\n\t\t\tif (sort?.status) {\n\t\t\t\tactualSort.active = sort.status;\n\t\t\t}\n\n\t\t\tif (sort?.name) {\n\t\t\t\tactualSort.nameInsensitive = sort.name;\n\t\t\t}\n\n\t\t\tconst limit =\n\t\t\t\tcount !== 0\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$limit: count,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  ]\n\t\t\t\t\t: [];\n\n\t\t\tconst result = await Users.col\n\t\t\t\t.aggregate<{ sortedResults: IUser[]; totalCount: { total: number }[] }>([\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: nonEmptyQuery,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: inclusiveFields,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$addFields: {\n\t\t\t\t\t\t\tnameInsensitive: {\n\t\t\t\t\t\t\t\t$toLower: '$name',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$facet: {\n\t\t\t\t\t\t\tsortedResults: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$sort: actualSort,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$skip: offset,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t...limit,\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttotalCount: [{ $group: { _id: null, total: { $sum: 1 } } }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t\t.toArray();\n\n\t\t\tconst {\n\t\t\t\tsortedResults: users,\n\t\t\t\ttotalCount: [{ total } = { total: 0 }],\n\t\t\t} = result[0];\n\n\t\t\treturn API.v1.success({\n\t\t\t\tusers,\n\t\t\t\tcount: users.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.listByStatus',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersListStatusProps,\n\t\tpermissionsRequired: ['view-d-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (\n\t\t\t\tsettings.get('API_Apply_permission_view-outside-room_on_users-list') &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'view-outside-room'))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { status, hasLoggedIn, type, roles, searchTerm } = this.queryParams;\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findPaginatedUsersByStatus({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t\tstatus,\n\t\t\t\t\troles,\n\t\t\t\t\tsearchTerm,\n\t\t\t\t\thasLoggedIn,\n\t\t\t\t\ttype,\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.sendWelcomeEmail',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersSendWelcomeEmailProps,\n\t\tpermissionsRequired: ['send-mail'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { email } = this.bodyParams;\n\t\t\tawait sendWelcomeEmail(email);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.register',\n\t{\n\t\tauthRequired: false,\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: settings.get('Rate_Limiter_Limit_RegisterUser') ?? 1,\n\t\t\tintervalTimeInMS: settings.get('API_Enable_Rate_Limiter_Limit_Time_Default'),\n\t\t},\n\t\tvalidateParams: isUserRegisterParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { secret: secretURL, ...params } = this.bodyParams;\n\n\t\t\tif (this.userId) {\n\t\t\t\treturn API.v1.failure('Logged in users can not register again.');\n\t\t\t}\n\n\t\t\tif (params.name && !validateNameChars(params.name)) {\n\t\t\t\treturn API.v1.failure('Name contains invalid characters');\n\t\t\t}\n\n\t\t\tif (!validateUsername(this.bodyParams.username)) {\n\t\t\t\treturn API.v1.failure(`The username provided is not valid`);\n\t\t\t}\n\n\t\t\tif (!(await checkUsernameAvailability(this.bodyParams.username))) {\n\t\t\t\treturn API.v1.failure('Username is already in use');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\ttry {\n\t\t\t\t\tawait validateCustomFields(this.bodyParams.customFields);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn API.v1.failure(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Register the user\n\t\t\tconst userId = await Meteor.callAsync('registerUser', {\n\t\t\t\t...params,\n\t\t\t\t...(secretURL && { secretURL }),\n\t\t\t});\n\n\t\t\t// Now set their username\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\t\t\tawait setUsernameWithValidation(userId, this.bodyParams.username);\n\n\t\t\tconst user = await Users.findOneById(userId, { projection: fields });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields) {\n\t\t\t\tawait saveCustomFields(userId, this.bodyParams.customFields);\n\t\t\t}\n\n\t\t\treturn API.v1.success({ user });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.resetAvatar',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tif (settings.get('Accounts_AllowUserAvatarChange') && user._id === this.userId) {\n\t\t\t\tawait Meteor.callAsync('resetAvatar');\n\t\t\t} else if (\n\t\t\t\t(await hasPermissionAsync(this.userId, 'edit-other-user-avatar')) ||\n\t\t\t\t(await hasPermissionAsync(this.userId, 'manage-moderation-actions'))\n\t\t\t) {\n\t\t\t\tawait Meteor.callAsync('resetAvatar', user._id);\n\t\t\t} else {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Reset avatar is not allowed', {\n\t\t\t\t\tmethod: 'users.resetAvatar',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.createToken',\n\t{ authRequired: true, deprecationVersion: '8.0.0' },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tconst data = await generateAccessToken(this.userId, user._id);\n\n\t\t\treturn data ? API.v1.success({ data }) : API.v1.unauthorized();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getPreferences',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (user?.settings) {\n\t\t\t\tconst { preferences = {} } = user?.settings;\n\t\t\t\tpreferences.language = user?.language;\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tpreferences,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn API.v1.failure(i18n.t('Accounts_Default_User_Preferences_not_available').toUpperCase());\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.forgotPassword',\n\t{ authRequired: false },\n\t{\n\t\tasync post() {\n\t\t\tconst isPasswordResetEnabled = settings.get('Accounts_PasswordReset');\n\n\t\t\tif (!isPasswordResetEnabled) {\n\t\t\t\treturn API.v1.failure('Password reset is not enabled');\n\t\t\t}\n\n\t\t\tconst { email } = this.bodyParams;\n\t\t\tif (!email) {\n\t\t\t\treturn API.v1.failure(\"The 'email' param is required\");\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('sendForgotPasswordEmail', email.toLowerCase());\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getUsernameSuggestion',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst result = await Meteor.callAsync('getUsernameSuggestion');\n\n\t\t\treturn API.v1.success({ result });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.checkUsernameAvailability',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersCheckUsernameAvailabilityParamsGET,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { username } = this.queryParams;\n\n\t\t\tconst result = await checkUsernameAvailabilityWithValidation(this.userId, username);\n\n\t\t\treturn API.v1.success({ result });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.generatePersonalAccessToken',\n\t{ authRequired: true, twoFactorRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { tokenName, bypassTwoFactor } = this.bodyParams;\n\t\t\tif (!tokenName) {\n\t\t\t\treturn API.v1.failure(\"The 'tokenName' param is required\");\n\t\t\t}\n\t\t\tconst token = await Meteor.callAsync('personalAccessTokens:generateToken', { tokenName, bypassTwoFactor });\n\n\t\t\treturn API.v1.success({ token });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.regeneratePersonalAccessToken',\n\t{ authRequired: true, twoFactorRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { tokenName } = this.bodyParams;\n\t\t\tif (!tokenName) {\n\t\t\t\treturn API.v1.failure(\"The 'tokenName' param is required\");\n\t\t\t}\n\t\t\tconst token = await Meteor.callAsync('personalAccessTokens:regenerateToken', { tokenName });\n\n\t\t\treturn API.v1.success({ token });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getPersonalAccessTokens',\n\t{ authRequired: true, permissionsRequired: ['create-personal-access-tokens'] },\n\t{\n\t\tasync get() {\n\t\t\tconst user = (await Users.getLoginTokensByUserId(this.userId).toArray())[0] as unknown as IUser | undefined;\n\n\t\t\tconst isPersonalAccessToken = (loginToken: ILoginToken | IPersonalAccessToken): loginToken is IPersonalAccessToken =>\n\t\t\t\t'type' in loginToken && loginToken.type === 'personalAccessToken';\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttokens:\n\t\t\t\t\tuser?.services?.resume?.loginTokens?.filter(isPersonalAccessToken).map((loginToken) => ({\n\t\t\t\t\t\tname: loginToken.name,\n\t\t\t\t\t\tcreatedAt: loginToken.createdAt.toISOString(),\n\t\t\t\t\t\tlastTokenPart: loginToken.lastTokenPart,\n\t\t\t\t\t\tbypassTwoFactor: Boolean(loginToken.bypassTwoFactor),\n\t\t\t\t\t})) || [],\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.removePersonalAccessToken',\n\t{ authRequired: true, twoFactorRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { tokenName } = this.bodyParams;\n\t\t\tif (!tokenName) {\n\t\t\t\treturn API.v1.failure(\"The 'tokenName' param is required\");\n\t\t\t}\n\t\t\tawait Meteor.callAsync('personalAccessTokens:removeToken', {\n\t\t\t\ttokenName,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.2fa.enableEmail',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst hasUnverifiedEmail = this.user.emails?.some((email) => !email.verified);\n\t\t\tif (hasUnverifiedEmail) {\n\t\t\t\tthrow new MeteorError('error-invalid-user', 'You need to verify your emails before setting up 2FA');\n\t\t\t}\n\n\t\t\tawait Users.enableEmail2FAByUserId(this.userId);\n\n\t\t\t// When 2FA is enable we logout all other clients\n\t\t\tconst xAuthToken = this.request.headers['x-auth-token'] as string;\n\t\t\tif (!xAuthToken) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tconst hashedToken = Accounts._hashLoginToken(xAuthToken);\n\n\t\t\tif (!(await Users.removeNonPATLoginTokensExcept(this.userId, hashedToken))) {\n\t\t\t\tthrow new MeteorError('error-logging-out-other-clients', 'Error logging out other clients');\n\t\t\t}\n\n\t\t\t// TODO this can be optmized so places that care about loginTokens being removed are invoked directly\n\t\t\t// instead of having to listen to every watch.users event\n\t\t\tvoid notifyOnUserChangeAsync(async () => {\n\t\t\t\tconst userTokens = await Users.findOneById(this.userId, { projection: { 'services.resume.loginTokens': 1 } });\n\t\t\t\tif (!userTokens) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tclientAction: 'updated',\n\t\t\t\t\tid: this.user._id,\n\t\t\t\t\tdiff: { 'services.resume.loginTokens': userTokens.services?.resume?.loginTokens },\n\t\t\t\t};\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.2fa.disableEmail',\n\t{ authRequired: true, twoFactorRequired: true, twoFactorOptions: { disableRememberMe: true } },\n\t{\n\t\tasync post() {\n\t\t\tawait Users.disableEmail2FAByUserId(this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute('users.2fa.sendEmailCode', {\n\tasync post() {\n\t\tconst { emailOrUsername } = this.bodyParams;\n\n\t\tif (!emailOrUsername) {\n\t\t\tthrow new Meteor.Error('error-parameter-required', 'emailOrUsername is required');\n\t\t}\n\n\t\tconst method = emailOrUsername.includes('@') ? 'findOneByEmailAddress' : 'findOneByUsername';\n\t\tconst userId = this.userId || (await Users[method](emailOrUsername, { projection: { _id: 1 } }))?._id;\n\n\t\tif (!userId) {\n\t\t\t// this.logger.error('[2fa] User was not found when requesting 2fa email code');\n\t\t\treturn API.v1.success();\n\t\t}\n\t\tconst user = await getUserForCheck(userId);\n\t\tif (!user) {\n\t\t\t// this.logger.error('[2fa] User was not found when requesting 2fa email code');\n\t\t\treturn API.v1.success();\n\t\t}\n\n\t\tawait emailCheck.sendEmailCode(user);\n\n\t\treturn API.v1.success();\n\t},\n});\n\nAPI.v1.addRoute(\n\t'users.sendConfirmationEmail',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isUsersSendConfirmationEmailParamsPOST,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { email } = this.bodyParams;\n\n\t\t\tif (await Meteor.callAsync('sendConfirmationEmail', email)) {\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.presence',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\t// if presence broadcast is disabled, return an empty array (all users are \"offline\")\n\t\t\tif (settings.get('Presence_broadcast_disabled')) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tusers: [],\n\t\t\t\t\tfull: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { from, ids } = this.queryParams;\n\n\t\t\tconst options = {\n\t\t\t\tprojection: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tstatus: 1,\n\t\t\t\t\tutcOffset: 1,\n\t\t\t\t\tstatusText: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (ids) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tusers: await Users.findNotOfflineByIds(Array.isArray(ids) ? ids : ids.split(','), options).toArray(),\n\t\t\t\t\tfull: false,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (from) {\n\t\t\t\tconst ts = new Date(from);\n\t\t\t\tconst diff = (Date.now() - Number(ts)) / 1000 / 60;\n\n\t\t\t\tif (diff < 10) {\n\t\t\t\t\treturn API.v1.success({\n\t\t\t\t\t\tusers: await Users.findNotIdUpdatedFrom(this.userId, ts, options).toArray(),\n\t\t\t\t\t\tfull: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tusers: await Users.findUsersNotOffline(options).toArray(),\n\t\t\t\tfull: true,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.requestDataDownload',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { fullExport = false } = this.queryParams;\n\t\t\tconst result = (await Meteor.callAsync('requestDataDownload', { fullExport: fullExport === 'true' })) as {\n\t\t\t\trequested: boolean;\n\t\t\t\texportOperation: IExportOperation;\n\t\t\t};\n\n\t\t\treturn API.v1.success({\n\t\t\t\trequested: Boolean(result.requested),\n\t\t\t\texportOperation: result.exportOperation,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.logoutOtherClients',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst xAuthToken = this.request.headers['x-auth-token'] as string;\n\n\t\t\tif (!xAuthToken) {\n\t\t\t\tthrow new Meteor.Error('error-parameter-required', 'x-auth-token is required');\n\t\t\t}\n\t\t\tconst hashedToken = Accounts._hashLoginToken(xAuthToken);\n\n\t\t\tif (!(await Users.removeNonPATLoginTokensExcept(this.userId, hashedToken))) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t}\n\n\t\t\tconst me = (await Users.findOneById(this.userId, { projection: { 'services.resume.loginTokens': 1 } })) as Pick<IUser, 'services'>;\n\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tid: this.userId,\n\t\t\t\tdiff: { 'services.resume.loginTokens': me.services?.resume?.loginTokens },\n\t\t\t});\n\n\t\t\tconst token = me.services?.resume?.loginTokens?.find((token) => token.hashedToken === hashedToken);\n\n\t\t\tconst loginExp = settings.get<number>('Accounts_LoginExpiration');\n\n\t\t\tconst tokenExpires = (token && 'when' in token && new Date(token.when.getTime() + getLoginExpirationInMs(loginExp))) || undefined;\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttoken: xAuthToken,\n\t\t\t\ttokenExpires: tokenExpires?.toISOString() || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.autocomplete',\n\t{ authRequired: true, validateParams: isUsersAutocompleteProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector: selectorRaw } = this.queryParams;\n\n\t\t\tconst selector: { exceptions: Required<IUser>['username'][]; conditions: Filter<IUser>; term: string } = JSON.parse(selectorRaw);\n\n\t\t\ttry {\n\t\t\t\tif (selector?.conditions && !isValidQuery(selector.conditions, ['*'], ['$or', '$and'])) {\n\t\t\t\t\tthrow new Error('error-invalid-query');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treturn API.v1.failure(e);\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findUsersToAutocomplete({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector,\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.removeOtherTokens',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\treturn API.v1.success(await Meteor.callAsync('removeOtherTokens'));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.resetE2EKey',\n\t{ authRequired: true, twoFactorRequired: true, twoFactorOptions: { disableRememberMe: true } },\n\t{\n\t\tasync post() {\n\t\t\tif ('userId' in this.bodyParams || 'username' in this.bodyParams || 'user' in this.bodyParams) {\n\t\t\t\t// reset other user keys\n\t\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t\t}\n\n\t\t\t\tif (!(await hasPermissionAsync(this.userId, 'edit-other-user-e2ee'))) {\n\t\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t\t}\n\n\t\t\t\tif (!(await resetUserE2EEncriptionKey(user._id, true))) {\n\t\t\t\t\treturn API.v1.failure();\n\t\t\t\t}\n\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\t\t\tawait resetUserE2EEncriptionKey(this.userId, false);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.resetTOTP',\n\t{ authRequired: true, twoFactorRequired: true, twoFactorOptions: { disableRememberMe: true } },\n\t{\n\t\tasync post() {\n\t\t\t// // reset own keys\n\t\t\tif ('userId' in this.bodyParams || 'username' in this.bodyParams || 'user' in this.bodyParams) {\n\t\t\t\t// reset other user keys\n\t\t\t\tif (!(await hasPermissionAsync(this.userId, 'edit-other-user-totp'))) {\n\t\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t\t}\n\n\t\t\t\tif (!settings.get('Accounts_TwoFactorAuthentication_Enabled')) {\n\t\t\t\t\tthrow new Meteor.Error('error-two-factor-not-enabled', 'Two factor authentication is not enabled');\n\t\t\t\t}\n\n\t\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\t\tif (!user) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t\t}\n\n\t\t\t\tawait resetTOTP(user._id, true);\n\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\t\t\tawait resetTOTP(this.userId, false);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.listTeams',\n\t{ authRequired: true, validateParams: isUsersListTeamsProps },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tuserId: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { userId } = this.queryParams;\n\n\t\t\t// If the caller has permission to view all teams, there's no need to filter the teams\n\t\t\tconst adminId = (await hasPermissionAsync(this.userId, 'view-all-teams')) ? undefined : this.userId;\n\n\t\t\tconst teams = await Team.findBySubscribedUserIds(userId, adminId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tteams,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.logout',\n\t{ authRequired: true, validateParams: isUserLogoutParamsPOST },\n\t{\n\t\tasync post() {\n\t\t\tconst userId = this.bodyParams.userId || this.userId;\n\n\t\t\tif (userId !== this.userId && !(await hasPermissionAsync(this.userId, 'logout-other-user'))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\t// this method logs the user out automatically, if successful returns 1, otherwise 0\n\t\t\tif (!(await Users.unsetLoginTokens(userId))) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user-id', 'Invalid user id');\n\t\t\t}\n\n\t\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: userId, diff: { 'services.resume.loginTokens': [] } });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage: `User ${userId} has been logged out!`,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.getPresence',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tif (isUserFromParams(this.queryParams, this.userId, this.user)) {\n\t\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tpresence: (user?.status || 'offline') as UserStatus,\n\t\t\t\t\tconnectionStatus: user?.statusConnection || 'offline',\n\t\t\t\t\t...(user?.lastLogin && { lastLogin: user?.lastLogin }),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpresence: user.status || ('offline' as UserStatus),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'users.setStatus',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.bodyParams,\n\t\t\t\tMatch.OneOf(\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tstatus: Match.Maybe(String),\n\t\t\t\t\t\tmessage: String,\n\t\t\t\t\t}),\n\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\tstatus: String,\n\t\t\t\t\t\tmessage: Match.Maybe(String),\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (!settings.get('Accounts_AllowUserStatusMessageChange')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Change status is not allowed', {\n\t\t\t\t\tmethod: 'users.setStatus',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst user = await (async (): Promise<\n\t\t\t\tPick<IUser, '_id' | 'username' | 'name' | 'status' | 'statusText' | 'roles'> | undefined | null\n\t\t\t> => {\n\t\t\t\tif (isUserFromParams(this.bodyParams, this.userId, this.user)) {\n\t\t\t\t\treturn Users.findOneById(this.userId);\n\t\t\t\t}\n\t\t\t\tif (await hasPermissionAsync(this.userId, 'edit-other-user-info')) {\n\t\t\t\t\treturn getUserFromParams(this.bodyParams);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\t// TODO refactor to not update the user twice (one inside of `setStatusText` and then later just the status + statusDefault)\n\n\t\t\tif (this.bodyParams.message || this.bodyParams.message === '') {\n\t\t\t\tawait setStatusText(user._id, this.bodyParams.message);\n\t\t\t}\n\t\t\tif (this.bodyParams.status) {\n\t\t\t\tconst validStatus = ['online', 'away', 'offline', 'busy'];\n\t\t\t\tif (validStatus.includes(this.bodyParams.status)) {\n\t\t\t\t\tconst { status } = this.bodyParams;\n\n\t\t\t\t\tif (status === 'offline' && !settings.get('Accounts_AllowInvisibleStatusOption')) {\n\t\t\t\t\t\tthrow new Meteor.Error('error-status-not-allowed', 'Invisible status is disabled', {\n\t\t\t\t\t\t\tmethod: 'users.setStatus',\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tawait Users.updateOne(\n\t\t\t\t\t\t{ _id: user._id },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\t\tstatusDefault: status,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\tconst { _id, username, statusText, roles, name } = user;\n\t\t\t\t\tvoid api.broadcast('presence.status', {\n\t\t\t\t\t\tuser: { status, _id, username, statusText, roles, name },\n\t\t\t\t\t\tpreviousStatus: user.status,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-status', 'Valid status types include online, away, offline, and busy.', {\n\t\t\t\t\t\tmethod: 'users.setStatus',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// status: 'online' | 'offline' | 'away' | 'busy';\n// message?: string;\n// _id: string;\n// connectionStatus?: 'online' | 'offline' | 'away' | 'busy';\n// };\n\nAPI.v1.addRoute(\n\t'users.getStatus',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tif (isUserFromParams(this.queryParams, this.userId, this.user)) {\n\t\t\t\tconst user: IUser | null = await Users.findOneById(this.userId);\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\t_id: user?._id,\n\t\t\t\t\t// message: user.statusText,\n\t\t\t\t\tconnectionStatus: (user?.statusConnection || 'offline') as 'online' | 'offline' | 'away' | 'busy',\n\t\t\t\t\tstatus: (user?.status || 'offline') as 'online' | 'offline' | 'away' | 'busy',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\treturn API.v1.success({\n\t\t\t\t_id: user._id,\n\t\t\t\t// message: user.statusText,\n\t\t\t\tstatus: (user.status || 'offline') as 'online' | 'offline' | 'away' | 'busy',\n\t\t\t});\n\t\t},\n\t},\n);\n\nsettings.watch<number>('Rate_Limiter_Limit_RegisterUser', (value) => {\n\tconst userRegisterRoute = '/api/v1/users.registerpost';\n\n\tAPI.v1.updateRateLimiterDictionaryForRoute(userRegisterRoute, value);\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"9f8376b4f6e52c641edee3925b74e77122700047"}
