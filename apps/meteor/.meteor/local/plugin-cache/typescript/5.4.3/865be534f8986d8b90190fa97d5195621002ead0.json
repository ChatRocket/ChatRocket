{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/models/client/models/ChatMessage.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/models/client/models/ChatMessage.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/models/client/models/ChatMessage.ts","inputSourceMap":{"version":3,"file":"app/models/client/models/ChatMessage.ts","sourceRoot":"","sources":["app/models/client/models/ChatMessage.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAIrC,MAAM,qBACL,SAAQ,KAAK,CAAC,UAA4C;IAG1D;QACC,KAAK,CAAC,IAAI,CAAC,CAAC;IACb,CAAC;IAED,2BAA2B,CAAC,GAAiB,EAAE,SAA0B,EAAE,OAAiC;QAC3G,MAAM,KAAK,GAAG;YACb,GAAG;YACH,GAAG,EAAE,SAAS;SACd,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;CAKD;AAED,qMAAqM;AACrM,MAAM,CAAC,MAAM,WAAW,GAAG,IAAI,qBAAqB,EAAE,CAAC","sourcesContent":["import type { IMessage, IRoom } from '@rocket.chat/core-typings';\nimport { Mongo } from 'meteor/mongo';\n\nimport type { MinimongoCollection } from '../../../../client/definitions/MinimongoCollection';\n\nclass ChatMessageCollection\n\textends Mongo.Collection<IMessage & { ignored?: boolean }>\n\timplements MinimongoCollection<IMessage & { ignored?: boolean }>\n{\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tfindOneByRoomIdAndMessageId(rid: IRoom['_id'], messageId: IMessage['_id'], options?: Mongo.Options<IMessage>) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: messageId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tpublic declare _collection: MinimongoCollection<IMessage & { ignored?: boolean }>['_collection'];\n\n\tpublic declare queries: MinimongoCollection<IMessage & { ignored?: boolean }>['queries'];\n}\n\n/** @deprecated new code refer to Minimongo collections like this one; prefer fetching data from the REST API, listening to changes via streamer events, and storing the state in a Tanstack Query */\nexport const ChatMessage = new ChatMessageCollection();\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/models/client/models/ChatMessage.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/client/models/ChatMessage.ts","inputSourceMap":{"version":3,"file":"app/models/client/models/ChatMessage.ts","sourceRoot":"","sources":["app/models/client/models/ChatMessage.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAIrC,MAAM,qBACL,SAAQ,KAAK,CAAC,UAA4C;IAG1D;QACC,KAAK,CAAC,IAAI,CAAC,CAAC;IACb,CAAC;IAED,2BAA2B,CAAC,GAAiB,EAAE,SAA0B,EAAE,OAAiC;QAC3G,MAAM,KAAK,GAAG;YACb,GAAG;YACH,GAAG,EAAE,SAAS;SACd,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;CAKD;AAED,qMAAqM;AACrM,MAAM,CAAC,MAAM,WAAW,GAAG,IAAI,qBAAqB,EAAE,CAAC","sourcesContent":["import type { IMessage, IRoom } from '@rocket.chat/core-typings';\nimport { Mongo } from 'meteor/mongo';\n\nimport type { MinimongoCollection } from '../../../../client/definitions/MinimongoCollection';\n\nclass ChatMessageCollection\n\textends Mongo.Collection<IMessage & { ignored?: boolean }>\n\timplements MinimongoCollection<IMessage & { ignored?: boolean }>\n{\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tfindOneByRoomIdAndMessageId(rid: IRoom['_id'], messageId: IMessage['_id'], options?: Mongo.Options<IMessage>) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: messageId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tpublic declare _collection: MinimongoCollection<IMessage & { ignored?: boolean }>['_collection'];\n\n\tpublic declare queries: MinimongoCollection<IMessage & { ignored?: boolean }>['queries'];\n}\n\n/** @deprecated new code refer to Minimongo collections like this one; prefer fetching data from the REST API, listening to changes via streamer events, and storing the state in a Tanstack Query */\nexport const ChatMessage = new ChatMessageCollection();\n"]}}},"code":"module.export({\n  ChatMessage: () => ChatMessage\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n}, 0);\nclass ChatMessageCollection extends Mongo.Collection {\n  constructor() {\n    super(null);\n  }\n  findOneByRoomIdAndMessageId(rid, messageId, options) {\n    const query = {\n      rid,\n      _id: messageId\n    };\n    return this.findOne(query, options);\n  }\n}\n/** @deprecated new code refer to Minimongo collections like this one; prefer fetching data from the REST API, listening to changes via streamer events, and storing the state in a Tanstack Query */\nconst ChatMessage = new ChatMessageCollection();","map":{"version":3,"names":["module","export","ChatMessage","Mongo","link","v","ChatMessageCollection","Collection","constructor","findOneByRoomIdAndMessageId","rid","messageId","options","query","_id","findOne"],"sources":["app/models/client/models/ChatMessage.ts"],"sourcesContent":["import type { IMessage, IRoom } from '@rocket.chat/core-typings';\nimport { Mongo } from 'meteor/mongo';\n\nimport type { MinimongoCollection } from '../../../../client/definitions/MinimongoCollection';\n\nclass ChatMessageCollection\n\textends Mongo.Collection<IMessage & { ignored?: boolean }>\n\timplements MinimongoCollection<IMessage & { ignored?: boolean }>\n{\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tfindOneByRoomIdAndMessageId(rid: IRoom['_id'], messageId: IMessage['_id'], options?: Mongo.Options<IMessage>) {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: messageId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tpublic declare _collection: MinimongoCollection<IMessage & { ignored?: boolean }>['_collection'];\n\n\tpublic declare queries: MinimongoCollection<IMessage & { ignored?: boolean }>['queries'];\n}\n\n/** @deprecated new code refer to Minimongo collections like this one; prefer fetching data from the REST API, listening to changes via streamer events, and storing the state in a Tanstack Query */\nexport const ChatMessage = new ChatMessageCollection();\n"],"mappings":"AACAA,MAAA,CAAOC,MAAE,CAAK;EAAAC,WAAQ,EAAAA,CAAA,KAAAA;AAAe;AAAA,IAAAC,KAAA;AAAAH,MAAA,CAAAI,IAAA;EAAAD,MAAAE,CAAA;IAAAF,KAAA,GAAAE,CAAA;EAAA;AAAA;AAIrC,MAAMC,qBACL,SAAQH,KAAK,CAACI,UAA4C;EAG1DC,YAAA;IACC,KAAK,CAAC,IAAI,CAAC;EACZ;EAEAC,2BAA2BA,CAACC,GAAiB,EAAEC,SAA0B,EAAEC,OAAiC;IAC3G,MAAMC,KAAK,GAAG;MACbH,GAAG;MACHI,GAAG,EAAEH;KACL;IAED,OAAO,IAAI,CAACI,OAAO,CAACF,KAAK,EAAED,OAAO,CAAC;EACpC;;AAOD;AACO,MAAMV,WAAW,GAAG,IAAII,qBAAqB,EAAE","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"865be534f8986d8b90190fa97d5195621002ead0"}
