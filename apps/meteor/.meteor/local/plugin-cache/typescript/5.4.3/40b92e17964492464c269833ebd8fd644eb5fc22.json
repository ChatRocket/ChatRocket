{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Custom.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/livechat-enterprise/server/business-hour/Custom.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Custom.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/business-hour/Custom.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/business-hour/Custom.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,yBAAyB,EAAE,MAAM,2BAA2B,CAAC;AACtE,OAAO,EAAE,kBAAkB,EAAE,wBAAwB,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAE1F,OAAO,EAAE,mBAAmB,EAAE,MAAM,kDAAkD,CAAC;AAEvF,OAAO,EAAE,wBAAwB,EAAE,MAAM,uEAAuE,CAAC;AACjH,OAAO,EACN,mCAAmC,EACnC,wCAAwC,GACxC,MAAM,yDAAyD,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAOzC,MAAM,kBAAmB,SAAQ,wBAAwB;IACxD,IAAI,GAAG,yBAAyB,CAAC,MAAM,CAAC;IAExC,KAAK,CAAC,eAAe,CAAC,EAAU;QAC/B,IAAI,CAAC,EAAE,EAAE,CAAC;YACT,OAAO,IAAI,CAAC;QACb,CAAC;QAED,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QACvE,IAAI,CAAC,YAAY,EAAE,CAAC;YACnB,OAAO,IAAI,CAAC;QACb,CAAC;QAED,YAAY,CAAC,WAAW,GAAG,MAAM,kBAAkB,CAAC,oBAAoB,CAAC,YAAY,CAAC,GAAG,EAAE;YAC1F,UAAU,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;SACvB,CAAC,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,YAAY,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,YAAmE;QACzF,MAAM,oBAAoB,GAAG,CAAC,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CACtE,EAAE,IAAI,EAAE,YAAY,CAAC,IAAI,EAAE,EAC3B,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAC1B,CAA0B,CAAC;QAC5B,IAAI,oBAAoB,IAAI,oBAAoB,CAAC,GAAG,KAAK,YAAY,CAAC,GAAG,EAAE,CAAC;YAC3E,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,EAAE,YAAY,EAAE,8BAA8B,EAAE,GAAG,gBAAgB,EAAE,GAAG,YAAY,CAAC;QAC3F,gBAAgB,CAAC,QAAQ,GAAG;YAC3B,IAAI,EAAE,YAAY;YAClB,GAAG,EAAE,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC;SAC1C,CAAC;QACF,MAAM,WAAW,GAAG,8BAA8B,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QACrF,MAAM,oBAAoB,GAAG,EAAE,GAAG,gBAAgB,EAAE,8BAA8B,EAAE,CAAC;QACrF,OAAO,gBAAgB,CAAC,WAAW,CAAC;QAEpC,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;QACzE,MAAM,kBAAkB,GAAG,CAC1B,MAAM,kBAAkB,CAAC,oBAAoB,CAAC,cAAc,EAAE;YAC7D,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE;SACtB,CAAC,CAAC,OAAO,EAAE,CACZ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,MAAM,QAAQ,GAAG,CAAC,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACvF,MAAM,KAAK,GAAG,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE5F,MAAM,IAAI,CAAC,yCAAyC,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QAE/E,6EAA6E;QAC7E,yFAAyF;QACzF,2FAA2F;QAC3F,MAAM,IAAI,CAAC,yDAAyD,CAAC,KAAK,CAAC,CAAC;QAE5E,MAAM,IAAI,CAAC,oCAAoC,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAEvE,oBAAoB,CAAC,GAAG,GAAG,cAAc,CAAC;QAC1C,OAAO,oBAAoB,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,cAAsB;QAClD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;QACvF,IAAI,CAAC,YAAY,EAAE,CAAC;YACnB,OAAO;QACR,CAAC;QACD,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QAC7D,MAAM,IAAI,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC;QACxD,MAAM,kBAAkB,CAAC,iDAAiD,CAAC,cAAc,CAAC,CAAC;QAE3F,MAAM,wCAAwC,EAAE,CAAC;IAClD,CAAC;IAEO,KAAK,CAAC,4BAA4B,CAAC,cAAsB;QAChE,MAAM,aAAa,GAAG,CACrB,MAAM,kBAAkB,CAAC,oBAAoB,CAAC,cAAc,EAAE;YAC7D,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE;SACtB,CAAC,CAAC,OAAO,EAAE,CACZ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,MAAM,QAAQ,GAAG,CAChB,MAAM,wBAAwB,CAAC,mBAAmB,CAAC,aAAa,EAAE;YACjE,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE;SAC1B,CAAC,CAAC,OAAO,EAAE,CACZ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,eAAe,CAAC,4BAA4B,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IAC7E,CAAC;IAEO,KAAK,CAAC,yCAAyC,CAAC,cAAsB,EAAE,mBAA6B;QAC5G,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC;YACjC,OAAO;QACR,CAAC;QACD,MAAM,kBAAkB,CAAC,uDAAuD,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;IACvH,CAAC;IAEO,KAAK,CAAC,yDAAyD,CAAC,aAAuB;QAC9F,+BAA+B;QAC/B,4GAA4G;QAC5G,8CAA8C;QAC9C,2FAA2F;QAC3F,sGAAsG;QACtG,MAAM,0BAA0B,GAAG,EAAE,CAAC;QACtC,MAAM,oBAAoB,GAAG,EAAE,CAAC;QAEhC,MAAM,WAAW,GAAG,MAAM,kBAAkB,CAAC,SAAS,CAAC,aAAa,EAAE;YACrE,UAAU,EAAE;gBACX,cAAc,EAAE,CAAC;aACjB;SACD,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE,CAAC;YAChC,IAAI,IAAI,EAAE,cAAc,EAAE,CAAC;gBAC1B,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACtD,CAAC;iBAAM,CAAC;gBACP,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrC,CAAC;QACF,CAAC;QACD,MAAM,KAAK,CAAC,yCAAyC,CAAC,0BAA0B,CAAC,CAAC;QAElF,kBAAkB;QAClB,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,0BAA0B,EAAE,CAAC;QAC3F,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC1B,QAAQ,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;YACjD,OAAO;QACR,CAAC;QAED,MAAM,iBAAiB,GAAG,CAAC,MAAM,mCAAmC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QACxG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACxB,QAAQ,CAAC,KAAK,CAAC,uEAAuE,CAAC,CAAC;YACxF,OAAO;QACR,CAAC;QAED,MAAM,0BAA0B,GAAG,MAAM,CACxC,MAAM,wBAAwB,CAAC,mBAAmB,CAAC,aAAa,EAAE;YACjE,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE;SAC1B,CAAC,CAAC,OAAO,EAAE,CACZ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE9B,MAAM,KAAK,CAAC,4BAA4B,CAAC,0BAA0B,EAAE,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAE9F,MAAM,wCAAwC,EAAE,CAAC;IAClD,CAAC;IAEO,KAAK,CAAC,oCAAoC,CAAC,cAAsB,EAAE,gBAA0B;QACpG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;YAC9B,OAAO;QACR,CAAC;QACD,MAAM,kBAAkB,CAAC,iCAAiC,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;IAC9F,CAAC;CACD;AAED,mBAAmB,CAAC,wBAAwB,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC","sourcesContent":["import type { ILivechatBusinessHour } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport { LivechatDepartment, LivechatDepartmentAgents, Users } from '@rocket.chat/models';\n\nimport { businessHourManager } from '../../../../../app/livechat/server/business-hour';\nimport type { IBusinessHourType } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport { AbstractBusinessHourType } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport {\n\tfilterBusinessHoursThatMustBeOpened,\n\tmakeAgentsUnavailableBasedOnBusinessHour,\n} from '../../../../../app/livechat/server/business-hour/Helper';\nimport { bhLogger } from '../lib/logger';\n\ntype IBusinessHoursExtraProperties = {\n\ttimezoneName: string;\n\tdepartmentsToApplyBusinessHour: string;\n};\n\nclass CustomBusinessHour extends AbstractBusinessHourType implements IBusinessHourType {\n\tname = LivechatBusinessHourTypes.CUSTOM;\n\n\tasync getBusinessHour(id: string): Promise<ILivechatBusinessHour | null> {\n\t\tif (!id) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(id);\n\t\tif (!businessHour) {\n\t\t\treturn null;\n\t\t}\n\n\t\tbusinessHour.departments = await LivechatDepartment.findByBusinessHourId(businessHour._id, {\n\t\t\tprojection: { name: 1 },\n\t\t}).toArray();\n\t\treturn businessHour;\n\t}\n\n\tasync saveBusinessHour(businessHour: ILivechatBusinessHour & IBusinessHoursExtraProperties): Promise<ILivechatBusinessHour> {\n\t\tconst existingBusinessHour = (await this.BusinessHourRepository.findOne(\n\t\t\t{ name: businessHour.name },\n\t\t\t{ projection: { _id: 1 } },\n\t\t)) as ILivechatBusinessHour;\n\t\tif (existingBusinessHour && existingBusinessHour._id !== businessHour._id) {\n\t\t\tthrow new Error('error-business-hour-name-already-in-use');\n\t\t}\n\t\tconst { timezoneName, departmentsToApplyBusinessHour, ...businessHourData } = businessHour;\n\t\tbusinessHourData.timezone = {\n\t\t\tname: timezoneName,\n\t\t\tutc: this.getUTCFromTimezone(timezoneName),\n\t\t};\n\t\tconst departments = departmentsToApplyBusinessHour?.split(',').filter(Boolean) || [];\n\t\tconst businessHourToReturn = { ...businessHourData, departmentsToApplyBusinessHour };\n\t\tdelete businessHourData.departments;\n\n\t\tconst businessHourId = await this.baseSaveBusinessHour(businessHourData);\n\t\tconst currentDepartments = (\n\t\t\tawait LivechatDepartment.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept._id);\n\t\tconst toRemove = [...currentDepartments.filter((dept) => !departments.includes(dept))];\n\t\tconst toAdd = [...departments.filter((dept: string) => !currentDepartments.includes(dept))];\n\n\t\tawait this.removeBusinessHourFromDepartmentsIfNeeded(businessHourId, toRemove);\n\n\t\t// Now will check if the department which we're currently adding to BH is not\n\t\t// associated with any other BH. If it is, then it will remove the old BH from all user's\n\t\t// cache. It will not add the new BH right now as it will be done in afterSaveBusinessHour.\n\t\tawait this.removeBHFromPreviouslyConnectedDepartmentAgentsIfRequired(toAdd);\n\n\t\tawait this.addBusinessHourToDepartmentsIfNeeded(businessHourId, toAdd);\n\n\t\tbusinessHourToReturn._id = businessHourId;\n\t\treturn businessHourToReturn;\n\t}\n\n\tasync removeBusinessHourById(businessHourId: string): Promise<void> {\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourId, {});\n\t\tif (!businessHour) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.BusinessHourRepository.removeById(businessHourId);\n\t\tawait this.removeBusinessHourFromAgents(businessHourId);\n\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByBusinessHourId(businessHourId);\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\t}\n\n\tprivate async removeBusinessHourFromAgents(businessHourId: string): Promise<void> {\n\t\tconst departmentIds = (\n\t\t\tawait LivechatDepartment.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept._id);\n\t\tconst agentIds = (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentIds, {\n\t\t\t\tprojection: { agentId: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept.agentId);\n\t\tthis.UsersRepository.removeBusinessHourByAgentIds(agentIds, businessHourId);\n\t}\n\n\tprivate async removeBusinessHourFromDepartmentsIfNeeded(businessHourId: string, departmentsToRemove: string[]): Promise<void> {\n\t\tif (!departmentsToRemove.length) {\n\t\t\treturn;\n\t\t}\n\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId(departmentsToRemove, businessHourId);\n\t}\n\n\tprivate async removeBHFromPreviouslyConnectedDepartmentAgentsIfRequired(departmentIds: string[]): Promise<void> {\n\t\t// we need to do 2 things here.\n\t\t// 1st is to check if any of the departments are associated with any BH. If they are, then we need to remove\n\t\t// that BH from all agents of that department.\n\t\t// 2nd is to check if any of the departments are not associated with BH, meaning default BH\n\t\t// is applied. So if default BH is open, then we need to remove it from all agents of that department.\n\t\tconst bhIdsConnectedToDepartment = [];\n\t\tconst departmentsWithoutBH = [];\n\n\t\tconst departments = await LivechatDepartment.findInIds(departmentIds, {\n\t\t\tprojection: {\n\t\t\t\tbusinessHourId: 1,\n\t\t\t},\n\t\t}).toArray();\n\n\t\tfor (const dept of departments) {\n\t\t\tif (dept?.businessHourId) {\n\t\t\t\tbhIdsConnectedToDepartment.push(dept.businessHourId);\n\t\t\t} else {\n\t\t\t\tdepartmentsWithoutBH.push(dept._id);\n\t\t\t}\n\t\t}\n\t\tawait Users.closeAgentsBusinessHoursByBusinessHourIds(bhIdsConnectedToDepartment);\n\n\t\t// start of step 2\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\tbhLogger.error('No default business hour found');\n\t\t\treturn;\n\t\t}\n\n\t\tconst isDefaultBHActive = (await filterBusinessHoursThatMustBeOpened([defaultBusinessHour])).length > 0;\n\t\tif (!isDefaultBHActive) {\n\t\t\tbhLogger.debug('Default business hour is not active. No need to remove it from agents');\n\t\t\treturn;\n\t\t}\n\n\t\tconst agentsConnectedToDefaultBH = await (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentIds, {\n\t\t\t\tprojection: { agentId: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept.agentId);\n\n\t\tawait Users.removeBusinessHourByAgentIds(agentsConnectedToDefaultBH, defaultBusinessHour._id);\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\t}\n\n\tprivate async addBusinessHourToDepartmentsIfNeeded(businessHourId: string, departmentsToAdd: string[]): Promise<void> {\n\t\tif (!departmentsToAdd.length) {\n\t\t\treturn;\n\t\t}\n\t\tawait LivechatDepartment.addBusinessHourToDepartmentsByIds(departmentsToAdd, businessHourId);\n\t}\n}\n\nbusinessHourManager.registerBusinessHourType(new CustomBusinessHour());\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Custom.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/livechat-enterprise/server/business-hour/Custom.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/business-hour/Custom.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/business-hour/Custom.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatBusinessHour } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport { LivechatDepartment, LivechatDepartmentAgents, Users } from '@rocket.chat/models';\n\nimport { businessHourManager } from '../../../../../app/livechat/server/business-hour';\nimport type { IBusinessHourType } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport { AbstractBusinessHourType } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport {\n\tfilterBusinessHoursThatMustBeOpened,\n\tmakeAgentsUnavailableBasedOnBusinessHour,\n} from '../../../../../app/livechat/server/business-hour/Helper';\nimport { bhLogger } from '../lib/logger';\n\ntype IBusinessHoursExtraProperties = {\n\ttimezoneName: string;\n\tdepartmentsToApplyBusinessHour: string;\n};\n\nclass CustomBusinessHour extends AbstractBusinessHourType implements IBusinessHourType {\n\tname = LivechatBusinessHourTypes.CUSTOM;\n\n\tasync getBusinessHour(id: string): Promise<ILivechatBusinessHour | null> {\n\t\tif (!id) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(id);\n\t\tif (!businessHour) {\n\t\t\treturn null;\n\t\t}\n\n\t\tbusinessHour.departments = await LivechatDepartment.findByBusinessHourId(businessHour._id, {\n\t\t\tprojection: { name: 1 },\n\t\t}).toArray();\n\t\treturn businessHour;\n\t}\n\n\tasync saveBusinessHour(businessHour: ILivechatBusinessHour & IBusinessHoursExtraProperties): Promise<ILivechatBusinessHour> {\n\t\tconst existingBusinessHour = (await this.BusinessHourRepository.findOne(\n\t\t\t{ name: businessHour.name },\n\t\t\t{ projection: { _id: 1 } },\n\t\t)) as ILivechatBusinessHour;\n\t\tif (existingBusinessHour && existingBusinessHour._id !== businessHour._id) {\n\t\t\tthrow new Error('error-business-hour-name-already-in-use');\n\t\t}\n\t\tconst { timezoneName, departmentsToApplyBusinessHour, ...businessHourData } = businessHour;\n\t\tbusinessHourData.timezone = {\n\t\t\tname: timezoneName,\n\t\t\tutc: this.getUTCFromTimezone(timezoneName),\n\t\t};\n\t\tconst departments = departmentsToApplyBusinessHour?.split(',').filter(Boolean) || [];\n\t\tconst businessHourToReturn = { ...businessHourData, departmentsToApplyBusinessHour };\n\t\tdelete businessHourData.departments;\n\n\t\tconst businessHourId = await this.baseSaveBusinessHour(businessHourData);\n\t\tconst currentDepartments = (\n\t\t\tawait LivechatDepartment.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept._id);\n\t\tconst toRemove = [...currentDepartments.filter((dept) => !departments.includes(dept))];\n\t\tconst toAdd = [...departments.filter((dept: string) => !currentDepartments.includes(dept))];\n\n\t\tawait this.removeBusinessHourFromDepartmentsIfNeeded(businessHourId, toRemove);\n\n\t\t// Now will check if the department which we're currently adding to BH is not\n\t\t// associated with any other BH. If it is, then it will remove the old BH from all user's\n\t\t// cache. It will not add the new BH right now as it will be done in afterSaveBusinessHour.\n\t\tawait this.removeBHFromPreviouslyConnectedDepartmentAgentsIfRequired(toAdd);\n\n\t\tawait this.addBusinessHourToDepartmentsIfNeeded(businessHourId, toAdd);\n\n\t\tbusinessHourToReturn._id = businessHourId;\n\t\treturn businessHourToReturn;\n\t}\n\n\tasync removeBusinessHourById(businessHourId: string): Promise<void> {\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourId, {});\n\t\tif (!businessHour) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.BusinessHourRepository.removeById(businessHourId);\n\t\tawait this.removeBusinessHourFromAgents(businessHourId);\n\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByBusinessHourId(businessHourId);\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\t}\n\n\tprivate async removeBusinessHourFromAgents(businessHourId: string): Promise<void> {\n\t\tconst departmentIds = (\n\t\t\tawait LivechatDepartment.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept._id);\n\t\tconst agentIds = (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentIds, {\n\t\t\t\tprojection: { agentId: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept.agentId);\n\t\tthis.UsersRepository.removeBusinessHourByAgentIds(agentIds, businessHourId);\n\t}\n\n\tprivate async removeBusinessHourFromDepartmentsIfNeeded(businessHourId: string, departmentsToRemove: string[]): Promise<void> {\n\t\tif (!departmentsToRemove.length) {\n\t\t\treturn;\n\t\t}\n\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId(departmentsToRemove, businessHourId);\n\t}\n\n\tprivate async removeBHFromPreviouslyConnectedDepartmentAgentsIfRequired(departmentIds: string[]): Promise<void> {\n\t\t// we need to do 2 things here.\n\t\t// 1st is to check if any of the departments are associated with any BH. If they are, then we need to remove\n\t\t// that BH from all agents of that department.\n\t\t// 2nd is to check if any of the departments are not associated with BH, meaning default BH\n\t\t// is applied. So if default BH is open, then we need to remove it from all agents of that department.\n\t\tconst bhIdsConnectedToDepartment = [];\n\t\tconst departmentsWithoutBH = [];\n\n\t\tconst departments = await LivechatDepartment.findInIds(departmentIds, {\n\t\t\tprojection: {\n\t\t\t\tbusinessHourId: 1,\n\t\t\t},\n\t\t}).toArray();\n\n\t\tfor (const dept of departments) {\n\t\t\tif (dept?.businessHourId) {\n\t\t\t\tbhIdsConnectedToDepartment.push(dept.businessHourId);\n\t\t\t} else {\n\t\t\t\tdepartmentsWithoutBH.push(dept._id);\n\t\t\t}\n\t\t}\n\t\tawait Users.closeAgentsBusinessHoursByBusinessHourIds(bhIdsConnectedToDepartment);\n\n\t\t// start of step 2\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\tbhLogger.error('No default business hour found');\n\t\t\treturn;\n\t\t}\n\n\t\tconst isDefaultBHActive = (await filterBusinessHoursThatMustBeOpened([defaultBusinessHour])).length > 0;\n\t\tif (!isDefaultBHActive) {\n\t\t\tbhLogger.debug('Default business hour is not active. No need to remove it from agents');\n\t\t\treturn;\n\t\t}\n\n\t\tconst agentsConnectedToDefaultBH = await (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentIds, {\n\t\t\t\tprojection: { agentId: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept.agentId);\n\n\t\tawait Users.removeBusinessHourByAgentIds(agentsConnectedToDefaultBH, defaultBusinessHour._id);\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\t}\n\n\tprivate async addBusinessHourToDepartmentsIfNeeded(businessHourId: string, departmentsToAdd: string[]): Promise<void> {\n\t\tif (!departmentsToAdd.length) {\n\t\t\treturn;\n\t\t}\n\t\tawait LivechatDepartment.addBusinessHourToDepartmentsByIds(departmentsToAdd, businessHourId);\n\t}\n}\n\nbusinessHourManager.registerBusinessHourType(new CustomBusinessHour());\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 1);\n    const _excluded = [\"timezoneName\", \"departmentsToApplyBusinessHour\"];\n    let LivechatBusinessHourTypes;\n    module.link(\"@rocket.chat/core-typings\", {\n      LivechatBusinessHourTypes(v) {\n        LivechatBusinessHourTypes = v;\n      }\n    }, 0);\n    let LivechatDepartment, LivechatDepartmentAgents, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatDepartment(v) {\n        LivechatDepartment = v;\n      },\n      LivechatDepartmentAgents(v) {\n        LivechatDepartmentAgents = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let businessHourManager;\n    module.link(\"../../../../../app/livechat/server/business-hour\", {\n      businessHourManager(v) {\n        businessHourManager = v;\n      }\n    }, 2);\n    let AbstractBusinessHourType;\n    module.link(\"../../../../../app/livechat/server/business-hour/AbstractBusinessHour\", {\n      AbstractBusinessHourType(v) {\n        AbstractBusinessHourType = v;\n      }\n    }, 3);\n    let filterBusinessHoursThatMustBeOpened, makeAgentsUnavailableBasedOnBusinessHour;\n    module.link(\"../../../../../app/livechat/server/business-hour/Helper\", {\n      filterBusinessHoursThatMustBeOpened(v) {\n        filterBusinessHoursThatMustBeOpened = v;\n      },\n      makeAgentsUnavailableBasedOnBusinessHour(v) {\n        makeAgentsUnavailableBasedOnBusinessHour = v;\n      }\n    }, 4);\n    let bhLogger;\n    module.link(\"../lib/logger\", {\n      bhLogger(v) {\n        bhLogger = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class CustomBusinessHour extends AbstractBusinessHourType {\n      constructor() {\n        super(...arguments);\n        this.name = LivechatBusinessHourTypes.CUSTOM;\n      }\n      async getBusinessHour(id) {\n        if (!id) {\n          return null;\n        }\n        const businessHour = await this.BusinessHourRepository.findOneById(id);\n        if (!businessHour) {\n          return null;\n        }\n        businessHour.departments = await LivechatDepartment.findByBusinessHourId(businessHour._id, {\n          projection: {\n            name: 1\n          }\n        }).toArray();\n        return businessHour;\n      }\n      async saveBusinessHour(businessHour) {\n        const existingBusinessHour = await this.BusinessHourRepository.findOne({\n          name: businessHour.name\n        }, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (existingBusinessHour && existingBusinessHour._id !== businessHour._id) {\n          throw new Error('error-business-hour-name-already-in-use');\n        }\n        const {\n            timezoneName,\n            departmentsToApplyBusinessHour\n          } = businessHour,\n          businessHourData = _objectWithoutProperties(businessHour, _excluded);\n        businessHourData.timezone = {\n          name: timezoneName,\n          utc: this.getUTCFromTimezone(timezoneName)\n        };\n        const departments = (departmentsToApplyBusinessHour === null || departmentsToApplyBusinessHour === void 0 ? void 0 : departmentsToApplyBusinessHour.split(',').filter(Boolean)) || [];\n        const businessHourToReturn = _objectSpread(_objectSpread({}, businessHourData), {}, {\n          departmentsToApplyBusinessHour\n        });\n        delete businessHourData.departments;\n        const businessHourId = await this.baseSaveBusinessHour(businessHourData);\n        const currentDepartments = (await LivechatDepartment.findByBusinessHourId(businessHourId, {\n          projection: {\n            _id: 1\n          }\n        }).toArray()).map(dept => dept._id);\n        const toRemove = [...currentDepartments.filter(dept => !departments.includes(dept))];\n        const toAdd = [...departments.filter(dept => !currentDepartments.includes(dept))];\n        await this.removeBusinessHourFromDepartmentsIfNeeded(businessHourId, toRemove);\n        // Now will check if the department which we're currently adding to BH is not\n        // associated with any other BH. If it is, then it will remove the old BH from all user's\n        // cache. It will not add the new BH right now as it will be done in afterSaveBusinessHour.\n        await this.removeBHFromPreviouslyConnectedDepartmentAgentsIfRequired(toAdd);\n        await this.addBusinessHourToDepartmentsIfNeeded(businessHourId, toAdd);\n        businessHourToReturn._id = businessHourId;\n        return businessHourToReturn;\n      }\n      async removeBusinessHourById(businessHourId) {\n        const businessHour = await this.BusinessHourRepository.findOneById(businessHourId, {});\n        if (!businessHour) {\n          return;\n        }\n        await this.BusinessHourRepository.removeById(businessHourId);\n        await this.removeBusinessHourFromAgents(businessHourId);\n        await LivechatDepartment.removeBusinessHourFromDepartmentsByBusinessHourId(businessHourId);\n        await makeAgentsUnavailableBasedOnBusinessHour();\n      }\n      async removeBusinessHourFromAgents(businessHourId) {\n        const departmentIds = (await LivechatDepartment.findByBusinessHourId(businessHourId, {\n          projection: {\n            _id: 1\n          }\n        }).toArray()).map(dept => dept._id);\n        const agentIds = (await LivechatDepartmentAgents.findByDepartmentIds(departmentIds, {\n          projection: {\n            agentId: 1\n          }\n        }).toArray()).map(dept => dept.agentId);\n        this.UsersRepository.removeBusinessHourByAgentIds(agentIds, businessHourId);\n      }\n      async removeBusinessHourFromDepartmentsIfNeeded(businessHourId, departmentsToRemove) {\n        if (!departmentsToRemove.length) {\n          return;\n        }\n        await LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId(departmentsToRemove, businessHourId);\n      }\n      async removeBHFromPreviouslyConnectedDepartmentAgentsIfRequired(departmentIds) {\n        // we need to do 2 things here.\n        // 1st is to check if any of the departments are associated with any BH. If they are, then we need to remove\n        // that BH from all agents of that department.\n        // 2nd is to check if any of the departments are not associated with BH, meaning default BH\n        // is applied. So if default BH is open, then we need to remove it from all agents of that department.\n        const bhIdsConnectedToDepartment = [];\n        const departmentsWithoutBH = [];\n        const departments = await LivechatDepartment.findInIds(departmentIds, {\n          projection: {\n            businessHourId: 1\n          }\n        }).toArray();\n        for (const dept of departments) {\n          if (dept !== null && dept !== void 0 && dept.businessHourId) {\n            bhIdsConnectedToDepartment.push(dept.businessHourId);\n          } else {\n            departmentsWithoutBH.push(dept._id);\n          }\n        }\n        await Users.closeAgentsBusinessHoursByBusinessHourIds(bhIdsConnectedToDepartment);\n        // start of step 2\n        const defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n        if (!defaultBusinessHour) {\n          bhLogger.error('No default business hour found');\n          return;\n        }\n        const isDefaultBHActive = (await filterBusinessHoursThatMustBeOpened([defaultBusinessHour])).length > 0;\n        if (!isDefaultBHActive) {\n          bhLogger.debug('Default business hour is not active. No need to remove it from agents');\n          return;\n        }\n        const agentsConnectedToDefaultBH = await (await LivechatDepartmentAgents.findByDepartmentIds(departmentIds, {\n          projection: {\n            agentId: 1\n          }\n        }).toArray()).map(dept => dept.agentId);\n        await Users.removeBusinessHourByAgentIds(agentsConnectedToDefaultBH, defaultBusinessHour._id);\n        await makeAgentsUnavailableBasedOnBusinessHour();\n      }\n      async addBusinessHourToDepartmentsIfNeeded(businessHourId, departmentsToAdd) {\n        if (!departmentsToAdd.length) {\n          return;\n        }\n        await LivechatDepartment.addBusinessHourToDepartmentsByIds(departmentsToAdd, businessHourId);\n      }\n    }\n    businessHourManager.registerBusinessHourType(new CustomBusinessHour());\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_objectWithoutProperties","_excluded","LivechatBusinessHourTypes","LivechatDepartment","LivechatDepartmentAgents","Users","businessHourManager","AbstractBusinessHourType","filterBusinessHoursThatMustBeOpened","makeAgentsUnavailableBasedOnBusinessHour","bhLogger","__reifyWaitForDeps__","CustomBusinessHour","constructor","arguments","name","CUSTOM","getBusinessHour","id","businessHour","BusinessHourRepository","findOneById","departments","findByBusinessHourId","_id","projection","toArray","saveBusinessHour","existingBusinessHour","findOne","Error","timezoneName","departmentsToApplyBusinessHour","businessHourData","timezone","utc","getUTCFromTimezone","split","filter","Boolean","businessHourToReturn","businessHourId","baseSaveBusinessHour","currentDepartments","map","dept","toRemove","includes","toAdd","removeBusinessHourFromDepartmentsIfNeeded","removeBHFromPreviouslyConnectedDepartmentAgentsIfRequired","addBusinessHourToDepartmentsIfNeeded","removeBusinessHourById","removeById","removeBusinessHourFromAgents","removeBusinessHourFromDepartmentsByBusinessHourId","departmentIds","agentIds","findByDepartmentIds","agentId","UsersRepository","removeBusinessHourByAgentIds","departmentsToRemove","length","removeBusinessHourFromDepartmentsByIdsAndBusinessHourId","bhIdsConnectedToDepartment","departmentsWithoutBH","findInIds","push","closeAgentsBusinessHoursByBusinessHourIds","defaultBusinessHour","findOneDefaultBusinessHour","error","isDefaultBHActive","debug","agentsConnectedToDefaultBH","departmentsToAdd","addBusinessHourToDepartmentsByIds","registerBusinessHourType","__reify_async_result__","_reifyError","self","async"],"sources":["ee/app/livechat-enterprise/server/business-hour/Custom.ts"],"sourcesContent":["import type { ILivechatBusinessHour } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport { LivechatDepartment, LivechatDepartmentAgents, Users } from '@rocket.chat/models';\n\nimport { businessHourManager } from '../../../../../app/livechat/server/business-hour';\nimport type { IBusinessHourType } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport { AbstractBusinessHourType } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport {\n\tfilterBusinessHoursThatMustBeOpened,\n\tmakeAgentsUnavailableBasedOnBusinessHour,\n} from '../../../../../app/livechat/server/business-hour/Helper';\nimport { bhLogger } from '../lib/logger';\n\ntype IBusinessHoursExtraProperties = {\n\ttimezoneName: string;\n\tdepartmentsToApplyBusinessHour: string;\n};\n\nclass CustomBusinessHour extends AbstractBusinessHourType implements IBusinessHourType {\n\tname = LivechatBusinessHourTypes.CUSTOM;\n\n\tasync getBusinessHour(id: string): Promise<ILivechatBusinessHour | null> {\n\t\tif (!id) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(id);\n\t\tif (!businessHour) {\n\t\t\treturn null;\n\t\t}\n\n\t\tbusinessHour.departments = await LivechatDepartment.findByBusinessHourId(businessHour._id, {\n\t\t\tprojection: { name: 1 },\n\t\t}).toArray();\n\t\treturn businessHour;\n\t}\n\n\tasync saveBusinessHour(businessHour: ILivechatBusinessHour & IBusinessHoursExtraProperties): Promise<ILivechatBusinessHour> {\n\t\tconst existingBusinessHour = (await this.BusinessHourRepository.findOne(\n\t\t\t{ name: businessHour.name },\n\t\t\t{ projection: { _id: 1 } },\n\t\t)) as ILivechatBusinessHour;\n\t\tif (existingBusinessHour && existingBusinessHour._id !== businessHour._id) {\n\t\t\tthrow new Error('error-business-hour-name-already-in-use');\n\t\t}\n\t\tconst { timezoneName, departmentsToApplyBusinessHour, ...businessHourData } = businessHour;\n\t\tbusinessHourData.timezone = {\n\t\t\tname: timezoneName,\n\t\t\tutc: this.getUTCFromTimezone(timezoneName),\n\t\t};\n\t\tconst departments = departmentsToApplyBusinessHour?.split(',').filter(Boolean) || [];\n\t\tconst businessHourToReturn = { ...businessHourData, departmentsToApplyBusinessHour };\n\t\tdelete businessHourData.departments;\n\n\t\tconst businessHourId = await this.baseSaveBusinessHour(businessHourData);\n\t\tconst currentDepartments = (\n\t\t\tawait LivechatDepartment.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept._id);\n\t\tconst toRemove = [...currentDepartments.filter((dept) => !departments.includes(dept))];\n\t\tconst toAdd = [...departments.filter((dept: string) => !currentDepartments.includes(dept))];\n\n\t\tawait this.removeBusinessHourFromDepartmentsIfNeeded(businessHourId, toRemove);\n\n\t\t// Now will check if the department which we're currently adding to BH is not\n\t\t// associated with any other BH. If it is, then it will remove the old BH from all user's\n\t\t// cache. It will not add the new BH right now as it will be done in afterSaveBusinessHour.\n\t\tawait this.removeBHFromPreviouslyConnectedDepartmentAgentsIfRequired(toAdd);\n\n\t\tawait this.addBusinessHourToDepartmentsIfNeeded(businessHourId, toAdd);\n\n\t\tbusinessHourToReturn._id = businessHourId;\n\t\treturn businessHourToReturn;\n\t}\n\n\tasync removeBusinessHourById(businessHourId: string): Promise<void> {\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourId, {});\n\t\tif (!businessHour) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.BusinessHourRepository.removeById(businessHourId);\n\t\tawait this.removeBusinessHourFromAgents(businessHourId);\n\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByBusinessHourId(businessHourId);\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\t}\n\n\tprivate async removeBusinessHourFromAgents(businessHourId: string): Promise<void> {\n\t\tconst departmentIds = (\n\t\t\tawait LivechatDepartment.findByBusinessHourId(businessHourId, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept._id);\n\t\tconst agentIds = (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentIds, {\n\t\t\t\tprojection: { agentId: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept.agentId);\n\t\tthis.UsersRepository.removeBusinessHourByAgentIds(agentIds, businessHourId);\n\t}\n\n\tprivate async removeBusinessHourFromDepartmentsIfNeeded(businessHourId: string, departmentsToRemove: string[]): Promise<void> {\n\t\tif (!departmentsToRemove.length) {\n\t\t\treturn;\n\t\t}\n\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId(departmentsToRemove, businessHourId);\n\t}\n\n\tprivate async removeBHFromPreviouslyConnectedDepartmentAgentsIfRequired(departmentIds: string[]): Promise<void> {\n\t\t// we need to do 2 things here.\n\t\t// 1st is to check if any of the departments are associated with any BH. If they are, then we need to remove\n\t\t// that BH from all agents of that department.\n\t\t// 2nd is to check if any of the departments are not associated with BH, meaning default BH\n\t\t// is applied. So if default BH is open, then we need to remove it from all agents of that department.\n\t\tconst bhIdsConnectedToDepartment = [];\n\t\tconst departmentsWithoutBH = [];\n\n\t\tconst departments = await LivechatDepartment.findInIds(departmentIds, {\n\t\t\tprojection: {\n\t\t\t\tbusinessHourId: 1,\n\t\t\t},\n\t\t}).toArray();\n\n\t\tfor (const dept of departments) {\n\t\t\tif (dept?.businessHourId) {\n\t\t\t\tbhIdsConnectedToDepartment.push(dept.businessHourId);\n\t\t\t} else {\n\t\t\t\tdepartmentsWithoutBH.push(dept._id);\n\t\t\t}\n\t\t}\n\t\tawait Users.closeAgentsBusinessHoursByBusinessHourIds(bhIdsConnectedToDepartment);\n\n\t\t// start of step 2\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\tbhLogger.error('No default business hour found');\n\t\t\treturn;\n\t\t}\n\n\t\tconst isDefaultBHActive = (await filterBusinessHoursThatMustBeOpened([defaultBusinessHour])).length > 0;\n\t\tif (!isDefaultBHActive) {\n\t\t\tbhLogger.debug('Default business hour is not active. No need to remove it from agents');\n\t\t\treturn;\n\t\t}\n\n\t\tconst agentsConnectedToDefaultBH = await (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentIds, {\n\t\t\t\tprojection: { agentId: 1 },\n\t\t\t}).toArray()\n\t\t).map((dept) => dept.agentId);\n\n\t\tawait Users.removeBusinessHourByAgentIds(agentsConnectedToDefaultBH, defaultBusinessHour._id);\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\t}\n\n\tprivate async addBusinessHourToDepartmentsIfNeeded(businessHourId: string, departmentsToAdd: string[]): Promise<void> {\n\t\tif (!departmentsToAdd.length) {\n\t\t\treturn;\n\t\t}\n\t\tawait LivechatDepartment.addBusinessHourToDepartmentsByIds(departmentsToAdd, businessHourId);\n\t}\n}\n\nbusinessHourManager.registerBusinessHourType(new CustomBusinessHour());\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"40b92e17964492464c269833ebd8fd644eb5fc22"}
