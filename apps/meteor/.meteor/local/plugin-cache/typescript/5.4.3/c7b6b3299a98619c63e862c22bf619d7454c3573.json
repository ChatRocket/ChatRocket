{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/voxtelesys.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/omnichannel-integrations/providers/voxtelesys.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/voxtelesys.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-integrations/providers/voxtelesys.ts","sourceRoot":"","sources":["server/services/omnichannel-integrations/providers/voxtelesys.ts"],"names":[],"mappings":"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","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { ISMSProvider, ServiceData, SMSProviderResponse } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport type { Request } from 'express';\nimport filesize from 'filesize';\n\nimport { settings } from '../../../../app/settings/server';\nimport { mime } from '../../../../app/utils/lib/mimeTypes';\nimport { fileUploadIsValidContentType } from '../../../../app/utils/server/restrictions';\nimport { i18n } from '../../../lib/i18n';\nimport { SystemLogger } from '../../../lib/logger/system';\n\ntype VoxtelesysData = {\n\tfrom: string;\n\tto: string;\n\tbody: string;\n\treceived_at: string;\n\tmedia: string[];\n};\n\nconst isVoxtelesysData = (data: unknown): data is VoxtelesysData => {\n\tif (typeof data !== 'object' || data === null) {\n\t\treturn false;\n\t}\n\n\tconst { from, to, body } = data as Record<string, unknown>;\n\n\treturn typeof from === 'string' && typeof to === 'string' && typeof body === 'string';\n};\n\nconst MAX_FILE_SIZE = 5242880;\n\nconst notifyAgent = (userId: string, rid: string, msg: string) =>\n\tvoid api.broadcast('notify.ephemeralMessage', userId, rid, {\n\t\tmsg,\n\t});\n\nexport class Voxtelesys implements ISMSProvider {\n\tauthToken: string;\n\n\tURL: string;\n\n\tfileUploadEnabled: string;\n\n\tmediaTypeWhiteList: string;\n\n\tconstructor() {\n\t\tthis.authToken = settings.get('SMS_Voxtelesys_authToken');\n\t\tthis.URL = settings.get('SMS_Voxtelesys_URL');\n\t\tthis.fileUploadEnabled = settings.get('SMS_Voxtelesys_FileUpload_Enabled');\n\t\tthis.mediaTypeWhiteList = settings.get('SMS_Voxtelesys_FileUpload_MediaTypeWhiteList');\n\t}\n\n\tparse(data: unknown): ServiceData {\n\t\tif (!isVoxtelesysData(data)) {\n\t\t\tthrow new Error('Invalid data');\n\t\t}\n\n\t\tconst returnData: ServiceData = {\n\t\t\tfrom: data.from,\n\t\t\tto: data.to,\n\t\t\tbody: data.body,\n\t\t\tmedia: [],\n\n\t\t\textra: {\n\t\t\t\treceived_at: data.received_at,\n\t\t\t},\n\t\t};\n\n\t\tif (!data.media) {\n\t\t\treturn returnData;\n\t\t}\n\n\t\tfor (let mediaIndex = 0; mediaIndex < data.media.length; mediaIndex++) {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data.media[mediaIndex];\n\t\t\tconst contentType = mime.lookup(new URL(data.media[mediaIndex]).pathname);\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType as string;\n\n\t\t\treturnData?.media?.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\tasync send(\n\t\tfromNumber: string,\n\t\ttoNumber: string,\n\t\tmessage: string,\n\t\textraData?: {\n\t\t\tfileUpload?: { size: number; type: string; publicFilePath: string };\n\t\t\tlocation?: { coordinates: [number, number] };\n\t\t\trid?: string;\n\t\t\tuserId?: string;\n\t\t},\n\t): Promise<void> {\n\t\tlet media;\n\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tif (extraData?.fileUpload) {\n\t\t\tconst {\n\t\t\t\trid,\n\t\t\t\tuserId,\n\t\t\t\tfileUpload: { size, type, publicFilePath },\n\t\t\t} = extraData;\n\t\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;\n\t\t\tconst lng = user?.language || defaultLanguage;\n\n\t\t\tlet reason;\n\t\t\tif (!this.fileUploadEnabled) {\n\t\t\t\treason = i18n.t('FileUpload_Disabled', { lng });\n\t\t\t} else if (size > MAX_FILE_SIZE) {\n\t\t\t\treason = i18n.t('File_exceeds_allowed_size_of_bytes', {\n\t\t\t\t\tsize: filesize(MAX_FILE_SIZE),\n\t\t\t\t\tlng,\n\t\t\t\t});\n\t\t\t} else if (!fileUploadIsValidContentType(type, this.mediaTypeWhiteList)) {\n\t\t\t\treason = i18n.t('File_type_is_not_accepted', { lng });\n\t\t\t}\n\n\t\t\tif (reason) {\n\t\t\t\trid && userId && (await notifyAgent(userId, rid, reason));\n\t\t\t\treturn SystemLogger.error(`(Voxtelesys) -> ${reason}`);\n\t\t\t}\n\n\t\t\tmedia = [publicFilePath];\n\t\t}\n\n\t\tconst options = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.authToken}`,\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tto: [toNumber],\n\t\t\t\tfrom: fromNumber,\n\t\t\t\tbody: message,\n\t\t\t\t...(media && { media }),\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t};\n\n\t\ttry {\n\t\t\tawait fetch(this.URL || 'https://smsapi.voxtelesys.net/api/v1/sms', options);\n\t\t} catch (err) {\n\t\t\tSystemLogger.error({ msg: 'Error connecting to Voxtelesys SMS API', err });\n\t\t}\n\t}\n\n\tresponse(): SMSProviderResponse {\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tsuccess: true,\n\t\t\t},\n\t\t};\n\t}\n\n\tvalidateRequest(_request: Request): boolean {\n\t\treturn true;\n\t}\n\n\terror(error: Error & { reason?: string }): SMSProviderResponse {\n\t\tlet message = '';\n\t\tif (error.reason) {\n\t\t\tmessage = error.reason;\n\t\t}\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tsuccess: false,\n\t\t\t\terror: message,\n\t\t\t},\n\t\t};\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/voxtelesys.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/omnichannel-integrations/providers/voxtelesys.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-integrations/providers/voxtelesys.ts","sourceRoot":"","sources":["server/services/omnichannel-integrations/providers/voxtelesys.ts"],"names":[],"mappings":"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","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { ISMSProvider, ServiceData, SMSProviderResponse } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport type { Request } from 'express';\nimport filesize from 'filesize';\n\nimport { settings } from '../../../../app/settings/server';\nimport { mime } from '../../../../app/utils/lib/mimeTypes';\nimport { fileUploadIsValidContentType } from '../../../../app/utils/server/restrictions';\nimport { i18n } from '../../../lib/i18n';\nimport { SystemLogger } from '../../../lib/logger/system';\n\ntype VoxtelesysData = {\n\tfrom: string;\n\tto: string;\n\tbody: string;\n\treceived_at: string;\n\tmedia: string[];\n};\n\nconst isVoxtelesysData = (data: unknown): data is VoxtelesysData => {\n\tif (typeof data !== 'object' || data === null) {\n\t\treturn false;\n\t}\n\n\tconst { from, to, body } = data as Record<string, unknown>;\n\n\treturn typeof from === 'string' && typeof to === 'string' && typeof body === 'string';\n};\n\nconst MAX_FILE_SIZE = 5242880;\n\nconst notifyAgent = (userId: string, rid: string, msg: string) =>\n\tvoid api.broadcast('notify.ephemeralMessage', userId, rid, {\n\t\tmsg,\n\t});\n\nexport class Voxtelesys implements ISMSProvider {\n\tauthToken: string;\n\n\tURL: string;\n\n\tfileUploadEnabled: string;\n\n\tmediaTypeWhiteList: string;\n\n\tconstructor() {\n\t\tthis.authToken = settings.get('SMS_Voxtelesys_authToken');\n\t\tthis.URL = settings.get('SMS_Voxtelesys_URL');\n\t\tthis.fileUploadEnabled = settings.get('SMS_Voxtelesys_FileUpload_Enabled');\n\t\tthis.mediaTypeWhiteList = settings.get('SMS_Voxtelesys_FileUpload_MediaTypeWhiteList');\n\t}\n\n\tparse(data: unknown): ServiceData {\n\t\tif (!isVoxtelesysData(data)) {\n\t\t\tthrow new Error('Invalid data');\n\t\t}\n\n\t\tconst returnData: ServiceData = {\n\t\t\tfrom: data.from,\n\t\t\tto: data.to,\n\t\t\tbody: data.body,\n\t\t\tmedia: [],\n\n\t\t\textra: {\n\t\t\t\treceived_at: data.received_at,\n\t\t\t},\n\t\t};\n\n\t\tif (!data.media) {\n\t\t\treturn returnData;\n\t\t}\n\n\t\tfor (let mediaIndex = 0; mediaIndex < data.media.length; mediaIndex++) {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data.media[mediaIndex];\n\t\t\tconst contentType = mime.lookup(new URL(data.media[mediaIndex]).pathname);\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType as string;\n\n\t\t\treturnData?.media?.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\tasync send(\n\t\tfromNumber: string,\n\t\ttoNumber: string,\n\t\tmessage: string,\n\t\textraData?: {\n\t\t\tfileUpload?: { size: number; type: string; publicFilePath: string };\n\t\t\tlocation?: { coordinates: [number, number] };\n\t\t\trid?: string;\n\t\t\tuserId?: string;\n\t\t},\n\t): Promise<void> {\n\t\tlet media;\n\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tif (extraData?.fileUpload) {\n\t\t\tconst {\n\t\t\t\trid,\n\t\t\t\tuserId,\n\t\t\t\tfileUpload: { size, type, publicFilePath },\n\t\t\t} = extraData;\n\t\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;\n\t\t\tconst lng = user?.language || defaultLanguage;\n\n\t\t\tlet reason;\n\t\t\tif (!this.fileUploadEnabled) {\n\t\t\t\treason = i18n.t('FileUpload_Disabled', { lng });\n\t\t\t} else if (size > MAX_FILE_SIZE) {\n\t\t\t\treason = i18n.t('File_exceeds_allowed_size_of_bytes', {\n\t\t\t\t\tsize: filesize(MAX_FILE_SIZE),\n\t\t\t\t\tlng,\n\t\t\t\t});\n\t\t\t} else if (!fileUploadIsValidContentType(type, this.mediaTypeWhiteList)) {\n\t\t\t\treason = i18n.t('File_type_is_not_accepted', { lng });\n\t\t\t}\n\n\t\t\tif (reason) {\n\t\t\t\trid && userId && (await notifyAgent(userId, rid, reason));\n\t\t\t\treturn SystemLogger.error(`(Voxtelesys) -> ${reason}`);\n\t\t\t}\n\n\t\t\tmedia = [publicFilePath];\n\t\t}\n\n\t\tconst options = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.authToken}`,\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tto: [toNumber],\n\t\t\t\tfrom: fromNumber,\n\t\t\t\tbody: message,\n\t\t\t\t...(media && { media }),\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t};\n\n\t\ttry {\n\t\t\tawait fetch(this.URL || 'https://smsapi.voxtelesys.net/api/v1/sms', options);\n\t\t} catch (err) {\n\t\t\tSystemLogger.error({ msg: 'Error connecting to Voxtelesys SMS API', err });\n\t\t}\n\t}\n\n\tresponse(): SMSProviderResponse {\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tsuccess: true,\n\t\t\t},\n\t\t};\n\t}\n\n\tvalidateRequest(_request: Request): boolean {\n\t\treturn true;\n\t}\n\n\terror(error: Error & { reason?: string }): SMSProviderResponse {\n\t\tlet message = '';\n\t\tif (error.reason) {\n\t\t\tmessage = error.reason;\n\t\t}\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tsuccess: false,\n\t\t\t\terror: message,\n\t\t\t},\n\t\t};\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      Voxtelesys: () => Voxtelesys\n    });\n    let api;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      }\n    }, 0);\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 2);\n    let filesize;\n    module.link(\"filesize\", {\n      default(v) {\n        filesize = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    let mime;\n    module.link(\"../../../../app/utils/lib/mimeTypes\", {\n      mime(v) {\n        mime = v;\n      }\n    }, 5);\n    let fileUploadIsValidContentType;\n    module.link(\"../../../../app/utils/server/restrictions\", {\n      fileUploadIsValidContentType(v) {\n        fileUploadIsValidContentType = v;\n      }\n    }, 6);\n    let i18n;\n    module.link(\"../../../lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 7);\n    let SystemLogger;\n    module.link(\"../../../lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 8);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const isVoxtelesysData = data => {\n      if (typeof data !== 'object' || data === null) {\n        return false;\n      }\n      const {\n        from,\n        to,\n        body\n      } = data;\n      return typeof from === 'string' && typeof to === 'string' && typeof body === 'string';\n    };\n    const MAX_FILE_SIZE = 5242880;\n    const notifyAgent = (userId, rid, msg) => void api.broadcast('notify.ephemeralMessage', userId, rid, {\n      msg\n    });\n    class Voxtelesys {\n      constructor() {\n        this.authToken = void 0;\n        this.URL = void 0;\n        this.fileUploadEnabled = void 0;\n        this.mediaTypeWhiteList = void 0;\n        this.authToken = settings.get('SMS_Voxtelesys_authToken');\n        this.URL = settings.get('SMS_Voxtelesys_URL');\n        this.fileUploadEnabled = settings.get('SMS_Voxtelesys_FileUpload_Enabled');\n        this.mediaTypeWhiteList = settings.get('SMS_Voxtelesys_FileUpload_MediaTypeWhiteList');\n      }\n      parse(data) {\n        if (!isVoxtelesysData(data)) {\n          throw new Error('Invalid data');\n        }\n        const returnData = {\n          from: data.from,\n          to: data.to,\n          body: data.body,\n          media: [],\n          extra: {\n            received_at: data.received_at\n          }\n        };\n        if (!data.media) {\n          return returnData;\n        }\n        for (let mediaIndex = 0; mediaIndex < data.media.length; mediaIndex++) {\n          var _returnData$media;\n          const media = {\n            url: '',\n            contentType: ''\n          };\n          const mediaUrl = data.media[mediaIndex];\n          const contentType = mime.lookup(new URL(data.media[mediaIndex]).pathname);\n          media.url = mediaUrl;\n          media.contentType = contentType;\n          returnData === null || returnData === void 0 ? void 0 : (_returnData$media = returnData.media) === null || _returnData$media === void 0 ? void 0 : _returnData$media.push(media);\n        }\n        return returnData;\n      }\n      async send(fromNumber, toNumber, message, extraData) {\n        let media;\n        const defaultLanguage = settings.get('Language') || 'en';\n        if (extraData !== null && extraData !== void 0 && extraData.fileUpload) {\n          const {\n            rid,\n            userId,\n            fileUpload: {\n              size,\n              type,\n              publicFilePath\n            }\n          } = extraData;\n          const user = userId ? await Users.findOne({\n            _id: userId\n          }, {\n            projection: {\n              language: 1\n            }\n          }) : null;\n          const lng = (user === null || user === void 0 ? void 0 : user.language) || defaultLanguage;\n          let reason;\n          if (!this.fileUploadEnabled) {\n            reason = i18n.t('FileUpload_Disabled', {\n              lng\n            });\n          } else if (size > MAX_FILE_SIZE) {\n            reason = i18n.t('File_exceeds_allowed_size_of_bytes', {\n              size: filesize(MAX_FILE_SIZE),\n              lng\n            });\n          } else if (!fileUploadIsValidContentType(type, this.mediaTypeWhiteList)) {\n            reason = i18n.t('File_type_is_not_accepted', {\n              lng\n            });\n          }\n          if (reason) {\n            rid && userId && (await notifyAgent(userId, rid, reason));\n            return SystemLogger.error(\"(Voxtelesys) -> \".concat(reason));\n          }\n          media = [publicFilePath];\n        }\n        const options = {\n          headers: {\n            Authorization: \"Bearer \".concat(this.authToken)\n          },\n          body: _objectSpread({\n            to: [toNumber],\n            from: fromNumber,\n            body: message\n          }, media && {\n            media\n          }),\n          method: 'POST'\n        };\n        try {\n          await fetch(this.URL || 'https://smsapi.voxtelesys.net/api/v1/sms', options);\n        } catch (err) {\n          SystemLogger.error({\n            msg: 'Error connecting to Voxtelesys SMS API',\n            err\n          });\n        }\n      }\n      response() {\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: {\n            success: true\n          }\n        };\n      }\n      validateRequest(_request) {\n        return true;\n      }\n      error(error) {\n        let message = '';\n        if (error.reason) {\n          message = error.reason;\n        }\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: {\n            success: false,\n            error: message\n          }\n        };\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","Voxtelesys","api","Users","fetch","serverFetch","filesize","settings","mime","fileUploadIsValidContentType","i18n","SystemLogger","__reifyWaitForDeps__","isVoxtelesysData","data","from","to","body","MAX_FILE_SIZE","notifyAgent","userId","rid","msg","broadcast","constructor","authToken","URL","fileUploadEnabled","mediaTypeWhiteList","get","parse","Error","returnData","media","extra","received_at","mediaIndex","length","_returnData$media","url","contentType","mediaUrl","lookup","pathname","push","send","fromNumber","toNumber","message","extraData","defaultLanguage","fileUpload","size","type","publicFilePath","user","findOne","_id","projection","language","lng","reason","t","error","concat","options","headers","Authorization","method","err","response","success","validateRequest","_request","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/omnichannel-integrations/providers/voxtelesys.ts"],"sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { ISMSProvider, ServiceData, SMSProviderResponse } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport type { Request } from 'express';\nimport filesize from 'filesize';\n\nimport { settings } from '../../../../app/settings/server';\nimport { mime } from '../../../../app/utils/lib/mimeTypes';\nimport { fileUploadIsValidContentType } from '../../../../app/utils/server/restrictions';\nimport { i18n } from '../../../lib/i18n';\nimport { SystemLogger } from '../../../lib/logger/system';\n\ntype VoxtelesysData = {\n\tfrom: string;\n\tto: string;\n\tbody: string;\n\treceived_at: string;\n\tmedia: string[];\n};\n\nconst isVoxtelesysData = (data: unknown): data is VoxtelesysData => {\n\tif (typeof data !== 'object' || data === null) {\n\t\treturn false;\n\t}\n\n\tconst { from, to, body } = data as Record<string, unknown>;\n\n\treturn typeof from === 'string' && typeof to === 'string' && typeof body === 'string';\n};\n\nconst MAX_FILE_SIZE = 5242880;\n\nconst notifyAgent = (userId: string, rid: string, msg: string) =>\n\tvoid api.broadcast('notify.ephemeralMessage', userId, rid, {\n\t\tmsg,\n\t});\n\nexport class Voxtelesys implements ISMSProvider {\n\tauthToken: string;\n\n\tURL: string;\n\n\tfileUploadEnabled: string;\n\n\tmediaTypeWhiteList: string;\n\n\tconstructor() {\n\t\tthis.authToken = settings.get('SMS_Voxtelesys_authToken');\n\t\tthis.URL = settings.get('SMS_Voxtelesys_URL');\n\t\tthis.fileUploadEnabled = settings.get('SMS_Voxtelesys_FileUpload_Enabled');\n\t\tthis.mediaTypeWhiteList = settings.get('SMS_Voxtelesys_FileUpload_MediaTypeWhiteList');\n\t}\n\n\tparse(data: unknown): ServiceData {\n\t\tif (!isVoxtelesysData(data)) {\n\t\t\tthrow new Error('Invalid data');\n\t\t}\n\n\t\tconst returnData: ServiceData = {\n\t\t\tfrom: data.from,\n\t\t\tto: data.to,\n\t\t\tbody: data.body,\n\t\t\tmedia: [],\n\n\t\t\textra: {\n\t\t\t\treceived_at: data.received_at,\n\t\t\t},\n\t\t};\n\n\t\tif (!data.media) {\n\t\t\treturn returnData;\n\t\t}\n\n\t\tfor (let mediaIndex = 0; mediaIndex < data.media.length; mediaIndex++) {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data.media[mediaIndex];\n\t\t\tconst contentType = mime.lookup(new URL(data.media[mediaIndex]).pathname);\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType as string;\n\n\t\t\treturnData?.media?.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\tasync send(\n\t\tfromNumber: string,\n\t\ttoNumber: string,\n\t\tmessage: string,\n\t\textraData?: {\n\t\t\tfileUpload?: { size: number; type: string; publicFilePath: string };\n\t\t\tlocation?: { coordinates: [number, number] };\n\t\t\trid?: string;\n\t\t\tuserId?: string;\n\t\t},\n\t): Promise<void> {\n\t\tlet media;\n\t\tconst defaultLanguage = settings.get<string>('Language') || 'en';\n\t\tif (extraData?.fileUpload) {\n\t\t\tconst {\n\t\t\t\trid,\n\t\t\t\tuserId,\n\t\t\t\tfileUpload: { size, type, publicFilePath },\n\t\t\t} = extraData;\n\t\t\tconst user = userId ? await Users.findOne({ _id: userId }, { projection: { language: 1 } }) : null;\n\t\t\tconst lng = user?.language || defaultLanguage;\n\n\t\t\tlet reason;\n\t\t\tif (!this.fileUploadEnabled) {\n\t\t\t\treason = i18n.t('FileUpload_Disabled', { lng });\n\t\t\t} else if (size > MAX_FILE_SIZE) {\n\t\t\t\treason = i18n.t('File_exceeds_allowed_size_of_bytes', {\n\t\t\t\t\tsize: filesize(MAX_FILE_SIZE),\n\t\t\t\t\tlng,\n\t\t\t\t});\n\t\t\t} else if (!fileUploadIsValidContentType(type, this.mediaTypeWhiteList)) {\n\t\t\t\treason = i18n.t('File_type_is_not_accepted', { lng });\n\t\t\t}\n\n\t\t\tif (reason) {\n\t\t\t\trid && userId && (await notifyAgent(userId, rid, reason));\n\t\t\t\treturn SystemLogger.error(`(Voxtelesys) -> ${reason}`);\n\t\t\t}\n\n\t\t\tmedia = [publicFilePath];\n\t\t}\n\n\t\tconst options = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.authToken}`,\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tto: [toNumber],\n\t\t\t\tfrom: fromNumber,\n\t\t\t\tbody: message,\n\t\t\t\t...(media && { media }),\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t};\n\n\t\ttry {\n\t\t\tawait fetch(this.URL || 'https://smsapi.voxtelesys.net/api/v1/sms', options);\n\t\t} catch (err) {\n\t\t\tSystemLogger.error({ msg: 'Error connecting to Voxtelesys SMS API', err });\n\t\t}\n\t}\n\n\tresponse(): SMSProviderResponse {\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tsuccess: true,\n\t\t\t},\n\t\t};\n\t}\n\n\tvalidateRequest(_request: Request): boolean {\n\t\treturn true;\n\t}\n\n\terror(error: Error & { reason?: string }): SMSProviderResponse {\n\t\tlet message = '';\n\t\tif (error.reason) {\n\t\t\tmessage = error.reason;\n\t\t}\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tsuccess: false,\n\t\t\t\terror: message,\n\t\t\t},\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"c7b6b3299a98619c63e862c22bf619d7454c3573"}
