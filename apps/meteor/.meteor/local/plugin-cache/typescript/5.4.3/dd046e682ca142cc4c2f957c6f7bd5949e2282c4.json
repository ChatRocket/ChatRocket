{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/rooms.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/bridges/rooms.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/rooms.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/rooms.ts","sourceRoot":"","sources":["app/apps/server/bridges/rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { IMessage, IMessageRaw } from '@rocket.chat/apps-engine/definition/messages';\nimport type { IRoom } from '@rocket.chat/apps-engine/definition/rooms';\nimport { RoomType } from '@rocket.chat/apps-engine/definition/rooms';\nimport type { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport type { GetMessagesOptions } from '@rocket.chat/apps-engine/server/bridges/RoomBridge';\nimport { RoomBridge } from '@rocket.chat/apps-engine/server/bridges/RoomBridge';\nimport type { ISubscription, IUser as ICoreUser, IRoom as ICoreRoom, IMessage as ICoreMessage } from '@rocket.chat/core-typings';\nimport { Subscriptions, Users, Rooms, Messages } from '@rocket.chat/models';\nimport type { FindOptions, Sort } from 'mongodb';\n\nimport { createDirectMessage } from '../../../../server/methods/createDirectMessage';\nimport { createDiscussion } from '../../../discussion/server/methods/createDiscussion';\nimport { addUserToRoom } from '../../../lib/server/functions/addUserToRoom';\nimport { deleteRoom } from '../../../lib/server/functions/deleteRoom';\nimport { removeUserFromRoom } from '../../../lib/server/functions/removeUserFromRoom';\nimport { createChannelMethod } from '../../../lib/server/methods/createChannel';\nimport { createPrivateGroupMethod } from '../../../lib/server/methods/createPrivateGroup';\n\nexport class AppRoomBridge extends RoomBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async create(room: IRoom, members: Array<string>, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new room.`, room);\n\n\t\tconst rcRoom = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tswitch (room.type) {\n\t\t\tcase RoomType.CHANNEL:\n\t\t\t\treturn this.createChannel(room.creator.id, rcRoom, members);\n\t\t\tcase RoomType.PRIVATE_GROUP:\n\t\t\t\treturn this.createPrivateGroup(room.creator.id, rcRoom, members);\n\t\t\tcase RoomType.DIRECT_MESSAGE:\n\t\t\t\treturn this.createDirectMessage(room.creator.id, members);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Only channels, private groups and direct messages can be created.');\n\t\t}\n\t}\n\n\tprivate prepareExtraData(room: Record<string, any>): Record<string, unknown> {\n\t\tconst extraData = Object.assign({}, room);\n\t\tdelete extraData.name;\n\t\tdelete extraData.t;\n\t\tdelete extraData.ro;\n\t\tdelete extraData.customFields;\n\n\t\treturn extraData;\n\t}\n\n\tprivate async createChannel(userId: string, room: ICoreRoom, members: string[]): Promise<string> {\n\t\treturn (await createChannelMethod(userId, room.name || '', members, room.ro, room.customFields, this.prepareExtraData(room))).rid;\n\t}\n\n\tprivate async createDirectMessage(userId: string, members: string[]): Promise<string> {\n\t\treturn (await createDirectMessage(members, userId)).rid;\n\t}\n\n\tprivate async createPrivateGroup(userId: string, room: ICoreRoom, members: string[]): Promise<string> {\n\t\tconst user = await Users.findOneById(userId);\n\t\tif (!user) {\n\t\t\tthrow new Error('Invalid user');\n\t\t}\n\t\treturn (await createPrivateGroupMethod(user, room.name || '', members, room.ro, room.customFields, this.prepareExtraData(room))).rid;\n\t}\n\n\tprotected async getById(roomId: string, appId: string): Promise<IRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the roomById: \"${roomId}\"`);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst promise: Promise<IRoom | undefined> = this.orch.getConverters()?.get('rooms').convertById(roomId);\n\t\treturn promise as Promise<IRoom>;\n\t}\n\n\tprotected async getByName(roomName: string, appId: string): Promise<IRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the roomByName: \"${roomName}\"`);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst promise: Promise<IRoom | undefined> = this.orch.getConverters()?.get('rooms').convertByName(roomName);\n\t\treturn promise as Promise<IRoom>;\n\t}\n\n\tprotected async getCreatorById(roomId: string, appId: string): Promise<IUser | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's creator by id: \"${roomId}\"`);\n\n\t\tconst room = await Rooms.findOneById(roomId);\n\n\t\tif (!room?.u?._id) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('users').convertById(room.u._id);\n\t}\n\n\tprotected async getCreatorByName(roomName: string, appId: string): Promise<IUser | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's creator by name: \"${roomName}\"`);\n\n\t\tconst room = await Rooms.findOneByName(roomName, {});\n\n\t\tif (!room?.u?._id) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('users').convertById(room.u._id);\n\t}\n\n\tprotected async getMessages(roomId: string, options: GetMessagesOptions, appId: string): Promise<IMessageRaw[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the messages of the room: \"${roomId}\" with options:`, options);\n\n\t\tconst { limit, skip = 0, sort: _sort } = options;\n\n\t\tconst messageConverter = this.orch.getConverters()?.get('messages');\n\t\tif (!messageConverter) {\n\t\t\tthrow new Error('Message converter not found');\n\t\t}\n\n\t\t// We support only one field for now\n\t\tconst sort: Sort | undefined = _sort?.createdAt ? { ts: _sort.createdAt } : undefined;\n\n\t\tconst messageQueryOptions: FindOptions<ICoreMessage> = {\n\t\t\tlimit,\n\t\t\tskip,\n\t\t\tsort,\n\t\t};\n\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\t_hidden: { $ne: true },\n\t\t\tt: { $exists: false },\n\t\t};\n\n\t\tconst cursor = Messages.find(query, messageQueryOptions);\n\n\t\tconst messagePromises: Promise<IMessageRaw>[] = await cursor.map((message) => messageConverter.convertMessageRaw(message)).toArray();\n\n\t\treturn Promise.all(messagePromises);\n\t}\n\n\tprotected async getMembers(roomId: string, appId: string): Promise<Array<IUser>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's members by room id: \"${roomId}\"`);\n\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId, {});\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst promises: Promise<(IUser | undefined)[]> = Promise.all(\n\t\t\t(await subscriptions.toArray()).map((sub: ISubscription) => this.orch.getConverters()?.get('users').convertById(sub.u?._id)),\n\t\t);\n\n\t\treturn promises as Promise<IUser[]>;\n\t}\n\n\tprotected async getDirectByUsernames(usernames: Array<string>, appId: string): Promise<IRoom | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting direct room by usernames: \"${usernames}\"`);\n\t\tconst room = await Rooms.findDirectRoomContainingAllUsernames(usernames, {});\n\t\tif (!room) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.orch.getConverters()?.get('rooms').convertRoom(room);\n\t}\n\n\tprotected async update(room: IRoom, members: Array<string> = [], appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a room.`);\n\n\t\tif (!room.id || !(await Rooms.findOneById(room.id))) {\n\t\t\tthrow new Error('A room must exist to update.');\n\t\t}\n\n\t\tconst rm = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tawait Rooms.updateOne({ _id: rm._id }, { $set: rm as Partial<ICoreRoom> });\n\n\t\tfor await (const username of members) {\n\t\t\tconst member = await Users.findOneByUsername(username, {});\n\n\t\t\tif (!member) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait addUserToRoom(rm._id, member);\n\t\t}\n\t}\n\n\tprotected async delete(roomId: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is deleting a room.`);\n\t\tawait deleteRoom(roomId);\n\t}\n\n\tprotected async createDiscussion(\n\t\troom: IRoom,\n\t\tparentMessage: IMessage | undefined = undefined,\n\t\treply: string | undefined = '',\n\t\tmembers: Array<string> = [],\n\t\tappId: string,\n\t): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new discussion.`, room);\n\n\t\tconst rcRoom = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tlet rcMessage;\n\t\tif (parentMessage) {\n\t\t\trcMessage = await this.orch.getConverters()?.get('messages').convertAppMessage(parentMessage);\n\t\t}\n\n\t\tif (!rcRoom.prid || !(await Rooms.findOneById(rcRoom.prid))) {\n\t\t\tthrow new Error('There must be a parent room to create a discussion.');\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst discussion = {\n\t\t\tprid: rcRoom.prid,\n\t\t\tt_name: rcRoom.fname as string,\n\t\t\tpmid: rcMessage ? rcMessage._id : undefined,\n\t\t\treply: reply && reply.trim() !== '' ? reply : undefined,\n\t\t\tusers: members.length > 0 ? members : [],\n\t\t};\n\n\t\tconst { rid } = await createDiscussion(room.creator.id, discussion);\n\n\t\treturn rid;\n\t}\n\n\tprotected getModerators(roomId: string, appId: string): Promise<IUser[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting room moderators for room id: ${roomId}`);\n\t\treturn this.getUsersByRoomIdAndSubscriptionRole(roomId, 'moderator');\n\t}\n\n\tprotected getOwners(roomId: string, appId: string): Promise<IUser[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting room owners for room id: ${roomId}`);\n\t\treturn this.getUsersByRoomIdAndSubscriptionRole(roomId, 'owner');\n\t}\n\n\tprotected getLeaders(roomId: string, appId: string): Promise<IUser[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting room leaders for room id: ${roomId}`);\n\t\treturn this.getUsersByRoomIdAndSubscriptionRole(roomId, 'leader');\n\t}\n\n\tprivate async getUsersByRoomIdAndSubscriptionRole(roomId: string, role: string): Promise<IUser[]> {\n\t\tconst subs = (await Subscriptions.findByRoomIdAndRoles(roomId, [role], {\n\t\t\tprojection: { uid: '$u._id', _id: 0 },\n\t\t}).toArray()) as unknown as {\n\t\t\tuid: string;\n\t\t}[];\n\t\t// Was this a bug?\n\t\tconst users = await Users.findByIds(subs.map((user: { uid: string }) => user.uid)).toArray();\n\t\tconst userConverter = this.orch.getConverters().get('users');\n\t\treturn users.map((user: ICoreUser) => userConverter.convertToApp(user));\n\t}\n\n\tprotected async getUnreadByUser(roomId: string, uid: string, options: GetMessagesOptions, appId: string): Promise<Array<IMessageRaw>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the unread messages for the user: \"${uid}\" in the room: \"${roomId}\"`);\n\n\t\tconst messageConverter = this.orch.getConverters()?.get('messages');\n\t\tif (!messageConverter) {\n\t\t\tthrow new Error('Message converter not found');\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, uid, { projection: { ls: 1 } });\n\n\t\tif (!subscription) {\n\t\t\tconst errorMessage = `No subscription found for user with ID \"${uid}\" in room with ID \"${roomId}\". This means the user is not subscribed to the room.`;\n\t\t\tthis.orch.debugLog(errorMessage);\n\t\t\tthrow new Error('User not subscribed to room');\n\t\t}\n\n\t\tconst lastSeen = subscription?.ls;\n\t\tif (!lastSeen) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst sort: Sort = options.sort?.createdAt ? { ts: options.sort.createdAt } : { ts: 1 };\n\n\t\tconst cursor = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, lastSeen, new Date(), [], {\n\t\t\t...options,\n\t\t\tsort,\n\t\t});\n\n\t\tconst messages = await cursor.toArray();\n\t\treturn Promise.all(messages.map((msg) => messageConverter.convertMessageRaw(msg)));\n\t}\n\n\tprotected async getUserUnreadMessageCount(roomId: string, uid: string, appId: string): Promise<number> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the unread messages count of the room: \"${roomId}\" for the user: \"${uid}\"`);\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, uid, { projection: { ls: 1 } });\n\n\t\tif (!subscription) {\n\t\t\tconst errorMessage = `No subscription found for user with ID \"${uid}\" in room with ID \"${roomId}\". This means the user is not subscribed to the room.`;\n\t\t\tthis.orch.debugLog(errorMessage);\n\t\t\tthrow new Error('User not subscribed to room');\n\t\t}\n\n\t\tconst lastSeen = subscription?.ls;\n\t\tif (!lastSeen) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, lastSeen, new Date(), []);\n\t}\n\n\tprotected async removeUsers(roomId: string, usernames: Array<string>, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing users ${usernames} from room id: ${roomId}`);\n\t\tif (!roomId) {\n\t\t\tthrow new Error('roomId was not provided.');\n\t\t}\n\n\t\tconst members = await Users.findUsersByUsernames(usernames, { limit: 50 }).toArray();\n\t\tawait Promise.all(members.map((user) => removeUserFromRoom(roomId, user)));\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/rooms.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/bridges/rooms.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/rooms.ts","sourceRoot":"","sources":["app/apps/server/bridges/rooms.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,QAAQ,EAAE,MAAM,2CAA2C,CAAC;AAGrE,OAAO,EAAE,UAAU,EAAE,MAAM,oDAAoD,CAAC;AAEhF,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAG5E,OAAO,EAAE,mBAAmB,EAAE,MAAM,gDAAgD,CAAC;AACrF,OAAO,EAAE,gBAAgB,EAAE,MAAM,qDAAqD,CAAC;AACvF,OAAO,EAAE,aAAa,EAAE,MAAM,6CAA6C,CAAC;AAC5E,OAAO,EAAE,UAAU,EAAE,MAAM,0CAA0C,CAAC;AACtE,OAAO,EAAE,kBAAkB,EAAE,MAAM,kDAAkD,CAAC;AACtF,OAAO,EAAE,mBAAmB,EAAE,MAAM,2CAA2C,CAAC;AAChF,OAAO,EAAE,wBAAwB,EAAE,MAAM,gDAAgD,CAAC;AAE1F,MAAM,OAAO,aAAc,SAAQ,UAAU;IACf;IAA7B,YAA6B,IAA4B;QACxD,KAAK,EAAE,CAAC;QADoB,SAAI,GAAJ,IAAI,CAAwB;IAEzD,CAAC;IAES,KAAK,CAAC,MAAM,CAAC,IAAW,EAAE,OAAsB,EAAE,KAAa;QACxE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,0BAA0B,EAAE,IAAI,CAAC,CAAC;QAErE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAElF,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;YACnB,KAAK,QAAQ,CAAC,OAAO;gBACpB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAC7D,KAAK,QAAQ,CAAC,aAAa;gBAC1B,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAClE,KAAK,QAAQ,CAAC,cAAc;gBAC3B,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAC3D;gBACC,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;QACvF,CAAC;IACF,CAAC;IAEO,gBAAgB,CAAC,IAAyB;QACjD,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1C,OAAO,SAAS,CAAC,IAAI,CAAC;QACtB,OAAO,SAAS,CAAC,CAAC,CAAC;QACnB,OAAO,SAAS,CAAC,EAAE,CAAC;QACpB,OAAO,SAAS,CAAC,YAAY,CAAC;QAE9B,OAAO,SAAS,CAAC;IAClB,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,MAAc,EAAE,IAAe,EAAE,OAAiB;QAC7E,OAAO,CAAC,MAAM,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACnI,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,MAAc,EAAE,OAAiB;QAClE,OAAO,CAAC,MAAM,mBAAmB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;IACzD,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,MAAc,EAAE,IAAe,EAAE,OAAiB;QAClF,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QACjC,CAAC;QACD,OAAO,CAAC,MAAM,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACtI,CAAC;IAES,KAAK,CAAC,OAAO,CAAC,MAAc,EAAE,KAAa;QACpD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,8BAA8B,MAAM,GAAG,CAAC,CAAC;QAE5E,kIAAkI;QAClI,MAAM,OAAO,GAA+B,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACxG,OAAO,OAAyB,CAAC;IAClC,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,QAAgB,EAAE,KAAa;QACxD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,gCAAgC,QAAQ,GAAG,CAAC,CAAC;QAEhF,kIAAkI;QAClI,MAAM,OAAO,GAA+B,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5G,OAAO,OAAyB,CAAC;IAClC,CAAC;IAES,KAAK,CAAC,cAAc,CAAC,MAAc,EAAE,KAAa;QAC3D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,0CAA0C,MAAM,GAAG,CAAC,CAAC;QAExF,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAE7C,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;YACnB,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxE,CAAC;IAES,KAAK,CAAC,gBAAgB,CAAC,QAAgB,EAAE,KAAa;QAC/D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,4CAA4C,QAAQ,GAAG,CAAC,CAAC;QAE5F,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAErD,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;YACnB,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxE,CAAC;IAES,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,OAA2B,EAAE,KAAa;QACrF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,0CAA0C,MAAM,iBAAiB,EAAE,OAAO,CAAC,CAAC;QAE/G,MAAM,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC;QAEjD,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAChD,CAAC;QAED,oCAAoC;QACpC,MAAM,IAAI,GAAqB,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QAEtF,MAAM,mBAAmB,GAA8B;YACtD,KAAK;YACL,IAAI;YACJ,IAAI;SACJ,CAAC;QAEF,MAAM,KAAK,GAAG;YACb,GAAG,EAAE,MAAM;YACX,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;YACtB,CAAC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;SACrB,CAAC;QAEF,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC;QAEzD,MAAM,eAAe,GAA2B,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAErI,OAAO,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACrC,CAAC;IAES,KAAK,CAAC,UAAU,CAAC,MAAc,EAAE,KAAa;QACvD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,+CAA+C,MAAM,GAAG,CAAC,CAAC;QAC7F,MAAM,aAAa,GAAG,MAAM,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QACnE,kIAAkI;QAClI,MAAM,QAAQ,GAAmC,OAAO,CAAC,GAAG,CAC3D,CAAC,MAAM,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAkB,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAC5H,CAAC;QAEF,OAAO,QAA4B,CAAC;IACrC,CAAC;IAES,KAAK,CAAC,oBAAoB,CAAC,SAAwB,EAAE,KAAa;QAC3E,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,0CAA0C,SAAS,GAAG,CAAC,CAAC;QAC3F,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,oCAAoC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAC7E,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,SAAS,CAAC;QAClB,CAAC;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAClE,CAAC;IAES,KAAK,CAAC,MAAM,CAAC,IAAW,EAAE,UAAyB,EAAE,EAAE,KAAa;QAC7E,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,sBAAsB,CAAC,CAAC;QAE3D,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;YACrD,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;QACjD,CAAC;QAED,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAE9E,MAAM,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAwB,EAAE,CAAC,CAAC;QAE3E,IAAI,KAAK,EAAE,MAAM,QAAQ,IAAI,OAAO,EAAE,CAAC;YACtC,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,iBAAiB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAE3D,IAAI,CAAC,MAAM,EAAE,CAAC;gBACb,SAAS;YACV,CAAC;YAED,MAAM,aAAa,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QACrC,CAAC;IACF,CAAC;IAES,KAAK,CAAC,MAAM,CAAC,MAAc,EAAE,KAAa;QACnD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,sBAAsB,CAAC,CAAC;QAC3D,MAAM,UAAU,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAES,KAAK,CAAC,gBAAgB,CAC/B,IAAW,EACX,gBAAsC,SAAS,EAC/C,QAA4B,EAAE,EAC9B,UAAyB,EAAE,EAC3B,KAAa;QAEb,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,gCAAgC,EAAE,IAAI,CAAC,CAAC;QAE3E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAElF,IAAI,SAAS,CAAC;QACd,IAAI,aAAa,EAAE,CAAC;YACnB,SAAS,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;QAC/F,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;YAC7D,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;QACxE,CAAC;QAED,kIAAkI;QAClI,MAAM,UAAU,GAAG;YAClB,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,MAAM,EAAE,MAAM,CAAC,KAAe;YAC9B,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS;YAC3C,KAAK,EAAE,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;YACvD,KAAK,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;SACxC,CAAC;QAEF,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;QAEpE,OAAO,GAAG,CAAC;IACZ,CAAC;IAES,aAAa,CAAC,MAAc,EAAE,KAAa;QACpD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,4CAA4C,MAAM,EAAE,CAAC,CAAC;QACzF,OAAO,IAAI,CAAC,mCAAmC,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IACtE,CAAC;IAES,SAAS,CAAC,MAAc,EAAE,KAAa;QAChD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,wCAAwC,MAAM,EAAE,CAAC,CAAC;QACrF,OAAO,IAAI,CAAC,mCAAmC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAClE,CAAC;IAES,UAAU,CAAC,MAAc,EAAE,KAAa;QACjD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,yCAAyC,MAAM,EAAE,CAAC,CAAC;QACtF,OAAO,IAAI,CAAC,mCAAmC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACnE,CAAC;IAEO,KAAK,CAAC,mCAAmC,CAAC,MAAc,EAAE,IAAY;QAC7E,MAAM,IAAI,GAAG,CAAC,MAAM,aAAa,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACtE,UAAU,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE;SACrC,CAAC,CAAC,OAAO,EAAE,CAET,CAAC;QACJ,kBAAkB;QAClB,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAqB,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAC7F,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC7D,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAe,EAAE,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACzE,CAAC;IAES,KAAK,CAAC,eAAe,CAAC,MAAc,EAAE,GAAW,EAAE,OAA2B,EAAE,KAAa;QACtG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,kDAAkD,GAAG,mBAAmB,MAAM,GAAG,CAAC,CAAC;QAEtH,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC;QACpE,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAChD,CAAC;QAED,MAAM,YAAY,GAAG,MAAM,aAAa,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAE1G,IAAI,CAAC,YAAY,EAAE,CAAC;YACnB,MAAM,YAAY,GAAG,2CAA2C,GAAG,sBAAsB,MAAM,uDAAuD,CAAC;YACvJ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAChD,CAAC;QAED,MAAM,QAAQ,GAAG,YAAY,EAAE,EAAE,CAAC;QAClC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACf,OAAO,EAAE,CAAC;QACX,CAAC;QAED,MAAM,IAAI,GAAS,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;QAExF,MAAM,MAAM,GAAG,QAAQ,CAAC,sDAAsD,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE;YAChH,GAAG,OAAO;YACV,IAAI;SACJ,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;QACxC,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC;IAES,KAAK,CAAC,yBAAyB,CAAC,MAAc,EAAE,GAAW,EAAE,KAAa;QACnF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,uDAAuD,MAAM,oBAAoB,GAAG,GAAG,CAAC,CAAC;QAE5H,MAAM,YAAY,GAAG,MAAM,aAAa,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAE1G,IAAI,CAAC,YAAY,EAAE,CAAC;YACnB,MAAM,YAAY,GAAG,2CAA2C,GAAG,sBAAsB,MAAM,uDAAuD,CAAC;YACvJ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAChD,CAAC;QAED,MAAM,QAAQ,GAAG,YAAY,EAAE,EAAE,CAAC;QAClC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACf,OAAO,CAAC,CAAC;QACV,CAAC;QAED,OAAO,QAAQ,CAAC,uDAAuD,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3G,CAAC;IAES,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,SAAwB,EAAE,KAAa;QAClF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,sBAAsB,SAAS,kBAAkB,MAAM,EAAE,CAAC,CAAC;QAC9F,IAAI,CAAC,MAAM,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC7C,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,oBAAoB,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACrF,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC;CACD","sourcesContent":["import type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { IMessage, IMessageRaw } from '@rocket.chat/apps-engine/definition/messages';\nimport type { IRoom } from '@rocket.chat/apps-engine/definition/rooms';\nimport { RoomType } from '@rocket.chat/apps-engine/definition/rooms';\nimport type { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport type { GetMessagesOptions } from '@rocket.chat/apps-engine/server/bridges/RoomBridge';\nimport { RoomBridge } from '@rocket.chat/apps-engine/server/bridges/RoomBridge';\nimport type { ISubscription, IUser as ICoreUser, IRoom as ICoreRoom, IMessage as ICoreMessage } from '@rocket.chat/core-typings';\nimport { Subscriptions, Users, Rooms, Messages } from '@rocket.chat/models';\nimport type { FindOptions, Sort } from 'mongodb';\n\nimport { createDirectMessage } from '../../../../server/methods/createDirectMessage';\nimport { createDiscussion } from '../../../discussion/server/methods/createDiscussion';\nimport { addUserToRoom } from '../../../lib/server/functions/addUserToRoom';\nimport { deleteRoom } from '../../../lib/server/functions/deleteRoom';\nimport { removeUserFromRoom } from '../../../lib/server/functions/removeUserFromRoom';\nimport { createChannelMethod } from '../../../lib/server/methods/createChannel';\nimport { createPrivateGroupMethod } from '../../../lib/server/methods/createPrivateGroup';\n\nexport class AppRoomBridge extends RoomBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async create(room: IRoom, members: Array<string>, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new room.`, room);\n\n\t\tconst rcRoom = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tswitch (room.type) {\n\t\t\tcase RoomType.CHANNEL:\n\t\t\t\treturn this.createChannel(room.creator.id, rcRoom, members);\n\t\t\tcase RoomType.PRIVATE_GROUP:\n\t\t\t\treturn this.createPrivateGroup(room.creator.id, rcRoom, members);\n\t\t\tcase RoomType.DIRECT_MESSAGE:\n\t\t\t\treturn this.createDirectMessage(room.creator.id, members);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Only channels, private groups and direct messages can be created.');\n\t\t}\n\t}\n\n\tprivate prepareExtraData(room: Record<string, any>): Record<string, unknown> {\n\t\tconst extraData = Object.assign({}, room);\n\t\tdelete extraData.name;\n\t\tdelete extraData.t;\n\t\tdelete extraData.ro;\n\t\tdelete extraData.customFields;\n\n\t\treturn extraData;\n\t}\n\n\tprivate async createChannel(userId: string, room: ICoreRoom, members: string[]): Promise<string> {\n\t\treturn (await createChannelMethod(userId, room.name || '', members, room.ro, room.customFields, this.prepareExtraData(room))).rid;\n\t}\n\n\tprivate async createDirectMessage(userId: string, members: string[]): Promise<string> {\n\t\treturn (await createDirectMessage(members, userId)).rid;\n\t}\n\n\tprivate async createPrivateGroup(userId: string, room: ICoreRoom, members: string[]): Promise<string> {\n\t\tconst user = await Users.findOneById(userId);\n\t\tif (!user) {\n\t\t\tthrow new Error('Invalid user');\n\t\t}\n\t\treturn (await createPrivateGroupMethod(user, room.name || '', members, room.ro, room.customFields, this.prepareExtraData(room))).rid;\n\t}\n\n\tprotected async getById(roomId: string, appId: string): Promise<IRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the roomById: \"${roomId}\"`);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst promise: Promise<IRoom | undefined> = this.orch.getConverters()?.get('rooms').convertById(roomId);\n\t\treturn promise as Promise<IRoom>;\n\t}\n\n\tprotected async getByName(roomName: string, appId: string): Promise<IRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the roomByName: \"${roomName}\"`);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst promise: Promise<IRoom | undefined> = this.orch.getConverters()?.get('rooms').convertByName(roomName);\n\t\treturn promise as Promise<IRoom>;\n\t}\n\n\tprotected async getCreatorById(roomId: string, appId: string): Promise<IUser | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's creator by id: \"${roomId}\"`);\n\n\t\tconst room = await Rooms.findOneById(roomId);\n\n\t\tif (!room?.u?._id) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('users').convertById(room.u._id);\n\t}\n\n\tprotected async getCreatorByName(roomName: string, appId: string): Promise<IUser | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's creator by name: \"${roomName}\"`);\n\n\t\tconst room = await Rooms.findOneByName(roomName, {});\n\n\t\tif (!room?.u?._id) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('users').convertById(room.u._id);\n\t}\n\n\tprotected async getMessages(roomId: string, options: GetMessagesOptions, appId: string): Promise<IMessageRaw[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the messages of the room: \"${roomId}\" with options:`, options);\n\n\t\tconst { limit, skip = 0, sort: _sort } = options;\n\n\t\tconst messageConverter = this.orch.getConverters()?.get('messages');\n\t\tif (!messageConverter) {\n\t\t\tthrow new Error('Message converter not found');\n\t\t}\n\n\t\t// We support only one field for now\n\t\tconst sort: Sort | undefined = _sort?.createdAt ? { ts: _sort.createdAt } : undefined;\n\n\t\tconst messageQueryOptions: FindOptions<ICoreMessage> = {\n\t\t\tlimit,\n\t\t\tskip,\n\t\t\tsort,\n\t\t};\n\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\t_hidden: { $ne: true },\n\t\t\tt: { $exists: false },\n\t\t};\n\n\t\tconst cursor = Messages.find(query, messageQueryOptions);\n\n\t\tconst messagePromises: Promise<IMessageRaw>[] = await cursor.map((message) => messageConverter.convertMessageRaw(message)).toArray();\n\n\t\treturn Promise.all(messagePromises);\n\t}\n\n\tprotected async getMembers(roomId: string, appId: string): Promise<Array<IUser>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's members by room id: \"${roomId}\"`);\n\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId, {});\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst promises: Promise<(IUser | undefined)[]> = Promise.all(\n\t\t\t(await subscriptions.toArray()).map((sub: ISubscription) => this.orch.getConverters()?.get('users').convertById(sub.u?._id)),\n\t\t);\n\n\t\treturn promises as Promise<IUser[]>;\n\t}\n\n\tprotected async getDirectByUsernames(usernames: Array<string>, appId: string): Promise<IRoom | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting direct room by usernames: \"${usernames}\"`);\n\t\tconst room = await Rooms.findDirectRoomContainingAllUsernames(usernames, {});\n\t\tif (!room) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.orch.getConverters()?.get('rooms').convertRoom(room);\n\t}\n\n\tprotected async update(room: IRoom, members: Array<string> = [], appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a room.`);\n\n\t\tif (!room.id || !(await Rooms.findOneById(room.id))) {\n\t\t\tthrow new Error('A room must exist to update.');\n\t\t}\n\n\t\tconst rm = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tawait Rooms.updateOne({ _id: rm._id }, { $set: rm as Partial<ICoreRoom> });\n\n\t\tfor await (const username of members) {\n\t\t\tconst member = await Users.findOneByUsername(username, {});\n\n\t\t\tif (!member) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait addUserToRoom(rm._id, member);\n\t\t}\n\t}\n\n\tprotected async delete(roomId: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is deleting a room.`);\n\t\tawait deleteRoom(roomId);\n\t}\n\n\tprotected async createDiscussion(\n\t\troom: IRoom,\n\t\tparentMessage: IMessage | undefined = undefined,\n\t\treply: string | undefined = '',\n\t\tmembers: Array<string> = [],\n\t\tappId: string,\n\t): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new discussion.`, room);\n\n\t\tconst rcRoom = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tlet rcMessage;\n\t\tif (parentMessage) {\n\t\t\trcMessage = await this.orch.getConverters()?.get('messages').convertAppMessage(parentMessage);\n\t\t}\n\n\t\tif (!rcRoom.prid || !(await Rooms.findOneById(rcRoom.prid))) {\n\t\t\tthrow new Error('There must be a parent room to create a discussion.');\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst discussion = {\n\t\t\tprid: rcRoom.prid,\n\t\t\tt_name: rcRoom.fname as string,\n\t\t\tpmid: rcMessage ? rcMessage._id : undefined,\n\t\t\treply: reply && reply.trim() !== '' ? reply : undefined,\n\t\t\tusers: members.length > 0 ? members : [],\n\t\t};\n\n\t\tconst { rid } = await createDiscussion(room.creator.id, discussion);\n\n\t\treturn rid;\n\t}\n\n\tprotected getModerators(roomId: string, appId: string): Promise<IUser[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting room moderators for room id: ${roomId}`);\n\t\treturn this.getUsersByRoomIdAndSubscriptionRole(roomId, 'moderator');\n\t}\n\n\tprotected getOwners(roomId: string, appId: string): Promise<IUser[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting room owners for room id: ${roomId}`);\n\t\treturn this.getUsersByRoomIdAndSubscriptionRole(roomId, 'owner');\n\t}\n\n\tprotected getLeaders(roomId: string, appId: string): Promise<IUser[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting room leaders for room id: ${roomId}`);\n\t\treturn this.getUsersByRoomIdAndSubscriptionRole(roomId, 'leader');\n\t}\n\n\tprivate async getUsersByRoomIdAndSubscriptionRole(roomId: string, role: string): Promise<IUser[]> {\n\t\tconst subs = (await Subscriptions.findByRoomIdAndRoles(roomId, [role], {\n\t\t\tprojection: { uid: '$u._id', _id: 0 },\n\t\t}).toArray()) as unknown as {\n\t\t\tuid: string;\n\t\t}[];\n\t\t// Was this a bug?\n\t\tconst users = await Users.findByIds(subs.map((user: { uid: string }) => user.uid)).toArray();\n\t\tconst userConverter = this.orch.getConverters().get('users');\n\t\treturn users.map((user: ICoreUser) => userConverter.convertToApp(user));\n\t}\n\n\tprotected async getUnreadByUser(roomId: string, uid: string, options: GetMessagesOptions, appId: string): Promise<Array<IMessageRaw>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the unread messages for the user: \"${uid}\" in the room: \"${roomId}\"`);\n\n\t\tconst messageConverter = this.orch.getConverters()?.get('messages');\n\t\tif (!messageConverter) {\n\t\t\tthrow new Error('Message converter not found');\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, uid, { projection: { ls: 1 } });\n\n\t\tif (!subscription) {\n\t\t\tconst errorMessage = `No subscription found for user with ID \"${uid}\" in room with ID \"${roomId}\". This means the user is not subscribed to the room.`;\n\t\t\tthis.orch.debugLog(errorMessage);\n\t\t\tthrow new Error('User not subscribed to room');\n\t\t}\n\n\t\tconst lastSeen = subscription?.ls;\n\t\tif (!lastSeen) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst sort: Sort = options.sort?.createdAt ? { ts: options.sort.createdAt } : { ts: 1 };\n\n\t\tconst cursor = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, lastSeen, new Date(), [], {\n\t\t\t...options,\n\t\t\tsort,\n\t\t});\n\n\t\tconst messages = await cursor.toArray();\n\t\treturn Promise.all(messages.map((msg) => messageConverter.convertMessageRaw(msg)));\n\t}\n\n\tprotected async getUserUnreadMessageCount(roomId: string, uid: string, appId: string): Promise<number> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the unread messages count of the room: \"${roomId}\" for the user: \"${uid}\"`);\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, uid, { projection: { ls: 1 } });\n\n\t\tif (!subscription) {\n\t\t\tconst errorMessage = `No subscription found for user with ID \"${uid}\" in room with ID \"${roomId}\". This means the user is not subscribed to the room.`;\n\t\t\tthis.orch.debugLog(errorMessage);\n\t\t\tthrow new Error('User not subscribed to room');\n\t\t}\n\n\t\tconst lastSeen = subscription?.ls;\n\t\tif (!lastSeen) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, lastSeen, new Date(), []);\n\t}\n\n\tprotected async removeUsers(roomId: string, usernames: Array<string>, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing users ${usernames} from room id: ${roomId}`);\n\t\tif (!roomId) {\n\t\t\tthrow new Error('roomId was not provided.');\n\t\t}\n\n\t\tconst members = await Users.findUsersByUsernames(usernames, { limit: 50 }).toArray();\n\t\tawait Promise.all(members.map((user) => removeUserFromRoom(roomId, user)));\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      AppRoomBridge: () => AppRoomBridge\n    });\n    let RoomType;\n    module.link(\"@rocket.chat/apps-engine/definition/rooms\", {\n      RoomType(v) {\n        RoomType = v;\n      }\n    }, 0);\n    let RoomBridge;\n    module.link(\"@rocket.chat/apps-engine/server/bridges/RoomBridge\", {\n      RoomBridge(v) {\n        RoomBridge = v;\n      }\n    }, 1);\n    let Subscriptions, Users, Rooms, Messages;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Messages(v) {\n        Messages = v;\n      }\n    }, 2);\n    let createDirectMessage;\n    module.link(\"../../../../server/methods/createDirectMessage\", {\n      createDirectMessage(v) {\n        createDirectMessage = v;\n      }\n    }, 3);\n    let createDiscussion;\n    module.link(\"../../../discussion/server/methods/createDiscussion\", {\n      createDiscussion(v) {\n        createDiscussion = v;\n      }\n    }, 4);\n    let addUserToRoom;\n    module.link(\"../../../lib/server/functions/addUserToRoom\", {\n      addUserToRoom(v) {\n        addUserToRoom = v;\n      }\n    }, 5);\n    let deleteRoom;\n    module.link(\"../../../lib/server/functions/deleteRoom\", {\n      deleteRoom(v) {\n        deleteRoom = v;\n      }\n    }, 6);\n    let removeUserFromRoom;\n    module.link(\"../../../lib/server/functions/removeUserFromRoom\", {\n      removeUserFromRoom(v) {\n        removeUserFromRoom = v;\n      }\n    }, 7);\n    let createChannelMethod;\n    module.link(\"../../../lib/server/methods/createChannel\", {\n      createChannelMethod(v) {\n        createChannelMethod = v;\n      }\n    }, 8);\n    let createPrivateGroupMethod;\n    module.link(\"../../../lib/server/methods/createPrivateGroup\", {\n      createPrivateGroupMethod(v) {\n        createPrivateGroupMethod = v;\n      }\n    }, 9);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class AppRoomBridge extends RoomBridge {\n      constructor(orch) {\n        super();\n        this.orch = void 0;\n        this.orch = orch;\n      }\n      async create(room, members, appId) {\n        var _this$orch$getConvert;\n        this.orch.debugLog(\"The App \".concat(appId, \" is creating a new room.\"), room);\n        const rcRoom = await ((_this$orch$getConvert = this.orch.getConverters()) === null || _this$orch$getConvert === void 0 ? void 0 : _this$orch$getConvert.get('rooms').convertAppRoom(room));\n        switch (room.type) {\n          case RoomType.CHANNEL:\n            return this.createChannel(room.creator.id, rcRoom, members);\n          case RoomType.PRIVATE_GROUP:\n            return this.createPrivateGroup(room.creator.id, rcRoom, members);\n          case RoomType.DIRECT_MESSAGE:\n            return this.createDirectMessage(room.creator.id, members);\n          default:\n            throw new Error('Only channels, private groups and direct messages can be created.');\n        }\n      }\n      prepareExtraData(room) {\n        const extraData = Object.assign({}, room);\n        delete extraData.name;\n        delete extraData.t;\n        delete extraData.ro;\n        delete extraData.customFields;\n        return extraData;\n      }\n      async createChannel(userId, room, members) {\n        return (await createChannelMethod(userId, room.name || '', members, room.ro, room.customFields, this.prepareExtraData(room))).rid;\n      }\n      async createDirectMessage(userId, members) {\n        return (await createDirectMessage(members, userId)).rid;\n      }\n      async createPrivateGroup(userId, room, members) {\n        const user = await Users.findOneById(userId);\n        if (!user) {\n          throw new Error('Invalid user');\n        }\n        return (await createPrivateGroupMethod(user, room.name || '', members, room.ro, room.customFields, this.prepareExtraData(room))).rid;\n      }\n      async getById(roomId, appId) {\n        var _this$orch$getConvert2;\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the roomById: \\\"\").concat(roomId, \"\\\"\"));\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        const promise = (_this$orch$getConvert2 = this.orch.getConverters()) === null || _this$orch$getConvert2 === void 0 ? void 0 : _this$orch$getConvert2.get('rooms').convertById(roomId);\n        return promise;\n      }\n      async getByName(roomName, appId) {\n        var _this$orch$getConvert3;\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the roomByName: \\\"\").concat(roomName, \"\\\"\"));\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        const promise = (_this$orch$getConvert3 = this.orch.getConverters()) === null || _this$orch$getConvert3 === void 0 ? void 0 : _this$orch$getConvert3.get('rooms').convertByName(roomName);\n        return promise;\n      }\n      async getCreatorById(roomId, appId) {\n        var _room$u, _this$orch$getConvert4;\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the room's creator by id: \\\"\").concat(roomId, \"\\\"\"));\n        const room = await Rooms.findOneById(roomId);\n        if (!(room !== null && room !== void 0 && (_room$u = room.u) !== null && _room$u !== void 0 && _room$u._id)) {\n          return undefined;\n        }\n        return (_this$orch$getConvert4 = this.orch.getConverters()) === null || _this$orch$getConvert4 === void 0 ? void 0 : _this$orch$getConvert4.get('users').convertById(room.u._id);\n      }\n      async getCreatorByName(roomName, appId) {\n        var _room$u2, _this$orch$getConvert5;\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the room's creator by name: \\\"\").concat(roomName, \"\\\"\"));\n        const room = await Rooms.findOneByName(roomName, {});\n        if (!(room !== null && room !== void 0 && (_room$u2 = room.u) !== null && _room$u2 !== void 0 && _room$u2._id)) {\n          return undefined;\n        }\n        return (_this$orch$getConvert5 = this.orch.getConverters()) === null || _this$orch$getConvert5 === void 0 ? void 0 : _this$orch$getConvert5.get('users').convertById(room.u._id);\n      }\n      async getMessages(roomId, options, appId) {\n        var _this$orch$getConvert6;\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the messages of the room: \\\"\").concat(roomId, \"\\\" with options:\"), options);\n        const {\n          limit,\n          skip = 0,\n          sort: _sort\n        } = options;\n        const messageConverter = (_this$orch$getConvert6 = this.orch.getConverters()) === null || _this$orch$getConvert6 === void 0 ? void 0 : _this$orch$getConvert6.get('messages');\n        if (!messageConverter) {\n          throw new Error('Message converter not found');\n        }\n        // We support only one field for now\n        const sort = _sort !== null && _sort !== void 0 && _sort.createdAt ? {\n          ts: _sort.createdAt\n        } : undefined;\n        const messageQueryOptions = {\n          limit,\n          skip,\n          sort\n        };\n        const query = {\n          rid: roomId,\n          _hidden: {\n            $ne: true\n          },\n          t: {\n            $exists: false\n          }\n        };\n        const cursor = Messages.find(query, messageQueryOptions);\n        const messagePromises = await cursor.map(message => messageConverter.convertMessageRaw(message)).toArray();\n        return Promise.all(messagePromises);\n      }\n      async getMembers(roomId, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the room's members by room id: \\\"\").concat(roomId, \"\\\"\"));\n        const subscriptions = await Subscriptions.findByRoomId(roomId, {});\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        const promises = Promise.all((await subscriptions.toArray()).map(sub => {\n          var _this$orch$getConvert7, _sub$u;\n          return (_this$orch$getConvert7 = this.orch.getConverters()) === null || _this$orch$getConvert7 === void 0 ? void 0 : _this$orch$getConvert7.get('users').convertById((_sub$u = sub.u) === null || _sub$u === void 0 ? void 0 : _sub$u._id);\n        }));\n        return promises;\n      }\n      async getDirectByUsernames(usernames, appId) {\n        var _this$orch$getConvert8;\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting direct room by usernames: \\\"\").concat(usernames, \"\\\"\"));\n        const room = await Rooms.findDirectRoomContainingAllUsernames(usernames, {});\n        if (!room) {\n          return undefined;\n        }\n        return (_this$orch$getConvert8 = this.orch.getConverters()) === null || _this$orch$getConvert8 === void 0 ? void 0 : _this$orch$getConvert8.get('rooms').convertRoom(room);\n      }\n      async update(room) {\n        var _this$orch$getConvert9;\n        let members = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        let appId = arguments.length > 2 ? arguments[2] : undefined;\n        this.orch.debugLog(\"The App \".concat(appId, \" is updating a room.\"));\n        if (!room.id || !(await Rooms.findOneById(room.id))) {\n          throw new Error('A room must exist to update.');\n        }\n        const rm = await ((_this$orch$getConvert9 = this.orch.getConverters()) === null || _this$orch$getConvert9 === void 0 ? void 0 : _this$orch$getConvert9.get('rooms').convertAppRoom(room));\n        await Rooms.updateOne({\n          _id: rm._id\n        }, {\n          $set: rm\n        });\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(members), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const username = _step.value;\n            {\n              const member = await Users.findOneByUsername(username, {});\n              if (!member) {\n                continue;\n              }\n              await addUserToRoom(rm._id, member);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      async delete(roomId, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is deleting a room.\"));\n        await deleteRoom(roomId);\n      }\n      async createDiscussion(room) {\n        var _this$orch$getConvert10;\n        let parentMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n        let reply = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n        let members = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n        let appId = arguments.length > 4 ? arguments[4] : undefined;\n        this.orch.debugLog(\"The App \".concat(appId, \" is creating a new discussion.\"), room);\n        const rcRoom = await ((_this$orch$getConvert10 = this.orch.getConverters()) === null || _this$orch$getConvert10 === void 0 ? void 0 : _this$orch$getConvert10.get('rooms').convertAppRoom(room));\n        let rcMessage;\n        if (parentMessage) {\n          var _this$orch$getConvert11;\n          rcMessage = await ((_this$orch$getConvert11 = this.orch.getConverters()) === null || _this$orch$getConvert11 === void 0 ? void 0 : _this$orch$getConvert11.get('messages').convertAppMessage(parentMessage));\n        }\n        if (!rcRoom.prid || !(await Rooms.findOneById(rcRoom.prid))) {\n          throw new Error('There must be a parent room to create a discussion.');\n        }\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        const discussion = {\n          prid: rcRoom.prid,\n          t_name: rcRoom.fname,\n          pmid: rcMessage ? rcMessage._id : undefined,\n          reply: reply && reply.trim() !== '' ? reply : undefined,\n          users: members.length > 0 ? members : []\n        };\n        const {\n          rid\n        } = await createDiscussion(room.creator.id, discussion);\n        return rid;\n      }\n      getModerators(roomId, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting room moderators for room id: \").concat(roomId));\n        return this.getUsersByRoomIdAndSubscriptionRole(roomId, 'moderator');\n      }\n      getOwners(roomId, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting room owners for room id: \").concat(roomId));\n        return this.getUsersByRoomIdAndSubscriptionRole(roomId, 'owner');\n      }\n      getLeaders(roomId, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting room leaders for room id: \").concat(roomId));\n        return this.getUsersByRoomIdAndSubscriptionRole(roomId, 'leader');\n      }\n      async getUsersByRoomIdAndSubscriptionRole(roomId, role) {\n        const subs = await Subscriptions.findByRoomIdAndRoles(roomId, [role], {\n          projection: {\n            uid: '$u._id',\n            _id: 0\n          }\n        }).toArray();\n        // Was this a bug?\n        const users = await Users.findByIds(subs.map(user => user.uid)).toArray();\n        const userConverter = this.orch.getConverters().get('users');\n        return users.map(user => userConverter.convertToApp(user));\n      }\n      async getUnreadByUser(roomId, uid, options, appId) {\n        var _this$orch$getConvert12, _options$sort;\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the unread messages for the user: \\\"\").concat(uid, \"\\\" in the room: \\\"\").concat(roomId, \"\\\"\"));\n        const messageConverter = (_this$orch$getConvert12 = this.orch.getConverters()) === null || _this$orch$getConvert12 === void 0 ? void 0 : _this$orch$getConvert12.get('messages');\n        if (!messageConverter) {\n          throw new Error('Message converter not found');\n        }\n        const subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, uid, {\n          projection: {\n            ls: 1\n          }\n        });\n        if (!subscription) {\n          const errorMessage = \"No subscription found for user with ID \\\"\".concat(uid, \"\\\" in room with ID \\\"\").concat(roomId, \"\\\". This means the user is not subscribed to the room.\");\n          this.orch.debugLog(errorMessage);\n          throw new Error('User not subscribed to room');\n        }\n        const lastSeen = subscription === null || subscription === void 0 ? void 0 : subscription.ls;\n        if (!lastSeen) {\n          return [];\n        }\n        const sort = (_options$sort = options.sort) !== null && _options$sort !== void 0 && _options$sort.createdAt ? {\n          ts: options.sort.createdAt\n        } : {\n          ts: 1\n        };\n        const cursor = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, lastSeen, new Date(), [], _objectSpread(_objectSpread({}, options), {}, {\n          sort\n        }));\n        const messages = await cursor.toArray();\n        return Promise.all(messages.map(msg => messageConverter.convertMessageRaw(msg)));\n      }\n      async getUserUnreadMessageCount(roomId, uid, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the unread messages count of the room: \\\"\").concat(roomId, \"\\\" for the user: \\\"\").concat(uid, \"\\\"\"));\n        const subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, uid, {\n          projection: {\n            ls: 1\n          }\n        });\n        if (!subscription) {\n          const errorMessage = \"No subscription found for user with ID \\\"\".concat(uid, \"\\\" in room with ID \\\"\").concat(roomId, \"\\\". This means the user is not subscribed to the room.\");\n          this.orch.debugLog(errorMessage);\n          throw new Error('User not subscribed to room');\n        }\n        const lastSeen = subscription === null || subscription === void 0 ? void 0 : subscription.ls;\n        if (!lastSeen) {\n          return 0;\n        }\n        return Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, lastSeen, new Date(), []);\n      }\n      async removeUsers(roomId, usernames, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is removing users \").concat(usernames, \" from room id: \").concat(roomId));\n        if (!roomId) {\n          throw new Error('roomId was not provided.');\n        }\n        const members = await Users.findUsersByUsernames(usernames, {\n          limit: 50\n        }).toArray();\n        await Promise.all(members.map(user => removeUserFromRoom(roomId, user)));\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","AppRoomBridge","RoomType","RoomBridge","Subscriptions","Users","Rooms","Messages","createDirectMessage","createDiscussion","addUserToRoom","deleteRoom","removeUserFromRoom","createChannelMethod","createPrivateGroupMethod","__reifyWaitForDeps__","constructor","orch","create","room","members","appId","_this$orch$getConvert","debugLog","concat","rcRoom","getConverters","get","convertAppRoom","type","CHANNEL","createChannel","creator","id","PRIVATE_GROUP","createPrivateGroup","DIRECT_MESSAGE","Error","prepareExtraData","extraData","Object","assign","name","t","ro","customFields","userId","rid","user","findOneById","getById","roomId","_this$orch$getConvert2","promise","convertById","getByName","roomName","_this$orch$getConvert3","convertByName","getCreatorById","_room$u","_this$orch$getConvert4","u","_id","undefined","getCreatorByName","_room$u2","_this$orch$getConvert5","findOneByName","getMessages","options","_this$orch$getConvert6","limit","skip","sort","_sort","messageConverter","createdAt","ts","messageQueryOptions","query","_hidden","$ne","$exists","cursor","find","messagePromises","map","message","convertMessageRaw","toArray","Promise","all","getMembers","subscriptions","findByRoomId","promises","sub","_this$orch$getConvert7","_sub$u","getDirectByUsernames","usernames","_this$orch$getConvert8","findDirectRoomContainingAllUsernames","convertRoom","update","_this$orch$getConvert9","arguments","length","rm","updateOne","$set","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","username","value","member","findOneByUsername","err","return","delete","_this$orch$getConvert10","parentMessage","reply","rcMessage","_this$orch$getConvert11","convertAppMessage","prid","discussion","t_name","fname","pmid","trim","users","getModerators","getUsersByRoomIdAndSubscriptionRole","getOwners","getLeaders","role","subs","findByRoomIdAndRoles","projection","uid","findByIds","userConverter","convertToApp","getUnreadByUser","_this$orch$getConvert12","_options$sort","subscription","findOneByRoomIdAndUserId","ls","errorMessage","lastSeen","findVisibleByRoomIdBetweenTimestampsNotContainingTypes","Date","messages","msg","getUserUnreadMessageCount","countVisibleByRoomIdBetweenTimestampsNotContainingTypes","removeUsers","findUsersByUsernames","__reify_async_result__","_reifyError","self","async"],"sources":["app/apps/server/bridges/rooms.ts"],"sourcesContent":["import type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { IMessage, IMessageRaw } from '@rocket.chat/apps-engine/definition/messages';\nimport type { IRoom } from '@rocket.chat/apps-engine/definition/rooms';\nimport { RoomType } from '@rocket.chat/apps-engine/definition/rooms';\nimport type { IUser } from '@rocket.chat/apps-engine/definition/users';\nimport type { GetMessagesOptions } from '@rocket.chat/apps-engine/server/bridges/RoomBridge';\nimport { RoomBridge } from '@rocket.chat/apps-engine/server/bridges/RoomBridge';\nimport type { ISubscription, IUser as ICoreUser, IRoom as ICoreRoom, IMessage as ICoreMessage } from '@rocket.chat/core-typings';\nimport { Subscriptions, Users, Rooms, Messages } from '@rocket.chat/models';\nimport type { FindOptions, Sort } from 'mongodb';\n\nimport { createDirectMessage } from '../../../../server/methods/createDirectMessage';\nimport { createDiscussion } from '../../../discussion/server/methods/createDiscussion';\nimport { addUserToRoom } from '../../../lib/server/functions/addUserToRoom';\nimport { deleteRoom } from '../../../lib/server/functions/deleteRoom';\nimport { removeUserFromRoom } from '../../../lib/server/functions/removeUserFromRoom';\nimport { createChannelMethod } from '../../../lib/server/methods/createChannel';\nimport { createPrivateGroupMethod } from '../../../lib/server/methods/createPrivateGroup';\n\nexport class AppRoomBridge extends RoomBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async create(room: IRoom, members: Array<string>, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new room.`, room);\n\n\t\tconst rcRoom = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tswitch (room.type) {\n\t\t\tcase RoomType.CHANNEL:\n\t\t\t\treturn this.createChannel(room.creator.id, rcRoom, members);\n\t\t\tcase RoomType.PRIVATE_GROUP:\n\t\t\t\treturn this.createPrivateGroup(room.creator.id, rcRoom, members);\n\t\t\tcase RoomType.DIRECT_MESSAGE:\n\t\t\t\treturn this.createDirectMessage(room.creator.id, members);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Only channels, private groups and direct messages can be created.');\n\t\t}\n\t}\n\n\tprivate prepareExtraData(room: Record<string, any>): Record<string, unknown> {\n\t\tconst extraData = Object.assign({}, room);\n\t\tdelete extraData.name;\n\t\tdelete extraData.t;\n\t\tdelete extraData.ro;\n\t\tdelete extraData.customFields;\n\n\t\treturn extraData;\n\t}\n\n\tprivate async createChannel(userId: string, room: ICoreRoom, members: string[]): Promise<string> {\n\t\treturn (await createChannelMethod(userId, room.name || '', members, room.ro, room.customFields, this.prepareExtraData(room))).rid;\n\t}\n\n\tprivate async createDirectMessage(userId: string, members: string[]): Promise<string> {\n\t\treturn (await createDirectMessage(members, userId)).rid;\n\t}\n\n\tprivate async createPrivateGroup(userId: string, room: ICoreRoom, members: string[]): Promise<string> {\n\t\tconst user = await Users.findOneById(userId);\n\t\tif (!user) {\n\t\t\tthrow new Error('Invalid user');\n\t\t}\n\t\treturn (await createPrivateGroupMethod(user, room.name || '', members, room.ro, room.customFields, this.prepareExtraData(room))).rid;\n\t}\n\n\tprotected async getById(roomId: string, appId: string): Promise<IRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the roomById: \"${roomId}\"`);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst promise: Promise<IRoom | undefined> = this.orch.getConverters()?.get('rooms').convertById(roomId);\n\t\treturn promise as Promise<IRoom>;\n\t}\n\n\tprotected async getByName(roomName: string, appId: string): Promise<IRoom> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the roomByName: \"${roomName}\"`);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst promise: Promise<IRoom | undefined> = this.orch.getConverters()?.get('rooms').convertByName(roomName);\n\t\treturn promise as Promise<IRoom>;\n\t}\n\n\tprotected async getCreatorById(roomId: string, appId: string): Promise<IUser | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's creator by id: \"${roomId}\"`);\n\n\t\tconst room = await Rooms.findOneById(roomId);\n\n\t\tif (!room?.u?._id) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('users').convertById(room.u._id);\n\t}\n\n\tprotected async getCreatorByName(roomName: string, appId: string): Promise<IUser | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's creator by name: \"${roomName}\"`);\n\n\t\tconst room = await Rooms.findOneByName(roomName, {});\n\n\t\tif (!room?.u?._id) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('users').convertById(room.u._id);\n\t}\n\n\tprotected async getMessages(roomId: string, options: GetMessagesOptions, appId: string): Promise<IMessageRaw[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the messages of the room: \"${roomId}\" with options:`, options);\n\n\t\tconst { limit, skip = 0, sort: _sort } = options;\n\n\t\tconst messageConverter = this.orch.getConverters()?.get('messages');\n\t\tif (!messageConverter) {\n\t\t\tthrow new Error('Message converter not found');\n\t\t}\n\n\t\t// We support only one field for now\n\t\tconst sort: Sort | undefined = _sort?.createdAt ? { ts: _sort.createdAt } : undefined;\n\n\t\tconst messageQueryOptions: FindOptions<ICoreMessage> = {\n\t\t\tlimit,\n\t\t\tskip,\n\t\t\tsort,\n\t\t};\n\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\t_hidden: { $ne: true },\n\t\t\tt: { $exists: false },\n\t\t};\n\n\t\tconst cursor = Messages.find(query, messageQueryOptions);\n\n\t\tconst messagePromises: Promise<IMessageRaw>[] = await cursor.map((message) => messageConverter.convertMessageRaw(message)).toArray();\n\n\t\treturn Promise.all(messagePromises);\n\t}\n\n\tprotected async getMembers(roomId: string, appId: string): Promise<Array<IUser>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the room's members by room id: \"${roomId}\"`);\n\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId, {});\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst promises: Promise<(IUser | undefined)[]> = Promise.all(\n\t\t\t(await subscriptions.toArray()).map((sub: ISubscription) => this.orch.getConverters()?.get('users').convertById(sub.u?._id)),\n\t\t);\n\n\t\treturn promises as Promise<IUser[]>;\n\t}\n\n\tprotected async getDirectByUsernames(usernames: Array<string>, appId: string): Promise<IRoom | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting direct room by usernames: \"${usernames}\"`);\n\t\tconst room = await Rooms.findDirectRoomContainingAllUsernames(usernames, {});\n\t\tif (!room) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.orch.getConverters()?.get('rooms').convertRoom(room);\n\t}\n\n\tprotected async update(room: IRoom, members: Array<string> = [], appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a room.`);\n\n\t\tif (!room.id || !(await Rooms.findOneById(room.id))) {\n\t\t\tthrow new Error('A room must exist to update.');\n\t\t}\n\n\t\tconst rm = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tawait Rooms.updateOne({ _id: rm._id }, { $set: rm as Partial<ICoreRoom> });\n\n\t\tfor await (const username of members) {\n\t\t\tconst member = await Users.findOneByUsername(username, {});\n\n\t\t\tif (!member) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait addUserToRoom(rm._id, member);\n\t\t}\n\t}\n\n\tprotected async delete(roomId: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is deleting a room.`);\n\t\tawait deleteRoom(roomId);\n\t}\n\n\tprotected async createDiscussion(\n\t\troom: IRoom,\n\t\tparentMessage: IMessage | undefined = undefined,\n\t\treply: string | undefined = '',\n\t\tmembers: Array<string> = [],\n\t\tappId: string,\n\t): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new discussion.`, room);\n\n\t\tconst rcRoom = await this.orch.getConverters()?.get('rooms').convertAppRoom(room);\n\n\t\tlet rcMessage;\n\t\tif (parentMessage) {\n\t\t\trcMessage = await this.orch.getConverters()?.get('messages').convertAppMessage(parentMessage);\n\t\t}\n\n\t\tif (!rcRoom.prid || !(await Rooms.findOneById(rcRoom.prid))) {\n\t\t\tthrow new Error('There must be a parent room to create a discussion.');\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst discussion = {\n\t\t\tprid: rcRoom.prid,\n\t\t\tt_name: rcRoom.fname as string,\n\t\t\tpmid: rcMessage ? rcMessage._id : undefined,\n\t\t\treply: reply && reply.trim() !== '' ? reply : undefined,\n\t\t\tusers: members.length > 0 ? members : [],\n\t\t};\n\n\t\tconst { rid } = await createDiscussion(room.creator.id, discussion);\n\n\t\treturn rid;\n\t}\n\n\tprotected getModerators(roomId: string, appId: string): Promise<IUser[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting room moderators for room id: ${roomId}`);\n\t\treturn this.getUsersByRoomIdAndSubscriptionRole(roomId, 'moderator');\n\t}\n\n\tprotected getOwners(roomId: string, appId: string): Promise<IUser[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting room owners for room id: ${roomId}`);\n\t\treturn this.getUsersByRoomIdAndSubscriptionRole(roomId, 'owner');\n\t}\n\n\tprotected getLeaders(roomId: string, appId: string): Promise<IUser[]> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting room leaders for room id: ${roomId}`);\n\t\treturn this.getUsersByRoomIdAndSubscriptionRole(roomId, 'leader');\n\t}\n\n\tprivate async getUsersByRoomIdAndSubscriptionRole(roomId: string, role: string): Promise<IUser[]> {\n\t\tconst subs = (await Subscriptions.findByRoomIdAndRoles(roomId, [role], {\n\t\t\tprojection: { uid: '$u._id', _id: 0 },\n\t\t}).toArray()) as unknown as {\n\t\t\tuid: string;\n\t\t}[];\n\t\t// Was this a bug?\n\t\tconst users = await Users.findByIds(subs.map((user: { uid: string }) => user.uid)).toArray();\n\t\tconst userConverter = this.orch.getConverters().get('users');\n\t\treturn users.map((user: ICoreUser) => userConverter.convertToApp(user));\n\t}\n\n\tprotected async getUnreadByUser(roomId: string, uid: string, options: GetMessagesOptions, appId: string): Promise<Array<IMessageRaw>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the unread messages for the user: \"${uid}\" in the room: \"${roomId}\"`);\n\n\t\tconst messageConverter = this.orch.getConverters()?.get('messages');\n\t\tif (!messageConverter) {\n\t\t\tthrow new Error('Message converter not found');\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, uid, { projection: { ls: 1 } });\n\n\t\tif (!subscription) {\n\t\t\tconst errorMessage = `No subscription found for user with ID \"${uid}\" in room with ID \"${roomId}\". This means the user is not subscribed to the room.`;\n\t\t\tthis.orch.debugLog(errorMessage);\n\t\t\tthrow new Error('User not subscribed to room');\n\t\t}\n\n\t\tconst lastSeen = subscription?.ls;\n\t\tif (!lastSeen) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst sort: Sort = options.sort?.createdAt ? { ts: options.sort.createdAt } : { ts: 1 };\n\n\t\tconst cursor = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, lastSeen, new Date(), [], {\n\t\t\t...options,\n\t\t\tsort,\n\t\t});\n\n\t\tconst messages = await cursor.toArray();\n\t\treturn Promise.all(messages.map((msg) => messageConverter.convertMessageRaw(msg)));\n\t}\n\n\tprotected async getUserUnreadMessageCount(roomId: string, uid: string, appId: string): Promise<number> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the unread messages count of the room: \"${roomId}\" for the user: \"${uid}\"`);\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, uid, { projection: { ls: 1 } });\n\n\t\tif (!subscription) {\n\t\t\tconst errorMessage = `No subscription found for user with ID \"${uid}\" in room with ID \"${roomId}\". This means the user is not subscribed to the room.`;\n\t\t\tthis.orch.debugLog(errorMessage);\n\t\t\tthrow new Error('User not subscribed to room');\n\t\t}\n\n\t\tconst lastSeen = subscription?.ls;\n\t\tif (!lastSeen) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, lastSeen, new Date(), []);\n\t}\n\n\tprotected async removeUsers(roomId: string, usernames: Array<string>, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing users ${usernames} from room id: ${roomId}`);\n\t\tif (!roomId) {\n\t\t\tthrow new Error('roomId was not provided.');\n\t\t}\n\n\t\tconst members = await Users.findUsersByUsernames(usernames, { limit: 50 }).toArray();\n\t\tawait Promise.all(members.map((user) => removeUserFromRoom(roomId, user)));\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"dd046e682ca142cc4c2f957c6f7bd5949e2282c4"}
