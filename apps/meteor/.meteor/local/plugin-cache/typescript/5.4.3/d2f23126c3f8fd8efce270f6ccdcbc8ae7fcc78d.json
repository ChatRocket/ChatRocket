{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/integrations/server/lib/updateHistory.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/integrations/server/lib/updateHistory.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/integrations/server/lib/updateHistory.ts","inputSourceMap":{"version":3,"file":"app/integrations/server/lib/updateHistory.ts","sourceRoot":"","sources":["app/integrations/server/lib/updateHistory.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IIntegrationHistory, OutgoingIntegrationEvent, IIntegration, IMessage, AtLeast } from '@rocket.chat/core-typings';\nimport { IntegrationHistory } from '@rocket.chat/models';\n\nimport { omit } from '../../../../lib/utils/omit';\nimport { notifyOnIntegrationHistoryChangedById, notifyOnIntegrationHistoryChanged } from '../../../lib/server/lib/notifyListener';\n\nexport const updateHistory = async ({\n\thistoryId,\n\tstep,\n\tintegration,\n\tevent,\n\tdata,\n\ttriggerWord,\n\tranPrepareScript,\n\tprepareSentMessage,\n\tprocessSentMessage,\n\tresultMessage,\n\tfinished,\n\turl,\n\thttpCallData,\n\thttpError,\n\thttpResult,\n\terror,\n\terrorStack,\n}: {\n\thistoryId: IIntegrationHistory['_id'];\n\tstep: IIntegrationHistory['step'];\n\tintegration?: IIntegration;\n\tevent?: OutgoingIntegrationEvent;\n\ttriggerWord?: string;\n\tranPrepareScript?: boolean;\n\tprepareSentMessage?: { channel: string; message: Partial<IMessage> }[];\n\tprocessSentMessage?: { channel: string; message: Partial<IMessage> }[];\n\tresultMessage?: { channel: string; message: Partial<IMessage> }[];\n\tfinished?: boolean;\n\turl?: string;\n\thttpCallData?: Record<string, any>; // ProcessedOutgoingRequest.data\n\thttpError?: any; // null or whatever error type `fetch` may throw\n\thttpResult?: string | null;\n\n\terror?: boolean;\n\terrorStack?: any; // Error | Error['stack']\n\n\tdata?: Record<string, any>;\n}) => {\n\tconst { user: userData, room: roomData, ...fullData } = data || {};\n\n\tconst history: AtLeast<IIntegrationHistory, 'type' | 'step'> = {\n\t\ttype: 'outgoing-webhook',\n\t\tstep,\n\n\t\t// Usually is only added on initial insert\n\t\t...(integration ? { integration } : {}),\n\t\t// Usually is only added on initial insert\n\t\t...(event ? { event } : {}),\n\t\t...(fullData\n\t\t\t? {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...fullData,\n\t\t\t\t\t\t...(userData ? { user: omit(userData, 'services') } : {}),\n\t\t\t\t\t\t...(roomData ? { room: roomData } : {}),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t: {}),\n\t\t...(triggerWord ? { triggerWord } : {}),\n\t\t...(typeof ranPrepareScript !== 'undefined' ? { ranPrepareScript } : {}),\n\t\t...(prepareSentMessage ? { prepareSentMessage } : {}),\n\t\t...(processSentMessage ? { processSentMessage } : {}),\n\t\t...(resultMessage ? { resultMessage } : {}),\n\t\t...(typeof finished !== 'undefined' ? { finished } : {}),\n\t\t...(url ? { url } : {}),\n\t\t...(typeof httpCallData !== 'undefined' ? { httpCallData } : {}),\n\t\t...(httpError ? { httpError } : {}),\n\t\t...(typeof httpResult !== 'undefined' ? { httpResult: JSON.stringify(httpResult, null, 2) } : {}),\n\t\t...(typeof error !== 'undefined' ? { error } : {}),\n\t\t...(typeof errorStack !== 'undefined' ? { errorStack } : {}),\n\t};\n\n\tif (historyId) {\n\t\t// Projecting just integration field to comply with existing listener behaviour\n\t\tconst integrationHistory = await IntegrationHistory.updateById(historyId, history, { projection: { 'integration._id': 1 } });\n\t\tif (!integrationHistory) {\n\t\t\tthrow new Error('error-updating-integration-history');\n\t\t}\n\t\tvoid notifyOnIntegrationHistoryChanged(integrationHistory, 'updated', history);\n\t\treturn historyId;\n\t}\n\n\t// Can't create a new history without there being an integration\n\tif (!history.integration) {\n\t\tthrow new Error('error-invalid-integration');\n\t}\n\n\t// TODO: Had to force type cast here because of function's signature\n\t// It would be easier if we separate into create and update functions\n\tconst { insertedId } = await IntegrationHistory.create(history as IIntegrationHistory);\n\n\tif (!insertedId) {\n\t\tthrow new Error('error-creating-integration-history');\n\t}\n\n\tvoid notifyOnIntegrationHistoryChangedById(insertedId, 'inserted');\n\n\treturn insertedId;\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/integrations/server/lib/updateHistory.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/integrations/server/lib/updateHistory.ts","inputSourceMap":{"version":3,"file":"app/integrations/server/lib/updateHistory.ts","sourceRoot":"","sources":["app/integrations/server/lib/updateHistory.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IIntegrationHistory, OutgoingIntegrationEvent, IIntegration, IMessage, AtLeast } from '@rocket.chat/core-typings';\nimport { IntegrationHistory } from '@rocket.chat/models';\n\nimport { omit } from '../../../../lib/utils/omit';\nimport { notifyOnIntegrationHistoryChangedById, notifyOnIntegrationHistoryChanged } from '../../../lib/server/lib/notifyListener';\n\nexport const updateHistory = async ({\n\thistoryId,\n\tstep,\n\tintegration,\n\tevent,\n\tdata,\n\ttriggerWord,\n\tranPrepareScript,\n\tprepareSentMessage,\n\tprocessSentMessage,\n\tresultMessage,\n\tfinished,\n\turl,\n\thttpCallData,\n\thttpError,\n\thttpResult,\n\terror,\n\terrorStack,\n}: {\n\thistoryId: IIntegrationHistory['_id'];\n\tstep: IIntegrationHistory['step'];\n\tintegration?: IIntegration;\n\tevent?: OutgoingIntegrationEvent;\n\ttriggerWord?: string;\n\tranPrepareScript?: boolean;\n\tprepareSentMessage?: { channel: string; message: Partial<IMessage> }[];\n\tprocessSentMessage?: { channel: string; message: Partial<IMessage> }[];\n\tresultMessage?: { channel: string; message: Partial<IMessage> }[];\n\tfinished?: boolean;\n\turl?: string;\n\thttpCallData?: Record<string, any>; // ProcessedOutgoingRequest.data\n\thttpError?: any; // null or whatever error type `fetch` may throw\n\thttpResult?: string | null;\n\n\terror?: boolean;\n\terrorStack?: any; // Error | Error['stack']\n\n\tdata?: Record<string, any>;\n}) => {\n\tconst { user: userData, room: roomData, ...fullData } = data || {};\n\n\tconst history: AtLeast<IIntegrationHistory, 'type' | 'step'> = {\n\t\ttype: 'outgoing-webhook',\n\t\tstep,\n\n\t\t// Usually is only added on initial insert\n\t\t...(integration ? { integration } : {}),\n\t\t// Usually is only added on initial insert\n\t\t...(event ? { event } : {}),\n\t\t...(fullData\n\t\t\t? {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...fullData,\n\t\t\t\t\t\t...(userData ? { user: omit(userData, 'services') } : {}),\n\t\t\t\t\t\t...(roomData ? { room: roomData } : {}),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t: {}),\n\t\t...(triggerWord ? { triggerWord } : {}),\n\t\t...(typeof ranPrepareScript !== 'undefined' ? { ranPrepareScript } : {}),\n\t\t...(prepareSentMessage ? { prepareSentMessage } : {}),\n\t\t...(processSentMessage ? { processSentMessage } : {}),\n\t\t...(resultMessage ? { resultMessage } : {}),\n\t\t...(typeof finished !== 'undefined' ? { finished } : {}),\n\t\t...(url ? { url } : {}),\n\t\t...(typeof httpCallData !== 'undefined' ? { httpCallData } : {}),\n\t\t...(httpError ? { httpError } : {}),\n\t\t...(typeof httpResult !== 'undefined' ? { httpResult: JSON.stringify(httpResult, null, 2) } : {}),\n\t\t...(typeof error !== 'undefined' ? { error } : {}),\n\t\t...(typeof errorStack !== 'undefined' ? { errorStack } : {}),\n\t};\n\n\tif (historyId) {\n\t\t// Projecting just integration field to comply with existing listener behaviour\n\t\tconst integrationHistory = await IntegrationHistory.updateById(historyId, history, { projection: { 'integration._id': 1 } });\n\t\tif (!integrationHistory) {\n\t\t\tthrow new Error('error-updating-integration-history');\n\t\t}\n\t\tvoid notifyOnIntegrationHistoryChanged(integrationHistory, 'updated', history);\n\t\treturn historyId;\n\t}\n\n\t// Can't create a new history without there being an integration\n\tif (!history.integration) {\n\t\tthrow new Error('error-invalid-integration');\n\t}\n\n\t// TODO: Had to force type cast here because of function's signature\n\t// It would be easier if we separate into create and update functions\n\tconst { insertedId } = await IntegrationHistory.create(history as IIntegrationHistory);\n\n\tif (!insertedId) {\n\t\tthrow new Error('error-creating-integration-history');\n\t}\n\n\tvoid notifyOnIntegrationHistoryChangedById(insertedId, 'inserted');\n\n\treturn insertedId;\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 1);\n    const _excluded = [\"user\", \"room\"];\n    module.export({\n      updateHistory: () => updateHistory\n    });\n    let IntegrationHistory;\n    module.link(\"@rocket.chat/models\", {\n      IntegrationHistory(v) {\n        IntegrationHistory = v;\n      }\n    }, 0);\n    let omit;\n    module.link(\"../../../../lib/utils/omit\", {\n      omit(v) {\n        omit = v;\n      }\n    }, 1);\n    let notifyOnIntegrationHistoryChangedById, notifyOnIntegrationHistoryChanged;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnIntegrationHistoryChangedById(v) {\n        notifyOnIntegrationHistoryChangedById = v;\n      },\n      notifyOnIntegrationHistoryChanged(v) {\n        notifyOnIntegrationHistoryChanged = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const updateHistory = async _ref => {\n      let {\n        historyId,\n        step,\n        integration,\n        event,\n        data,\n        triggerWord,\n        ranPrepareScript,\n        prepareSentMessage,\n        processSentMessage,\n        resultMessage,\n        finished,\n        url,\n        httpCallData,\n        httpError,\n        httpResult,\n        error,\n        errorStack\n      } = _ref;\n      const _ref2 = data || {},\n        {\n          user: userData,\n          room: roomData\n        } = _ref2,\n        fullData = _objectWithoutProperties(_ref2, _excluded);\n      const history = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n        type: 'outgoing-webhook',\n        step\n      }, integration ? {\n        integration\n      } : {}), event ? {\n        event\n      } : {}), fullData ? {\n        data: _objectSpread(_objectSpread(_objectSpread({}, fullData), userData ? {\n          user: omit(userData, 'services')\n        } : {}), roomData ? {\n          room: roomData\n        } : {})\n      } : {}), triggerWord ? {\n        triggerWord\n      } : {}), typeof ranPrepareScript !== 'undefined' ? {\n        ranPrepareScript\n      } : {}), prepareSentMessage ? {\n        prepareSentMessage\n      } : {}), processSentMessage ? {\n        processSentMessage\n      } : {}), resultMessage ? {\n        resultMessage\n      } : {}), typeof finished !== 'undefined' ? {\n        finished\n      } : {}), url ? {\n        url\n      } : {}), typeof httpCallData !== 'undefined' ? {\n        httpCallData\n      } : {}), httpError ? {\n        httpError\n      } : {}), typeof httpResult !== 'undefined' ? {\n        httpResult: JSON.stringify(httpResult, null, 2)\n      } : {}), typeof error !== 'undefined' ? {\n        error\n      } : {}), typeof errorStack !== 'undefined' ? {\n        errorStack\n      } : {});\n      if (historyId) {\n        // Projecting just integration field to comply with existing listener behaviour\n        const integrationHistory = await IntegrationHistory.updateById(historyId, history, {\n          projection: {\n            'integration._id': 1\n          }\n        });\n        if (!integrationHistory) {\n          throw new Error('error-updating-integration-history');\n        }\n        void notifyOnIntegrationHistoryChanged(integrationHistory, 'updated', history);\n        return historyId;\n      }\n      // Can't create a new history without there being an integration\n      if (!history.integration) {\n        throw new Error('error-invalid-integration');\n      }\n      // TODO: Had to force type cast here because of function's signature\n      // It would be easier if we separate into create and update functions\n      const {\n        insertedId\n      } = await IntegrationHistory.create(history);\n      if (!insertedId) {\n        throw new Error('error-creating-integration-history');\n      }\n      void notifyOnIntegrationHistoryChangedById(insertedId, 'inserted');\n      return insertedId;\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_objectWithoutProperties","_excluded","export","updateHistory","IntegrationHistory","omit","notifyOnIntegrationHistoryChangedById","notifyOnIntegrationHistoryChanged","__reifyWaitForDeps__","_ref","historyId","step","integration","event","data","triggerWord","ranPrepareScript","prepareSentMessage","processSentMessage","resultMessage","finished","url","httpCallData","httpError","httpResult","error","errorStack","_ref2","user","userData","room","roomData","fullData","history","type","JSON","stringify","integrationHistory","updateById","projection","Error","insertedId","create","__reify_async_result__","_reifyError","self","async"],"sources":["app/integrations/server/lib/updateHistory.ts"],"sourcesContent":["import type { IIntegrationHistory, OutgoingIntegrationEvent, IIntegration, IMessage, AtLeast } from '@rocket.chat/core-typings';\nimport { IntegrationHistory } from '@rocket.chat/models';\n\nimport { omit } from '../../../../lib/utils/omit';\nimport { notifyOnIntegrationHistoryChangedById, notifyOnIntegrationHistoryChanged } from '../../../lib/server/lib/notifyListener';\n\nexport const updateHistory = async ({\n\thistoryId,\n\tstep,\n\tintegration,\n\tevent,\n\tdata,\n\ttriggerWord,\n\tranPrepareScript,\n\tprepareSentMessage,\n\tprocessSentMessage,\n\tresultMessage,\n\tfinished,\n\turl,\n\thttpCallData,\n\thttpError,\n\thttpResult,\n\terror,\n\terrorStack,\n}: {\n\thistoryId: IIntegrationHistory['_id'];\n\tstep: IIntegrationHistory['step'];\n\tintegration?: IIntegration;\n\tevent?: OutgoingIntegrationEvent;\n\ttriggerWord?: string;\n\tranPrepareScript?: boolean;\n\tprepareSentMessage?: { channel: string; message: Partial<IMessage> }[];\n\tprocessSentMessage?: { channel: string; message: Partial<IMessage> }[];\n\tresultMessage?: { channel: string; message: Partial<IMessage> }[];\n\tfinished?: boolean;\n\turl?: string;\n\thttpCallData?: Record<string, any>; // ProcessedOutgoingRequest.data\n\thttpError?: any; // null or whatever error type `fetch` may throw\n\thttpResult?: string | null;\n\n\terror?: boolean;\n\terrorStack?: any; // Error | Error['stack']\n\n\tdata?: Record<string, any>;\n}) => {\n\tconst { user: userData, room: roomData, ...fullData } = data || {};\n\n\tconst history: AtLeast<IIntegrationHistory, 'type' | 'step'> = {\n\t\ttype: 'outgoing-webhook',\n\t\tstep,\n\n\t\t// Usually is only added on initial insert\n\t\t...(integration ? { integration } : {}),\n\t\t// Usually is only added on initial insert\n\t\t...(event ? { event } : {}),\n\t\t...(fullData\n\t\t\t? {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...fullData,\n\t\t\t\t\t\t...(userData ? { user: omit(userData, 'services') } : {}),\n\t\t\t\t\t\t...(roomData ? { room: roomData } : {}),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t: {}),\n\t\t...(triggerWord ? { triggerWord } : {}),\n\t\t...(typeof ranPrepareScript !== 'undefined' ? { ranPrepareScript } : {}),\n\t\t...(prepareSentMessage ? { prepareSentMessage } : {}),\n\t\t...(processSentMessage ? { processSentMessage } : {}),\n\t\t...(resultMessage ? { resultMessage } : {}),\n\t\t...(typeof finished !== 'undefined' ? { finished } : {}),\n\t\t...(url ? { url } : {}),\n\t\t...(typeof httpCallData !== 'undefined' ? { httpCallData } : {}),\n\t\t...(httpError ? { httpError } : {}),\n\t\t...(typeof httpResult !== 'undefined' ? { httpResult: JSON.stringify(httpResult, null, 2) } : {}),\n\t\t...(typeof error !== 'undefined' ? { error } : {}),\n\t\t...(typeof errorStack !== 'undefined' ? { errorStack } : {}),\n\t};\n\n\tif (historyId) {\n\t\t// Projecting just integration field to comply with existing listener behaviour\n\t\tconst integrationHistory = await IntegrationHistory.updateById(historyId, history, { projection: { 'integration._id': 1 } });\n\t\tif (!integrationHistory) {\n\t\t\tthrow new Error('error-updating-integration-history');\n\t\t}\n\t\tvoid notifyOnIntegrationHistoryChanged(integrationHistory, 'updated', history);\n\t\treturn historyId;\n\t}\n\n\t// Can't create a new history without there being an integration\n\tif (!history.integration) {\n\t\tthrow new Error('error-invalid-integration');\n\t}\n\n\t// TODO: Had to force type cast here because of function's signature\n\t// It would be easier if we separate into create and update functions\n\tconst { insertedId } = await IntegrationHistory.create(history as IIntegrationHistory);\n\n\tif (!insertedId) {\n\t\tthrow new Error('error-creating-integration-history');\n\t}\n\n\tvoid notifyOnIntegrationHistoryChangedById(insertedId, 'inserted');\n\n\treturn insertedId;\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"d2f23126c3f8fd8efce270f6ccdcbc8ae7fcc78d"}
