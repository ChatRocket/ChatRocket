{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/statistics/server/lib/SAUMonitor.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/statistics/server/lib/SAUMonitor.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/statistics/server/lib/SAUMonitor.ts","inputSourceMap":{"version":3,"file":"app/statistics/server/lib/SAUMonitor.ts","sourceRoot":"","sources":["app/statistics/server/lib/SAUMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISession, ISessionDevice, ISocketConnectionLogged, IUser } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Logger } from '@rocket.chat/logger';\nimport { Sessions, Users } from '@rocket.chat/models';\nimport mem from 'mem';\nimport { Meteor } from 'meteor/meteor';\nimport UAParser from 'ua-parser-js';\n\nimport { getMostImportantRole } from '../../../../lib/roles/getMostImportantRole';\nimport { getClientAddress } from '../../../../server/lib/getClientAddress';\nimport { aggregates } from '../../../../server/models/raw/Sessions';\nimport { sauEvents } from '../../../../server/services/sauMonitor/events';\nimport { UAParserMobile, UAParserDesktop } from './UAParserCustom';\n\ntype DateObj = { day: number; month: number; year: number };\n\nconst getDateObj = (dateTime = new Date()): DateObj => ({\n\tday: dateTime.getDate(),\n\tmonth: dateTime.getMonth() + 1,\n\tyear: dateTime.getFullYear(),\n});\n\nconst logger = new Logger('SAUMonitor');\n\nconst getUserRoles = mem(\n\tasync (userId: string): Promise<string[]> => {\n\t\tconst user = await Users.findOneById<Pick<IUser, 'roles'>>(userId, { projection: { roles: 1 } });\n\n\t\treturn user?.roles || [];\n\t},\n\t{ maxAge: 5000 },\n);\n\n/**\n * Server Session Monitor for SAU(Simultaneously Active Users) based on Meteor server sessions\n */\nexport class SAUMonitorClass {\n\tprivate _started: boolean;\n\n\tprivate _dailyComputeJobName: string;\n\n\tprivate _dailyFinishSessionsJobName: string;\n\n\tprivate scheduler = cronJobs;\n\n\tconstructor() {\n\t\tthis._started = false;\n\t\tthis._dailyComputeJobName = 'aggregate-sessions';\n\t\tthis._dailyFinishSessionsJobName = 'finish-sessions';\n\t}\n\n\tasync start(): Promise<void> {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this._startMonitoring();\n\n\t\tthis._started = true;\n\t\tlogger.debug('[start]');\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._started = false;\n\n\t\tif (await this.scheduler.has(this._dailyComputeJobName)) {\n\t\t\tawait this.scheduler.remove(this._dailyComputeJobName);\n\t\t}\n\t\tif (await this.scheduler.has(this._dailyFinishSessionsJobName)) {\n\t\t\tawait this.scheduler.remove(this._dailyFinishSessionsJobName);\n\t\t}\n\n\t\tlogger.debug('[stop]');\n\t}\n\n\tisRunning(): boolean {\n\t\treturn this._started === true;\n\t}\n\n\tasync _startMonitoring(): Promise<void> {\n\t\ttry {\n\t\t\tthis._handleAccountEvents();\n\t\t\tthis._handleOnConnection();\n\t\t\tawait this._startCronjobs();\n\t\t} catch (err: any) {\n\t\t\tthrow new Meteor.Error(err);\n\t\t}\n\t}\n\n\tprivate _handleOnConnection(): void {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsauEvents.on('socket.disconnected', async ({ id, instanceId }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait Sessions.closeByInstanceIdAndSessionId(instanceId, id);\n\t\t});\n\t}\n\n\tprivate _handleAccountEvents(): void {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsauEvents.on('accounts.login', async ({ userId, connection }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst roles = await getUserRoles(userId);\n\n\t\t\tconst mostImportantRole = getMostImportantRole(roles);\n\n\t\t\tconst loginAt = new Date();\n\t\t\tconst params = { userId, roles, mostImportantRole, loginAt, ...getDateObj() };\n\t\t\tawait this._handleSession(connection, params);\n\t\t});\n\n\t\tsauEvents.on('accounts.logout', async ({ userId, connection }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { id: sessionId } = connection;\n\n\t\t\tawait Sessions.logoutBySessionIdAndUserId({ sessionId, userId });\n\t\t});\n\t}\n\n\tprivate async _handleSession(\n\t\tconnection: ISocketConnectionLogged,\n\t\tparams: Pick<ISession, 'userId' | 'mostImportantRole' | 'loginAt' | 'day' | 'month' | 'year' | 'roles'>,\n\t): Promise<void> {\n\t\tconst data = this._getConnectionInfo(connection, params);\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst searchTerm = this._getSearchTerm(data);\n\n\t\tawait Sessions.createOrUpdate({ ...data, searchTerm });\n\t}\n\n\tprivate async _finishSessionsFromDate(yesterday: Date, today: Date): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { day, month, year } = getDateObj(yesterday);\n\t\tconst beforeDateTime = new Date(year, month - 1, day, 23, 59, 59, 999);\n\n\t\tconst currentDate = getDateObj(today);\n\t\tconst nextDateTime = new Date(currentDate.year, currentDate.month - 1, currentDate.day);\n\n\t\tconst cursor = Sessions.findSessionsNotClosedByDateWithoutLastActivity({ year, month, day });\n\n\t\tconst batch = [];\n\n\t\tfor await (const session of cursor) {\n\t\t\t// create a new session for the current day\n\t\t\tbatch.push({\n\t\t\t\t...session,\n\t\t\t\t...currentDate,\n\t\t\t\tcreatedAt: nextDateTime,\n\t\t\t});\n\n\t\t\tif (batch.length === 500) {\n\t\t\t\tawait Sessions.createBatch(batch);\n\t\t\t\tbatch.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (batch.length > 0) {\n\t\t\tawait Sessions.createBatch(batch);\n\t\t}\n\n\t\t// close all sessions from current 'date'\n\t\tawait Sessions.updateActiveSessionsByDate(\n\t\t\t{ year, month, day },\n\t\t\t{\n\t\t\t\tlastActivityAt: beforeDateTime,\n\t\t\t},\n\t\t);\n\n\t\t// TODO missing an action to perform on dangling sessions (for example remove sessions not closed one month ago)\n\t}\n\n\tprivate _getSearchTerm(session: Omit<ISession, '_id' | '_updatedAt' | 'createdAt' | 'searchTerm'>): string {\n\t\treturn [session.device?.name, session.device?.type, session.device?.os.name, session.sessionId, session.userId]\n\t\t\t.filter(Boolean)\n\t\t\t.join('');\n\t}\n\n\tprivate _getConnectionInfo(\n\t\tconnection: ISocketConnectionLogged,\n\t\tparams: Pick<ISession, 'userId' | 'mostImportantRole' | 'loginAt' | 'day' | 'month' | 'year' | 'roles'>,\n\t): Omit<ISession, '_id' | '_updatedAt' | 'createdAt' | 'searchTerm'> | undefined {\n\t\tif (!connection) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ip = getClientAddress(connection);\n\n\t\tconst host = connection.httpHeaders?.host ?? '';\n\n\t\treturn {\n\t\t\ttype: 'session',\n\t\t\tsessionId: connection.id,\n\t\t\tinstanceId: connection.instanceId,\n\t\t\t...(connection.loginToken && { loginToken: connection.loginToken }),\n\t\t\tip,\n\t\t\thost,\n\t\t\t...this._getUserAgentInfo(connection),\n\t\t\t...params,\n\t\t};\n\t}\n\n\tprivate _getUserAgentInfo(connection: ISocketConnectionLogged): { device: ISessionDevice } | undefined {\n\t\tif (!connection?.httpHeaders?.['user-agent']) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst uaString = connection.httpHeaders['user-agent'];\n\n\t\t// TODO define a type for \"result\" below\n\t\t// | UAParser.IResult\n\t\t// | { device: { type: string; model?: string }; browser: undefined; os: undefined; app: { name: string; version: string } }\n\t\t// | {\n\t\t// \t\tdevice: { type: string; model?: string };\n\t\t// \t\tbrowser: undefined;\n\t\t// \t\tos: string;\n\t\t// \t\tapp: { name: string; version: string };\n\t\t//   }\n\n\t\tconst result = ((): any => {\n\t\t\tif (UAParserMobile.isMobileApp(uaString)) {\n\t\t\t\treturn UAParserMobile.uaObject(uaString);\n\t\t\t}\n\n\t\t\tif (UAParserDesktop.isDesktopApp(uaString)) {\n\t\t\t\treturn UAParserDesktop.uaObject(uaString);\n\t\t\t}\n\n\t\t\tconst ua = new UAParser(uaString);\n\t\t\treturn ua.getResult();\n\t\t})();\n\n\t\tconst info: ISessionDevice = {\n\t\t\ttype: 'other',\n\t\t\tname: '',\n\t\t\tlongVersion: '',\n\t\t\tos: {\n\t\t\t\tname: '',\n\t\t\t\tversion: '',\n\t\t\t},\n\t\t\tversion: '',\n\t\t};\n\n\t\tconst removeEmptyProps = (obj: any): any => {\n\t\t\tObject.keys(obj).forEach((p) => (!obj[p] || obj[p] === undefined) && delete obj[p]);\n\t\t\treturn obj;\n\t\t};\n\n\t\tif (result.browser?.name) {\n\t\t\tinfo.type = 'browser';\n\t\t\tinfo.name = result.browser.name;\n\t\t\tinfo.longVersion = result.browser.version || '';\n\t\t}\n\n\t\tif (typeof result.os !== 'string' && result.os?.name) {\n\t\t\tinfo.os = removeEmptyProps(result.os) || '';\n\t\t}\n\n\t\tif (result.device && (result.device.type || result.device.model)) {\n\t\t\tinfo.type = result.device.type || '';\n\n\t\t\tif (result.hasOwnProperty('app') && result.app?.name) {\n\t\t\t\tinfo.name = result.app.name;\n\t\t\t\tinfo.longVersion = result.app.version;\n\t\t\t\tif (result.app.bundle) {\n\t\t\t\t\tinfo.longVersion += ` ${result.app.bundle}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof info.longVersion === 'string') {\n\t\t\tinfo.version = info.longVersion.match(/(\\d+\\.){0,2}\\d+/)?.[0] || '';\n\t\t}\n\n\t\treturn {\n\t\t\tdevice: info,\n\t\t};\n\t}\n\n\tprivate async _startCronjobs(): Promise<void> {\n\t\tlogger.info('[aggregate] - Start Cron.');\n\t\tconst dailyComputeProcessTime = '0 2 * * *';\n\t\tconst dailyFinishSessionProcessTime = '5 1 * * *';\n\t\tawait this.scheduler.add(this._dailyComputeJobName, dailyComputeProcessTime, async () => this._aggregate());\n\t\tawait this.scheduler.add(this._dailyFinishSessionsJobName, dailyFinishSessionProcessTime, async () => {\n\t\t\tconst yesterday = new Date();\n\t\t\tyesterday.setDate(yesterday.getDate() - 1);\n\n\t\t\tawait this._finishSessionsFromDate(yesterday, new Date());\n\t\t});\n\t}\n\n\tprivate async _aggregate(): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst today = new Date();\n\n\t\t// get sessions from 3 days ago to make sure even if a few cron jobs were skipped, we still have the data\n\t\tconst threeDaysAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 3, 0, 0, 0, 0);\n\n\t\tconst period = { start: getDateObj(threeDaysAgo), end: getDateObj(today) };\n\n\t\tlogger.info({ msg: '[aggregate] - Aggregating data.', period });\n\n\t\tfor await (const record of aggregates.dailySessions(Sessions.col, period)) {\n\t\t\tawait Sessions.updateDailySessionById(`${record.userId}-${record.year}-${record.month}-${record.day}`, record);\n\t\t}\n\n\t\tawait Sessions.updateAllSessionsByDateToComputed(period);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/statistics/server/lib/SAUMonitor.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/statistics/server/lib/SAUMonitor.ts","inputSourceMap":{"version":3,"file":"app/statistics/server/lib/SAUMonitor.ts","sourceRoot":"","sources":["app/statistics/server/lib/SAUMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISession, ISessionDevice, ISocketConnectionLogged, IUser } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Logger } from '@rocket.chat/logger';\nimport { Sessions, Users } from '@rocket.chat/models';\nimport mem from 'mem';\nimport { Meteor } from 'meteor/meteor';\nimport UAParser from 'ua-parser-js';\n\nimport { getMostImportantRole } from '../../../../lib/roles/getMostImportantRole';\nimport { getClientAddress } from '../../../../server/lib/getClientAddress';\nimport { aggregates } from '../../../../server/models/raw/Sessions';\nimport { sauEvents } from '../../../../server/services/sauMonitor/events';\nimport { UAParserMobile, UAParserDesktop } from './UAParserCustom';\n\ntype DateObj = { day: number; month: number; year: number };\n\nconst getDateObj = (dateTime = new Date()): DateObj => ({\n\tday: dateTime.getDate(),\n\tmonth: dateTime.getMonth() + 1,\n\tyear: dateTime.getFullYear(),\n});\n\nconst logger = new Logger('SAUMonitor');\n\nconst getUserRoles = mem(\n\tasync (userId: string): Promise<string[]> => {\n\t\tconst user = await Users.findOneById<Pick<IUser, 'roles'>>(userId, { projection: { roles: 1 } });\n\n\t\treturn user?.roles || [];\n\t},\n\t{ maxAge: 5000 },\n);\n\n/**\n * Server Session Monitor for SAU(Simultaneously Active Users) based on Meteor server sessions\n */\nexport class SAUMonitorClass {\n\tprivate _started: boolean;\n\n\tprivate _dailyComputeJobName: string;\n\n\tprivate _dailyFinishSessionsJobName: string;\n\n\tprivate scheduler = cronJobs;\n\n\tconstructor() {\n\t\tthis._started = false;\n\t\tthis._dailyComputeJobName = 'aggregate-sessions';\n\t\tthis._dailyFinishSessionsJobName = 'finish-sessions';\n\t}\n\n\tasync start(): Promise<void> {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this._startMonitoring();\n\n\t\tthis._started = true;\n\t\tlogger.debug('[start]');\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._started = false;\n\n\t\tif (await this.scheduler.has(this._dailyComputeJobName)) {\n\t\t\tawait this.scheduler.remove(this._dailyComputeJobName);\n\t\t}\n\t\tif (await this.scheduler.has(this._dailyFinishSessionsJobName)) {\n\t\t\tawait this.scheduler.remove(this._dailyFinishSessionsJobName);\n\t\t}\n\n\t\tlogger.debug('[stop]');\n\t}\n\n\tisRunning(): boolean {\n\t\treturn this._started === true;\n\t}\n\n\tasync _startMonitoring(): Promise<void> {\n\t\ttry {\n\t\t\tthis._handleAccountEvents();\n\t\t\tthis._handleOnConnection();\n\t\t\tawait this._startCronjobs();\n\t\t} catch (err: any) {\n\t\t\tthrow new Meteor.Error(err);\n\t\t}\n\t}\n\n\tprivate _handleOnConnection(): void {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsauEvents.on('socket.disconnected', async ({ id, instanceId }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait Sessions.closeByInstanceIdAndSessionId(instanceId, id);\n\t\t});\n\t}\n\n\tprivate _handleAccountEvents(): void {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsauEvents.on('accounts.login', async ({ userId, connection }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst roles = await getUserRoles(userId);\n\n\t\t\tconst mostImportantRole = getMostImportantRole(roles);\n\n\t\t\tconst loginAt = new Date();\n\t\t\tconst params = { userId, roles, mostImportantRole, loginAt, ...getDateObj() };\n\t\t\tawait this._handleSession(connection, params);\n\t\t});\n\n\t\tsauEvents.on('accounts.logout', async ({ userId, connection }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { id: sessionId } = connection;\n\n\t\t\tawait Sessions.logoutBySessionIdAndUserId({ sessionId, userId });\n\t\t});\n\t}\n\n\tprivate async _handleSession(\n\t\tconnection: ISocketConnectionLogged,\n\t\tparams: Pick<ISession, 'userId' | 'mostImportantRole' | 'loginAt' | 'day' | 'month' | 'year' | 'roles'>,\n\t): Promise<void> {\n\t\tconst data = this._getConnectionInfo(connection, params);\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst searchTerm = this._getSearchTerm(data);\n\n\t\tawait Sessions.createOrUpdate({ ...data, searchTerm });\n\t}\n\n\tprivate async _finishSessionsFromDate(yesterday: Date, today: Date): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { day, month, year } = getDateObj(yesterday);\n\t\tconst beforeDateTime = new Date(year, month - 1, day, 23, 59, 59, 999);\n\n\t\tconst currentDate = getDateObj(today);\n\t\tconst nextDateTime = new Date(currentDate.year, currentDate.month - 1, currentDate.day);\n\n\t\tconst cursor = Sessions.findSessionsNotClosedByDateWithoutLastActivity({ year, month, day });\n\n\t\tconst batch = [];\n\n\t\tfor await (const session of cursor) {\n\t\t\t// create a new session for the current day\n\t\t\tbatch.push({\n\t\t\t\t...session,\n\t\t\t\t...currentDate,\n\t\t\t\tcreatedAt: nextDateTime,\n\t\t\t});\n\n\t\t\tif (batch.length === 500) {\n\t\t\t\tawait Sessions.createBatch(batch);\n\t\t\t\tbatch.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (batch.length > 0) {\n\t\t\tawait Sessions.createBatch(batch);\n\t\t}\n\n\t\t// close all sessions from current 'date'\n\t\tawait Sessions.updateActiveSessionsByDate(\n\t\t\t{ year, month, day },\n\t\t\t{\n\t\t\t\tlastActivityAt: beforeDateTime,\n\t\t\t},\n\t\t);\n\n\t\t// TODO missing an action to perform on dangling sessions (for example remove sessions not closed one month ago)\n\t}\n\n\tprivate _getSearchTerm(session: Omit<ISession, '_id' | '_updatedAt' | 'createdAt' | 'searchTerm'>): string {\n\t\treturn [session.device?.name, session.device?.type, session.device?.os.name, session.sessionId, session.userId]\n\t\t\t.filter(Boolean)\n\t\t\t.join('');\n\t}\n\n\tprivate _getConnectionInfo(\n\t\tconnection: ISocketConnectionLogged,\n\t\tparams: Pick<ISession, 'userId' | 'mostImportantRole' | 'loginAt' | 'day' | 'month' | 'year' | 'roles'>,\n\t): Omit<ISession, '_id' | '_updatedAt' | 'createdAt' | 'searchTerm'> | undefined {\n\t\tif (!connection) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ip = getClientAddress(connection);\n\n\t\tconst host = connection.httpHeaders?.host ?? '';\n\n\t\treturn {\n\t\t\ttype: 'session',\n\t\t\tsessionId: connection.id,\n\t\t\tinstanceId: connection.instanceId,\n\t\t\t...(connection.loginToken && { loginToken: connection.loginToken }),\n\t\t\tip,\n\t\t\thost,\n\t\t\t...this._getUserAgentInfo(connection),\n\t\t\t...params,\n\t\t};\n\t}\n\n\tprivate _getUserAgentInfo(connection: ISocketConnectionLogged): { device: ISessionDevice } | undefined {\n\t\tif (!connection?.httpHeaders?.['user-agent']) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst uaString = connection.httpHeaders['user-agent'];\n\n\t\t// TODO define a type for \"result\" below\n\t\t// | UAParser.IResult\n\t\t// | { device: { type: string; model?: string }; browser: undefined; os: undefined; app: { name: string; version: string } }\n\t\t// | {\n\t\t// \t\tdevice: { type: string; model?: string };\n\t\t// \t\tbrowser: undefined;\n\t\t// \t\tos: string;\n\t\t// \t\tapp: { name: string; version: string };\n\t\t//   }\n\n\t\tconst result = ((): any => {\n\t\t\tif (UAParserMobile.isMobileApp(uaString)) {\n\t\t\t\treturn UAParserMobile.uaObject(uaString);\n\t\t\t}\n\n\t\t\tif (UAParserDesktop.isDesktopApp(uaString)) {\n\t\t\t\treturn UAParserDesktop.uaObject(uaString);\n\t\t\t}\n\n\t\t\tconst ua = new UAParser(uaString);\n\t\t\treturn ua.getResult();\n\t\t})();\n\n\t\tconst info: ISessionDevice = {\n\t\t\ttype: 'other',\n\t\t\tname: '',\n\t\t\tlongVersion: '',\n\t\t\tos: {\n\t\t\t\tname: '',\n\t\t\t\tversion: '',\n\t\t\t},\n\t\t\tversion: '',\n\t\t};\n\n\t\tconst removeEmptyProps = (obj: any): any => {\n\t\t\tObject.keys(obj).forEach((p) => (!obj[p] || obj[p] === undefined) && delete obj[p]);\n\t\t\treturn obj;\n\t\t};\n\n\t\tif (result.browser?.name) {\n\t\t\tinfo.type = 'browser';\n\t\t\tinfo.name = result.browser.name;\n\t\t\tinfo.longVersion = result.browser.version || '';\n\t\t}\n\n\t\tif (typeof result.os !== 'string' && result.os?.name) {\n\t\t\tinfo.os = removeEmptyProps(result.os) || '';\n\t\t}\n\n\t\tif (result.device && (result.device.type || result.device.model)) {\n\t\t\tinfo.type = result.device.type || '';\n\n\t\t\tif (result.hasOwnProperty('app') && result.app?.name) {\n\t\t\t\tinfo.name = result.app.name;\n\t\t\t\tinfo.longVersion = result.app.version;\n\t\t\t\tif (result.app.bundle) {\n\t\t\t\t\tinfo.longVersion += ` ${result.app.bundle}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof info.longVersion === 'string') {\n\t\t\tinfo.version = info.longVersion.match(/(\\d+\\.){0,2}\\d+/)?.[0] || '';\n\t\t}\n\n\t\treturn {\n\t\t\tdevice: info,\n\t\t};\n\t}\n\n\tprivate async _startCronjobs(): Promise<void> {\n\t\tlogger.info('[aggregate] - Start Cron.');\n\t\tconst dailyComputeProcessTime = '0 2 * * *';\n\t\tconst dailyFinishSessionProcessTime = '5 1 * * *';\n\t\tawait this.scheduler.add(this._dailyComputeJobName, dailyComputeProcessTime, async () => this._aggregate());\n\t\tawait this.scheduler.add(this._dailyFinishSessionsJobName, dailyFinishSessionProcessTime, async () => {\n\t\t\tconst yesterday = new Date();\n\t\t\tyesterday.setDate(yesterday.getDate() - 1);\n\n\t\t\tawait this._finishSessionsFromDate(yesterday, new Date());\n\t\t});\n\t}\n\n\tprivate async _aggregate(): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst today = new Date();\n\n\t\t// get sessions from 3 days ago to make sure even if a few cron jobs were skipped, we still have the data\n\t\tconst threeDaysAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 3, 0, 0, 0, 0);\n\n\t\tconst period = { start: getDateObj(threeDaysAgo), end: getDateObj(today) };\n\n\t\tlogger.info({ msg: '[aggregate] - Aggregating data.', period });\n\n\t\tfor await (const record of aggregates.dailySessions(Sessions.col, period)) {\n\t\t\tawait Sessions.updateDailySessionById(`${record.userId}-${record.year}-${record.month}-${record.day}`, record);\n\t\t}\n\n\t\tawait Sessions.updateAllSessionsByDateToComputed(period);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      SAUMonitorClass: () => SAUMonitorClass\n    });\n    let cronJobs;\n    module.link(\"@rocket.chat/cron\", {\n      cronJobs(v) {\n        cronJobs = v;\n      }\n    }, 0);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 1);\n    let Sessions, Users;\n    module.link(\"@rocket.chat/models\", {\n      Sessions(v) {\n        Sessions = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 2);\n    let mem;\n    module.link(\"mem\", {\n      default(v) {\n        mem = v;\n      }\n    }, 3);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 4);\n    let UAParser;\n    module.link(\"ua-parser-js\", {\n      default(v) {\n        UAParser = v;\n      }\n    }, 5);\n    let getMostImportantRole;\n    module.link(\"../../../../lib/roles/getMostImportantRole\", {\n      getMostImportantRole(v) {\n        getMostImportantRole = v;\n      }\n    }, 6);\n    let getClientAddress;\n    module.link(\"../../../../server/lib/getClientAddress\", {\n      getClientAddress(v) {\n        getClientAddress = v;\n      }\n    }, 7);\n    let aggregates;\n    module.link(\"../../../../server/models/raw/Sessions\", {\n      aggregates(v) {\n        aggregates = v;\n      }\n    }, 8);\n    let sauEvents;\n    module.link(\"../../../../server/services/sauMonitor/events\", {\n      sauEvents(v) {\n        sauEvents = v;\n      }\n    }, 9);\n    let UAParserMobile, UAParserDesktop;\n    module.link(\"./UAParserCustom\", {\n      UAParserMobile(v) {\n        UAParserMobile = v;\n      },\n      UAParserDesktop(v) {\n        UAParserDesktop = v;\n      }\n    }, 10);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const getDateObj = function () {\n      let dateTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n      return {\n        day: dateTime.getDate(),\n        month: dateTime.getMonth() + 1,\n        year: dateTime.getFullYear()\n      };\n    };\n    const logger = new Logger('SAUMonitor');\n    const getUserRoles = mem(async userId => {\n      const user = await Users.findOneById(userId, {\n        projection: {\n          roles: 1\n        }\n      });\n      return (user === null || user === void 0 ? void 0 : user.roles) || [];\n    }, {\n      maxAge: 5000\n    });\n    /**\n     * Server Session Monitor for SAU(Simultaneously Active Users) based on Meteor server sessions\n     */\n    class SAUMonitorClass {\n      constructor() {\n        this._started = void 0;\n        this._dailyComputeJobName = void 0;\n        this._dailyFinishSessionsJobName = void 0;\n        this.scheduler = cronJobs;\n        this._started = false;\n        this._dailyComputeJobName = 'aggregate-sessions';\n        this._dailyFinishSessionsJobName = 'finish-sessions';\n      }\n      async start() {\n        if (this.isRunning()) {\n          return;\n        }\n        await this._startMonitoring();\n        this._started = true;\n        logger.debug('[start]');\n      }\n      async stop() {\n        if (!this.isRunning()) {\n          return;\n        }\n        this._started = false;\n        if (await this.scheduler.has(this._dailyComputeJobName)) {\n          await this.scheduler.remove(this._dailyComputeJobName);\n        }\n        if (await this.scheduler.has(this._dailyFinishSessionsJobName)) {\n          await this.scheduler.remove(this._dailyFinishSessionsJobName);\n        }\n        logger.debug('[stop]');\n      }\n      isRunning() {\n        return this._started === true;\n      }\n      async _startMonitoring() {\n        try {\n          this._handleAccountEvents();\n          this._handleOnConnection();\n          await this._startCronjobs();\n        } catch (err) {\n          throw new Meteor.Error(err);\n        }\n      }\n      _handleOnConnection() {\n        if (this.isRunning()) {\n          return;\n        }\n        sauEvents.on('socket.disconnected', async _ref => {\n          let {\n            id,\n            instanceId\n          } = _ref;\n          if (!this.isRunning()) {\n            return;\n          }\n          await Sessions.closeByInstanceIdAndSessionId(instanceId, id);\n        });\n      }\n      _handleAccountEvents() {\n        if (this.isRunning()) {\n          return;\n        }\n        sauEvents.on('accounts.login', async _ref2 => {\n          let {\n            userId,\n            connection\n          } = _ref2;\n          if (!this.isRunning()) {\n            return;\n          }\n          const roles = await getUserRoles(userId);\n          const mostImportantRole = getMostImportantRole(roles);\n          const loginAt = new Date();\n          const params = _objectSpread({\n            userId,\n            roles,\n            mostImportantRole,\n            loginAt\n          }, getDateObj());\n          await this._handleSession(connection, params);\n        });\n        sauEvents.on('accounts.logout', async _ref3 => {\n          let {\n            userId,\n            connection\n          } = _ref3;\n          if (!this.isRunning()) {\n            return;\n          }\n          const {\n            id: sessionId\n          } = connection;\n          await Sessions.logoutBySessionIdAndUserId({\n            sessionId,\n            userId\n          });\n        });\n      }\n      async _handleSession(connection, params) {\n        const data = this._getConnectionInfo(connection, params);\n        if (!data) {\n          return;\n        }\n        const searchTerm = this._getSearchTerm(data);\n        await Sessions.createOrUpdate(_objectSpread(_objectSpread({}, data), {}, {\n          searchTerm\n        }));\n      }\n      async _finishSessionsFromDate(yesterday, today) {\n        if (!this.isRunning()) {\n          return;\n        }\n        const {\n          day,\n          month,\n          year\n        } = getDateObj(yesterday);\n        const beforeDateTime = new Date(year, month - 1, day, 23, 59, 59, 999);\n        const currentDate = getDateObj(today);\n        const nextDateTime = new Date(currentDate.year, currentDate.month - 1, currentDate.day);\n        const cursor = Sessions.findSessionsNotClosedByDateWithoutLastActivity({\n          year,\n          month,\n          day\n        });\n        const batch = [];\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(cursor), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const session = _step.value;\n            {\n              // create a new session for the current day\n              batch.push(_objectSpread(_objectSpread(_objectSpread({}, session), currentDate), {}, {\n                createdAt: nextDateTime\n              }));\n              if (batch.length === 500) {\n                await Sessions.createBatch(batch);\n                batch.length = 0;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        if (batch.length > 0) {\n          await Sessions.createBatch(batch);\n        }\n        // close all sessions from current 'date'\n        await Sessions.updateActiveSessionsByDate({\n          year,\n          month,\n          day\n        }, {\n          lastActivityAt: beforeDateTime\n        });\n        // TODO missing an action to perform on dangling sessions (for example remove sessions not closed one month ago)\n      }\n      _getSearchTerm(session) {\n        var _session$device, _session$device2, _session$device3;\n        return [(_session$device = session.device) === null || _session$device === void 0 ? void 0 : _session$device.name, (_session$device2 = session.device) === null || _session$device2 === void 0 ? void 0 : _session$device2.type, (_session$device3 = session.device) === null || _session$device3 === void 0 ? void 0 : _session$device3.os.name, session.sessionId, session.userId].filter(Boolean).join('');\n      }\n      _getConnectionInfo(connection, params) {\n        var _connection$httpHeade, _connection$httpHeade2;\n        if (!connection) {\n          return;\n        }\n        const ip = getClientAddress(connection);\n        const host = (_connection$httpHeade = (_connection$httpHeade2 = connection.httpHeaders) === null || _connection$httpHeade2 === void 0 ? void 0 : _connection$httpHeade2.host) !== null && _connection$httpHeade !== void 0 ? _connection$httpHeade : '';\n        return _objectSpread(_objectSpread(_objectSpread({\n          type: 'session',\n          sessionId: connection.id,\n          instanceId: connection.instanceId\n        }, connection.loginToken && {\n          loginToken: connection.loginToken\n        }), {}, {\n          ip,\n          host\n        }, this._getUserAgentInfo(connection)), params);\n      }\n      _getUserAgentInfo(connection) {\n        var _connection$httpHeade3, _result$browser, _result$os;\n        if (!(connection !== null && connection !== void 0 && (_connection$httpHeade3 = connection.httpHeaders) !== null && _connection$httpHeade3 !== void 0 && _connection$httpHeade3['user-agent'])) {\n          return;\n        }\n        const uaString = connection.httpHeaders['user-agent'];\n        // TODO define a type for \"result\" below\n        // | UAParser.IResult\n        // | { device: { type: string; model?: string }; browser: undefined; os: undefined; app: { name: string; version: string } }\n        // | {\n        // \t\tdevice: { type: string; model?: string };\n        // \t\tbrowser: undefined;\n        // \t\tos: string;\n        // \t\tapp: { name: string; version: string };\n        //   }\n        const result = (() => {\n          if (UAParserMobile.isMobileApp(uaString)) {\n            return UAParserMobile.uaObject(uaString);\n          }\n          if (UAParserDesktop.isDesktopApp(uaString)) {\n            return UAParserDesktop.uaObject(uaString);\n          }\n          const ua = new UAParser(uaString);\n          return ua.getResult();\n        })();\n        const info = {\n          type: 'other',\n          name: '',\n          longVersion: '',\n          os: {\n            name: '',\n            version: ''\n          },\n          version: ''\n        };\n        const removeEmptyProps = obj => {\n          Object.keys(obj).forEach(p => (!obj[p] || obj[p] === undefined) && delete obj[p]);\n          return obj;\n        };\n        if ((_result$browser = result.browser) !== null && _result$browser !== void 0 && _result$browser.name) {\n          info.type = 'browser';\n          info.name = result.browser.name;\n          info.longVersion = result.browser.version || '';\n        }\n        if (typeof result.os !== 'string' && (_result$os = result.os) !== null && _result$os !== void 0 && _result$os.name) {\n          info.os = removeEmptyProps(result.os) || '';\n        }\n        if (result.device && (result.device.type || result.device.model)) {\n          var _result$app;\n          info.type = result.device.type || '';\n          if (result.hasOwnProperty('app') && (_result$app = result.app) !== null && _result$app !== void 0 && _result$app.name) {\n            info.name = result.app.name;\n            info.longVersion = result.app.version;\n            if (result.app.bundle) {\n              info.longVersion += \" \".concat(result.app.bundle);\n            }\n          }\n        }\n        if (typeof info.longVersion === 'string') {\n          var _info$longVersion$mat;\n          info.version = ((_info$longVersion$mat = info.longVersion.match(/(\\d+\\.){0,2}\\d+/)) === null || _info$longVersion$mat === void 0 ? void 0 : _info$longVersion$mat[0]) || '';\n        }\n        return {\n          device: info\n        };\n      }\n      async _startCronjobs() {\n        logger.info('[aggregate] - Start Cron.');\n        const dailyComputeProcessTime = '0 2 * * *';\n        const dailyFinishSessionProcessTime = '5 1 * * *';\n        await this.scheduler.add(this._dailyComputeJobName, dailyComputeProcessTime, async () => this._aggregate());\n        await this.scheduler.add(this._dailyFinishSessionsJobName, dailyFinishSessionProcessTime, async () => {\n          const yesterday = new Date();\n          yesterday.setDate(yesterday.getDate() - 1);\n          await this._finishSessionsFromDate(yesterday, new Date());\n        });\n      }\n      async _aggregate() {\n        if (!this.isRunning()) {\n          return;\n        }\n        const today = new Date();\n        // get sessions from 3 days ago to make sure even if a few cron jobs were skipped, we still have the data\n        const threeDaysAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 3, 0, 0, 0, 0);\n        const period = {\n          start: getDateObj(threeDaysAgo),\n          end: getDateObj(today)\n        };\n        logger.info({\n          msg: '[aggregate] - Aggregating data.',\n          period\n        });\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(aggregates.dailySessions(Sessions.col, period)), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            const record = _step2.value;\n            {\n              await Sessions.updateDailySessionById(\"\".concat(record.userId, \"-\").concat(record.year, \"-\").concat(record.month, \"-\").concat(record.day), record);\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        await Sessions.updateAllSessionsByDateToComputed(period);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","SAUMonitorClass","cronJobs","Logger","Sessions","Users","mem","Meteor","UAParser","getMostImportantRole","getClientAddress","aggregates","sauEvents","UAParserMobile","UAParserDesktop","__reifyWaitForDeps__","getDateObj","dateTime","arguments","length","undefined","Date","day","getDate","month","getMonth","year","getFullYear","logger","getUserRoles","userId","user","findOneById","projection","roles","maxAge","constructor","_started","_dailyComputeJobName","_dailyFinishSessionsJobName","scheduler","start","isRunning","_startMonitoring","debug","stop","has","remove","_handleAccountEvents","_handleOnConnection","_startCronjobs","err","Error","on","_ref","id","instanceId","closeByInstanceIdAndSessionId","_ref2","connection","mostImportantRole","loginAt","params","_handleSession","_ref3","sessionId","logoutBySessionIdAndUserId","data","_getConnectionInfo","searchTerm","_getSearchTerm","createOrUpdate","_finishSessionsFromDate","yesterday","today","beforeDateTime","currentDate","nextDateTime","cursor","findSessionsNotClosedByDateWithoutLastActivity","batch","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","session","value","push","createdAt","createBatch","return","updateActiveSessionsByDate","lastActivityAt","_session$device","_session$device2","_session$device3","device","name","type","os","filter","Boolean","join","_connection$httpHeade","_connection$httpHeade2","ip","host","httpHeaders","loginToken","_getUserAgentInfo","_connection$httpHeade3","_result$browser","_result$os","uaString","result","isMobileApp","uaObject","isDesktopApp","ua","getResult","info","longVersion","version","removeEmptyProps","obj","Object","keys","forEach","p","browser","model","_result$app","hasOwnProperty","app","bundle","concat","_info$longVersion$mat","match","dailyComputeProcessTime","dailyFinishSessionProcessTime","add","_aggregate","setDate","threeDaysAgo","period","end","msg","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","dailySessions","col","_step2","record","updateDailySessionById","updateAllSessionsByDateToComputed","__reify_async_result__","_reifyError","self","async"],"sources":["app/statistics/server/lib/SAUMonitor.ts"],"sourcesContent":["import type { ISession, ISessionDevice, ISocketConnectionLogged, IUser } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Logger } from '@rocket.chat/logger';\nimport { Sessions, Users } from '@rocket.chat/models';\nimport mem from 'mem';\nimport { Meteor } from 'meteor/meteor';\nimport UAParser from 'ua-parser-js';\n\nimport { getMostImportantRole } from '../../../../lib/roles/getMostImportantRole';\nimport { getClientAddress } from '../../../../server/lib/getClientAddress';\nimport { aggregates } from '../../../../server/models/raw/Sessions';\nimport { sauEvents } from '../../../../server/services/sauMonitor/events';\nimport { UAParserMobile, UAParserDesktop } from './UAParserCustom';\n\ntype DateObj = { day: number; month: number; year: number };\n\nconst getDateObj = (dateTime = new Date()): DateObj => ({\n\tday: dateTime.getDate(),\n\tmonth: dateTime.getMonth() + 1,\n\tyear: dateTime.getFullYear(),\n});\n\nconst logger = new Logger('SAUMonitor');\n\nconst getUserRoles = mem(\n\tasync (userId: string): Promise<string[]> => {\n\t\tconst user = await Users.findOneById<Pick<IUser, 'roles'>>(userId, { projection: { roles: 1 } });\n\n\t\treturn user?.roles || [];\n\t},\n\t{ maxAge: 5000 },\n);\n\n/**\n * Server Session Monitor for SAU(Simultaneously Active Users) based on Meteor server sessions\n */\nexport class SAUMonitorClass {\n\tprivate _started: boolean;\n\n\tprivate _dailyComputeJobName: string;\n\n\tprivate _dailyFinishSessionsJobName: string;\n\n\tprivate scheduler = cronJobs;\n\n\tconstructor() {\n\t\tthis._started = false;\n\t\tthis._dailyComputeJobName = 'aggregate-sessions';\n\t\tthis._dailyFinishSessionsJobName = 'finish-sessions';\n\t}\n\n\tasync start(): Promise<void> {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this._startMonitoring();\n\n\t\tthis._started = true;\n\t\tlogger.debug('[start]');\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._started = false;\n\n\t\tif (await this.scheduler.has(this._dailyComputeJobName)) {\n\t\t\tawait this.scheduler.remove(this._dailyComputeJobName);\n\t\t}\n\t\tif (await this.scheduler.has(this._dailyFinishSessionsJobName)) {\n\t\t\tawait this.scheduler.remove(this._dailyFinishSessionsJobName);\n\t\t}\n\n\t\tlogger.debug('[stop]');\n\t}\n\n\tisRunning(): boolean {\n\t\treturn this._started === true;\n\t}\n\n\tasync _startMonitoring(): Promise<void> {\n\t\ttry {\n\t\t\tthis._handleAccountEvents();\n\t\t\tthis._handleOnConnection();\n\t\t\tawait this._startCronjobs();\n\t\t} catch (err: any) {\n\t\t\tthrow new Meteor.Error(err);\n\t\t}\n\t}\n\n\tprivate _handleOnConnection(): void {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsauEvents.on('socket.disconnected', async ({ id, instanceId }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait Sessions.closeByInstanceIdAndSessionId(instanceId, id);\n\t\t});\n\t}\n\n\tprivate _handleAccountEvents(): void {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsauEvents.on('accounts.login', async ({ userId, connection }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst roles = await getUserRoles(userId);\n\n\t\t\tconst mostImportantRole = getMostImportantRole(roles);\n\n\t\t\tconst loginAt = new Date();\n\t\t\tconst params = { userId, roles, mostImportantRole, loginAt, ...getDateObj() };\n\t\t\tawait this._handleSession(connection, params);\n\t\t});\n\n\t\tsauEvents.on('accounts.logout', async ({ userId, connection }) => {\n\t\t\tif (!this.isRunning()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { id: sessionId } = connection;\n\n\t\t\tawait Sessions.logoutBySessionIdAndUserId({ sessionId, userId });\n\t\t});\n\t}\n\n\tprivate async _handleSession(\n\t\tconnection: ISocketConnectionLogged,\n\t\tparams: Pick<ISession, 'userId' | 'mostImportantRole' | 'loginAt' | 'day' | 'month' | 'year' | 'roles'>,\n\t): Promise<void> {\n\t\tconst data = this._getConnectionInfo(connection, params);\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst searchTerm = this._getSearchTerm(data);\n\n\t\tawait Sessions.createOrUpdate({ ...data, searchTerm });\n\t}\n\n\tprivate async _finishSessionsFromDate(yesterday: Date, today: Date): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { day, month, year } = getDateObj(yesterday);\n\t\tconst beforeDateTime = new Date(year, month - 1, day, 23, 59, 59, 999);\n\n\t\tconst currentDate = getDateObj(today);\n\t\tconst nextDateTime = new Date(currentDate.year, currentDate.month - 1, currentDate.day);\n\n\t\tconst cursor = Sessions.findSessionsNotClosedByDateWithoutLastActivity({ year, month, day });\n\n\t\tconst batch = [];\n\n\t\tfor await (const session of cursor) {\n\t\t\t// create a new session for the current day\n\t\t\tbatch.push({\n\t\t\t\t...session,\n\t\t\t\t...currentDate,\n\t\t\t\tcreatedAt: nextDateTime,\n\t\t\t});\n\n\t\t\tif (batch.length === 500) {\n\t\t\t\tawait Sessions.createBatch(batch);\n\t\t\t\tbatch.length = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (batch.length > 0) {\n\t\t\tawait Sessions.createBatch(batch);\n\t\t}\n\n\t\t// close all sessions from current 'date'\n\t\tawait Sessions.updateActiveSessionsByDate(\n\t\t\t{ year, month, day },\n\t\t\t{\n\t\t\t\tlastActivityAt: beforeDateTime,\n\t\t\t},\n\t\t);\n\n\t\t// TODO missing an action to perform on dangling sessions (for example remove sessions not closed one month ago)\n\t}\n\n\tprivate _getSearchTerm(session: Omit<ISession, '_id' | '_updatedAt' | 'createdAt' | 'searchTerm'>): string {\n\t\treturn [session.device?.name, session.device?.type, session.device?.os.name, session.sessionId, session.userId]\n\t\t\t.filter(Boolean)\n\t\t\t.join('');\n\t}\n\n\tprivate _getConnectionInfo(\n\t\tconnection: ISocketConnectionLogged,\n\t\tparams: Pick<ISession, 'userId' | 'mostImportantRole' | 'loginAt' | 'day' | 'month' | 'year' | 'roles'>,\n\t): Omit<ISession, '_id' | '_updatedAt' | 'createdAt' | 'searchTerm'> | undefined {\n\t\tif (!connection) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ip = getClientAddress(connection);\n\n\t\tconst host = connection.httpHeaders?.host ?? '';\n\n\t\treturn {\n\t\t\ttype: 'session',\n\t\t\tsessionId: connection.id,\n\t\t\tinstanceId: connection.instanceId,\n\t\t\t...(connection.loginToken && { loginToken: connection.loginToken }),\n\t\t\tip,\n\t\t\thost,\n\t\t\t...this._getUserAgentInfo(connection),\n\t\t\t...params,\n\t\t};\n\t}\n\n\tprivate _getUserAgentInfo(connection: ISocketConnectionLogged): { device: ISessionDevice } | undefined {\n\t\tif (!connection?.httpHeaders?.['user-agent']) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst uaString = connection.httpHeaders['user-agent'];\n\n\t\t// TODO define a type for \"result\" below\n\t\t// | UAParser.IResult\n\t\t// | { device: { type: string; model?: string }; browser: undefined; os: undefined; app: { name: string; version: string } }\n\t\t// | {\n\t\t// \t\tdevice: { type: string; model?: string };\n\t\t// \t\tbrowser: undefined;\n\t\t// \t\tos: string;\n\t\t// \t\tapp: { name: string; version: string };\n\t\t//   }\n\n\t\tconst result = ((): any => {\n\t\t\tif (UAParserMobile.isMobileApp(uaString)) {\n\t\t\t\treturn UAParserMobile.uaObject(uaString);\n\t\t\t}\n\n\t\t\tif (UAParserDesktop.isDesktopApp(uaString)) {\n\t\t\t\treturn UAParserDesktop.uaObject(uaString);\n\t\t\t}\n\n\t\t\tconst ua = new UAParser(uaString);\n\t\t\treturn ua.getResult();\n\t\t})();\n\n\t\tconst info: ISessionDevice = {\n\t\t\ttype: 'other',\n\t\t\tname: '',\n\t\t\tlongVersion: '',\n\t\t\tos: {\n\t\t\t\tname: '',\n\t\t\t\tversion: '',\n\t\t\t},\n\t\t\tversion: '',\n\t\t};\n\n\t\tconst removeEmptyProps = (obj: any): any => {\n\t\t\tObject.keys(obj).forEach((p) => (!obj[p] || obj[p] === undefined) && delete obj[p]);\n\t\t\treturn obj;\n\t\t};\n\n\t\tif (result.browser?.name) {\n\t\t\tinfo.type = 'browser';\n\t\t\tinfo.name = result.browser.name;\n\t\t\tinfo.longVersion = result.browser.version || '';\n\t\t}\n\n\t\tif (typeof result.os !== 'string' && result.os?.name) {\n\t\t\tinfo.os = removeEmptyProps(result.os) || '';\n\t\t}\n\n\t\tif (result.device && (result.device.type || result.device.model)) {\n\t\t\tinfo.type = result.device.type || '';\n\n\t\t\tif (result.hasOwnProperty('app') && result.app?.name) {\n\t\t\t\tinfo.name = result.app.name;\n\t\t\t\tinfo.longVersion = result.app.version;\n\t\t\t\tif (result.app.bundle) {\n\t\t\t\t\tinfo.longVersion += ` ${result.app.bundle}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof info.longVersion === 'string') {\n\t\t\tinfo.version = info.longVersion.match(/(\\d+\\.){0,2}\\d+/)?.[0] || '';\n\t\t}\n\n\t\treturn {\n\t\t\tdevice: info,\n\t\t};\n\t}\n\n\tprivate async _startCronjobs(): Promise<void> {\n\t\tlogger.info('[aggregate] - Start Cron.');\n\t\tconst dailyComputeProcessTime = '0 2 * * *';\n\t\tconst dailyFinishSessionProcessTime = '5 1 * * *';\n\t\tawait this.scheduler.add(this._dailyComputeJobName, dailyComputeProcessTime, async () => this._aggregate());\n\t\tawait this.scheduler.add(this._dailyFinishSessionsJobName, dailyFinishSessionProcessTime, async () => {\n\t\t\tconst yesterday = new Date();\n\t\t\tyesterday.setDate(yesterday.getDate() - 1);\n\n\t\t\tawait this._finishSessionsFromDate(yesterday, new Date());\n\t\t});\n\t}\n\n\tprivate async _aggregate(): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst today = new Date();\n\n\t\t// get sessions from 3 days ago to make sure even if a few cron jobs were skipped, we still have the data\n\t\tconst threeDaysAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 3, 0, 0, 0, 0);\n\n\t\tconst period = { start: getDateObj(threeDaysAgo), end: getDateObj(today) };\n\n\t\tlogger.info({ msg: '[aggregate] - Aggregating data.', period });\n\n\t\tfor await (const record of aggregates.dailySessions(Sessions.col, period)) {\n\t\t\tawait Sessions.updateDailySessionById(`${record.userId}-${record.year}-${record.month}-${record.day}`, record);\n\t\t}\n\n\t\tawait Sessions.updateAllSessionsByDateToComputed(period);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"1c47a6e744721e4c4fa146bb396daefa19e3f0ec"}
