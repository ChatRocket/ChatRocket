{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/ami/PJSIPEndpoint.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/voip-asterisk/connector/asterisk/ami/PJSIPEndpoint.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/ami/PJSIPEndpoint.ts","inputSourceMap":{"version":3,"file":"server/services/voip-asterisk/connector/asterisk/ami/PJSIPEndpoint.ts","sourceRoot":"","sources":["server/services/voip-asterisk/connector/asterisk/ami/PJSIPEndpoint.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class is responsible for handling PJSIP endpoints.\n * @remarks\n * Some design notes :\n * 1. CommandFactory creates the child classes of the |Command| class and\n * \t  returns a reference to |Command|\n * 2. |CommandHandler| class call executeCommand method of |Command| class, which\n *    gets overriden here.\n * 3. Consumers of this class create the instance based on |Commands| object but\n *    specific command object 'knows' about asterisk-ami command. Reason for doing this is\n *    that the consumer does not and should not know about the pbx specific commands\n * \t  used for fetching the information. e.g for endpoint list and endpoint info,\n * \t  it uses pjsipshowendpoints and pjsipshowendpoint.\n * 4. Asterisk responds asynchronously and it responds using events. Command specific\n *    event handling is implemented by this class.\n * 5. Every execution of command takes action-callback, which tells whether the command can be\n *    executed or there is an error. In case of success, it ends set of events\n *    the completion of which is indicated by <action>completed event. e.g while fetching the endpoint,\n *    i.e for executing |pjsipshowendpoint|  asterisk sends the different parts of i\n *    nformation in different events. event |endpointdetail| indicates\n *    endpoint name, devicestate etc. |authdetail| indicates type of authentication, password and other\n *    auth related information. At the end of the series of these events, Asterisk sends |endpointdetailcomplete|\n * \t  event. At this point of time, promise, on which the consumer is waiting can be resolved.\n * 6. This class could use asynchronous callbacks. But because the connector will be used extensively by REST layer\n *    we have taken promise based approach. Promise is returned as a part of executeCommand. Caller would wait for\n *    the completion/rejection. This class will reject the promise based on error or resolve it in <command>complete\n *    event.\n * 7. Important to note that the intermediate events containing a result part for an execution of a particular command\n *    have same actionid, which is received by this class as a successful execution of a command in actionResultCallback.\n */\nimport { EndpointState } from '@rocket.chat/core-typings';\nimport type { IVoipConnectorResult, IExtensionDetails } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport type { Db } from 'mongodb';\nimport _ from 'underscore';\n\nimport { Command, CommandType } from '../Command';\nimport { Commands } from '../Commands';\nimport { CallbackContext } from './CallbackContext';\n\nexport class PJSIPEndpoint extends Command {\n\tprivate logger: Logger;\n\n\tconstructor(command: string, parametersNeeded: boolean, db: Db) {\n\t\tsuper(command, parametersNeeded, db);\n\t\tthis.logger = new Logger('PJSIPEndpoint');\n\t\tthis._type = CommandType.AMI;\n\t}\n\n\tprivate getState(endpointState: string): EndpointState {\n\t\t/**\n\t\t * When registered endpoint can be in following state\n\t\t * Not in use : When endpoint has registered but not serving any call.\n\t\t * Ringing : Registered and ringing\n\t\t * Busy : endpoing is handling call.\n\t\t *\n\t\t * If any other state is seen, this function returns EndpointState.UNKNOWN;\n\t\t */\n\n\t\tlet state: EndpointState = EndpointState.UNKNOWN;\n\t\tswitch (endpointState.toLowerCase()) {\n\t\t\tcase 'unavailable':\n\t\t\t\tstate = EndpointState.UNREGISTERED;\n\t\t\t\tbreak;\n\t\t\tcase 'not in use':\n\t\t\t\tstate = EndpointState.REGISTERED;\n\t\t\t\tbreak;\n\t\t\tcase 'ringing':\n\t\t\t\tstate = EndpointState.RINGING;\n\t\t\t\tbreak;\n\t\t\tcase 'busy':\n\t\t\t\tstate = EndpointState.BUSY;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn state;\n\t}\n\n\t/**\n\t * Event handler for endpointlist event containing the information of the endpoints.\n\t * @remark\n\t * This event is generated as a result of the execution of |pjsipshowendpoints|\n\t */\n\tonEndpointList(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointList() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// A SIP address-of-record is a canonical address by which a user is known\n\t\t// If the event doesn't have an AOR, we will ignore it (as it's probably system-only)\n\t\tif (!event?.aor.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst endPoint: IExtensionDetails = {\n\t\t\textension: event.objectname,\n\t\t\tstate: this.getState(event.devicestate),\n\t\t\tpassword: '',\n\t\t\tauthtype: '',\n\t\t};\n\t\tconst { result } = this;\n\t\tif (result.endpoints) {\n\t\t\tresult.endpoints.push(endPoint);\n\t\t} else {\n\t\t\t// create an array of endpoints in the result for\n\t\t\t// the first time.\n\t\t\tresult.endpoints = [];\n\t\t\tresult.endpoints.push(endPoint);\n\t\t}\n\t}\n\n\t/**\n\t * Event handler for endpointlistcomplete event indicating that all the data\n\t * is received.\n\t */\n\tonEndpointListComplete(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointListComplete() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.resetEventHandlers();\n\t\tconst extensions = _.sortBy(this.result.endpoints, (o: any) => {\n\t\t\treturn o.extension;\n\t\t});\n\t\tthis.returnResolve({ result: extensions } as IVoipConnectorResult);\n\t}\n\n\t/**\n\t * Event handler for endpointdetail and authdetail event containing the endpoint specific details\n\t * and authentication information.\n\t * @remark\n\t * This event is generated as a result of the execution of |pjsipshowendpoint|.\n\t * We consolidate this endpointdetail and authdetail events because they are generated\n\t * as a result of same command. Nevertheless, in future, if such implementation\n\t * becomes difficult, it is recommended that there should be a separate handling\n\t * for each event.\n\t */\n\tonEndpointInfo(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointInfo() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconst { result } = this;\n\n\t\tif (!result.endpoint) {\n\t\t\tconst endpointDetails: IExtensionDetails = {\n\t\t\t\textension: '',\n\t\t\t\tstate: '',\n\t\t\t\tpassword: '',\n\t\t\t\tauthtype: '',\n\t\t\t};\n\t\t\tresult.endpoint = endpointDetails;\n\t\t}\n\t\tif (event.event.toLowerCase() === 'endpointdetail') {\n\t\t\t(result.endpoint as IExtensionDetails).extension = event.objectname;\n\t\t\t(result.endpoint as IExtensionDetails).state = this.getState(event.devicestate);\n\t\t} else if (event.event.toLowerCase() === 'authdetail') {\n\t\t\t(result.endpoint as IExtensionDetails).password = event.password;\n\t\t\t(result.endpoint as IExtensionDetails).authtype = event.authtype;\n\t\t}\n\t}\n\n\t/**\n\t * Event handler for endpointdetailcomplete event indicating that all the data\n\t * is received.\n\t */\n\tonEndpointDetailComplete(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointDetailComplete() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.resetEventHandlers();\n\t\tconst { result } = this;\n\n\t\tthis.returnResolve({ result: result.endpoint } as IVoipConnectorResult);\n\t}\n\n\t/**\n\t * Callback for indicatiing command execution status.\n\t * Received actionid for the first time.\n\t */\n\tonActionResult(error: any, result: any): void {\n\t\tif (error) {\n\t\t\tthis.logger.error({ msg: 'onActionResult()', error: JSON.stringify(error) });\n\t\t\tthis.returnReject(`error${error} while executing command`);\n\t\t} else {\n\t\t\t// Set up actionid for future reference in case of success.\n\t\t\tthis.actionid = result.actionid;\n\t\t}\n\t}\n\n\tsetupEventHandlers(): void {\n\t\t// Setup necessary command event handlers based on the command\n\t\tswitch (this.commandText) {\n\t\t\tcase Commands.extension_list.toString(): {\n\t\t\t\tthis.connection.on('endpointlist', new CallbackContext(this.onEndpointList.bind(this), this));\n\t\t\t\tthis.connection.on('endpointlistcomplete', new CallbackContext(this.onEndpointListComplete.bind(this), this));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Commands.extension_info.toString(): {\n\t\t\t\tthis.connection.on('endpointdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n\t\t\t\tthis.connection.on('authdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n\t\t\t\tthis.connection.on('endpointdetailcomplete', new CallbackContext(this.onEndpointDetailComplete.bind(this), this));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthis.logger.error({ msg: `setupEventHandlers() : Unimplemented ${this.commandText}` });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tresetEventHandlers(): void {\n\t\tswitch (this.commandText) {\n\t\t\tcase Commands.extension_list.toString(): {\n\t\t\t\tthis.connection.off('endpointlist', this);\n\t\t\t\tthis.connection.off('endpointlistcomplete', this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Commands.extension_info.toString(): {\n\t\t\t\tthis.connection.off('endpointdetail', this);\n\t\t\t\tthis.connection.off('authdetail', this);\n\t\t\t\tthis.connection.off('endpointdetailcomplete', this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthis.logger.error({ msg: `resetEventHandlers() : Unimplemented ${this.commandText}` });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync executeCommand(data: any): Promise<IVoipConnectorResult> {\n\t\tlet amiCommand = {};\n\t\t// set up the specific action based on the value of |Commands|\n\t\tif (this.commandText === Commands.extension_list.toString()) {\n\t\t\tamiCommand = {\n\t\t\t\taction: 'pjsipshowendpoints',\n\t\t\t};\n\t\t} else if (this.commandText === Commands.extension_info.toString()) {\n\t\t\t// |pjsipshowendpoint| needs input parameter |endpoint| indicating\n\t\t\t// which endpoint information is to be queried.\n\t\t\tamiCommand = {\n\t\t\t\taction: 'pjsipshowendpoint',\n\t\t\t\tendpoint: data.extension,\n\t\t\t};\n\t\t}\n\t\tthis.logger.debug({ msg: `executeCommand() executing AMI command ${JSON.stringify(amiCommand)}`, data });\n\t\tconst actionResultCallback = this.onActionResult.bind(this);\n\t\tconst eventHandlerSetupCallback = this.setupEventHandlers.bind(this);\n\t\treturn super.prepareCommandAndExecution(amiCommand, actionResultCallback, eventHandlerSetupCallback);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/ami/PJSIPEndpoint.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/voip-asterisk/connector/asterisk/ami/PJSIPEndpoint.ts","inputSourceMap":{"version":3,"file":"server/services/voip-asterisk/connector/asterisk/ami/PJSIPEndpoint.ts","sourceRoot":"","sources":["server/services/voip-asterisk/connector/asterisk/ami/PJSIPEndpoint.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class is responsible for handling PJSIP endpoints.\n * @remarks\n * Some design notes :\n * 1. CommandFactory creates the child classes of the |Command| class and\n * \t  returns a reference to |Command|\n * 2. |CommandHandler| class call executeCommand method of |Command| class, which\n *    gets overriden here.\n * 3. Consumers of this class create the instance based on |Commands| object but\n *    specific command object 'knows' about asterisk-ami command. Reason for doing this is\n *    that the consumer does not and should not know about the pbx specific commands\n * \t  used for fetching the information. e.g for endpoint list and endpoint info,\n * \t  it uses pjsipshowendpoints and pjsipshowendpoint.\n * 4. Asterisk responds asynchronously and it responds using events. Command specific\n *    event handling is implemented by this class.\n * 5. Every execution of command takes action-callback, which tells whether the command can be\n *    executed or there is an error. In case of success, it ends set of events\n *    the completion of which is indicated by <action>completed event. e.g while fetching the endpoint,\n *    i.e for executing |pjsipshowendpoint|  asterisk sends the different parts of i\n *    nformation in different events. event |endpointdetail| indicates\n *    endpoint name, devicestate etc. |authdetail| indicates type of authentication, password and other\n *    auth related information. At the end of the series of these events, Asterisk sends |endpointdetailcomplete|\n * \t  event. At this point of time, promise, on which the consumer is waiting can be resolved.\n * 6. This class could use asynchronous callbacks. But because the connector will be used extensively by REST layer\n *    we have taken promise based approach. Promise is returned as a part of executeCommand. Caller would wait for\n *    the completion/rejection. This class will reject the promise based on error or resolve it in <command>complete\n *    event.\n * 7. Important to note that the intermediate events containing a result part for an execution of a particular command\n *    have same actionid, which is received by this class as a successful execution of a command in actionResultCallback.\n */\nimport { EndpointState } from '@rocket.chat/core-typings';\nimport type { IVoipConnectorResult, IExtensionDetails } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport type { Db } from 'mongodb';\nimport _ from 'underscore';\n\nimport { Command, CommandType } from '../Command';\nimport { Commands } from '../Commands';\nimport { CallbackContext } from './CallbackContext';\n\nexport class PJSIPEndpoint extends Command {\n\tprivate logger: Logger;\n\n\tconstructor(command: string, parametersNeeded: boolean, db: Db) {\n\t\tsuper(command, parametersNeeded, db);\n\t\tthis.logger = new Logger('PJSIPEndpoint');\n\t\tthis._type = CommandType.AMI;\n\t}\n\n\tprivate getState(endpointState: string): EndpointState {\n\t\t/**\n\t\t * When registered endpoint can be in following state\n\t\t * Not in use : When endpoint has registered but not serving any call.\n\t\t * Ringing : Registered and ringing\n\t\t * Busy : endpoing is handling call.\n\t\t *\n\t\t * If any other state is seen, this function returns EndpointState.UNKNOWN;\n\t\t */\n\n\t\tlet state: EndpointState = EndpointState.UNKNOWN;\n\t\tswitch (endpointState.toLowerCase()) {\n\t\t\tcase 'unavailable':\n\t\t\t\tstate = EndpointState.UNREGISTERED;\n\t\t\t\tbreak;\n\t\t\tcase 'not in use':\n\t\t\t\tstate = EndpointState.REGISTERED;\n\t\t\t\tbreak;\n\t\t\tcase 'ringing':\n\t\t\t\tstate = EndpointState.RINGING;\n\t\t\t\tbreak;\n\t\t\tcase 'busy':\n\t\t\t\tstate = EndpointState.BUSY;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn state;\n\t}\n\n\t/**\n\t * Event handler for endpointlist event containing the information of the endpoints.\n\t * @remark\n\t * This event is generated as a result of the execution of |pjsipshowendpoints|\n\t */\n\tonEndpointList(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointList() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// A SIP address-of-record is a canonical address by which a user is known\n\t\t// If the event doesn't have an AOR, we will ignore it (as it's probably system-only)\n\t\tif (!event?.aor.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst endPoint: IExtensionDetails = {\n\t\t\textension: event.objectname,\n\t\t\tstate: this.getState(event.devicestate),\n\t\t\tpassword: '',\n\t\t\tauthtype: '',\n\t\t};\n\t\tconst { result } = this;\n\t\tif (result.endpoints) {\n\t\t\tresult.endpoints.push(endPoint);\n\t\t} else {\n\t\t\t// create an array of endpoints in the result for\n\t\t\t// the first time.\n\t\t\tresult.endpoints = [];\n\t\t\tresult.endpoints.push(endPoint);\n\t\t}\n\t}\n\n\t/**\n\t * Event handler for endpointlistcomplete event indicating that all the data\n\t * is received.\n\t */\n\tonEndpointListComplete(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointListComplete() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.resetEventHandlers();\n\t\tconst extensions = _.sortBy(this.result.endpoints, (o: any) => {\n\t\t\treturn o.extension;\n\t\t});\n\t\tthis.returnResolve({ result: extensions } as IVoipConnectorResult);\n\t}\n\n\t/**\n\t * Event handler for endpointdetail and authdetail event containing the endpoint specific details\n\t * and authentication information.\n\t * @remark\n\t * This event is generated as a result of the execution of |pjsipshowendpoint|.\n\t * We consolidate this endpointdetail and authdetail events because they are generated\n\t * as a result of same command. Nevertheless, in future, if such implementation\n\t * becomes difficult, it is recommended that there should be a separate handling\n\t * for each event.\n\t */\n\tonEndpointInfo(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointInfo() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconst { result } = this;\n\n\t\tif (!result.endpoint) {\n\t\t\tconst endpointDetails: IExtensionDetails = {\n\t\t\t\textension: '',\n\t\t\t\tstate: '',\n\t\t\t\tpassword: '',\n\t\t\t\tauthtype: '',\n\t\t\t};\n\t\t\tresult.endpoint = endpointDetails;\n\t\t}\n\t\tif (event.event.toLowerCase() === 'endpointdetail') {\n\t\t\t(result.endpoint as IExtensionDetails).extension = event.objectname;\n\t\t\t(result.endpoint as IExtensionDetails).state = this.getState(event.devicestate);\n\t\t} else if (event.event.toLowerCase() === 'authdetail') {\n\t\t\t(result.endpoint as IExtensionDetails).password = event.password;\n\t\t\t(result.endpoint as IExtensionDetails).authtype = event.authtype;\n\t\t}\n\t}\n\n\t/**\n\t * Event handler for endpointdetailcomplete event indicating that all the data\n\t * is received.\n\t */\n\tonEndpointDetailComplete(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointDetailComplete() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.resetEventHandlers();\n\t\tconst { result } = this;\n\n\t\tthis.returnResolve({ result: result.endpoint } as IVoipConnectorResult);\n\t}\n\n\t/**\n\t * Callback for indicatiing command execution status.\n\t * Received actionid for the first time.\n\t */\n\tonActionResult(error: any, result: any): void {\n\t\tif (error) {\n\t\t\tthis.logger.error({ msg: 'onActionResult()', error: JSON.stringify(error) });\n\t\t\tthis.returnReject(`error${error} while executing command`);\n\t\t} else {\n\t\t\t// Set up actionid for future reference in case of success.\n\t\t\tthis.actionid = result.actionid;\n\t\t}\n\t}\n\n\tsetupEventHandlers(): void {\n\t\t// Setup necessary command event handlers based on the command\n\t\tswitch (this.commandText) {\n\t\t\tcase Commands.extension_list.toString(): {\n\t\t\t\tthis.connection.on('endpointlist', new CallbackContext(this.onEndpointList.bind(this), this));\n\t\t\t\tthis.connection.on('endpointlistcomplete', new CallbackContext(this.onEndpointListComplete.bind(this), this));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Commands.extension_info.toString(): {\n\t\t\t\tthis.connection.on('endpointdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n\t\t\t\tthis.connection.on('authdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n\t\t\t\tthis.connection.on('endpointdetailcomplete', new CallbackContext(this.onEndpointDetailComplete.bind(this), this));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthis.logger.error({ msg: `setupEventHandlers() : Unimplemented ${this.commandText}` });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tresetEventHandlers(): void {\n\t\tswitch (this.commandText) {\n\t\t\tcase Commands.extension_list.toString(): {\n\t\t\t\tthis.connection.off('endpointlist', this);\n\t\t\t\tthis.connection.off('endpointlistcomplete', this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Commands.extension_info.toString(): {\n\t\t\t\tthis.connection.off('endpointdetail', this);\n\t\t\t\tthis.connection.off('authdetail', this);\n\t\t\t\tthis.connection.off('endpointdetailcomplete', this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthis.logger.error({ msg: `resetEventHandlers() : Unimplemented ${this.commandText}` });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync executeCommand(data: any): Promise<IVoipConnectorResult> {\n\t\tlet amiCommand = {};\n\t\t// set up the specific action based on the value of |Commands|\n\t\tif (this.commandText === Commands.extension_list.toString()) {\n\t\t\tamiCommand = {\n\t\t\t\taction: 'pjsipshowendpoints',\n\t\t\t};\n\t\t} else if (this.commandText === Commands.extension_info.toString()) {\n\t\t\t// |pjsipshowendpoint| needs input parameter |endpoint| indicating\n\t\t\t// which endpoint information is to be queried.\n\t\t\tamiCommand = {\n\t\t\t\taction: 'pjsipshowendpoint',\n\t\t\t\tendpoint: data.extension,\n\t\t\t};\n\t\t}\n\t\tthis.logger.debug({ msg: `executeCommand() executing AMI command ${JSON.stringify(amiCommand)}`, data });\n\t\tconst actionResultCallback = this.onActionResult.bind(this);\n\t\tconst eventHandlerSetupCallback = this.setupEventHandlers.bind(this);\n\t\treturn super.prepareCommandAndExecution(amiCommand, actionResultCallback, eventHandlerSetupCallback);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      PJSIPEndpoint: () => PJSIPEndpoint\n    });\n    let EndpointState;\n    module.link(\"@rocket.chat/core-typings\", {\n      EndpointState(v) {\n        EndpointState = v;\n      }\n    }, 0);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 1);\n    let _;\n    module.link(\"underscore\", {\n      default(v) {\n        _ = v;\n      }\n    }, 2);\n    let Command, CommandType;\n    module.link(\"../Command\", {\n      Command(v) {\n        Command = v;\n      },\n      CommandType(v) {\n        CommandType = v;\n      }\n    }, 3);\n    let Commands;\n    module.link(\"../Commands\", {\n      Commands(v) {\n        Commands = v;\n      }\n    }, 4);\n    let CallbackContext;\n    module.link(\"./CallbackContext\", {\n      CallbackContext(v) {\n        CallbackContext = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class PJSIPEndpoint extends Command {\n      constructor(command, parametersNeeded, db) {\n        super(command, parametersNeeded, db);\n        this.logger = void 0;\n        this.logger = new Logger('PJSIPEndpoint');\n        this._type = CommandType.AMI;\n      }\n      getState(endpointState) {\n        /**\n         * When registered endpoint can be in following state\n         * Not in use : When endpoint has registered but not serving any call.\n         * Ringing : Registered and ringing\n         * Busy : endpoing is handling call.\n         *\n         * If any other state is seen, this function returns EndpointState.UNKNOWN;\n         */\n        let state = EndpointState.UNKNOWN;\n        switch (endpointState.toLowerCase()) {\n          case 'unavailable':\n            state = EndpointState.UNREGISTERED;\n            break;\n          case 'not in use':\n            state = EndpointState.REGISTERED;\n            break;\n          case 'ringing':\n            state = EndpointState.RINGING;\n            break;\n          case 'busy':\n            state = EndpointState.BUSY;\n            break;\n        }\n        return state;\n      }\n      /**\n       * Event handler for endpointlist event containing the information of the endpoints.\n       * @remark\n       * This event is generated as a result of the execution of |pjsipshowendpoints|\n       */\n      onEndpointList(event) {\n        if (event.actionid !== this.actionid) {\n          this.logger.error({\n            msg: 'onEndpointList() Unusual behavior. ActionId does not belong to this object',\n            eventActionId: event.actionid,\n            actionId: this.actionid\n          });\n          return;\n        }\n        // A SIP address-of-record is a canonical address by which a user is known\n        // If the event doesn't have an AOR, we will ignore it (as it's probably system-only)\n        if (!(event !== null && event !== void 0 && event.aor.trim())) {\n          return;\n        }\n        const endPoint = {\n          extension: event.objectname,\n          state: this.getState(event.devicestate),\n          password: '',\n          authtype: ''\n        };\n        const {\n          result\n        } = this;\n        if (result.endpoints) {\n          result.endpoints.push(endPoint);\n        } else {\n          // create an array of endpoints in the result for\n          // the first time.\n          result.endpoints = [];\n          result.endpoints.push(endPoint);\n        }\n      }\n      /**\n       * Event handler for endpointlistcomplete event indicating that all the data\n       * is received.\n       */\n      onEndpointListComplete(event) {\n        if (event.actionid !== this.actionid) {\n          this.logger.error({\n            msg: 'onEndpointListComplete() Unusual behavior. ActionId does not belong to this object',\n            eventActionId: event.actionid,\n            actionId: this.actionid\n          });\n          return;\n        }\n        this.resetEventHandlers();\n        const extensions = _.sortBy(this.result.endpoints, o => {\n          return o.extension;\n        });\n        this.returnResolve({\n          result: extensions\n        });\n      }\n      /**\n       * Event handler for endpointdetail and authdetail event containing the endpoint specific details\n       * and authentication information.\n       * @remark\n       * This event is generated as a result of the execution of |pjsipshowendpoint|.\n       * We consolidate this endpointdetail and authdetail events because they are generated\n       * as a result of same command. Nevertheless, in future, if such implementation\n       * becomes difficult, it is recommended that there should be a separate handling\n       * for each event.\n       */\n      onEndpointInfo(event) {\n        if (event.actionid !== this.actionid) {\n          this.logger.error({\n            msg: 'onEndpointInfo() Unusual behavior. ActionId does not belong to this object',\n            eventActionId: event.actionid,\n            actionId: this.actionid\n          });\n          return;\n        }\n        const {\n          result\n        } = this;\n        if (!result.endpoint) {\n          const endpointDetails = {\n            extension: '',\n            state: '',\n            password: '',\n            authtype: ''\n          };\n          result.endpoint = endpointDetails;\n        }\n        if (event.event.toLowerCase() === 'endpointdetail') {\n          result.endpoint.extension = event.objectname;\n          result.endpoint.state = this.getState(event.devicestate);\n        } else if (event.event.toLowerCase() === 'authdetail') {\n          result.endpoint.password = event.password;\n          result.endpoint.authtype = event.authtype;\n        }\n      }\n      /**\n       * Event handler for endpointdetailcomplete event indicating that all the data\n       * is received.\n       */\n      onEndpointDetailComplete(event) {\n        if (event.actionid !== this.actionid) {\n          this.logger.error({\n            msg: 'onEndpointDetailComplete() Unusual behavior. ActionId does not belong to this object',\n            eventActionId: event.actionid,\n            actionId: this.actionid\n          });\n          return;\n        }\n        this.resetEventHandlers();\n        const {\n          result\n        } = this;\n        this.returnResolve({\n          result: result.endpoint\n        });\n      }\n      /**\n       * Callback for indicatiing command execution status.\n       * Received actionid for the first time.\n       */\n      onActionResult(error, result) {\n        if (error) {\n          this.logger.error({\n            msg: 'onActionResult()',\n            error: JSON.stringify(error)\n          });\n          this.returnReject(\"error\".concat(error, \" while executing command\"));\n        } else {\n          // Set up actionid for future reference in case of success.\n          this.actionid = result.actionid;\n        }\n      }\n      setupEventHandlers() {\n        // Setup necessary command event handlers based on the command\n        switch (this.commandText) {\n          case Commands.extension_list.toString():\n            {\n              this.connection.on('endpointlist', new CallbackContext(this.onEndpointList.bind(this), this));\n              this.connection.on('endpointlistcomplete', new CallbackContext(this.onEndpointListComplete.bind(this), this));\n              break;\n            }\n          case Commands.extension_info.toString():\n            {\n              this.connection.on('endpointdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n              this.connection.on('authdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n              this.connection.on('endpointdetailcomplete', new CallbackContext(this.onEndpointDetailComplete.bind(this), this));\n              break;\n            }\n          default:\n            {\n              this.logger.error({\n                msg: \"setupEventHandlers() : Unimplemented \".concat(this.commandText)\n              });\n              break;\n            }\n        }\n      }\n      resetEventHandlers() {\n        switch (this.commandText) {\n          case Commands.extension_list.toString():\n            {\n              this.connection.off('endpointlist', this);\n              this.connection.off('endpointlistcomplete', this);\n              break;\n            }\n          case Commands.extension_info.toString():\n            {\n              this.connection.off('endpointdetail', this);\n              this.connection.off('authdetail', this);\n              this.connection.off('endpointdetailcomplete', this);\n              break;\n            }\n          default:\n            {\n              this.logger.error({\n                msg: \"resetEventHandlers() : Unimplemented \".concat(this.commandText)\n              });\n              break;\n            }\n        }\n      }\n      async executeCommand(data) {\n        let amiCommand = {};\n        // set up the specific action based on the value of |Commands|\n        if (this.commandText === Commands.extension_list.toString()) {\n          amiCommand = {\n            action: 'pjsipshowendpoints'\n          };\n        } else if (this.commandText === Commands.extension_info.toString()) {\n          // |pjsipshowendpoint| needs input parameter |endpoint| indicating\n          // which endpoint information is to be queried.\n          amiCommand = {\n            action: 'pjsipshowendpoint',\n            endpoint: data.extension\n          };\n        }\n        this.logger.debug({\n          msg: \"executeCommand() executing AMI command \".concat(JSON.stringify(amiCommand)),\n          data\n        });\n        const actionResultCallback = this.onActionResult.bind(this);\n        const eventHandlerSetupCallback = this.setupEventHandlers.bind(this);\n        return super.prepareCommandAndExecution(amiCommand, actionResultCallback, eventHandlerSetupCallback);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","PJSIPEndpoint","EndpointState","link","v","Logger","_","default","Command","CommandType","Commands","CallbackContext","__reifyWaitForDeps__","constructor","command","parametersNeeded","db","logger","_type","AMI","getState","endpointState","state","UNKNOWN","toLowerCase","UNREGISTERED","REGISTERED","RINGING","BUSY","onEndpointList","event","actionid","error","msg","eventActionId","actionId","aor","trim","endPoint","extension","objectname","devicestate","password","authtype","result","endpoints","push","onEndpointListComplete","resetEventHandlers","extensions","sortBy","o","returnResolve","onEndpointInfo","endpoint","endpointDetails","onEndpointDetailComplete","onActionResult","JSON","stringify","returnReject","concat","setupEventHandlers","commandText","extension_list","toString","connection","on","bind","extension_info","off","executeCommand","data","amiCommand","action","debug","actionResultCallback","eventHandlerSetupCallback","prepareCommandAndExecution","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/voip-asterisk/connector/asterisk/ami/PJSIPEndpoint.ts"],"sourcesContent":["/**\n * This class is responsible for handling PJSIP endpoints.\n * @remarks\n * Some design notes :\n * 1. CommandFactory creates the child classes of the |Command| class and\n * \t  returns a reference to |Command|\n * 2. |CommandHandler| class call executeCommand method of |Command| class, which\n *    gets overriden here.\n * 3. Consumers of this class create the instance based on |Commands| object but\n *    specific command object 'knows' about asterisk-ami command. Reason for doing this is\n *    that the consumer does not and should not know about the pbx specific commands\n * \t  used for fetching the information. e.g for endpoint list and endpoint info,\n * \t  it uses pjsipshowendpoints and pjsipshowendpoint.\n * 4. Asterisk responds asynchronously and it responds using events. Command specific\n *    event handling is implemented by this class.\n * 5. Every execution of command takes action-callback, which tells whether the command can be\n *    executed or there is an error. In case of success, it ends set of events\n *    the completion of which is indicated by <action>completed event. e.g while fetching the endpoint,\n *    i.e for executing |pjsipshowendpoint|  asterisk sends the different parts of i\n *    nformation in different events. event |endpointdetail| indicates\n *    endpoint name, devicestate etc. |authdetail| indicates type of authentication, password and other\n *    auth related information. At the end of the series of these events, Asterisk sends |endpointdetailcomplete|\n * \t  event. At this point of time, promise, on which the consumer is waiting can be resolved.\n * 6. This class could use asynchronous callbacks. But because the connector will be used extensively by REST layer\n *    we have taken promise based approach. Promise is returned as a part of executeCommand. Caller would wait for\n *    the completion/rejection. This class will reject the promise based on error or resolve it in <command>complete\n *    event.\n * 7. Important to note that the intermediate events containing a result part for an execution of a particular command\n *    have same actionid, which is received by this class as a successful execution of a command in actionResultCallback.\n */\nimport { EndpointState } from '@rocket.chat/core-typings';\nimport type { IVoipConnectorResult, IExtensionDetails } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport type { Db } from 'mongodb';\nimport _ from 'underscore';\n\nimport { Command, CommandType } from '../Command';\nimport { Commands } from '../Commands';\nimport { CallbackContext } from './CallbackContext';\n\nexport class PJSIPEndpoint extends Command {\n\tprivate logger: Logger;\n\n\tconstructor(command: string, parametersNeeded: boolean, db: Db) {\n\t\tsuper(command, parametersNeeded, db);\n\t\tthis.logger = new Logger('PJSIPEndpoint');\n\t\tthis._type = CommandType.AMI;\n\t}\n\n\tprivate getState(endpointState: string): EndpointState {\n\t\t/**\n\t\t * When registered endpoint can be in following state\n\t\t * Not in use : When endpoint has registered but not serving any call.\n\t\t * Ringing : Registered and ringing\n\t\t * Busy : endpoing is handling call.\n\t\t *\n\t\t * If any other state is seen, this function returns EndpointState.UNKNOWN;\n\t\t */\n\n\t\tlet state: EndpointState = EndpointState.UNKNOWN;\n\t\tswitch (endpointState.toLowerCase()) {\n\t\t\tcase 'unavailable':\n\t\t\t\tstate = EndpointState.UNREGISTERED;\n\t\t\t\tbreak;\n\t\t\tcase 'not in use':\n\t\t\t\tstate = EndpointState.REGISTERED;\n\t\t\t\tbreak;\n\t\t\tcase 'ringing':\n\t\t\t\tstate = EndpointState.RINGING;\n\t\t\t\tbreak;\n\t\t\tcase 'busy':\n\t\t\t\tstate = EndpointState.BUSY;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn state;\n\t}\n\n\t/**\n\t * Event handler for endpointlist event containing the information of the endpoints.\n\t * @remark\n\t * This event is generated as a result of the execution of |pjsipshowendpoints|\n\t */\n\tonEndpointList(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointList() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// A SIP address-of-record is a canonical address by which a user is known\n\t\t// If the event doesn't have an AOR, we will ignore it (as it's probably system-only)\n\t\tif (!event?.aor.trim()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst endPoint: IExtensionDetails = {\n\t\t\textension: event.objectname,\n\t\t\tstate: this.getState(event.devicestate),\n\t\t\tpassword: '',\n\t\t\tauthtype: '',\n\t\t};\n\t\tconst { result } = this;\n\t\tif (result.endpoints) {\n\t\t\tresult.endpoints.push(endPoint);\n\t\t} else {\n\t\t\t// create an array of endpoints in the result for\n\t\t\t// the first time.\n\t\t\tresult.endpoints = [];\n\t\t\tresult.endpoints.push(endPoint);\n\t\t}\n\t}\n\n\t/**\n\t * Event handler for endpointlistcomplete event indicating that all the data\n\t * is received.\n\t */\n\tonEndpointListComplete(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointListComplete() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.resetEventHandlers();\n\t\tconst extensions = _.sortBy(this.result.endpoints, (o: any) => {\n\t\t\treturn o.extension;\n\t\t});\n\t\tthis.returnResolve({ result: extensions } as IVoipConnectorResult);\n\t}\n\n\t/**\n\t * Event handler for endpointdetail and authdetail event containing the endpoint specific details\n\t * and authentication information.\n\t * @remark\n\t * This event is generated as a result of the execution of |pjsipshowendpoint|.\n\t * We consolidate this endpointdetail and authdetail events because they are generated\n\t * as a result of same command. Nevertheless, in future, if such implementation\n\t * becomes difficult, it is recommended that there should be a separate handling\n\t * for each event.\n\t */\n\tonEndpointInfo(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointInfo() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconst { result } = this;\n\n\t\tif (!result.endpoint) {\n\t\t\tconst endpointDetails: IExtensionDetails = {\n\t\t\t\textension: '',\n\t\t\t\tstate: '',\n\t\t\t\tpassword: '',\n\t\t\t\tauthtype: '',\n\t\t\t};\n\t\t\tresult.endpoint = endpointDetails;\n\t\t}\n\t\tif (event.event.toLowerCase() === 'endpointdetail') {\n\t\t\t(result.endpoint as IExtensionDetails).extension = event.objectname;\n\t\t\t(result.endpoint as IExtensionDetails).state = this.getState(event.devicestate);\n\t\t} else if (event.event.toLowerCase() === 'authdetail') {\n\t\t\t(result.endpoint as IExtensionDetails).password = event.password;\n\t\t\t(result.endpoint as IExtensionDetails).authtype = event.authtype;\n\t\t}\n\t}\n\n\t/**\n\t * Event handler for endpointdetailcomplete event indicating that all the data\n\t * is received.\n\t */\n\tonEndpointDetailComplete(event: any): void {\n\t\tif (event.actionid !== this.actionid) {\n\t\t\tthis.logger.error({\n\t\t\t\tmsg: 'onEndpointDetailComplete() Unusual behavior. ActionId does not belong to this object',\n\t\t\t\teventActionId: event.actionid,\n\t\t\t\tactionId: this.actionid,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tthis.resetEventHandlers();\n\t\tconst { result } = this;\n\n\t\tthis.returnResolve({ result: result.endpoint } as IVoipConnectorResult);\n\t}\n\n\t/**\n\t * Callback for indicatiing command execution status.\n\t * Received actionid for the first time.\n\t */\n\tonActionResult(error: any, result: any): void {\n\t\tif (error) {\n\t\t\tthis.logger.error({ msg: 'onActionResult()', error: JSON.stringify(error) });\n\t\t\tthis.returnReject(`error${error} while executing command`);\n\t\t} else {\n\t\t\t// Set up actionid for future reference in case of success.\n\t\t\tthis.actionid = result.actionid;\n\t\t}\n\t}\n\n\tsetupEventHandlers(): void {\n\t\t// Setup necessary command event handlers based on the command\n\t\tswitch (this.commandText) {\n\t\t\tcase Commands.extension_list.toString(): {\n\t\t\t\tthis.connection.on('endpointlist', new CallbackContext(this.onEndpointList.bind(this), this));\n\t\t\t\tthis.connection.on('endpointlistcomplete', new CallbackContext(this.onEndpointListComplete.bind(this), this));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Commands.extension_info.toString(): {\n\t\t\t\tthis.connection.on('endpointdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n\t\t\t\tthis.connection.on('authdetail', new CallbackContext(this.onEndpointInfo.bind(this), this));\n\t\t\t\tthis.connection.on('endpointdetailcomplete', new CallbackContext(this.onEndpointDetailComplete.bind(this), this));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthis.logger.error({ msg: `setupEventHandlers() : Unimplemented ${this.commandText}` });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tresetEventHandlers(): void {\n\t\tswitch (this.commandText) {\n\t\t\tcase Commands.extension_list.toString(): {\n\t\t\t\tthis.connection.off('endpointlist', this);\n\t\t\t\tthis.connection.off('endpointlistcomplete', this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Commands.extension_info.toString(): {\n\t\t\t\tthis.connection.off('endpointdetail', this);\n\t\t\t\tthis.connection.off('authdetail', this);\n\t\t\t\tthis.connection.off('endpointdetailcomplete', this);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthis.logger.error({ msg: `resetEventHandlers() : Unimplemented ${this.commandText}` });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync executeCommand(data: any): Promise<IVoipConnectorResult> {\n\t\tlet amiCommand = {};\n\t\t// set up the specific action based on the value of |Commands|\n\t\tif (this.commandText === Commands.extension_list.toString()) {\n\t\t\tamiCommand = {\n\t\t\t\taction: 'pjsipshowendpoints',\n\t\t\t};\n\t\t} else if (this.commandText === Commands.extension_info.toString()) {\n\t\t\t// |pjsipshowendpoint| needs input parameter |endpoint| indicating\n\t\t\t// which endpoint information is to be queried.\n\t\t\tamiCommand = {\n\t\t\t\taction: 'pjsipshowendpoint',\n\t\t\t\tendpoint: data.extension,\n\t\t\t};\n\t\t}\n\t\tthis.logger.debug({ msg: `executeCommand() executing AMI command ${JSON.stringify(amiCommand)}`, data });\n\t\tconst actionResultCallback = this.onActionResult.bind(this);\n\t\tconst eventHandlerSetupCallback = this.setupEventHandlers.bind(this);\n\t\treturn super.prepareCommandAndExecution(amiCommand, actionResultCallback, eventHandlerSetupCallback);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"29e08f330c210ffea5ec9ef3396ab8423e6e3b82"}
