{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/compareUserPasswordHistory.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/lib/compareUserPasswordHistory.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/compareUserPasswordHistory.ts","inputSourceMap":{"version":3,"file":"server/lib/compareUserPasswordHistory.ts","sourceRoot":"","sources":["server/lib/compareUserPasswordHistory.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AAErD;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAAC,IAAW,EAAE,IAAe;IAC5E,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,eAAe,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,mCAAmC,CAAC,EAAE,CAAC;QAC5F,OAAO,IAAI,CAAC;IACb,CAAC;IAED,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;QACjF,OAAO,KAAK,CAAC;IACd,CAAC;IAED,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;IACtD,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC,CAAC,CAAC;IAEvH,IAAI,KAAK,EAAE,MAAM,QAAQ,IAAI,eAAe,EAAE,CAAC;QAC9C,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC;YACtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,eAAe,CAAC;YAChD,OAAO,KAAK,CAAC;QACd,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC;QAEzC,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,IAAI;YACrC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE;YACpD,SAAS,EAAE,SAAkB;SAC7B,CAAC;QAEF,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,mBAAmB,CAAC,IAAmB,EAAE,eAAe,CAAC,CAAC;QAE3F,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,eAAe,CAAC;YAChD,OAAO,KAAK,CAAC;QACd,CAAC;IACF,CAAC;IAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,eAAe,CAAC;IAChD,OAAO,IAAI,CAAC;AACb,CAAC","sourcesContent":["import type { IUser, IPassword } from '@rocket.chat/core-typings';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { settings } from '../../app/settings/server';\n\n/**\n * Check if a given password is the one user by given user or if the user doesn't have a password\n * @param {object} user User object\n * @param {object} pass Object with { plain: 'plain-test-password' } or { sha256: 'sha256password' }\n */\nexport async function compareUserPasswordHistory(user: IUser, pass: IPassword): Promise<boolean> {\n\tif (!user?.services?.passwordHistory || !settings.get('Accounts_Password_History_Enabled')) {\n\t\treturn true;\n\t}\n\n\tif (!pass || (!pass.plain && !pass.sha256) || !user?.services?.password?.bcrypt) {\n\t\treturn false;\n\t}\n\n\tconst currentPassword = user.services.password.bcrypt;\n\tconst passwordHistory = user.services.passwordHistory.slice(-Number(settings.get('Accounts_Password_History_Amount')));\n\n\tfor await (const password of passwordHistory) {\n\t\tif (!password.trim()) {\n\t\t\tuser.services.password.bcrypt = currentPassword;\n\t\t\treturn false;\n\t\t}\n\t\tuser.services.password.bcrypt = password;\n\n\t\tconst historyPassword = pass.plain || {\n\t\t\tdigest: pass.sha256 ? pass.sha256.toLowerCase() : '',\n\t\t\talgorithm: 'sha-256' as const,\n\t\t};\n\n\t\tconst passCheck = await Accounts._checkPasswordAsync(user as Meteor.User, historyPassword);\n\n\t\tif (!passCheck.error) {\n\t\t\tuser.services.password.bcrypt = currentPassword;\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tuser.services.password.bcrypt = currentPassword;\n\treturn true;\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/compareUserPasswordHistory.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/compareUserPasswordHistory.ts","inputSourceMap":{"version":3,"file":"server/lib/compareUserPasswordHistory.ts","sourceRoot":"","sources":["server/lib/compareUserPasswordHistory.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AAErD;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAAC,IAAW,EAAE,IAAe;IAC5E,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,eAAe,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,mCAAmC,CAAC,EAAE,CAAC;QAC5F,OAAO,IAAI,CAAC;IACb,CAAC;IAED,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;QACjF,OAAO,KAAK,CAAC;IACd,CAAC;IAED,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;IACtD,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC,CAAC,CAAC;IAEvH,IAAI,KAAK,EAAE,MAAM,QAAQ,IAAI,eAAe,EAAE,CAAC;QAC9C,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC;YACtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,eAAe,CAAC;YAChD,OAAO,KAAK,CAAC;QACd,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC;QAEzC,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,IAAI;YACrC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE;YACpD,SAAS,EAAE,SAAkB;SAC7B,CAAC;QAEF,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,mBAAmB,CAAC,IAAmB,EAAE,eAAe,CAAC,CAAC;QAE3F,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACtB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,eAAe,CAAC;YAChD,OAAO,KAAK,CAAC;QACd,CAAC;IACF,CAAC;IAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,eAAe,CAAC;IAChD,OAAO,IAAI,CAAC;AACb,CAAC","sourcesContent":["import type { IUser, IPassword } from '@rocket.chat/core-typings';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { settings } from '../../app/settings/server';\n\n/**\n * Check if a given password is the one user by given user or if the user doesn't have a password\n * @param {object} user User object\n * @param {object} pass Object with { plain: 'plain-test-password' } or { sha256: 'sha256password' }\n */\nexport async function compareUserPasswordHistory(user: IUser, pass: IPassword): Promise<boolean> {\n\tif (!user?.services?.passwordHistory || !settings.get('Accounts_Password_History_Enabled')) {\n\t\treturn true;\n\t}\n\n\tif (!pass || (!pass.plain && !pass.sha256) || !user?.services?.password?.bcrypt) {\n\t\treturn false;\n\t}\n\n\tconst currentPassword = user.services.password.bcrypt;\n\tconst passwordHistory = user.services.passwordHistory.slice(-Number(settings.get('Accounts_Password_History_Amount')));\n\n\tfor await (const password of passwordHistory) {\n\t\tif (!password.trim()) {\n\t\t\tuser.services.password.bcrypt = currentPassword;\n\t\t\treturn false;\n\t\t}\n\t\tuser.services.password.bcrypt = password;\n\n\t\tconst historyPassword = pass.plain || {\n\t\t\tdigest: pass.sha256 ? pass.sha256.toLowerCase() : '',\n\t\t\talgorithm: 'sha-256' as const,\n\t\t};\n\n\t\tconst passCheck = await Accounts._checkPasswordAsync(user as Meteor.User, historyPassword);\n\n\t\tif (!passCheck.error) {\n\t\t\tuser.services.password.bcrypt = currentPassword;\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tuser.services.password.bcrypt = currentPassword;\n\treturn true;\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      compareUserPasswordHistory: () => compareUserPasswordHistory\n    });\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 0);\n    let settings;\n    module.link(\"../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function compareUserPasswordHistory(user, pass) {\n      var _user$services, _user$services2, _user$services2$passw;\n      if (!(user !== null && user !== void 0 && (_user$services = user.services) !== null && _user$services !== void 0 && _user$services.passwordHistory) || !settings.get('Accounts_Password_History_Enabled')) {\n        return true;\n      }\n      if (!pass || !pass.plain && !pass.sha256 || !(user !== null && user !== void 0 && (_user$services2 = user.services) !== null && _user$services2 !== void 0 && (_user$services2$passw = _user$services2.password) !== null && _user$services2$passw !== void 0 && _user$services2$passw.bcrypt)) {\n        return false;\n      }\n      const currentPassword = user.services.password.bcrypt;\n      const passwordHistory = user.services.passwordHistory.slice(-Number(settings.get('Accounts_Password_History_Amount')));\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(passwordHistory), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const password = _step.value;\n          {\n            if (!password.trim()) {\n              user.services.password.bcrypt = currentPassword;\n              return false;\n            }\n            user.services.password.bcrypt = password;\n            const historyPassword = pass.plain || {\n              digest: pass.sha256 ? pass.sha256.toLowerCase() : '',\n              algorithm: 'sha-256'\n            };\n            const passCheck = await Accounts._checkPasswordAsync(user, historyPassword);\n            if (!passCheck.error) {\n              user.services.password.bcrypt = currentPassword;\n              return false;\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      user.services.password.bcrypt = currentPassword;\n      return true;\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","compareUserPasswordHistory","Accounts","settings","__reifyWaitForDeps__","user","pass","_user$services","_user$services2","_user$services2$passw","services","passwordHistory","get","plain","sha256","password","bcrypt","currentPassword","slice","Number","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","trim","historyPassword","digest","toLowerCase","algorithm","passCheck","_checkPasswordAsync","error","err","return","__reify_async_result__","_reifyError","self","async"],"sources":["server/lib/compareUserPasswordHistory.ts"],"sourcesContent":["import type { IUser, IPassword } from '@rocket.chat/core-typings';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { settings } from '../../app/settings/server';\n\n/**\n * Check if a given password is the one user by given user or if the user doesn't have a password\n * @param {object} user User object\n * @param {object} pass Object with { plain: 'plain-test-password' } or { sha256: 'sha256password' }\n */\nexport async function compareUserPasswordHistory(user: IUser, pass: IPassword): Promise<boolean> {\n\tif (!user?.services?.passwordHistory || !settings.get('Accounts_Password_History_Enabled')) {\n\t\treturn true;\n\t}\n\n\tif (!pass || (!pass.plain && !pass.sha256) || !user?.services?.password?.bcrypt) {\n\t\treturn false;\n\t}\n\n\tconst currentPassword = user.services.password.bcrypt;\n\tconst passwordHistory = user.services.passwordHistory.slice(-Number(settings.get('Accounts_Password_History_Amount')));\n\n\tfor await (const password of passwordHistory) {\n\t\tif (!password.trim()) {\n\t\t\tuser.services.password.bcrypt = currentPassword;\n\t\t\treturn false;\n\t\t}\n\t\tuser.services.password.bcrypt = password;\n\n\t\tconst historyPassword = pass.plain || {\n\t\t\tdigest: pass.sha256 ? pass.sha256.toLowerCase() : '',\n\t\t\talgorithm: 'sha-256' as const,\n\t\t};\n\n\t\tconst passCheck = await Accounts._checkPasswordAsync(user as Meteor.User, historyPassword);\n\n\t\tif (!passCheck.error) {\n\t\t\tuser.services.password.bcrypt = currentPassword;\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tuser.services.password.bcrypt = currentPassword;\n\treturn true;\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"729c3fd94ad45c78504909acb4e08a257866f671"}
