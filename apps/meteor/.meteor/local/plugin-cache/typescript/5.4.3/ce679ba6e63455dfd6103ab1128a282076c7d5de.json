{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/misc.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/misc.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/misc.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/misc.ts","sourceRoot":"","sources":["app/api/server/v1/misc.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\n\nimport { isOAuthUser, type IUser } from '@rocket.chat/core-typings';\nimport { Settings, Users, WorkspaceCredentials } from '@rocket.chat/models';\nimport {\n\tisShieldSvgProps,\n\tisSpotlightProps,\n\tisDirectoryProps,\n\tisMethodCallProps,\n\tisMethodCallAnonProps,\n\tisFingerprintProps,\n\tisMeteorCall,\n} from '@rocket.chat/rest-typings';\nimport { escapeHTML } from '@rocket.chat/string-helpers';\nimport EJSON from 'ejson';\nimport { check } from 'meteor/check';\nimport { DDPRateLimiter } from 'meteor/ddp-rate-limiter';\nimport { Meteor } from 'meteor/meteor';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { getLogs } from '../../../../server/stream/stdout';\nimport { passwordPolicy } from '../../../lib/server';\nimport { notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { getBaseUserFields } from '../../../utils/server/functions/getBaseUserFields';\nimport { isSMTPConfigured } from '../../../utils/server/functions/isSMTPConfigured';\nimport { getURL } from '../../../utils/server/getURL';\nimport { API } from '../api';\nimport { getLoggedInUser } from '../helpers/getLoggedInUser';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams } from '../helpers/getUserFromParams';\nimport { getUserInfo } from '../helpers/getUserInfo';\n\n/**\n * @openapi\n *  /api/v1/me:\n *    get:\n *      description: Gets user data of the authenticated user\n *      security:\n *        - authenticated: []\n *      responses:\n *        200:\n *          description: The user data of the authenticated user\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      name:\n *                        type: string\n *                      username:\n *                        type: string\n *                      nickname:\n *                        type: string\n *                      emails:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            address:\n *                              type: string\n *                            verified:\n *                              type: boolean\n *                      email:\n *                        type: string\n *                      status:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusDefault:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusText:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusConnection:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      bio:\n *                        type: string\n *                      avatarOrigin:\n *                        type: string\n *                        enum: [none, local, upload, url]\n *                      utcOffset:\n *                        type: number\n *                      language:\n *                        type: string\n *                      settings:\n *                        type: object\n *                        properties:\n *                          preferences:\n *                            type: object\n *                      enableAutoAway:\n *                        type: boolean\n *                      idleTimeLimit:\n *                        type: number\n *                      roles:\n *                        type: array\n *                      active:\n *                        type: boolean\n *                      defaultRoom:\n *                        type: string\n *                      customFields:\n *                        type: array\n *                      requirePasswordChange:\n *                        type: boolean\n *                      requirePasswordChangeReason:\n *                        type: string\n *                      services:\n *                        type: object\n *                        properties:\n *                          github:\n *                            type: object\n *                          gitlab:\n *                            type: object\n *                          password:\n *                            type: object\n *                            properties:\n *                              exists:\n *                                type: boolean\n *                          totp:\n *                            type: object\n *                            properties:\n *                              enabled:\n *                                type: boolean\n *                          email2fa:\n *                            type: object\n *                            properties:\n *                              enabled:\n *                                type: boolean\n *                      statusLivechat:\n *                        type: string\n *                        enum: [available, 'not-available']\n *                      banners:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            id:\n *                              type: string\n *                            title:\n *                              type: string\n *                            text:\n *                              type: string\n *                            textArguments:\n *                              type: array\n *                              items: {}\n *                            modifiers:\n *                              type: array\n *                              items:\n *                                type: string\n *                            infoUrl:\n *                              type: string\n *                      oauth:\n *                        type: object\n *                        properties:\n *                          authorizedClients:\n *                            type: array\n *                            items:\n *                              type: string\n *                      _updatedAt:\n *                        type: string\n *                        format: date-time\n *                      avatarETag:\n *                        type: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'me',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst userFields = { ...getBaseUserFields(), services: 1 };\n\t\t\tconst { services, ...user } = (await Users.findOneById(this.userId, { projection: userFields })) as IUser;\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait getUserInfo({\n\t\t\t\t\t...user,\n\t\t\t\t\tisOAuthUser: isOAuthUser({ ...user, services }),\n\t\t\t\t\t...(services && {\n\t\t\t\t\t\tservices: {\n\t\t\t\t\t\t\t...(services.github && { github: services.github }),\n\t\t\t\t\t\t\t...(services.gitlab && { gitlab: services.gitlab }),\n\t\t\t\t\t\t\t...(services.email2fa?.enabled && { email2fa: { enabled: services.email2fa.enabled } }),\n\t\t\t\t\t\t\t...(services.totp?.enabled && { totp: { enabled: services.totp.enabled } }),\n\t\t\t\t\t\t\tpassword: {\n\t\t\t\t\t\t\t\t// The password hash shouldn't be leaked but the client may need to know if it exists.\n\t\t\t\t\t\t\t\texists: Boolean(services?.password?.bcrypt),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nlet onlineCache = 0;\nlet onlineCacheDate = 0;\nconst cacheInvalid = 60000; // 1 minute\n\nAPI.v1.addRoute(\n\t'shield.svg',\n\t{\n\t\tauthRequired: false,\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: 60,\n\t\t\tintervalTimeInMS: 60000,\n\t\t},\n\t\tvalidateParams: isShieldSvgProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { type, icon } = this.queryParams;\n\t\t\tlet { channel, name } = this.queryParams;\n\t\t\tif (!settings.get('API_Enable_Shields')) {\n\t\t\t\tthrow new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n\t\t\t\t\troute: '/api/v1/shield.svg',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst types = settings.get<string>('API_Shield_Types');\n\t\t\tif (\n\t\t\t\ttype &&\n\t\t\t\ttypes !== '*' &&\n\t\t\t\t!types\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((t: string) => t.trim())\n\t\t\t\t\t.includes(type)\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-shield-disabled', 'This shield type is disabled', {\n\t\t\t\t\troute: '/api/v1/shield.svg',\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst hideIcon = icon === 'false';\n\t\t\tif (hideIcon && !name?.trim()) {\n\t\t\t\treturn API.v1.failure('Name cannot be empty when icon is hidden');\n\t\t\t}\n\n\t\t\tlet text;\n\t\t\tlet backgroundColor = '#4c1';\n\t\t\tswitch (type) {\n\t\t\t\tcase 'online':\n\t\t\t\t\tif (Date.now() - onlineCacheDate > cacheInvalid) {\n\t\t\t\t\t\tonlineCache = await Users.countUsersNotOffline();\n\t\t\t\t\t\tonlineCacheDate = Date.now();\n\t\t\t\t\t}\n\n\t\t\t\t\ttext = `${onlineCache} ${i18n.t('Online')}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'channel':\n\t\t\t\t\tif (!channel) {\n\t\t\t\t\t\treturn API.v1.failure('Shield channel is required for type \"channel\"');\n\t\t\t\t\t}\n\n\t\t\t\t\ttext = `#${channel}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'user':\n\t\t\t\t\tif (settings.get('API_Shield_user_require_auth') && !(await getLoggedInUser(this.request))) {\n\t\t\t\t\t\treturn API.v1.failure('You must be logged in to do this.');\n\t\t\t\t\t}\n\t\t\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\t\t\t// Respect the server's choice for using their real names or not\n\t\t\t\t\tif (user.name && settings.get('UI_Use_Real_Name')) {\n\t\t\t\t\t\ttext = `${user.name}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttext = `@${user.username}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (user.status) {\n\t\t\t\t\t\tcase 'online':\n\t\t\t\t\t\t\tbackgroundColor = '#1fb31f';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'away':\n\t\t\t\t\t\t\tbackgroundColor = '#dc9b01';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'busy':\n\t\t\t\t\t\t\tbackgroundColor = '#bc2031';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'offline':\n\t\t\t\t\t\t\tbackgroundColor = '#a5a1a1';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttext = i18n.t('Join_Chat').toUpperCase();\n\t\t\t}\n\n\t\t\tconst iconSize = hideIcon ? 7 : 24;\n\t\t\tconst leftSize = name ? name.length * 6 + 7 + iconSize : iconSize;\n\t\t\tconst rightSize = text.length * 6 + 20;\n\t\t\tconst width = leftSize + rightSize;\n\t\t\tconst height = 20;\n\n\t\t\tchannel = escapeHTML(channel);\n\t\t\ttext = escapeHTML(text);\n\t\t\tname = escapeHTML(name);\n\n\t\t\treturn {\n\t\t\t\theaders: { 'Content-Type': 'image/svg+xml;charset=utf-8' },\n\t\t\t\tbody: `\n\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"${width}\" height=\"${height}\">\n\t\t\t\t\t<linearGradient id=\"b\" x2=\"0\" y2=\"100%\">\n\t\t\t\t\t\t<stop offset=\"0\" stop-color=\"#bbb\" stop-opacity=\".1\"/>\n\t\t\t\t\t\t<stop offset=\"1\" stop-opacity=\".1\"/>\n\t\t\t\t\t</linearGradient>\n\t\t\t\t\t<mask id=\"a\">\n\t\t\t\t\t\t<rect width=\"${width}\" height=\"${height}\" rx=\"3\" fill=\"#fff\"/>\n\t\t\t\t\t</mask>\n\t\t\t\t\t<g mask=\"url(#a)\">\n\t\t\t\t\t\t<path fill=\"#555\" d=\"M0 0h${leftSize}v${height}H0z\"/>\n\t\t\t\t\t\t<path fill=\"${backgroundColor}\" d=\"M${leftSize} 0h${rightSize}v${height}H${leftSize}z\"/>\n\t\t\t\t\t\t<path fill=\"url(#b)\" d=\"M0 0h${width}v${height}H0z\"/>\n\t\t\t\t\t</g>\n\t\t\t\t\t\t${hideIcon ? '' : `<image x=\"5\" y=\"3\" width=\"14\" height=\"14\" xlink:href=\"${getURL('/assets/favicon.svg', { full: true })}\"/>`}\n\t\t\t\t\t<g fill=\"#fff\" font-family=\"DejaVu Sans,Verdana,Geneva,sans-serif\" font-size=\"11\">\n\t\t\t\t\t\t${\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t? `<text x=\"${iconSize}\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">${name}</text>\n\t\t\t\t\t\t<text x=\"${iconSize}\" y=\"14\">${name}</text>`\n\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<text x=\"${leftSize + 7}\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">${text}</text>\n\t\t\t\t\t\t<text x=\"${leftSize + 7}\" y=\"14\">${text}</text>\n\t\t\t\t\t</g>\n\t\t\t\t</svg>\n\t\t\t`\n\t\t\t\t\t.trim()\n\t\t\t\t\t.replace(/\\>[\\s]+\\</gm, '><'),\n\t\t\t} as any;\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'spotlight',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSpotlightProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = this.queryParams;\n\n\t\t\tconst result = await Meteor.callAsync('spotlight', query);\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'directory',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDirectoryProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, query } = await this.parseJsonQuery();\n\t\t\tconst { text, type, workspace = 'local' } = this.queryParams;\n\n\t\t\tconst filter = {\n\t\t\t\t...(query ? { ...query } : {}),\n\t\t\t\t...(text ? { text } : {}),\n\t\t\t\t...(type ? { type } : {}),\n\t\t\t\t...(workspace ? { workspace } : {}),\n\t\t\t};\n\n\t\t\tif (sort && Object.keys(sort).length > 1) {\n\t\t\t\treturn API.v1.failure('This method support only one \"sort\" parameter');\n\t\t\t}\n\t\t\tconst sortBy = sort ? Object.keys(sort)[0] : undefined;\n\t\t\tconst sortDirection = sort && Object.values(sort)[0] === 1 ? 'asc' : 'desc';\n\n\t\t\tconst result = await Meteor.callAsync('browseChannels', {\n\t\t\t\t...filter,\n\t\t\t\tsortBy,\n\t\t\t\tsortDirection,\n\t\t\t\toffset: Math.max(0, offset),\n\t\t\t\tlimit: Math.max(0, count),\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.failure('Please verify the parameters');\n\t\t\t}\n\t\t\treturn API.v1.success({\n\t\t\t\tresult: result.results,\n\t\t\t\tcount: result.results.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: result.total,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'pw.getPolicy',\n\t{\n\t\tauthRequired: false,\n\t},\n\t{\n\t\tget() {\n\t\t\treturn API.v1.success(passwordPolicy.getPasswordPolicy());\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/stdout.queue:\n *    get:\n *      description: Retrieves last 1000 lines of server logs\n *      security:\n *        - authenticated: ['view-logs']\n *      responses:\n *        200:\n *          description: The user data of the authenticated user\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      queue:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            id:\n *                              type: string\n *                            string:\n *                              type: string\n *                            ts:\n *                              type: string\n *                              format: date-time\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'stdout.queue',\n\t{ authRequired: true, permissionsRequired: ['view-logs'] },\n\t{\n\t\tasync get() {\n\t\t\treturn API.v1.success({ queue: getLogs() });\n\t\t},\n\t},\n);\n\ndeclare module '@rocket.chat/rest-typings' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface Endpoints {\n\t\t'method.call/:method': {\n\t\t\tPOST: (params: { method: string; args: any[] }) => any;\n\t\t};\n\t\t'method.callAnon/:method': {\n\t\t\tPOST: (params: { method: string; args: any[] }) => any;\n\t\t};\n\t}\n}\n\nconst mountResult = ({\n\tid,\n\terror,\n\tresult,\n}: {\n\tid: string;\n\terror?: unknown;\n\tresult?: unknown;\n}): {\n\tmessage: string;\n} => ({\n\tmessage: EJSON.stringify({\n\t\tmsg: 'result',\n\t\tid,\n\t\terror: error as any,\n\t\tresult: result as any,\n\t}),\n});\n\n// had to create two different endpoints for authenticated and non-authenticated calls\n// because restivus does not provide 'this.userId' if 'authRequired: false'\nAPI.v1.addRoute(\n\t'method.call/:method',\n\t{\n\t\tauthRequired: true,\n\t\trateLimiterOptions: false,\n\t\tvalidateParams: isMeteorCall,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tmessage: String,\n\t\t\t});\n\n\t\t\tconst data = EJSON.parse(this.bodyParams.message);\n\n\t\t\tif (!isMethodCallProps(data)) {\n\t\t\t\treturn API.v1.failure('Invalid method call');\n\t\t\t}\n\n\t\t\tconst { method, params, id } = data;\n\n\t\t\tconst connectionId =\n\t\t\t\tthis.token ||\n\t\t\t\tcrypto\n\t\t\t\t\t.createHash('md5')\n\t\t\t\t\t.update(this.requestIp + this.user._id)\n\t\t\t\t\t.digest('hex');\n\n\t\t\tconst rateLimiterInput = {\n\t\t\t\tuserId: this.userId,\n\t\t\t\tclientAddress: this.requestIp,\n\t\t\t\ttype: 'method',\n\t\t\t\tname: method,\n\t\t\t\tconnectionId,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tDDPRateLimiter._increment(rateLimiterInput);\n\t\t\t\tconst rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n\t\t\t\tif (!rateLimitResult.allowed) {\n\t\t\t\t\tthrow new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n\t\t\t\t\t\ttimeToReset: rateLimitResult.timeToReset,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst result = await Meteor.callAsync(method, ...params);\n\t\t\t\treturn API.v1.success(mountResult({ id, result }));\n\t\t\t} catch (err) {\n\t\t\t\tif (!(err as any).isClientSafe && !(err as any).meteorError) {\n\t\t\t\t\tSystemLogger.error({ msg: `Exception while invoking method ${method}`, err });\n\t\t\t\t}\n\n\t\t\t\tif (settings.get('Log_Level') === '2') {\n\t\t\t\t\tMeteor._debug(`Exception while invoking method ${method}`, err);\n\t\t\t\t}\n\t\t\t\treturn API.v1.success(mountResult({ id, error: err }));\n\t\t\t}\n\t\t},\n\t},\n);\nAPI.v1.addRoute(\n\t'method.callAnon/:method',\n\t{\n\t\tauthRequired: false,\n\t\trateLimiterOptions: false,\n\t\tvalidateParams: isMeteorCall,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tmessage: String,\n\t\t\t});\n\n\t\t\tconst data = EJSON.parse(this.bodyParams.message);\n\n\t\t\tif (!isMethodCallAnonProps(data)) {\n\t\t\t\treturn API.v1.failure('Invalid method call');\n\t\t\t}\n\n\t\t\tconst { method, params, id } = data;\n\n\t\t\tconst connectionId = this.token || crypto.createHash('md5').update(this.requestIp).digest('hex');\n\n\t\t\tconst rateLimiterInput = {\n\t\t\t\tuserId: this.userId || undefined,\n\t\t\t\tclientAddress: this.requestIp,\n\t\t\t\ttype: 'method',\n\t\t\t\tname: method,\n\t\t\t\tconnectionId,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tDDPRateLimiter._increment(rateLimiterInput);\n\n\t\t\t\tconst rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n\t\t\t\tif (!rateLimitResult.allowed) {\n\t\t\t\t\tthrow new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n\t\t\t\t\t\ttimeToReset: rateLimitResult.timeToReset,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst result = await Meteor.callAsync(method, ...params);\n\t\t\t\treturn API.v1.success(mountResult({ id, result }));\n\t\t\t} catch (err) {\n\t\t\t\tif (!(err as any).isClientSafe && !(err as any).meteorError) {\n\t\t\t\t\tSystemLogger.error({ msg: `Exception while invoking method ${method}`, err });\n\t\t\t\t}\n\t\t\t\tif (settings.get('Log_Level') === '2') {\n\t\t\t\t\tMeteor._debug(`Exception while invoking method ${method}`, err);\n\t\t\t\t}\n\t\t\t\treturn API.v1.success(mountResult({ id, error: err }));\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'smtp.check',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\treturn API.v1.success({ isSMTPConfigured: isSMTPConfigured() });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/fingerprint:\n *    post:\n *      description: Update Fingerprint definition as a new workspace or update of configuration\n *      security:\n *        $ref: '#/security/authenticated'\n *      requestBody:\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                setDeploymentAs:\n *                  type: string\n *            example: |\n *              {\n *                 \"setDeploymentAs\": \"new-workspace\"\n *              }\n *      responses:\n *        200:\n *          description: Workspace successfully configured\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'fingerprint',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isFingerprintProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tsetDeploymentAs: String,\n\t\t\t});\n\n\t\t\tconst settingsIds: string[] = [];\n\n\t\t\tif (this.bodyParams.setDeploymentAs === 'new-workspace') {\n\t\t\t\tawait WorkspaceCredentials.unsetCredentialByScope();\n\t\t\t\tsettingsIds.push(\n\t\t\t\t\t'Cloud_Service_Agree_PrivacyTerms',\n\t\t\t\t\t'Cloud_Workspace_Id',\n\t\t\t\t\t'Cloud_Workspace_Name',\n\t\t\t\t\t'Cloud_Workspace_Client_Id',\n\t\t\t\t\t'Cloud_Workspace_Client_Secret',\n\t\t\t\t\t'Cloud_Workspace_Client_Secret_Expires_At',\n\t\t\t\t\t'Cloud_Workspace_Registration_Client_Uri',\n\t\t\t\t\t'Cloud_Workspace_PublicKey',\n\t\t\t\t\t'Cloud_Workspace_License',\n\t\t\t\t\t'Cloud_Workspace_Had_Trial',\n\t\t\t\t\t'uniqueID',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tsettingsIds.push('Deployment_FingerPrint_Verified');\n\n\t\t\tconst promises = settingsIds.map((settingId) => {\n\t\t\t\tif (settingId === 'uniqueID') {\n\t\t\t\t\treturn Settings.resetValueById('uniqueID', process.env.DEPLOYMENT_ID || uuidv4());\n\t\t\t\t}\n\n\t\t\t\tif (settingId === 'Cloud_Workspace_Access_Token_Expires_At') {\n\t\t\t\t\treturn Settings.resetValueById('Cloud_Workspace_Access_Token_Expires_At', new Date(0));\n\t\t\t\t}\n\n\t\t\t\tif (settingId === 'Deployment_FingerPrint_Verified') {\n\t\t\t\t\treturn Settings.updateValueById('Deployment_FingerPrint_Verified', true);\n\t\t\t\t}\n\n\t\t\t\treturn Settings.resetValueById(settingId);\n\t\t\t});\n\n\t\t\t(await Promise.all(promises)).forEach((value, index) => {\n\t\t\t\tif (value?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnSettingChangedById(settingsIds[index]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn API.v1.success({});\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/misc.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/misc.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/misc.ts","sourceRoot":"","sources":["app/api/server/v1/misc.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,WAAW,EAAc,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,oBAAoB,EAAE,MAAM,qBAAqB,CAAC;AAC5E,OAAO,EACN,gBAAgB,EAChB,gBAAgB,EAChB,gBAAgB,EAChB,iBAAiB,EACjB,qBAAqB,EACrB,kBAAkB,EAClB,YAAY,GACZ,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AACzD,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACrC,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AACzD,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,EAAE,IAAI,MAAM,EAAE,MAAM,MAAM,CAAC;AAEpC,OAAO,EAAE,IAAI,EAAE,MAAM,6BAA6B,CAAC;AACnD,OAAO,EAAE,YAAY,EAAE,MAAM,sCAAsC,CAAC;AACpE,OAAO,EAAE,OAAO,EAAE,MAAM,kCAAkC,CAAC;AAC3D,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,0BAA0B,EAAE,MAAM,wCAAwC,CAAC;AACpF,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,mDAAmD,CAAC;AACtF,OAAO,EAAE,gBAAgB,EAAE,MAAM,kDAAkD,CAAC;AACpF,OAAO,EAAE,MAAM,EAAE,MAAM,8BAA8B,CAAC;AACtD,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAC7D,OAAO,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAC;AACnE,OAAO,EAAE,iBAAiB,EAAE,MAAM,8BAA8B,CAAC;AACjE,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuIG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,IAAI,EACJ,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,GAAG;QACR,MAAM,UAAU,GAAG,EAAE,GAAG,iBAAiB,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;QAC3D,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,EAAE,GAAG,CAAC,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAU,CAAC;QAE1G,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CACpB,MAAM,WAAW,CAAC;YACjB,GAAG,IAAI;YACP,WAAW,EAAE,WAAW,CAAC,EAAE,GAAG,IAAI,EAAE,QAAQ,EAAE,CAAC;YAC/C,GAAG,CAAC,QAAQ,IAAI;gBACf,QAAQ,EAAE;oBACT,GAAG,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;oBACnD,GAAG,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC;oBACnD,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,IAAI,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC;oBACvF,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,IAAI,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;oBAC3E,QAAQ,EAAE;wBACT,sFAAsF;wBACtF,MAAM,EAAE,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC;qBAC3C;iBACD;aACD,CAAC;SACF,CAAC,CACF,CAAC;IACH,CAAC;CACD,CACD,CAAC;AAEF,IAAI,WAAW,GAAG,CAAC,CAAC;AACpB,IAAI,eAAe,GAAG,CAAC,CAAC;AACxB,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,WAAW;AAEvC,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,YAAY,EACZ;IACC,YAAY,EAAE,KAAK;IACnB,kBAAkB,EAAE;QACnB,kBAAkB,EAAE,EAAE;QACtB,gBAAgB,EAAE,KAAK;KACvB;IACD,cAAc,EAAE,gBAAgB;CAChC,EACD;IACC,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QACxC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QACzC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC;YACzC,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,2BAA2B,EAAE;gBAC9E,KAAK,EAAE,oBAAoB;aAC3B,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAS,kBAAkB,CAAC,CAAC;QACvD,IACC,IAAI;YACJ,KAAK,KAAK,GAAG;YACb,CAAC,KAAK;iBACJ,KAAK,CAAC,GAAG,CAAC;iBACV,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;iBAC5B,QAAQ,CAAC,IAAI,CAAC,EACf,CAAC;YACF,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,8BAA8B,EAAE;gBAC/E,KAAK,EAAE,oBAAoB;aAC3B,CAAC,CAAC;QACJ,CAAC;QACD,MAAM,QAAQ,GAAG,IAAI,KAAK,OAAO,CAAC;QAClC,IAAI,QAAQ,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;YAC/B,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,0CAA0C,CAAC,CAAC;QACnE,CAAC;QAED,IAAI,IAAI,CAAC;QACT,IAAI,eAAe,GAAG,MAAM,CAAC;QAC7B,QAAQ,IAAI,EAAE,CAAC;YACd,KAAK,QAAQ;gBACZ,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,eAAe,GAAG,YAAY,EAAE,CAAC;oBACjD,WAAW,GAAG,MAAM,KAAK,CAAC,oBAAoB,EAAE,CAAC;oBACjD,eAAe,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAC9B,CAAC;gBAED,IAAI,GAAG,GAAG,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC5C,MAAM;YACP,KAAK,SAAS;gBACb,IAAI,CAAC,OAAO,EAAE,CAAC;oBACd,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,+CAA+C,CAAC,CAAC;gBACxE,CAAC;gBAED,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;gBACrB,MAAM;YACP,KAAK,MAAM;gBACV,IAAI,QAAQ,CAAC,GAAG,CAAC,8BAA8B,CAAC,IAAI,CAAC,CAAC,MAAM,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC;oBAC5F,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC;gBAC5D,CAAC;gBACD,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAEvD,gEAAgE;gBAChE,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC;oBACnD,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;gBACvB,CAAC;qBAAM,CAAC;oBACP,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC5B,CAAC;gBAED,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC;oBACrB,KAAK,QAAQ;wBACZ,eAAe,GAAG,SAAS,CAAC;wBAC5B,MAAM;oBACP,KAAK,MAAM;wBACV,eAAe,GAAG,SAAS,CAAC;wBAC5B,MAAM;oBACP,KAAK,MAAM;wBACV,eAAe,GAAG,SAAS,CAAC;wBAC5B,MAAM;oBACP,KAAK,SAAS;wBACb,eAAe,GAAG,SAAS,CAAC;gBAC9B,CAAC;gBACD,MAAM;YACP;gBACC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3C,CAAC;QAED,MAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC;QAClE,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC;QACvC,MAAM,KAAK,GAAG,QAAQ,GAAG,SAAS,CAAC;QACnC,MAAM,MAAM,GAAG,EAAE,CAAC;QAElB,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;QAExB,OAAO;YACN,OAAO,EAAE,EAAE,cAAc,EAAE,6BAA6B,EAAE;YAC1D,IAAI,EAAE;gGACsF,KAAK,aAAa,MAAM;;;;;;qBAMnG,KAAK,aAAa,MAAM;;;kCAGX,QAAQ,IAAI,MAAM;oBAChC,eAAe,SAAS,QAAQ,MAAM,SAAS,IAAI,MAAM,IAAI,QAAQ;qCACpD,KAAK,IAAI,MAAM;;QAE5C,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,yDAAyD,MAAM,CAAC,qBAAqB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,KAAK;;QAG5H,IAAI;gBACH,CAAC,CAAC,YAAY,QAAQ,6CAA6C,IAAI;iBAC9D,QAAQ,YAAY,IAAI,SAAS;gBAC1C,CAAC,CAAC,EACJ;iBACW,QAAQ,GAAG,CAAC,6CAA6C,IAAI;iBAC7D,QAAQ,GAAG,CAAC,YAAY,IAAI;;;IAGzC;iBACE,IAAI,EAAE;iBACN,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC;SACvB,CAAC;IACV,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,WAAW,EACX;IACC,YAAY,EAAE,IAAI;IAClB,cAAc,EAAE,gBAAgB;CAChC,EACD;IACC,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAEnC,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAE1D,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,WAAW,EACX;IACC,YAAY,EAAE,IAAI;IAClB,cAAc,EAAE,gBAAgB;CAChC,EACD;IACC,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QACpD,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,GAAG,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAE7D,MAAM,MAAM,GAAG;YACd,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YAC9B,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YACzB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YACzB,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;SACnC,CAAC;QAEF,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1C,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,+CAA+C,CAAC,CAAC;QACxE,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACvD,MAAM,aAAa,GAAG,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;QAE5E,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE;YACvD,GAAG,MAAM;YACT,MAAM;YACN,aAAa;YACb,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC;YAC3B,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;SACzB,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,EAAE,CAAC;YACb,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;QACvD,CAAC;QACD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;YACrB,MAAM,EAAE,MAAM,CAAC,OAAO;YACtB,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM;YAC5B,MAAM;YACN,KAAK,EAAE,MAAM,CAAC,KAAK;SACnB,CAAC,CAAC;IACJ,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,cAAc,EACd;IACC,YAAY,EAAE,KAAK;CACnB,EACD;IACC,GAAG;QACF,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC,CAAC;IAC3D,CAAC;CACD,CACD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,cAAc,EACd,EAAE,YAAY,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,WAAW,CAAC,EAAE,EAC1D;IACC,KAAK,CAAC,GAAG;QACR,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;IAC7C,CAAC;CACD,CACD,CAAC;AAcF,MAAM,WAAW,GAAG,CAAC,EACpB,EAAE,EACF,KAAK,EACL,MAAM,GAKN,EAEC,EAAE,CAAC,CAAC;IACL,OAAO,EAAE,KAAK,CAAC,SAAS,CAAC;QACxB,GAAG,EAAE,QAAQ;QACb,EAAE;QACF,KAAK,EAAE,KAAY;QACnB,MAAM,EAAE,MAAa;KACrB,CAAC;CACF,CAAC,CAAC;AAEH,sFAAsF;AACtF,2EAA2E;AAC3E,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,qBAAqB,EACrB;IACC,YAAY,EAAE,IAAI;IAClB,kBAAkB,EAAE,KAAK;IACzB,cAAc,EAAE,YAAY;CAC5B,EACD;IACC,KAAK,CAAC,IAAI;QACT,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE;YACtB,OAAO,EAAE,MAAM;SACf,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAElD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;YAC9B,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;QAC9C,CAAC;QAED,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;QAEpC,MAAM,YAAY,GACjB,IAAI,CAAC,KAAK;YACV,MAAM;iBACJ,UAAU,CAAC,KAAK,CAAC;iBACjB,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;iBACtC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEjB,MAAM,gBAAgB,GAAG;YACxB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,aAAa,EAAE,IAAI,CAAC,SAAS;YAC7B,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,MAAM;YACZ,YAAY;SACZ,CAAC;QAEF,IAAI,CAAC;YACJ,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;YAC5C,MAAM,eAAe,GAAG,cAAc,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;YAChE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC9B,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC,EAAE;oBAC5F,WAAW,EAAE,eAAe,CAAC,WAAW;iBACxC,CAAC,CAAC;YACJ,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC;YACzD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;QACpD,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACd,IAAI,CAAE,GAAW,CAAC,YAAY,IAAI,CAAE,GAAW,CAAC,WAAW,EAAE,CAAC;gBAC7D,YAAY,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,mCAAmC,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;YAC/E,CAAC;YAED,IAAI,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,GAAG,EAAE,CAAC;gBACvC,MAAM,CAAC,MAAM,CAAC,mCAAmC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC;YACjE,CAAC;YACD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QACxD,CAAC;IACF,CAAC;CACD,CACD,CAAC;AACF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,yBAAyB,EACzB;IACC,YAAY,EAAE,KAAK;IACnB,kBAAkB,EAAE,KAAK;IACzB,cAAc,EAAE,YAAY;CAC5B,EACD;IACC,KAAK,CAAC,IAAI;QACT,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE;YACtB,OAAO,EAAE,MAAM;SACf,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAElD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,CAAC;YAClC,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;QAC9C,CAAC;QAED,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;QAEpC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEjG,MAAM,gBAAgB,GAAG;YACxB,MAAM,EAAE,IAAI,CAAC,MAAM,IAAI,SAAS;YAChC,aAAa,EAAE,IAAI,CAAC,SAAS;YAC7B,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,MAAM;YACZ,YAAY;SACZ,CAAC;QAEF,IAAI,CAAC;YACJ,cAAc,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;YAE5C,MAAM,eAAe,GAAG,cAAc,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;YAChE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC9B,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC,EAAE;oBAC5F,WAAW,EAAE,eAAe,CAAC,WAAW;iBACxC,CAAC,CAAC;YACJ,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC;YACzD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;QACpD,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACd,IAAI,CAAE,GAAW,CAAC,YAAY,IAAI,CAAE,GAAW,CAAC,WAAW,EAAE,CAAC;gBAC7D,YAAY,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,mCAAmC,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;YAC/E,CAAC;YACD,IAAI,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,GAAG,EAAE,CAAC;gBACvC,MAAM,CAAC,MAAM,CAAC,mCAAmC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC;YACjE,CAAC;YACD,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QACxD,CAAC;IACF,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,YAAY,EACZ,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,GAAG;QACR,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC;CACD,CACD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,aAAa,EACb;IACC,YAAY,EAAE,IAAI;IAClB,cAAc,EAAE,kBAAkB;CAClC,EACD;IACC,KAAK,CAAC,IAAI;QACT,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE;YACtB,eAAe,EAAE,MAAM;SACvB,CAAC,CAAC;QAEH,MAAM,WAAW,GAAa,EAAE,CAAC;QAEjC,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,KAAK,eAAe,EAAE,CAAC;YACzD,MAAM,oBAAoB,CAAC,sBAAsB,EAAE,CAAC;YACpD,WAAW,CAAC,IAAI,CACf,kCAAkC,EAClC,oBAAoB,EACpB,sBAAsB,EACtB,2BAA2B,EAC3B,+BAA+B,EAC/B,0CAA0C,EAC1C,yCAAyC,EACzC,2BAA2B,EAC3B,yBAAyB,EACzB,2BAA2B,EAC3B,UAAU,CACV,CAAC;QACH,CAAC;QAED,WAAW,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;QAEpD,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;YAC9C,IAAI,SAAS,KAAK,UAAU,EAAE,CAAC;gBAC9B,OAAO,QAAQ,CAAC,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,MAAM,EAAE,CAAC,CAAC;YACnF,CAAC;YAED,IAAI,SAAS,KAAK,yCAAyC,EAAE,CAAC;gBAC7D,OAAO,QAAQ,CAAC,cAAc,CAAC,yCAAyC,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACxF,CAAC;YAED,IAAI,SAAS,KAAK,iCAAiC,EAAE,CAAC;gBACrD,OAAO,QAAQ,CAAC,eAAe,CAAC,iCAAiC,EAAE,IAAI,CAAC,CAAC;YAC1E,CAAC;YAED,OAAO,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACtD,IAAI,KAAK,EAAE,aAAa,EAAE,CAAC;gBAC1B,KAAK,0BAA0B,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACrD,CAAC;QACF,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;CACD,CACD,CAAC","sourcesContent":["import crypto from 'crypto';\n\nimport { isOAuthUser, type IUser } from '@rocket.chat/core-typings';\nimport { Settings, Users, WorkspaceCredentials } from '@rocket.chat/models';\nimport {\n\tisShieldSvgProps,\n\tisSpotlightProps,\n\tisDirectoryProps,\n\tisMethodCallProps,\n\tisMethodCallAnonProps,\n\tisFingerprintProps,\n\tisMeteorCall,\n} from '@rocket.chat/rest-typings';\nimport { escapeHTML } from '@rocket.chat/string-helpers';\nimport EJSON from 'ejson';\nimport { check } from 'meteor/check';\nimport { DDPRateLimiter } from 'meteor/ddp-rate-limiter';\nimport { Meteor } from 'meteor/meteor';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { getLogs } from '../../../../server/stream/stdout';\nimport { passwordPolicy } from '../../../lib/server';\nimport { notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { getBaseUserFields } from '../../../utils/server/functions/getBaseUserFields';\nimport { isSMTPConfigured } from '../../../utils/server/functions/isSMTPConfigured';\nimport { getURL } from '../../../utils/server/getURL';\nimport { API } from '../api';\nimport { getLoggedInUser } from '../helpers/getLoggedInUser';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams } from '../helpers/getUserFromParams';\nimport { getUserInfo } from '../helpers/getUserInfo';\n\n/**\n * @openapi\n *  /api/v1/me:\n *    get:\n *      description: Gets user data of the authenticated user\n *      security:\n *        - authenticated: []\n *      responses:\n *        200:\n *          description: The user data of the authenticated user\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      name:\n *                        type: string\n *                      username:\n *                        type: string\n *                      nickname:\n *                        type: string\n *                      emails:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            address:\n *                              type: string\n *                            verified:\n *                              type: boolean\n *                      email:\n *                        type: string\n *                      status:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusDefault:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusText:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusConnection:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      bio:\n *                        type: string\n *                      avatarOrigin:\n *                        type: string\n *                        enum: [none, local, upload, url]\n *                      utcOffset:\n *                        type: number\n *                      language:\n *                        type: string\n *                      settings:\n *                        type: object\n *                        properties:\n *                          preferences:\n *                            type: object\n *                      enableAutoAway:\n *                        type: boolean\n *                      idleTimeLimit:\n *                        type: number\n *                      roles:\n *                        type: array\n *                      active:\n *                        type: boolean\n *                      defaultRoom:\n *                        type: string\n *                      customFields:\n *                        type: array\n *                      requirePasswordChange:\n *                        type: boolean\n *                      requirePasswordChangeReason:\n *                        type: string\n *                      services:\n *                        type: object\n *                        properties:\n *                          github:\n *                            type: object\n *                          gitlab:\n *                            type: object\n *                          password:\n *                            type: object\n *                            properties:\n *                              exists:\n *                                type: boolean\n *                          totp:\n *                            type: object\n *                            properties:\n *                              enabled:\n *                                type: boolean\n *                          email2fa:\n *                            type: object\n *                            properties:\n *                              enabled:\n *                                type: boolean\n *                      statusLivechat:\n *                        type: string\n *                        enum: [available, 'not-available']\n *                      banners:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            id:\n *                              type: string\n *                            title:\n *                              type: string\n *                            text:\n *                              type: string\n *                            textArguments:\n *                              type: array\n *                              items: {}\n *                            modifiers:\n *                              type: array\n *                              items:\n *                                type: string\n *                            infoUrl:\n *                              type: string\n *                      oauth:\n *                        type: object\n *                        properties:\n *                          authorizedClients:\n *                            type: array\n *                            items:\n *                              type: string\n *                      _updatedAt:\n *                        type: string\n *                        format: date-time\n *                      avatarETag:\n *                        type: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'me',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst userFields = { ...getBaseUserFields(), services: 1 };\n\t\t\tconst { services, ...user } = (await Users.findOneById(this.userId, { projection: userFields })) as IUser;\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait getUserInfo({\n\t\t\t\t\t...user,\n\t\t\t\t\tisOAuthUser: isOAuthUser({ ...user, services }),\n\t\t\t\t\t...(services && {\n\t\t\t\t\t\tservices: {\n\t\t\t\t\t\t\t...(services.github && { github: services.github }),\n\t\t\t\t\t\t\t...(services.gitlab && { gitlab: services.gitlab }),\n\t\t\t\t\t\t\t...(services.email2fa?.enabled && { email2fa: { enabled: services.email2fa.enabled } }),\n\t\t\t\t\t\t\t...(services.totp?.enabled && { totp: { enabled: services.totp.enabled } }),\n\t\t\t\t\t\t\tpassword: {\n\t\t\t\t\t\t\t\t// The password hash shouldn't be leaked but the client may need to know if it exists.\n\t\t\t\t\t\t\t\texists: Boolean(services?.password?.bcrypt),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nlet onlineCache = 0;\nlet onlineCacheDate = 0;\nconst cacheInvalid = 60000; // 1 minute\n\nAPI.v1.addRoute(\n\t'shield.svg',\n\t{\n\t\tauthRequired: false,\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: 60,\n\t\t\tintervalTimeInMS: 60000,\n\t\t},\n\t\tvalidateParams: isShieldSvgProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { type, icon } = this.queryParams;\n\t\t\tlet { channel, name } = this.queryParams;\n\t\t\tif (!settings.get('API_Enable_Shields')) {\n\t\t\t\tthrow new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n\t\t\t\t\troute: '/api/v1/shield.svg',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst types = settings.get<string>('API_Shield_Types');\n\t\t\tif (\n\t\t\t\ttype &&\n\t\t\t\ttypes !== '*' &&\n\t\t\t\t!types\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((t: string) => t.trim())\n\t\t\t\t\t.includes(type)\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-shield-disabled', 'This shield type is disabled', {\n\t\t\t\t\troute: '/api/v1/shield.svg',\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst hideIcon = icon === 'false';\n\t\t\tif (hideIcon && !name?.trim()) {\n\t\t\t\treturn API.v1.failure('Name cannot be empty when icon is hidden');\n\t\t\t}\n\n\t\t\tlet text;\n\t\t\tlet backgroundColor = '#4c1';\n\t\t\tswitch (type) {\n\t\t\t\tcase 'online':\n\t\t\t\t\tif (Date.now() - onlineCacheDate > cacheInvalid) {\n\t\t\t\t\t\tonlineCache = await Users.countUsersNotOffline();\n\t\t\t\t\t\tonlineCacheDate = Date.now();\n\t\t\t\t\t}\n\n\t\t\t\t\ttext = `${onlineCache} ${i18n.t('Online')}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'channel':\n\t\t\t\t\tif (!channel) {\n\t\t\t\t\t\treturn API.v1.failure('Shield channel is required for type \"channel\"');\n\t\t\t\t\t}\n\n\t\t\t\t\ttext = `#${channel}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'user':\n\t\t\t\t\tif (settings.get('API_Shield_user_require_auth') && !(await getLoggedInUser(this.request))) {\n\t\t\t\t\t\treturn API.v1.failure('You must be logged in to do this.');\n\t\t\t\t\t}\n\t\t\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\t\t\t// Respect the server's choice for using their real names or not\n\t\t\t\t\tif (user.name && settings.get('UI_Use_Real_Name')) {\n\t\t\t\t\t\ttext = `${user.name}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttext = `@${user.username}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (user.status) {\n\t\t\t\t\t\tcase 'online':\n\t\t\t\t\t\t\tbackgroundColor = '#1fb31f';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'away':\n\t\t\t\t\t\t\tbackgroundColor = '#dc9b01';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'busy':\n\t\t\t\t\t\t\tbackgroundColor = '#bc2031';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'offline':\n\t\t\t\t\t\t\tbackgroundColor = '#a5a1a1';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttext = i18n.t('Join_Chat').toUpperCase();\n\t\t\t}\n\n\t\t\tconst iconSize = hideIcon ? 7 : 24;\n\t\t\tconst leftSize = name ? name.length * 6 + 7 + iconSize : iconSize;\n\t\t\tconst rightSize = text.length * 6 + 20;\n\t\t\tconst width = leftSize + rightSize;\n\t\t\tconst height = 20;\n\n\t\t\tchannel = escapeHTML(channel);\n\t\t\ttext = escapeHTML(text);\n\t\t\tname = escapeHTML(name);\n\n\t\t\treturn {\n\t\t\t\theaders: { 'Content-Type': 'image/svg+xml;charset=utf-8' },\n\t\t\t\tbody: `\n\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"${width}\" height=\"${height}\">\n\t\t\t\t\t<linearGradient id=\"b\" x2=\"0\" y2=\"100%\">\n\t\t\t\t\t\t<stop offset=\"0\" stop-color=\"#bbb\" stop-opacity=\".1\"/>\n\t\t\t\t\t\t<stop offset=\"1\" stop-opacity=\".1\"/>\n\t\t\t\t\t</linearGradient>\n\t\t\t\t\t<mask id=\"a\">\n\t\t\t\t\t\t<rect width=\"${width}\" height=\"${height}\" rx=\"3\" fill=\"#fff\"/>\n\t\t\t\t\t</mask>\n\t\t\t\t\t<g mask=\"url(#a)\">\n\t\t\t\t\t\t<path fill=\"#555\" d=\"M0 0h${leftSize}v${height}H0z\"/>\n\t\t\t\t\t\t<path fill=\"${backgroundColor}\" d=\"M${leftSize} 0h${rightSize}v${height}H${leftSize}z\"/>\n\t\t\t\t\t\t<path fill=\"url(#b)\" d=\"M0 0h${width}v${height}H0z\"/>\n\t\t\t\t\t</g>\n\t\t\t\t\t\t${hideIcon ? '' : `<image x=\"5\" y=\"3\" width=\"14\" height=\"14\" xlink:href=\"${getURL('/assets/favicon.svg', { full: true })}\"/>`}\n\t\t\t\t\t<g fill=\"#fff\" font-family=\"DejaVu Sans,Verdana,Geneva,sans-serif\" font-size=\"11\">\n\t\t\t\t\t\t${\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t? `<text x=\"${iconSize}\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">${name}</text>\n\t\t\t\t\t\t<text x=\"${iconSize}\" y=\"14\">${name}</text>`\n\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<text x=\"${leftSize + 7}\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">${text}</text>\n\t\t\t\t\t\t<text x=\"${leftSize + 7}\" y=\"14\">${text}</text>\n\t\t\t\t\t</g>\n\t\t\t\t</svg>\n\t\t\t`\n\t\t\t\t\t.trim()\n\t\t\t\t\t.replace(/\\>[\\s]+\\</gm, '><'),\n\t\t\t} as any;\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'spotlight',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSpotlightProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = this.queryParams;\n\n\t\t\tconst result = await Meteor.callAsync('spotlight', query);\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'directory',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDirectoryProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, query } = await this.parseJsonQuery();\n\t\t\tconst { text, type, workspace = 'local' } = this.queryParams;\n\n\t\t\tconst filter = {\n\t\t\t\t...(query ? { ...query } : {}),\n\t\t\t\t...(text ? { text } : {}),\n\t\t\t\t...(type ? { type } : {}),\n\t\t\t\t...(workspace ? { workspace } : {}),\n\t\t\t};\n\n\t\t\tif (sort && Object.keys(sort).length > 1) {\n\t\t\t\treturn API.v1.failure('This method support only one \"sort\" parameter');\n\t\t\t}\n\t\t\tconst sortBy = sort ? Object.keys(sort)[0] : undefined;\n\t\t\tconst sortDirection = sort && Object.values(sort)[0] === 1 ? 'asc' : 'desc';\n\n\t\t\tconst result = await Meteor.callAsync('browseChannels', {\n\t\t\t\t...filter,\n\t\t\t\tsortBy,\n\t\t\t\tsortDirection,\n\t\t\t\toffset: Math.max(0, offset),\n\t\t\t\tlimit: Math.max(0, count),\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.failure('Please verify the parameters');\n\t\t\t}\n\t\t\treturn API.v1.success({\n\t\t\t\tresult: result.results,\n\t\t\t\tcount: result.results.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: result.total,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'pw.getPolicy',\n\t{\n\t\tauthRequired: false,\n\t},\n\t{\n\t\tget() {\n\t\t\treturn API.v1.success(passwordPolicy.getPasswordPolicy());\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/stdout.queue:\n *    get:\n *      description: Retrieves last 1000 lines of server logs\n *      security:\n *        - authenticated: ['view-logs']\n *      responses:\n *        200:\n *          description: The user data of the authenticated user\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      queue:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            id:\n *                              type: string\n *                            string:\n *                              type: string\n *                            ts:\n *                              type: string\n *                              format: date-time\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'stdout.queue',\n\t{ authRequired: true, permissionsRequired: ['view-logs'] },\n\t{\n\t\tasync get() {\n\t\t\treturn API.v1.success({ queue: getLogs() });\n\t\t},\n\t},\n);\n\ndeclare module '@rocket.chat/rest-typings' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface Endpoints {\n\t\t'method.call/:method': {\n\t\t\tPOST: (params: { method: string; args: any[] }) => any;\n\t\t};\n\t\t'method.callAnon/:method': {\n\t\t\tPOST: (params: { method: string; args: any[] }) => any;\n\t\t};\n\t}\n}\n\nconst mountResult = ({\n\tid,\n\terror,\n\tresult,\n}: {\n\tid: string;\n\terror?: unknown;\n\tresult?: unknown;\n}): {\n\tmessage: string;\n} => ({\n\tmessage: EJSON.stringify({\n\t\tmsg: 'result',\n\t\tid,\n\t\terror: error as any,\n\t\tresult: result as any,\n\t}),\n});\n\n// had to create two different endpoints for authenticated and non-authenticated calls\n// because restivus does not provide 'this.userId' if 'authRequired: false'\nAPI.v1.addRoute(\n\t'method.call/:method',\n\t{\n\t\tauthRequired: true,\n\t\trateLimiterOptions: false,\n\t\tvalidateParams: isMeteorCall,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tmessage: String,\n\t\t\t});\n\n\t\t\tconst data = EJSON.parse(this.bodyParams.message);\n\n\t\t\tif (!isMethodCallProps(data)) {\n\t\t\t\treturn API.v1.failure('Invalid method call');\n\t\t\t}\n\n\t\t\tconst { method, params, id } = data;\n\n\t\t\tconst connectionId =\n\t\t\t\tthis.token ||\n\t\t\t\tcrypto\n\t\t\t\t\t.createHash('md5')\n\t\t\t\t\t.update(this.requestIp + this.user._id)\n\t\t\t\t\t.digest('hex');\n\n\t\t\tconst rateLimiterInput = {\n\t\t\t\tuserId: this.userId,\n\t\t\t\tclientAddress: this.requestIp,\n\t\t\t\ttype: 'method',\n\t\t\t\tname: method,\n\t\t\t\tconnectionId,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tDDPRateLimiter._increment(rateLimiterInput);\n\t\t\t\tconst rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n\t\t\t\tif (!rateLimitResult.allowed) {\n\t\t\t\t\tthrow new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n\t\t\t\t\t\ttimeToReset: rateLimitResult.timeToReset,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst result = await Meteor.callAsync(method, ...params);\n\t\t\t\treturn API.v1.success(mountResult({ id, result }));\n\t\t\t} catch (err) {\n\t\t\t\tif (!(err as any).isClientSafe && !(err as any).meteorError) {\n\t\t\t\t\tSystemLogger.error({ msg: `Exception while invoking method ${method}`, err });\n\t\t\t\t}\n\n\t\t\t\tif (settings.get('Log_Level') === '2') {\n\t\t\t\t\tMeteor._debug(`Exception while invoking method ${method}`, err);\n\t\t\t\t}\n\t\t\t\treturn API.v1.success(mountResult({ id, error: err }));\n\t\t\t}\n\t\t},\n\t},\n);\nAPI.v1.addRoute(\n\t'method.callAnon/:method',\n\t{\n\t\tauthRequired: false,\n\t\trateLimiterOptions: false,\n\t\tvalidateParams: isMeteorCall,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tmessage: String,\n\t\t\t});\n\n\t\t\tconst data = EJSON.parse(this.bodyParams.message);\n\n\t\t\tif (!isMethodCallAnonProps(data)) {\n\t\t\t\treturn API.v1.failure('Invalid method call');\n\t\t\t}\n\n\t\t\tconst { method, params, id } = data;\n\n\t\t\tconst connectionId = this.token || crypto.createHash('md5').update(this.requestIp).digest('hex');\n\n\t\t\tconst rateLimiterInput = {\n\t\t\t\tuserId: this.userId || undefined,\n\t\t\t\tclientAddress: this.requestIp,\n\t\t\t\ttype: 'method',\n\t\t\t\tname: method,\n\t\t\t\tconnectionId,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tDDPRateLimiter._increment(rateLimiterInput);\n\n\t\t\t\tconst rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n\t\t\t\tif (!rateLimitResult.allowed) {\n\t\t\t\t\tthrow new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n\t\t\t\t\t\ttimeToReset: rateLimitResult.timeToReset,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst result = await Meteor.callAsync(method, ...params);\n\t\t\t\treturn API.v1.success(mountResult({ id, result }));\n\t\t\t} catch (err) {\n\t\t\t\tif (!(err as any).isClientSafe && !(err as any).meteorError) {\n\t\t\t\t\tSystemLogger.error({ msg: `Exception while invoking method ${method}`, err });\n\t\t\t\t}\n\t\t\t\tif (settings.get('Log_Level') === '2') {\n\t\t\t\t\tMeteor._debug(`Exception while invoking method ${method}`, err);\n\t\t\t\t}\n\t\t\t\treturn API.v1.success(mountResult({ id, error: err }));\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'smtp.check',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\treturn API.v1.success({ isSMTPConfigured: isSMTPConfigured() });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/fingerprint:\n *    post:\n *      description: Update Fingerprint definition as a new workspace or update of configuration\n *      security:\n *        $ref: '#/security/authenticated'\n *      requestBody:\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                setDeploymentAs:\n *                  type: string\n *            example: |\n *              {\n *                 \"setDeploymentAs\": \"new-workspace\"\n *              }\n *      responses:\n *        200:\n *          description: Workspace successfully configured\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'fingerprint',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isFingerprintProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tsetDeploymentAs: String,\n\t\t\t});\n\n\t\t\tconst settingsIds: string[] = [];\n\n\t\t\tif (this.bodyParams.setDeploymentAs === 'new-workspace') {\n\t\t\t\tawait WorkspaceCredentials.unsetCredentialByScope();\n\t\t\t\tsettingsIds.push(\n\t\t\t\t\t'Cloud_Service_Agree_PrivacyTerms',\n\t\t\t\t\t'Cloud_Workspace_Id',\n\t\t\t\t\t'Cloud_Workspace_Name',\n\t\t\t\t\t'Cloud_Workspace_Client_Id',\n\t\t\t\t\t'Cloud_Workspace_Client_Secret',\n\t\t\t\t\t'Cloud_Workspace_Client_Secret_Expires_At',\n\t\t\t\t\t'Cloud_Workspace_Registration_Client_Uri',\n\t\t\t\t\t'Cloud_Workspace_PublicKey',\n\t\t\t\t\t'Cloud_Workspace_License',\n\t\t\t\t\t'Cloud_Workspace_Had_Trial',\n\t\t\t\t\t'uniqueID',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tsettingsIds.push('Deployment_FingerPrint_Verified');\n\n\t\t\tconst promises = settingsIds.map((settingId) => {\n\t\t\t\tif (settingId === 'uniqueID') {\n\t\t\t\t\treturn Settings.resetValueById('uniqueID', process.env.DEPLOYMENT_ID || uuidv4());\n\t\t\t\t}\n\n\t\t\t\tif (settingId === 'Cloud_Workspace_Access_Token_Expires_At') {\n\t\t\t\t\treturn Settings.resetValueById('Cloud_Workspace_Access_Token_Expires_At', new Date(0));\n\t\t\t\t}\n\n\t\t\t\tif (settingId === 'Deployment_FingerPrint_Verified') {\n\t\t\t\t\treturn Settings.updateValueById('Deployment_FingerPrint_Verified', true);\n\t\t\t\t}\n\n\t\t\t\treturn Settings.resetValueById(settingId);\n\t\t\t});\n\n\t\t\t(await Promise.all(promises)).forEach((value, index) => {\n\t\t\t\tif (value?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnSettingChangedById(settingsIds[index]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn API.v1.success({});\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 1);\n    const _excluded = [\"services\"];\n    let crypto;\n    module.link(\"crypto\", {\n      default(v) {\n        crypto = v;\n      }\n    }, 0);\n    let isOAuthUser;\n    module.link(\"@rocket.chat/core-typings\", {\n      isOAuthUser(v) {\n        isOAuthUser = v;\n      }\n    }, 1);\n    let Settings, Users, WorkspaceCredentials;\n    module.link(\"@rocket.chat/models\", {\n      Settings(v) {\n        Settings = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      WorkspaceCredentials(v) {\n        WorkspaceCredentials = v;\n      }\n    }, 2);\n    let isShieldSvgProps, isSpotlightProps, isDirectoryProps, isMethodCallProps, isMethodCallAnonProps, isFingerprintProps, isMeteorCall;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isShieldSvgProps(v) {\n        isShieldSvgProps = v;\n      },\n      isSpotlightProps(v) {\n        isSpotlightProps = v;\n      },\n      isDirectoryProps(v) {\n        isDirectoryProps = v;\n      },\n      isMethodCallProps(v) {\n        isMethodCallProps = v;\n      },\n      isMethodCallAnonProps(v) {\n        isMethodCallAnonProps = v;\n      },\n      isFingerprintProps(v) {\n        isFingerprintProps = v;\n      },\n      isMeteorCall(v) {\n        isMeteorCall = v;\n      }\n    }, 3);\n    let escapeHTML;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeHTML(v) {\n        escapeHTML = v;\n      }\n    }, 4);\n    let EJSON;\n    module.link(\"ejson\", {\n      default(v) {\n        EJSON = v;\n      }\n    }, 5);\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 6);\n    let DDPRateLimiter;\n    module.link(\"meteor/ddp-rate-limiter\", {\n      DDPRateLimiter(v) {\n        DDPRateLimiter = v;\n      }\n    }, 7);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 8);\n    let uuidv4;\n    module.link(\"uuid\", {\n      v4(v) {\n        uuidv4 = v;\n      }\n    }, 9);\n    let i18n;\n    module.link(\"../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 10);\n    let SystemLogger;\n    module.link(\"../../../../server/lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 11);\n    let getLogs;\n    module.link(\"../../../../server/stream/stdout\", {\n      getLogs(v) {\n        getLogs = v;\n      }\n    }, 12);\n    let passwordPolicy;\n    module.link(\"../../../lib/server\", {\n      passwordPolicy(v) {\n        passwordPolicy = v;\n      }\n    }, 13);\n    let notifyOnSettingChangedById;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnSettingChangedById(v) {\n        notifyOnSettingChangedById = v;\n      }\n    }, 14);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 15);\n    let getBaseUserFields;\n    module.link(\"../../../utils/server/functions/getBaseUserFields\", {\n      getBaseUserFields(v) {\n        getBaseUserFields = v;\n      }\n    }, 16);\n    let isSMTPConfigured;\n    module.link(\"../../../utils/server/functions/isSMTPConfigured\", {\n      isSMTPConfigured(v) {\n        isSMTPConfigured = v;\n      }\n    }, 17);\n    let getURL;\n    module.link(\"../../../utils/server/getURL\", {\n      getURL(v) {\n        getURL = v;\n      }\n    }, 18);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 19);\n    let getLoggedInUser;\n    module.link(\"../helpers/getLoggedInUser\", {\n      getLoggedInUser(v) {\n        getLoggedInUser = v;\n      }\n    }, 20);\n    let getPaginationItems;\n    module.link(\"../helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 21);\n    let getUserFromParams;\n    module.link(\"../helpers/getUserFromParams\", {\n      getUserFromParams(v) {\n        getUserFromParams = v;\n      }\n    }, 22);\n    let getUserInfo;\n    module.link(\"../helpers/getUserInfo\", {\n      getUserInfo(v) {\n        getUserInfo = v;\n      }\n    }, 23);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    /**\n     * @openapi\n     *  /api/v1/me:\n     *    get:\n     *      description: Gets user data of the authenticated user\n     *      security:\n     *        - authenticated: []\n     *      responses:\n     *        200:\n     *          description: The user data of the authenticated user\n     *          content:\n     *            application/json:\n     *              schema:\n     *                allOf:\n     *                  - $ref: '#/components/schemas/ApiSuccessV1'\n     *                  - type: object\n     *                    properties:\n     *                      name:\n     *                        type: string\n     *                      username:\n     *                        type: string\n     *                      nickname:\n     *                        type: string\n     *                      emails:\n     *                        type: array\n     *                        items:\n     *                          type: object\n     *                          properties:\n     *                            address:\n     *                              type: string\n     *                            verified:\n     *                              type: boolean\n     *                      email:\n     *                        type: string\n     *                      status:\n     *                        $ref: '#/components/schemas/UserStatus'\n     *                      statusDefault:\n     *                        $ref: '#/components/schemas/UserStatus'\n     *                      statusText:\n     *                        $ref: '#/components/schemas/UserStatus'\n     *                      statusConnection:\n     *                        $ref: '#/components/schemas/UserStatus'\n     *                      bio:\n     *                        type: string\n     *                      avatarOrigin:\n     *                        type: string\n     *                        enum: [none, local, upload, url]\n     *                      utcOffset:\n     *                        type: number\n     *                      language:\n     *                        type: string\n     *                      settings:\n     *                        type: object\n     *                        properties:\n     *                          preferences:\n     *                            type: object\n     *                      enableAutoAway:\n     *                        type: boolean\n     *                      idleTimeLimit:\n     *                        type: number\n     *                      roles:\n     *                        type: array\n     *                      active:\n     *                        type: boolean\n     *                      defaultRoom:\n     *                        type: string\n     *                      customFields:\n     *                        type: array\n     *                      requirePasswordChange:\n     *                        type: boolean\n     *                      requirePasswordChangeReason:\n     *                        type: string\n     *                      services:\n     *                        type: object\n     *                        properties:\n     *                          github:\n     *                            type: object\n     *                          gitlab:\n     *                            type: object\n     *                          password:\n     *                            type: object\n     *                            properties:\n     *                              exists:\n     *                                type: boolean\n     *                          totp:\n     *                            type: object\n     *                            properties:\n     *                              enabled:\n     *                                type: boolean\n     *                          email2fa:\n     *                            type: object\n     *                            properties:\n     *                              enabled:\n     *                                type: boolean\n     *                      statusLivechat:\n     *                        type: string\n     *                        enum: [available, 'not-available']\n     *                      banners:\n     *                        type: array\n     *                        items:\n     *                          type: object\n     *                          properties:\n     *                            id:\n     *                              type: string\n     *                            title:\n     *                              type: string\n     *                            text:\n     *                              type: string\n     *                            textArguments:\n     *                              type: array\n     *                              items: {}\n     *                            modifiers:\n     *                              type: array\n     *                              items:\n     *                                type: string\n     *                            infoUrl:\n     *                              type: string\n     *                      oauth:\n     *                        type: object\n     *                        properties:\n     *                          authorizedClients:\n     *                            type: array\n     *                            items:\n     *                              type: string\n     *                      _updatedAt:\n     *                        type: string\n     *                        format: date-time\n     *                      avatarETag:\n     *                        type: string\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('me', {\n      authRequired: true\n    }, {\n      async get() {\n        var _services$email2fa, _services$totp, _services$password;\n        const userFields = _objectSpread(_objectSpread({}, getBaseUserFields()), {}, {\n          services: 1\n        });\n        const _await$Users$findOneB = await Users.findOneById(this.userId, {\n            projection: userFields\n          }),\n          {\n            services\n          } = _await$Users$findOneB,\n          user = _objectWithoutProperties(_await$Users$findOneB, _excluded);\n        return API.v1.success(await getUserInfo(_objectSpread(_objectSpread({}, user), {}, {\n          isOAuthUser: isOAuthUser(_objectSpread(_objectSpread({}, user), {}, {\n            services\n          }))\n        }, services && {\n          services: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, services.github && {\n            github: services.github\n          }), services.gitlab && {\n            gitlab: services.gitlab\n          }), ((_services$email2fa = services.email2fa) === null || _services$email2fa === void 0 ? void 0 : _services$email2fa.enabled) && {\n            email2fa: {\n              enabled: services.email2fa.enabled\n            }\n          }), ((_services$totp = services.totp) === null || _services$totp === void 0 ? void 0 : _services$totp.enabled) && {\n            totp: {\n              enabled: services.totp.enabled\n            }\n          }), {}, {\n            password: {\n              // The password hash shouldn't be leaked but the client may need to know if it exists.\n              exists: Boolean(services === null || services === void 0 ? void 0 : (_services$password = services.password) === null || _services$password === void 0 ? void 0 : _services$password.bcrypt)\n            }\n          })\n        })));\n      }\n    });\n    let onlineCache = 0;\n    let onlineCacheDate = 0;\n    const cacheInvalid = 60000; // 1 minute\n    API.v1.addRoute('shield.svg', {\n      authRequired: false,\n      rateLimiterOptions: {\n        numRequestsAllowed: 60,\n        intervalTimeInMS: 60000\n      },\n      validateParams: isShieldSvgProps\n    }, {\n      async get() {\n        var _name;\n        const {\n          type,\n          icon\n        } = this.queryParams;\n        let {\n          channel,\n          name\n        } = this.queryParams;\n        if (!settings.get('API_Enable_Shields')) {\n          throw new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n            route: '/api/v1/shield.svg'\n          });\n        }\n        const types = settings.get('API_Shield_Types');\n        if (type && types !== '*' && !types.split(',').map(t => t.trim()).includes(type)) {\n          throw new Meteor.Error('error-shield-disabled', 'This shield type is disabled', {\n            route: '/api/v1/shield.svg'\n          });\n        }\n        const hideIcon = icon === 'false';\n        if (hideIcon && !((_name = name) !== null && _name !== void 0 && _name.trim())) {\n          return API.v1.failure('Name cannot be empty when icon is hidden');\n        }\n        let text;\n        let backgroundColor = '#4c1';\n        switch (type) {\n          case 'online':\n            if (Date.now() - onlineCacheDate > cacheInvalid) {\n              onlineCache = await Users.countUsersNotOffline();\n              onlineCacheDate = Date.now();\n            }\n            text = \"\".concat(onlineCache, \" \").concat(i18n.t('Online'));\n            break;\n          case 'channel':\n            if (!channel) {\n              return API.v1.failure('Shield channel is required for type \"channel\"');\n            }\n            text = \"#\".concat(channel);\n            break;\n          case 'user':\n            if (settings.get('API_Shield_user_require_auth') && !(await getLoggedInUser(this.request))) {\n              return API.v1.failure('You must be logged in to do this.');\n            }\n            const user = await getUserFromParams(this.queryParams);\n            // Respect the server's choice for using their real names or not\n            if (user.name && settings.get('UI_Use_Real_Name')) {\n              text = \"\".concat(user.name);\n            } else {\n              text = \"@\".concat(user.username);\n            }\n            switch (user.status) {\n              case 'online':\n                backgroundColor = '#1fb31f';\n                break;\n              case 'away':\n                backgroundColor = '#dc9b01';\n                break;\n              case 'busy':\n                backgroundColor = '#bc2031';\n                break;\n              case 'offline':\n                backgroundColor = '#a5a1a1';\n            }\n            break;\n          default:\n            text = i18n.t('Join_Chat').toUpperCase();\n        }\n        const iconSize = hideIcon ? 7 : 24;\n        const leftSize = name ? name.length * 6 + 7 + iconSize : iconSize;\n        const rightSize = text.length * 6 + 20;\n        const width = leftSize + rightSize;\n        const height = 20;\n        channel = escapeHTML(channel);\n        text = escapeHTML(text);\n        name = escapeHTML(name);\n        return {\n          headers: {\n            'Content-Type': 'image/svg+xml;charset=utf-8'\n          },\n          body: \"\\n\\t\\t\\t\\t<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"\".concat(width, \"\\\" height=\\\"\").concat(height, \"\\\">\\n\\t\\t\\t\\t\\t<linearGradient id=\\\"b\\\" x2=\\\"0\\\" y2=\\\"100%\\\">\\n\\t\\t\\t\\t\\t\\t<stop offset=\\\"0\\\" stop-color=\\\"#bbb\\\" stop-opacity=\\\".1\\\"/>\\n\\t\\t\\t\\t\\t\\t<stop offset=\\\"1\\\" stop-opacity=\\\".1\\\"/>\\n\\t\\t\\t\\t\\t</linearGradient>\\n\\t\\t\\t\\t\\t<mask id=\\\"a\\\">\\n\\t\\t\\t\\t\\t\\t<rect width=\\\"\").concat(width, \"\\\" height=\\\"\").concat(height, \"\\\" rx=\\\"3\\\" fill=\\\"#fff\\\"/>\\n\\t\\t\\t\\t\\t</mask>\\n\\t\\t\\t\\t\\t<g mask=\\\"url(#a)\\\">\\n\\t\\t\\t\\t\\t\\t<path fill=\\\"#555\\\" d=\\\"M0 0h\").concat(leftSize, \"v\").concat(height, \"H0z\\\"/>\\n\\t\\t\\t\\t\\t\\t<path fill=\\\"\").concat(backgroundColor, \"\\\" d=\\\"M\").concat(leftSize, \" 0h\").concat(rightSize, \"v\").concat(height, \"H\").concat(leftSize, \"z\\\"/>\\n\\t\\t\\t\\t\\t\\t<path fill=\\\"url(#b)\\\" d=\\\"M0 0h\").concat(width, \"v\").concat(height, \"H0z\\\"/>\\n\\t\\t\\t\\t\\t</g>\\n\\t\\t\\t\\t\\t\\t\").concat(hideIcon ? '' : \"<image x=\\\"5\\\" y=\\\"3\\\" width=\\\"14\\\" height=\\\"14\\\" xlink:href=\\\"\".concat(getURL('/assets/favicon.svg', {\n            full: true\n          }), \"\\\"/>\"), \"\\n\\t\\t\\t\\t\\t<g fill=\\\"#fff\\\" font-family=\\\"DejaVu Sans,Verdana,Geneva,sans-serif\\\" font-size=\\\"11\\\">\\n\\t\\t\\t\\t\\t\\t\").concat(name ? \"<text x=\\\"\".concat(iconSize, \"\\\" y=\\\"15\\\" fill=\\\"#010101\\\" fill-opacity=\\\".3\\\">\").concat(name, \"</text>\\n\\t\\t\\t\\t\\t\\t<text x=\\\"\").concat(iconSize, \"\\\" y=\\\"14\\\">\").concat(name, \"</text>\") : '', \"\\n\\t\\t\\t\\t\\t\\t<text x=\\\"\").concat(leftSize + 7, \"\\\" y=\\\"15\\\" fill=\\\"#010101\\\" fill-opacity=\\\".3\\\">\").concat(text, \"</text>\\n\\t\\t\\t\\t\\t\\t<text x=\\\"\").concat(leftSize + 7, \"\\\" y=\\\"14\\\">\").concat(text, \"</text>\\n\\t\\t\\t\\t\\t</g>\\n\\t\\t\\t\\t</svg>\\n\\t\\t\\t\").trim().replace(/\\>[\\s]+\\</gm, '><')\n        };\n      }\n    });\n    API.v1.addRoute('spotlight', {\n      authRequired: true,\n      validateParams: isSpotlightProps\n    }, {\n      async get() {\n        const {\n          query\n        } = this.queryParams;\n        const result = await Meteor.callAsync('spotlight', query);\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('directory', {\n      authRequired: true,\n      validateParams: isDirectoryProps\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          query\n        } = await this.parseJsonQuery();\n        const {\n          text,\n          type,\n          workspace = 'local'\n        } = this.queryParams;\n        const filter = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, query ? _objectSpread({}, query) : {}), text ? {\n          text\n        } : {}), type ? {\n          type\n        } : {}), workspace ? {\n          workspace\n        } : {});\n        if (sort && Object.keys(sort).length > 1) {\n          return API.v1.failure('This method support only one \"sort\" parameter');\n        }\n        const sortBy = sort ? Object.keys(sort)[0] : undefined;\n        const sortDirection = sort && Object.values(sort)[0] === 1 ? 'asc' : 'desc';\n        const result = await Meteor.callAsync('browseChannels', _objectSpread(_objectSpread({}, filter), {}, {\n          sortBy,\n          sortDirection,\n          offset: Math.max(0, offset),\n          limit: Math.max(0, count)\n        }));\n        if (!result) {\n          return API.v1.failure('Please verify the parameters');\n        }\n        return API.v1.success({\n          result: result.results,\n          count: result.results.length,\n          offset,\n          total: result.total\n        });\n      }\n    });\n    API.v1.addRoute('pw.getPolicy', {\n      authRequired: false\n    }, {\n      get() {\n        return API.v1.success(passwordPolicy.getPasswordPolicy());\n      }\n    });\n    /**\n     * @openapi\n     *  /api/v1/stdout.queue:\n     *    get:\n     *      description: Retrieves last 1000 lines of server logs\n     *      security:\n     *        - authenticated: ['view-logs']\n     *      responses:\n     *        200:\n     *          description: The user data of the authenticated user\n     *          content:\n     *            application/json:\n     *              schema:\n     *                allOf:\n     *                  - $ref: '#/components/schemas/ApiSuccessV1'\n     *                  - type: object\n     *                    properties:\n     *                      queue:\n     *                        type: array\n     *                        items:\n     *                          type: object\n     *                          properties:\n     *                            id:\n     *                              type: string\n     *                            string:\n     *                              type: string\n     *                            ts:\n     *                              type: string\n     *                              format: date-time\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('stdout.queue', {\n      authRequired: true,\n      permissionsRequired: ['view-logs']\n    }, {\n      async get() {\n        return API.v1.success({\n          queue: getLogs()\n        });\n      }\n    });\n    const mountResult = _ref => {\n      let {\n        id,\n        error,\n        result\n      } = _ref;\n      return {\n        message: EJSON.stringify({\n          msg: 'result',\n          id,\n          error: error,\n          result: result\n        })\n      };\n    };\n    // had to create two different endpoints for authenticated and non-authenticated calls\n    // because restivus does not provide 'this.userId' if 'authRequired: false'\n    API.v1.addRoute('method.call/:method', {\n      authRequired: true,\n      rateLimiterOptions: false,\n      validateParams: isMeteorCall\n    }, {\n      async post() {\n        check(this.bodyParams, {\n          message: String\n        });\n        const data = EJSON.parse(this.bodyParams.message);\n        if (!isMethodCallProps(data)) {\n          return API.v1.failure('Invalid method call');\n        }\n        const {\n          method,\n          params,\n          id\n        } = data;\n        const connectionId = this.token || crypto.createHash('md5').update(this.requestIp + this.user._id).digest('hex');\n        const rateLimiterInput = {\n          userId: this.userId,\n          clientAddress: this.requestIp,\n          type: 'method',\n          name: method,\n          connectionId\n        };\n        try {\n          DDPRateLimiter._increment(rateLimiterInput);\n          const rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n          if (!rateLimitResult.allowed) {\n            throw new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n              timeToReset: rateLimitResult.timeToReset\n            });\n          }\n          const result = await Meteor.callAsync(method, ...params);\n          return API.v1.success(mountResult({\n            id,\n            result\n          }));\n        } catch (err) {\n          if (!err.isClientSafe && !err.meteorError) {\n            SystemLogger.error({\n              msg: \"Exception while invoking method \".concat(method),\n              err\n            });\n          }\n          if (settings.get('Log_Level') === '2') {\n            Meteor._debug(\"Exception while invoking method \".concat(method), err);\n          }\n          return API.v1.success(mountResult({\n            id,\n            error: err\n          }));\n        }\n      }\n    });\n    API.v1.addRoute('method.callAnon/:method', {\n      authRequired: false,\n      rateLimiterOptions: false,\n      validateParams: isMeteorCall\n    }, {\n      async post() {\n        check(this.bodyParams, {\n          message: String\n        });\n        const data = EJSON.parse(this.bodyParams.message);\n        if (!isMethodCallAnonProps(data)) {\n          return API.v1.failure('Invalid method call');\n        }\n        const {\n          method,\n          params,\n          id\n        } = data;\n        const connectionId = this.token || crypto.createHash('md5').update(this.requestIp).digest('hex');\n        const rateLimiterInput = {\n          userId: this.userId || undefined,\n          clientAddress: this.requestIp,\n          type: 'method',\n          name: method,\n          connectionId\n        };\n        try {\n          DDPRateLimiter._increment(rateLimiterInput);\n          const rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n          if (!rateLimitResult.allowed) {\n            throw new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n              timeToReset: rateLimitResult.timeToReset\n            });\n          }\n          const result = await Meteor.callAsync(method, ...params);\n          return API.v1.success(mountResult({\n            id,\n            result\n          }));\n        } catch (err) {\n          if (!err.isClientSafe && !err.meteorError) {\n            SystemLogger.error({\n              msg: \"Exception while invoking method \".concat(method),\n              err\n            });\n          }\n          if (settings.get('Log_Level') === '2') {\n            Meteor._debug(\"Exception while invoking method \".concat(method), err);\n          }\n          return API.v1.success(mountResult({\n            id,\n            error: err\n          }));\n        }\n      }\n    });\n    API.v1.addRoute('smtp.check', {\n      authRequired: true\n    }, {\n      async get() {\n        return API.v1.success({\n          isSMTPConfigured: isSMTPConfigured()\n        });\n      }\n    });\n    /**\n     * @openapi\n     *  /api/v1/fingerprint:\n     *    post:\n     *      description: Update Fingerprint definition as a new workspace or update of configuration\n     *      security:\n     *        $ref: '#/security/authenticated'\n     *      requestBody:\n     *        content:\n     *          application/json:\n     *            schema:\n     *              type: object\n     *              properties:\n     *                setDeploymentAs:\n     *                  type: string\n     *            example: |\n     *              {\n     *                 \"setDeploymentAs\": \"new-workspace\"\n     *              }\n     *      responses:\n     *        200:\n     *          description: Workspace successfully configured\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiSuccessV1'\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('fingerprint', {\n      authRequired: true,\n      validateParams: isFingerprintProps\n    }, {\n      async post() {\n        check(this.bodyParams, {\n          setDeploymentAs: String\n        });\n        const settingsIds = [];\n        if (this.bodyParams.setDeploymentAs === 'new-workspace') {\n          await WorkspaceCredentials.unsetCredentialByScope();\n          settingsIds.push('Cloud_Service_Agree_PrivacyTerms', 'Cloud_Workspace_Id', 'Cloud_Workspace_Name', 'Cloud_Workspace_Client_Id', 'Cloud_Workspace_Client_Secret', 'Cloud_Workspace_Client_Secret_Expires_At', 'Cloud_Workspace_Registration_Client_Uri', 'Cloud_Workspace_PublicKey', 'Cloud_Workspace_License', 'Cloud_Workspace_Had_Trial', 'uniqueID');\n        }\n        settingsIds.push('Deployment_FingerPrint_Verified');\n        const promises = settingsIds.map(settingId => {\n          if (settingId === 'uniqueID') {\n            return Settings.resetValueById('uniqueID', process.env.DEPLOYMENT_ID || uuidv4());\n          }\n          if (settingId === 'Cloud_Workspace_Access_Token_Expires_At') {\n            return Settings.resetValueById('Cloud_Workspace_Access_Token_Expires_At', new Date(0));\n          }\n          if (settingId === 'Deployment_FingerPrint_Verified') {\n            return Settings.updateValueById('Deployment_FingerPrint_Verified', true);\n          }\n          return Settings.resetValueById(settingId);\n        });\n        (await Promise.all(promises)).forEach((value, index) => {\n          if (value !== null && value !== void 0 && value.modifiedCount) {\n            void notifyOnSettingChangedById(settingsIds[index]);\n          }\n        });\n        return API.v1.success({});\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_excluded","crypto","isOAuthUser","Settings","Users","WorkspaceCredentials","isShieldSvgProps","isSpotlightProps","isDirectoryProps","isMethodCallProps","isMethodCallAnonProps","isFingerprintProps","isMeteorCall","escapeHTML","EJSON","check","DDPRateLimiter","Meteor","uuidv4","v4","i18n","SystemLogger","getLogs","passwordPolicy","notifyOnSettingChangedById","settings","getBaseUserFields","isSMTPConfigured","getURL","API","getLoggedInUser","getPaginationItems","getUserFromParams","getUserInfo","__reifyWaitForDeps__","v1","addRoute","authRequired","get","_services$email2fa","_services$totp","_services$password","userFields","services","_await$Users$findOneB","findOneById","userId","projection","user","success","github","gitlab","email2fa","enabled","totp","password","exists","Boolean","bcrypt","onlineCache","onlineCacheDate","cacheInvalid","rateLimiterOptions","numRequestsAllowed","intervalTimeInMS","validateParams","_name","type","icon","queryParams","channel","name","Error","route","types","split","map","t","trim","includes","hideIcon","failure","text","backgroundColor","Date","now","countUsersNotOffline","concat","request","username","status","toUpperCase","iconSize","leftSize","length","rightSize","width","height","headers","body","full","replace","query","result","callAsync","offset","count","sort","parseJsonQuery","workspace","filter","Object","keys","sortBy","undefined","sortDirection","values","Math","max","limit","results","total","getPasswordPolicy","permissionsRequired","queue","mountResult","_ref","id","error","message","stringify","msg","post","bodyParams","String","data","parse","method","params","connectionId","token","createHash","update","requestIp","_id","digest","rateLimiterInput","clientAddress","_increment","rateLimitResult","_check","allowed","getErrorMessage","timeToReset","err","isClientSafe","meteorError","_debug","setDeploymentAs","settingsIds","unsetCredentialByScope","push","promises","settingId","resetValueById","process","env","DEPLOYMENT_ID","updateValueById","Promise","all","forEach","value","index","modifiedCount","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/misc.ts"],"sourcesContent":["import crypto from 'crypto';\n\nimport { isOAuthUser, type IUser } from '@rocket.chat/core-typings';\nimport { Settings, Users, WorkspaceCredentials } from '@rocket.chat/models';\nimport {\n\tisShieldSvgProps,\n\tisSpotlightProps,\n\tisDirectoryProps,\n\tisMethodCallProps,\n\tisMethodCallAnonProps,\n\tisFingerprintProps,\n\tisMeteorCall,\n} from '@rocket.chat/rest-typings';\nimport { escapeHTML } from '@rocket.chat/string-helpers';\nimport EJSON from 'ejson';\nimport { check } from 'meteor/check';\nimport { DDPRateLimiter } from 'meteor/ddp-rate-limiter';\nimport { Meteor } from 'meteor/meteor';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { getLogs } from '../../../../server/stream/stdout';\nimport { passwordPolicy } from '../../../lib/server';\nimport { notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { getBaseUserFields } from '../../../utils/server/functions/getBaseUserFields';\nimport { isSMTPConfigured } from '../../../utils/server/functions/isSMTPConfigured';\nimport { getURL } from '../../../utils/server/getURL';\nimport { API } from '../api';\nimport { getLoggedInUser } from '../helpers/getLoggedInUser';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams } from '../helpers/getUserFromParams';\nimport { getUserInfo } from '../helpers/getUserInfo';\n\n/**\n * @openapi\n *  /api/v1/me:\n *    get:\n *      description: Gets user data of the authenticated user\n *      security:\n *        - authenticated: []\n *      responses:\n *        200:\n *          description: The user data of the authenticated user\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      name:\n *                        type: string\n *                      username:\n *                        type: string\n *                      nickname:\n *                        type: string\n *                      emails:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            address:\n *                              type: string\n *                            verified:\n *                              type: boolean\n *                      email:\n *                        type: string\n *                      status:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusDefault:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusText:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      statusConnection:\n *                        $ref: '#/components/schemas/UserStatus'\n *                      bio:\n *                        type: string\n *                      avatarOrigin:\n *                        type: string\n *                        enum: [none, local, upload, url]\n *                      utcOffset:\n *                        type: number\n *                      language:\n *                        type: string\n *                      settings:\n *                        type: object\n *                        properties:\n *                          preferences:\n *                            type: object\n *                      enableAutoAway:\n *                        type: boolean\n *                      idleTimeLimit:\n *                        type: number\n *                      roles:\n *                        type: array\n *                      active:\n *                        type: boolean\n *                      defaultRoom:\n *                        type: string\n *                      customFields:\n *                        type: array\n *                      requirePasswordChange:\n *                        type: boolean\n *                      requirePasswordChangeReason:\n *                        type: string\n *                      services:\n *                        type: object\n *                        properties:\n *                          github:\n *                            type: object\n *                          gitlab:\n *                            type: object\n *                          password:\n *                            type: object\n *                            properties:\n *                              exists:\n *                                type: boolean\n *                          totp:\n *                            type: object\n *                            properties:\n *                              enabled:\n *                                type: boolean\n *                          email2fa:\n *                            type: object\n *                            properties:\n *                              enabled:\n *                                type: boolean\n *                      statusLivechat:\n *                        type: string\n *                        enum: [available, 'not-available']\n *                      banners:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            id:\n *                              type: string\n *                            title:\n *                              type: string\n *                            text:\n *                              type: string\n *                            textArguments:\n *                              type: array\n *                              items: {}\n *                            modifiers:\n *                              type: array\n *                              items:\n *                                type: string\n *                            infoUrl:\n *                              type: string\n *                      oauth:\n *                        type: object\n *                        properties:\n *                          authorizedClients:\n *                            type: array\n *                            items:\n *                              type: string\n *                      _updatedAt:\n *                        type: string\n *                        format: date-time\n *                      avatarETag:\n *                        type: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'me',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst userFields = { ...getBaseUserFields(), services: 1 };\n\t\t\tconst { services, ...user } = (await Users.findOneById(this.userId, { projection: userFields })) as IUser;\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait getUserInfo({\n\t\t\t\t\t...user,\n\t\t\t\t\tisOAuthUser: isOAuthUser({ ...user, services }),\n\t\t\t\t\t...(services && {\n\t\t\t\t\t\tservices: {\n\t\t\t\t\t\t\t...(services.github && { github: services.github }),\n\t\t\t\t\t\t\t...(services.gitlab && { gitlab: services.gitlab }),\n\t\t\t\t\t\t\t...(services.email2fa?.enabled && { email2fa: { enabled: services.email2fa.enabled } }),\n\t\t\t\t\t\t\t...(services.totp?.enabled && { totp: { enabled: services.totp.enabled } }),\n\t\t\t\t\t\t\tpassword: {\n\t\t\t\t\t\t\t\t// The password hash shouldn't be leaked but the client may need to know if it exists.\n\t\t\t\t\t\t\t\texists: Boolean(services?.password?.bcrypt),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nlet onlineCache = 0;\nlet onlineCacheDate = 0;\nconst cacheInvalid = 60000; // 1 minute\n\nAPI.v1.addRoute(\n\t'shield.svg',\n\t{\n\t\tauthRequired: false,\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: 60,\n\t\t\tintervalTimeInMS: 60000,\n\t\t},\n\t\tvalidateParams: isShieldSvgProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { type, icon } = this.queryParams;\n\t\t\tlet { channel, name } = this.queryParams;\n\t\t\tif (!settings.get('API_Enable_Shields')) {\n\t\t\t\tthrow new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n\t\t\t\t\troute: '/api/v1/shield.svg',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst types = settings.get<string>('API_Shield_Types');\n\t\t\tif (\n\t\t\t\ttype &&\n\t\t\t\ttypes !== '*' &&\n\t\t\t\t!types\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((t: string) => t.trim())\n\t\t\t\t\t.includes(type)\n\t\t\t) {\n\t\t\t\tthrow new Meteor.Error('error-shield-disabled', 'This shield type is disabled', {\n\t\t\t\t\troute: '/api/v1/shield.svg',\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst hideIcon = icon === 'false';\n\t\t\tif (hideIcon && !name?.trim()) {\n\t\t\t\treturn API.v1.failure('Name cannot be empty when icon is hidden');\n\t\t\t}\n\n\t\t\tlet text;\n\t\t\tlet backgroundColor = '#4c1';\n\t\t\tswitch (type) {\n\t\t\t\tcase 'online':\n\t\t\t\t\tif (Date.now() - onlineCacheDate > cacheInvalid) {\n\t\t\t\t\t\tonlineCache = await Users.countUsersNotOffline();\n\t\t\t\t\t\tonlineCacheDate = Date.now();\n\t\t\t\t\t}\n\n\t\t\t\t\ttext = `${onlineCache} ${i18n.t('Online')}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'channel':\n\t\t\t\t\tif (!channel) {\n\t\t\t\t\t\treturn API.v1.failure('Shield channel is required for type \"channel\"');\n\t\t\t\t\t}\n\n\t\t\t\t\ttext = `#${channel}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'user':\n\t\t\t\t\tif (settings.get('API_Shield_user_require_auth') && !(await getLoggedInUser(this.request))) {\n\t\t\t\t\t\treturn API.v1.failure('You must be logged in to do this.');\n\t\t\t\t\t}\n\t\t\t\t\tconst user = await getUserFromParams(this.queryParams);\n\n\t\t\t\t\t// Respect the server's choice for using their real names or not\n\t\t\t\t\tif (user.name && settings.get('UI_Use_Real_Name')) {\n\t\t\t\t\t\ttext = `${user.name}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttext = `@${user.username}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (user.status) {\n\t\t\t\t\t\tcase 'online':\n\t\t\t\t\t\t\tbackgroundColor = '#1fb31f';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'away':\n\t\t\t\t\t\t\tbackgroundColor = '#dc9b01';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'busy':\n\t\t\t\t\t\t\tbackgroundColor = '#bc2031';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'offline':\n\t\t\t\t\t\t\tbackgroundColor = '#a5a1a1';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttext = i18n.t('Join_Chat').toUpperCase();\n\t\t\t}\n\n\t\t\tconst iconSize = hideIcon ? 7 : 24;\n\t\t\tconst leftSize = name ? name.length * 6 + 7 + iconSize : iconSize;\n\t\t\tconst rightSize = text.length * 6 + 20;\n\t\t\tconst width = leftSize + rightSize;\n\t\t\tconst height = 20;\n\n\t\t\tchannel = escapeHTML(channel);\n\t\t\ttext = escapeHTML(text);\n\t\t\tname = escapeHTML(name);\n\n\t\t\treturn {\n\t\t\t\theaders: { 'Content-Type': 'image/svg+xml;charset=utf-8' },\n\t\t\t\tbody: `\n\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"${width}\" height=\"${height}\">\n\t\t\t\t\t<linearGradient id=\"b\" x2=\"0\" y2=\"100%\">\n\t\t\t\t\t\t<stop offset=\"0\" stop-color=\"#bbb\" stop-opacity=\".1\"/>\n\t\t\t\t\t\t<stop offset=\"1\" stop-opacity=\".1\"/>\n\t\t\t\t\t</linearGradient>\n\t\t\t\t\t<mask id=\"a\">\n\t\t\t\t\t\t<rect width=\"${width}\" height=\"${height}\" rx=\"3\" fill=\"#fff\"/>\n\t\t\t\t\t</mask>\n\t\t\t\t\t<g mask=\"url(#a)\">\n\t\t\t\t\t\t<path fill=\"#555\" d=\"M0 0h${leftSize}v${height}H0z\"/>\n\t\t\t\t\t\t<path fill=\"${backgroundColor}\" d=\"M${leftSize} 0h${rightSize}v${height}H${leftSize}z\"/>\n\t\t\t\t\t\t<path fill=\"url(#b)\" d=\"M0 0h${width}v${height}H0z\"/>\n\t\t\t\t\t</g>\n\t\t\t\t\t\t${hideIcon ? '' : `<image x=\"5\" y=\"3\" width=\"14\" height=\"14\" xlink:href=\"${getURL('/assets/favicon.svg', { full: true })}\"/>`}\n\t\t\t\t\t<g fill=\"#fff\" font-family=\"DejaVu Sans,Verdana,Geneva,sans-serif\" font-size=\"11\">\n\t\t\t\t\t\t${\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t? `<text x=\"${iconSize}\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">${name}</text>\n\t\t\t\t\t\t<text x=\"${iconSize}\" y=\"14\">${name}</text>`\n\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<text x=\"${leftSize + 7}\" y=\"15\" fill=\"#010101\" fill-opacity=\".3\">${text}</text>\n\t\t\t\t\t\t<text x=\"${leftSize + 7}\" y=\"14\">${text}</text>\n\t\t\t\t\t</g>\n\t\t\t\t</svg>\n\t\t\t`\n\t\t\t\t\t.trim()\n\t\t\t\t\t.replace(/\\>[\\s]+\\</gm, '><'),\n\t\t\t} as any;\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'spotlight',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSpotlightProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = this.queryParams;\n\n\t\t\tconst result = await Meteor.callAsync('spotlight', query);\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'directory',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDirectoryProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, query } = await this.parseJsonQuery();\n\t\t\tconst { text, type, workspace = 'local' } = this.queryParams;\n\n\t\t\tconst filter = {\n\t\t\t\t...(query ? { ...query } : {}),\n\t\t\t\t...(text ? { text } : {}),\n\t\t\t\t...(type ? { type } : {}),\n\t\t\t\t...(workspace ? { workspace } : {}),\n\t\t\t};\n\n\t\t\tif (sort && Object.keys(sort).length > 1) {\n\t\t\t\treturn API.v1.failure('This method support only one \"sort\" parameter');\n\t\t\t}\n\t\t\tconst sortBy = sort ? Object.keys(sort)[0] : undefined;\n\t\t\tconst sortDirection = sort && Object.values(sort)[0] === 1 ? 'asc' : 'desc';\n\n\t\t\tconst result = await Meteor.callAsync('browseChannels', {\n\t\t\t\t...filter,\n\t\t\t\tsortBy,\n\t\t\t\tsortDirection,\n\t\t\t\toffset: Math.max(0, offset),\n\t\t\t\tlimit: Math.max(0, count),\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.failure('Please verify the parameters');\n\t\t\t}\n\t\t\treturn API.v1.success({\n\t\t\t\tresult: result.results,\n\t\t\t\tcount: result.results.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: result.total,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'pw.getPolicy',\n\t{\n\t\tauthRequired: false,\n\t},\n\t{\n\t\tget() {\n\t\t\treturn API.v1.success(passwordPolicy.getPasswordPolicy());\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/stdout.queue:\n *    get:\n *      description: Retrieves last 1000 lines of server logs\n *      security:\n *        - authenticated: ['view-logs']\n *      responses:\n *        200:\n *          description: The user data of the authenticated user\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      queue:\n *                        type: array\n *                        items:\n *                          type: object\n *                          properties:\n *                            id:\n *                              type: string\n *                            string:\n *                              type: string\n *                            ts:\n *                              type: string\n *                              format: date-time\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'stdout.queue',\n\t{ authRequired: true, permissionsRequired: ['view-logs'] },\n\t{\n\t\tasync get() {\n\t\t\treturn API.v1.success({ queue: getLogs() });\n\t\t},\n\t},\n);\n\ndeclare module '@rocket.chat/rest-typings' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface Endpoints {\n\t\t'method.call/:method': {\n\t\t\tPOST: (params: { method: string; args: any[] }) => any;\n\t\t};\n\t\t'method.callAnon/:method': {\n\t\t\tPOST: (params: { method: string; args: any[] }) => any;\n\t\t};\n\t}\n}\n\nconst mountResult = ({\n\tid,\n\terror,\n\tresult,\n}: {\n\tid: string;\n\terror?: unknown;\n\tresult?: unknown;\n}): {\n\tmessage: string;\n} => ({\n\tmessage: EJSON.stringify({\n\t\tmsg: 'result',\n\t\tid,\n\t\terror: error as any,\n\t\tresult: result as any,\n\t}),\n});\n\n// had to create two different endpoints for authenticated and non-authenticated calls\n// because restivus does not provide 'this.userId' if 'authRequired: false'\nAPI.v1.addRoute(\n\t'method.call/:method',\n\t{\n\t\tauthRequired: true,\n\t\trateLimiterOptions: false,\n\t\tvalidateParams: isMeteorCall,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tmessage: String,\n\t\t\t});\n\n\t\t\tconst data = EJSON.parse(this.bodyParams.message);\n\n\t\t\tif (!isMethodCallProps(data)) {\n\t\t\t\treturn API.v1.failure('Invalid method call');\n\t\t\t}\n\n\t\t\tconst { method, params, id } = data;\n\n\t\t\tconst connectionId =\n\t\t\t\tthis.token ||\n\t\t\t\tcrypto\n\t\t\t\t\t.createHash('md5')\n\t\t\t\t\t.update(this.requestIp + this.user._id)\n\t\t\t\t\t.digest('hex');\n\n\t\t\tconst rateLimiterInput = {\n\t\t\t\tuserId: this.userId,\n\t\t\t\tclientAddress: this.requestIp,\n\t\t\t\ttype: 'method',\n\t\t\t\tname: method,\n\t\t\t\tconnectionId,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tDDPRateLimiter._increment(rateLimiterInput);\n\t\t\t\tconst rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n\t\t\t\tif (!rateLimitResult.allowed) {\n\t\t\t\t\tthrow new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n\t\t\t\t\t\ttimeToReset: rateLimitResult.timeToReset,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst result = await Meteor.callAsync(method, ...params);\n\t\t\t\treturn API.v1.success(mountResult({ id, result }));\n\t\t\t} catch (err) {\n\t\t\t\tif (!(err as any).isClientSafe && !(err as any).meteorError) {\n\t\t\t\t\tSystemLogger.error({ msg: `Exception while invoking method ${method}`, err });\n\t\t\t\t}\n\n\t\t\t\tif (settings.get('Log_Level') === '2') {\n\t\t\t\t\tMeteor._debug(`Exception while invoking method ${method}`, err);\n\t\t\t\t}\n\t\t\t\treturn API.v1.success(mountResult({ id, error: err }));\n\t\t\t}\n\t\t},\n\t},\n);\nAPI.v1.addRoute(\n\t'method.callAnon/:method',\n\t{\n\t\tauthRequired: false,\n\t\trateLimiterOptions: false,\n\t\tvalidateParams: isMeteorCall,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tmessage: String,\n\t\t\t});\n\n\t\t\tconst data = EJSON.parse(this.bodyParams.message);\n\n\t\t\tif (!isMethodCallAnonProps(data)) {\n\t\t\t\treturn API.v1.failure('Invalid method call');\n\t\t\t}\n\n\t\t\tconst { method, params, id } = data;\n\n\t\t\tconst connectionId = this.token || crypto.createHash('md5').update(this.requestIp).digest('hex');\n\n\t\t\tconst rateLimiterInput = {\n\t\t\t\tuserId: this.userId || undefined,\n\t\t\t\tclientAddress: this.requestIp,\n\t\t\t\ttype: 'method',\n\t\t\t\tname: method,\n\t\t\t\tconnectionId,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tDDPRateLimiter._increment(rateLimiterInput);\n\n\t\t\t\tconst rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n\t\t\t\tif (!rateLimitResult.allowed) {\n\t\t\t\t\tthrow new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n\t\t\t\t\t\ttimeToReset: rateLimitResult.timeToReset,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst result = await Meteor.callAsync(method, ...params);\n\t\t\t\treturn API.v1.success(mountResult({ id, result }));\n\t\t\t} catch (err) {\n\t\t\t\tif (!(err as any).isClientSafe && !(err as any).meteorError) {\n\t\t\t\t\tSystemLogger.error({ msg: `Exception while invoking method ${method}`, err });\n\t\t\t\t}\n\t\t\t\tif (settings.get('Log_Level') === '2') {\n\t\t\t\t\tMeteor._debug(`Exception while invoking method ${method}`, err);\n\t\t\t\t}\n\t\t\t\treturn API.v1.success(mountResult({ id, error: err }));\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'smtp.check',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\treturn API.v1.success({ isSMTPConfigured: isSMTPConfigured() });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/fingerprint:\n *    post:\n *      description: Update Fingerprint definition as a new workspace or update of configuration\n *      security:\n *        $ref: '#/security/authenticated'\n *      requestBody:\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                setDeploymentAs:\n *                  type: string\n *            example: |\n *              {\n *                 \"setDeploymentAs\": \"new-workspace\"\n *              }\n *      responses:\n *        200:\n *          description: Workspace successfully configured\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'fingerprint',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isFingerprintProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tsetDeploymentAs: String,\n\t\t\t});\n\n\t\t\tconst settingsIds: string[] = [];\n\n\t\t\tif (this.bodyParams.setDeploymentAs === 'new-workspace') {\n\t\t\t\tawait WorkspaceCredentials.unsetCredentialByScope();\n\t\t\t\tsettingsIds.push(\n\t\t\t\t\t'Cloud_Service_Agree_PrivacyTerms',\n\t\t\t\t\t'Cloud_Workspace_Id',\n\t\t\t\t\t'Cloud_Workspace_Name',\n\t\t\t\t\t'Cloud_Workspace_Client_Id',\n\t\t\t\t\t'Cloud_Workspace_Client_Secret',\n\t\t\t\t\t'Cloud_Workspace_Client_Secret_Expires_At',\n\t\t\t\t\t'Cloud_Workspace_Registration_Client_Uri',\n\t\t\t\t\t'Cloud_Workspace_PublicKey',\n\t\t\t\t\t'Cloud_Workspace_License',\n\t\t\t\t\t'Cloud_Workspace_Had_Trial',\n\t\t\t\t\t'uniqueID',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tsettingsIds.push('Deployment_FingerPrint_Verified');\n\n\t\t\tconst promises = settingsIds.map((settingId) => {\n\t\t\t\tif (settingId === 'uniqueID') {\n\t\t\t\t\treturn Settings.resetValueById('uniqueID', process.env.DEPLOYMENT_ID || uuidv4());\n\t\t\t\t}\n\n\t\t\t\tif (settingId === 'Cloud_Workspace_Access_Token_Expires_At') {\n\t\t\t\t\treturn Settings.resetValueById('Cloud_Workspace_Access_Token_Expires_At', new Date(0));\n\t\t\t\t}\n\n\t\t\t\tif (settingId === 'Deployment_FingerPrint_Verified') {\n\t\t\t\t\treturn Settings.updateValueById('Deployment_FingerPrint_Verified', true);\n\t\t\t\t}\n\n\t\t\t\treturn Settings.resetValueById(settingId);\n\t\t\t});\n\n\t\t\t(await Promise.all(promises)).forEach((value, index) => {\n\t\t\t\tif (value?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnSettingChangedById(settingsIds[index]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn API.v1.success({});\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"ce679ba6e63455dfd6103ab1128a282076c7d5de"}
