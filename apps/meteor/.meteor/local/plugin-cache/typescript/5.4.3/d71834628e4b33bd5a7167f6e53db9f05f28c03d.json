{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/sendEmailTranscriptOnClose.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/hooks/sendEmailTranscriptOnClose.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/sendEmailTranscriptOnClose.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/hooks/sendEmailTranscriptOnClose.ts","sourceRoot":"","sources":["app/livechat/server/hooks/sendEmailTranscriptOnClose.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAC9D,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAEpD,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AAEtD,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AAOvD,MAAM,0BAA0B,GAAG,KAAK,EAAE,MAAmC,EAAwC,EAAE;IACtH,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC;IAEjC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;QAC9B,OAAO,MAAM,CAAC;IACf,CAAC;IAED,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;IAC7C,IAAI,CAAC,KAAK,EAAE,CAAC;QACZ,OAAO,MAAM,CAAC;IACf,CAAC;IAED,MAAM,cAAc,GAAG,qBAAqB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC5D,IAAI,CAAC,cAAc,EAAE,CAAC;QACrB,OAAO,MAAM,CAAC;IACf,CAAC;IAED,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,cAAc,CAAC;IAE7D,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,aAAa,CAAC,qCAAqC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEpI,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAE9B,OAAO;QACN,IAAI;QACJ,OAAO;KACP,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,qBAAqB,GAAG,CAC7B,IAAsB,EACtB,UAAkD,EAAE,EACA,EAAE;IACtD,MAAM,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,GAAG,IAAI,CAAC;IAE1D,MAAM,EAAE,eAAe,EAAE,wBAAwB,EAAE,GAAG,OAAO,CAAC;IAE9D,+EAA+E;IAC/E,yFAAyF;IACzF,IAAI,wBAAwB,KAAK,SAAS,EAAE,CAAC;QAC5C,OAAO,qBAAqB,CAAC;IAC9B,CAAC;IAED,IAAI,CAAC,wBAAwB,CAAC,aAAa,EAAE,CAAC;QAC7C,OAAO,SAAS,CAAC;IAClB,CAAC;IACD,OAAO,wBAAwB,CAAC,WAAW,CAAC;AAC7C,CAAC,CAAC;AAEF,SAAS,CAAC,GAAG,CAAC,oBAAoB,EAAE,0BAA0B,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,8CAA8C,CAAC,CAAC","sourcesContent":["import type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { LivechatRooms } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport type { CloseRoomParams } from '../lib/localTypes';\nimport { sendTranscript } from '../lib/sendTranscript';\n\ntype LivechatCloseCallbackParams = {\n\troom: IOmnichannelRoom;\n\toptions: CloseRoomParams['options'];\n};\n\nconst sendEmailTranscriptOnClose = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\n\tconst { room, options } = params;\n\n\tif (!isOmnichannelRoom(room)) {\n\t\treturn params;\n\t}\n\n\tconst { _id: rid, v: { token } = {} } = room;\n\tif (!token) {\n\t\treturn params;\n\t}\n\n\tconst transcriptData = resolveTranscriptData(room, options);\n\tif (!transcriptData) {\n\t\treturn params;\n\t}\n\n\tconst { email, subject, requestedBy: user } = transcriptData;\n\n\tawait Promise.all([sendTranscript({ token, rid, email, subject, user }), LivechatRooms.unsetEmailTranscriptRequestedByRoomId(rid)]);\n\n\tdelete room.transcriptRequest;\n\n\treturn {\n\t\troom,\n\t\toptions,\n\t};\n};\n\nconst resolveTranscriptData = (\n\troom: IOmnichannelRoom,\n\toptions: LivechatCloseCallbackParams['options'] = {},\n): IOmnichannelRoom['transcriptRequest'] | undefined => {\n\tconst { transcriptRequest: roomTranscriptRequest } = room;\n\n\tconst { emailTranscript: optionsTranscriptRequest } = options;\n\n\t// Note: options.emailTranscript will override the room.transcriptRequest check\n\t// If options.emailTranscript is not set, then the room.transcriptRequest will be checked\n\tif (optionsTranscriptRequest === undefined) {\n\t\treturn roomTranscriptRequest;\n\t}\n\n\tif (!optionsTranscriptRequest.sendToVisitor) {\n\t\treturn undefined;\n\t}\n\treturn optionsTranscriptRequest.requestData;\n};\n\ncallbacks.add('livechat.closeRoom', sendEmailTranscriptOnClose, callbacks.priority.HIGH, 'livechat-send-email-transcript-on-close-room');\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/sendEmailTranscriptOnClose.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/hooks/sendEmailTranscriptOnClose.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/hooks/sendEmailTranscriptOnClose.ts","sourceRoot":"","sources":["app/livechat/server/hooks/sendEmailTranscriptOnClose.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAC9D,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAEpD,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AAEtD,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AAOvD,MAAM,0BAA0B,GAAG,KAAK,EAAE,MAAmC,EAAwC,EAAE;IACtH,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC;IAEjC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;QAC9B,OAAO,MAAM,CAAC;IACf,CAAC;IAED,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;IAC7C,IAAI,CAAC,KAAK,EAAE,CAAC;QACZ,OAAO,MAAM,CAAC;IACf,CAAC;IAED,MAAM,cAAc,GAAG,qBAAqB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC5D,IAAI,CAAC,cAAc,EAAE,CAAC;QACrB,OAAO,MAAM,CAAC;IACf,CAAC;IAED,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,cAAc,CAAC;IAE7D,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,aAAa,CAAC,qCAAqC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEpI,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAE9B,OAAO;QACN,IAAI;QACJ,OAAO;KACP,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,qBAAqB,GAAG,CAC7B,IAAsB,EACtB,UAAkD,EAAE,EACA,EAAE;IACtD,MAAM,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,GAAG,IAAI,CAAC;IAE1D,MAAM,EAAE,eAAe,EAAE,wBAAwB,EAAE,GAAG,OAAO,CAAC;IAE9D,+EAA+E;IAC/E,yFAAyF;IACzF,IAAI,wBAAwB,KAAK,SAAS,EAAE,CAAC;QAC5C,OAAO,qBAAqB,CAAC;IAC9B,CAAC;IAED,IAAI,CAAC,wBAAwB,CAAC,aAAa,EAAE,CAAC;QAC7C,OAAO,SAAS,CAAC;IAClB,CAAC;IACD,OAAO,wBAAwB,CAAC,WAAW,CAAC;AAC7C,CAAC,CAAC;AAEF,SAAS,CAAC,GAAG,CAAC,oBAAoB,EAAE,0BAA0B,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,8CAA8C,CAAC,CAAC","sourcesContent":["import type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { LivechatRooms } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport type { CloseRoomParams } from '../lib/localTypes';\nimport { sendTranscript } from '../lib/sendTranscript';\n\ntype LivechatCloseCallbackParams = {\n\troom: IOmnichannelRoom;\n\toptions: CloseRoomParams['options'];\n};\n\nconst sendEmailTranscriptOnClose = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\n\tconst { room, options } = params;\n\n\tif (!isOmnichannelRoom(room)) {\n\t\treturn params;\n\t}\n\n\tconst { _id: rid, v: { token } = {} } = room;\n\tif (!token) {\n\t\treturn params;\n\t}\n\n\tconst transcriptData = resolveTranscriptData(room, options);\n\tif (!transcriptData) {\n\t\treturn params;\n\t}\n\n\tconst { email, subject, requestedBy: user } = transcriptData;\n\n\tawait Promise.all([sendTranscript({ token, rid, email, subject, user }), LivechatRooms.unsetEmailTranscriptRequestedByRoomId(rid)]);\n\n\tdelete room.transcriptRequest;\n\n\treturn {\n\t\troom,\n\t\toptions,\n\t};\n};\n\nconst resolveTranscriptData = (\n\troom: IOmnichannelRoom,\n\toptions: LivechatCloseCallbackParams['options'] = {},\n): IOmnichannelRoom['transcriptRequest'] | undefined => {\n\tconst { transcriptRequest: roomTranscriptRequest } = room;\n\n\tconst { emailTranscript: optionsTranscriptRequest } = options;\n\n\t// Note: options.emailTranscript will override the room.transcriptRequest check\n\t// If options.emailTranscript is not set, then the room.transcriptRequest will be checked\n\tif (optionsTranscriptRequest === undefined) {\n\t\treturn roomTranscriptRequest;\n\t}\n\n\tif (!optionsTranscriptRequest.sendToVisitor) {\n\t\treturn undefined;\n\t}\n\treturn optionsTranscriptRequest.requestData;\n};\n\ncallbacks.add('livechat.closeRoom', sendEmailTranscriptOnClose, callbacks.priority.HIGH, 'livechat-send-email-transcript-on-close-room');\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let isOmnichannelRoom;\n    module.link(\"@rocket.chat/core-typings\", {\n      isOmnichannelRoom(v) {\n        isOmnichannelRoom = v;\n      }\n    }, 0);\n    let LivechatRooms;\n    module.link(\"@rocket.chat/models\", {\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      }\n    }, 1);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 2);\n    let sendTranscript;\n    module.link(\"../lib/sendTranscript\", {\n      sendTranscript(v) {\n        sendTranscript = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const sendEmailTranscriptOnClose = async params => {\n      const {\n        room,\n        options\n      } = params;\n      if (!isOmnichannelRoom(room)) {\n        return params;\n      }\n      const {\n        _id: rid,\n        v: {\n          token\n        } = {}\n      } = room;\n      if (!token) {\n        return params;\n      }\n      const transcriptData = resolveTranscriptData(room, options);\n      if (!transcriptData) {\n        return params;\n      }\n      const {\n        email,\n        subject,\n        requestedBy: user\n      } = transcriptData;\n      await Promise.all([sendTranscript({\n        token,\n        rid,\n        email,\n        subject,\n        user\n      }), LivechatRooms.unsetEmailTranscriptRequestedByRoomId(rid)]);\n      delete room.transcriptRequest;\n      return {\n        room,\n        options\n      };\n    };\n    const resolveTranscriptData = function (room) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const {\n        transcriptRequest: roomTranscriptRequest\n      } = room;\n      const {\n        emailTranscript: optionsTranscriptRequest\n      } = options;\n      // Note: options.emailTranscript will override the room.transcriptRequest check\n      // If options.emailTranscript is not set, then the room.transcriptRequest will be checked\n      if (optionsTranscriptRequest === undefined) {\n        return roomTranscriptRequest;\n      }\n      if (!optionsTranscriptRequest.sendToVisitor) {\n        return undefined;\n      }\n      return optionsTranscriptRequest.requestData;\n    };\n    callbacks.add('livechat.closeRoom', sendEmailTranscriptOnClose, callbacks.priority.HIGH, 'livechat-send-email-transcript-on-close-room');\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["isOmnichannelRoom","module","link","v","LivechatRooms","callbacks","sendTranscript","__reifyWaitForDeps__","sendEmailTranscriptOnClose","params","room","options","_id","rid","token","transcriptData","resolveTranscriptData","email","subject","requestedBy","user","Promise","all","unsetEmailTranscriptRequestedByRoomId","transcriptRequest","arguments","length","undefined","roomTranscriptRequest","emailTranscript","optionsTranscriptRequest","sendToVisitor","requestData","add","priority","HIGH","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/hooks/sendEmailTranscriptOnClose.ts"],"sourcesContent":["import type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { LivechatRooms } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport type { CloseRoomParams } from '../lib/localTypes';\nimport { sendTranscript } from '../lib/sendTranscript';\n\ntype LivechatCloseCallbackParams = {\n\troom: IOmnichannelRoom;\n\toptions: CloseRoomParams['options'];\n};\n\nconst sendEmailTranscriptOnClose = async (params: LivechatCloseCallbackParams): Promise<LivechatCloseCallbackParams> => {\n\tconst { room, options } = params;\n\n\tif (!isOmnichannelRoom(room)) {\n\t\treturn params;\n\t}\n\n\tconst { _id: rid, v: { token } = {} } = room;\n\tif (!token) {\n\t\treturn params;\n\t}\n\n\tconst transcriptData = resolveTranscriptData(room, options);\n\tif (!transcriptData) {\n\t\treturn params;\n\t}\n\n\tconst { email, subject, requestedBy: user } = transcriptData;\n\n\tawait Promise.all([sendTranscript({ token, rid, email, subject, user }), LivechatRooms.unsetEmailTranscriptRequestedByRoomId(rid)]);\n\n\tdelete room.transcriptRequest;\n\n\treturn {\n\t\troom,\n\t\toptions,\n\t};\n};\n\nconst resolveTranscriptData = (\n\troom: IOmnichannelRoom,\n\toptions: LivechatCloseCallbackParams['options'] = {},\n): IOmnichannelRoom['transcriptRequest'] | undefined => {\n\tconst { transcriptRequest: roomTranscriptRequest } = room;\n\n\tconst { emailTranscript: optionsTranscriptRequest } = options;\n\n\t// Note: options.emailTranscript will override the room.transcriptRequest check\n\t// If options.emailTranscript is not set, then the room.transcriptRequest will be checked\n\tif (optionsTranscriptRequest === undefined) {\n\t\treturn roomTranscriptRequest;\n\t}\n\n\tif (!optionsTranscriptRequest.sendToVisitor) {\n\t\treturn undefined;\n\t}\n\treturn optionsTranscriptRequest.requestData;\n};\n\ncallbacks.add('livechat.closeRoom', sendEmailTranscriptOnClose, callbacks.priority.HIGH, 'livechat-send-email-transcript-on-close-room');\n"],"mappings":";;;IACA,IAAAA,iBAAS;IAAAC,MAAmB,CAAAC,IAAA,CAAM,2BAA2B,EAAC;MAAAF,kBAAAG,CAAA;QAAAH,iBAAA,GAAAG,CAAA;MAAA;IAAA;IAAA,IAAAC,aAAA;IAAAH,MAAA,CAAAC,IAAA;MAAAE,cAAAD,CAAA;QAAAC,aAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,IAAAE,SAAA;IAAAJ,MAAA,CAAAC,IAAA;MAAAG,UAAAF,CAAA;QAAAE,SAAA,GAAAF,CAAA;MAAA;IAAA;IAAA,IAAAG,cAAA;IAAAL,MAAA,CAAAC,IAAA;MAAAI,eAAAH,CAAA;QAAAG,cAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,oBAAA,WAAAA,oBAAA;IAY9D,MAAMC,0BAA0B,GAAG,MAAOC,MAAmC,IAA0C;MACtH,MAAM;QAAEC,IAAI;QAAEC;MAAO,CAAE,GAAGF,MAAM;MAEhC,IAAI,CAACT,iBAAiB,CAACU,IAAI,CAAC,EAAE;QAC7B,OAAOD,MAAM;MACd;MAEA,MAAM;QAAEG,GAAG,EAAEC,GAAG;QAAEV,CAAC,EAAE;UAAEW;QAAK,CAAE,GAAG;MAAE,CAAE,GAAGJ,IAAI;MAC5C,IAAI,CAACI,KAAK,EAAE;QACX,OAAOL,MAAM;MACd;MAEA,MAAMM,cAAc,GAAGC,qBAAqB,CAACN,IAAI,EAAEC,OAAO,CAAC;MAC3D,IAAI,CAACI,cAAc,EAAE;QACpB,OAAON,MAAM;MACd;MAEA,MAAM;QAAEQ,KAAK;QAAEC,OAAO;QAAEC,WAAW,EAAEC;MAAI,CAAE,GAAGL,cAAc;MAE5D,MAAMM,OAAO,CAACC,GAAG,CAAC,CAAChB,cAAc,CAAC;QAAEQ,KAAK;QAAED,GAAG;QAAEI,KAAK;QAAEC,OAAO;QAAEE;MAAI,CAAE,CAAC,EAAEhB,aAAa,CAACmB,qCAAqC,CAACV,GAAG,CAAC,CAAC,CAAC;MAEnI,OAAOH,IAAI,CAACc,iBAAiB;MAE7B,OAAO;QACNd,IAAI;QACJC;OACA;IACF,CAAC;IAED,MAAMK,qBAAqB,GAAG,SAAAA,CAC7BN,IAAsB,EAEgC;MAAA,IADtDC,OAAA,GAAAc,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkD,EAAE;MAEpD,MAAM;QAAED,iBAAiB,EAAEI;MAAqB,CAAE,GAAGlB,IAAI;MAEzD,MAAM;QAAEmB,eAAe,EAAEC;MAAwB,CAAE,GAAGnB,OAAO;MAE7D;MACA;MACA,IAAImB,wBAAwB,KAAKH,SAAS,EAAE;QAC3C,OAAOC,qBAAqB;MAC7B;MAEA,IAAI,CAACE,wBAAwB,CAACC,aAAa,EAAE;QAC5C,OAAOJ,SAAS;MACjB;MACA,OAAOG,wBAAwB,CAACE,WAAW;IAC5C,CAAC;IAED3B,SAAS,CAAC4B,GAAG,CAAC,oBAAoB,EAAEzB,0BAA0B,EAAEH,SAAS,CAAC6B,QAAQ,CAACC,IAAI,EAAE,8CAA8C,CAAC;IAACC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"d71834628e4b33bd5a7167f6e53db9f05f28c03d"}
