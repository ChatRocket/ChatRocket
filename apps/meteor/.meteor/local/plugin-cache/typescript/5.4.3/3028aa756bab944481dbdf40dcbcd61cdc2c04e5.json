{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/reports.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/livechat-enterprise/server/api/reports.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/reports.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/api/reports.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/api/reports.ts"],"names":[],"mappings":"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","sourcesContent":["import { isGETDashboardConversationsByType } from '@rocket.chat/rest-typings';\nimport type { Moment } from 'moment';\nimport moment from 'moment';\n\nimport { API } from '../../../../../app/api/server';\nimport { restrictQuery } from '../hooks/applyRoomRestrictions';\nimport {\n\tfindAllConversationsBySourceCached,\n\tfindAllConversationsByStatusCached,\n\tfindAllConversationsByDepartmentCached,\n\tfindAllConversationsByTagsCached,\n\tfindAllConversationsByAgentsCached,\n} from './lib/dashboards';\n\nconst checkDates = (start: Moment, end: Moment) => {\n\tif (!start.isValid()) {\n\t\tthrow new Error('The \"start\" query parameter must be a valid date.');\n\t}\n\tif (!end.isValid()) {\n\t\tthrow new Error('The \"end\" query parameter must be a valid date.');\n\t}\n\t// Check dates are no more than 1 year apart using moment\n\t// 1.01 === \"we allow to pass year by some hours/days\"\n\tif (moment(end).startOf('day').diff(moment(start).startOf('day'), 'year', true) > 1.01) {\n\t\tthrow new Error('The \"start\" and \"end\" query parameters must be less than 1 year apart.');\n\t}\n\n\tif (start.isAfter(end)) {\n\t\tthrow new Error('The \"start\" query parameter must be before the \"end\" query parameter.');\n\t}\n};\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-source',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsBySourceCached({ start: startDate.toDate(), end: endDate.toDate(), extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-status',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByStatusCached({ start: startDate.toDate(), end: endDate.toDate(), extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-department',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByDepartmentCached({ start: startDate.toDate(), end: endDate.toDate(), sort, extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-tags',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByTagsCached({ start: startDate.toDate(), end: endDate.toDate(), sort, extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-agent',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByAgentsCached({ start: startDate.toDate(), end: endDate.toDate(), sort, extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/reports.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/livechat-enterprise/server/api/reports.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/api/reports.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/api/reports.ts"],"names":[],"mappings":"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","sourcesContent":["import { isGETDashboardConversationsByType } from '@rocket.chat/rest-typings';\nimport type { Moment } from 'moment';\nimport moment from 'moment';\n\nimport { API } from '../../../../../app/api/server';\nimport { restrictQuery } from '../hooks/applyRoomRestrictions';\nimport {\n\tfindAllConversationsBySourceCached,\n\tfindAllConversationsByStatusCached,\n\tfindAllConversationsByDepartmentCached,\n\tfindAllConversationsByTagsCached,\n\tfindAllConversationsByAgentsCached,\n} from './lib/dashboards';\n\nconst checkDates = (start: Moment, end: Moment) => {\n\tif (!start.isValid()) {\n\t\tthrow new Error('The \"start\" query parameter must be a valid date.');\n\t}\n\tif (!end.isValid()) {\n\t\tthrow new Error('The \"end\" query parameter must be a valid date.');\n\t}\n\t// Check dates are no more than 1 year apart using moment\n\t// 1.01 === \"we allow to pass year by some hours/days\"\n\tif (moment(end).startOf('day').diff(moment(start).startOf('day'), 'year', true) > 1.01) {\n\t\tthrow new Error('The \"start\" and \"end\" query parameters must be less than 1 year apart.');\n\t}\n\n\tif (start.isAfter(end)) {\n\t\tthrow new Error('The \"start\" query parameter must be before the \"end\" query parameter.');\n\t}\n};\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-source',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsBySourceCached({ start: startDate.toDate(), end: endDate.toDate(), extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-status',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByStatusCached({ start: startDate.toDate(), end: endDate.toDate(), extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-department',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByDepartmentCached({ start: startDate.toDate(), end: endDate.toDate(), sort, extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-tags',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByTagsCached({ start: startDate.toDate(), end: endDate.toDate(), sort, extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-agent',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByAgentsCached({ start: startDate.toDate(), end: endDate.toDate(), sort, extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let isGETDashboardConversationsByType;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isGETDashboardConversationsByType(v) {\n        isGETDashboardConversationsByType = v;\n      }\n    }, 0);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 1);\n    let API;\n    module.link(\"../../../../../app/api/server\", {\n      API(v) {\n        API = v;\n      }\n    }, 2);\n    let restrictQuery;\n    module.link(\"../hooks/applyRoomRestrictions\", {\n      restrictQuery(v) {\n        restrictQuery = v;\n      }\n    }, 3);\n    let findAllConversationsBySourceCached, findAllConversationsByStatusCached, findAllConversationsByDepartmentCached, findAllConversationsByTagsCached, findAllConversationsByAgentsCached;\n    module.link(\"./lib/dashboards\", {\n      findAllConversationsBySourceCached(v) {\n        findAllConversationsBySourceCached = v;\n      },\n      findAllConversationsByStatusCached(v) {\n        findAllConversationsByStatusCached = v;\n      },\n      findAllConversationsByDepartmentCached(v) {\n        findAllConversationsByDepartmentCached = v;\n      },\n      findAllConversationsByTagsCached(v) {\n        findAllConversationsByTagsCached = v;\n      },\n      findAllConversationsByAgentsCached(v) {\n        findAllConversationsByAgentsCached = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const checkDates = (start, end) => {\n      if (!start.isValid()) {\n        throw new Error('The \"start\" query parameter must be a valid date.');\n      }\n      if (!end.isValid()) {\n        throw new Error('The \"end\" query parameter must be a valid date.');\n      }\n      // Check dates are no more than 1 year apart using moment\n      // 1.01 === \"we allow to pass year by some hours/days\"\n      if (moment(end).startOf('day').diff(moment(start).startOf('day'), 'year', true) > 1.01) {\n        throw new Error('The \"start\" and \"end\" query parameters must be less than 1 year apart.');\n      }\n      if (start.isAfter(end)) {\n        throw new Error('The \"start\" query parameter must be before the \"end\" query parameter.');\n      }\n    };\n    API.v1.addRoute('livechat/analytics/dashboards/conversations-by-source', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-reports'],\n      validateParams: isGETDashboardConversationsByType\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const startDate = moment(start);\n        const endDate = moment(end);\n        checkDates(startDate, endDate);\n        const extraQuery = await restrictQuery();\n        const result = await findAllConversationsBySourceCached({\n          start: startDate.toDate(),\n          end: endDate.toDate(),\n          extraQuery\n        });\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/conversations-by-status', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-reports'],\n      validateParams: isGETDashboardConversationsByType\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const startDate = moment(start);\n        const endDate = moment(end);\n        checkDates(startDate, endDate);\n        const extraQuery = await restrictQuery();\n        const result = await findAllConversationsByStatusCached({\n          start: startDate.toDate(),\n          end: endDate.toDate(),\n          extraQuery\n        });\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/conversations-by-department', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-reports'],\n      validateParams: isGETDashboardConversationsByType\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const startDate = moment(start);\n        const endDate = moment(end);\n        checkDates(startDate, endDate);\n        const extraQuery = await restrictQuery();\n        const result = await findAllConversationsByDepartmentCached({\n          start: startDate.toDate(),\n          end: endDate.toDate(),\n          sort,\n          extraQuery\n        });\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/conversations-by-tags', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-reports'],\n      validateParams: isGETDashboardConversationsByType\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const startDate = moment(start);\n        const endDate = moment(end);\n        checkDates(startDate, endDate);\n        const extraQuery = await restrictQuery();\n        const result = await findAllConversationsByTagsCached({\n          start: startDate.toDate(),\n          end: endDate.toDate(),\n          sort,\n          extraQuery\n        });\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/conversations-by-agent', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-reports'],\n      validateParams: isGETDashboardConversationsByType\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const startDate = moment(start);\n        const endDate = moment(end);\n        checkDates(startDate, endDate);\n        const extraQuery = await restrictQuery();\n        const result = await findAllConversationsByAgentsCached({\n          start: startDate.toDate(),\n          end: endDate.toDate(),\n          sort,\n          extraQuery\n        });\n        return API.v1.success(result);\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["isGETDashboardConversationsByType","module","link","v","moment","default","API","restrictQuery","findAllConversationsBySourceCached","findAllConversationsByStatusCached","findAllConversationsByDepartmentCached","findAllConversationsByTagsCached","findAllConversationsByAgentsCached","__reifyWaitForDeps__","checkDates","start","end","isValid","Error","startOf","diff","isAfter","v1","addRoute","authRequired","permissionsRequired","validateParams","get","queryParams","startDate","endDate","extraQuery","result","toDate","success","sort","parseJsonQuery","__reify_async_result__","_reifyError","self","async"],"sources":["ee/app/livechat-enterprise/server/api/reports.ts"],"sourcesContent":["import { isGETDashboardConversationsByType } from '@rocket.chat/rest-typings';\nimport type { Moment } from 'moment';\nimport moment from 'moment';\n\nimport { API } from '../../../../../app/api/server';\nimport { restrictQuery } from '../hooks/applyRoomRestrictions';\nimport {\n\tfindAllConversationsBySourceCached,\n\tfindAllConversationsByStatusCached,\n\tfindAllConversationsByDepartmentCached,\n\tfindAllConversationsByTagsCached,\n\tfindAllConversationsByAgentsCached,\n} from './lib/dashboards';\n\nconst checkDates = (start: Moment, end: Moment) => {\n\tif (!start.isValid()) {\n\t\tthrow new Error('The \"start\" query parameter must be a valid date.');\n\t}\n\tif (!end.isValid()) {\n\t\tthrow new Error('The \"end\" query parameter must be a valid date.');\n\t}\n\t// Check dates are no more than 1 year apart using moment\n\t// 1.01 === \"we allow to pass year by some hours/days\"\n\tif (moment(end).startOf('day').diff(moment(start).startOf('day'), 'year', true) > 1.01) {\n\t\tthrow new Error('The \"start\" and \"end\" query parameters must be less than 1 year apart.');\n\t}\n\n\tif (start.isAfter(end)) {\n\t\tthrow new Error('The \"start\" query parameter must be before the \"end\" query parameter.');\n\t}\n};\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-source',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsBySourceCached({ start: startDate.toDate(), end: endDate.toDate(), extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-status',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByStatusCached({ start: startDate.toDate(), end: endDate.toDate(), extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-department',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByDepartmentCached({ start: startDate.toDate(), end: endDate.toDate(), sort, extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-tags',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByTagsCached({ start: startDate.toDate(), end: endDate.toDate(), sort, extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversations-by-agent',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-reports'], validateParams: isGETDashboardConversationsByType },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst startDate = moment(start);\n\t\t\tconst endDate = moment(end);\n\n\t\t\tcheckDates(startDate, endDate);\n\t\t\tconst extraQuery = await restrictQuery();\n\t\t\tconst result = await findAllConversationsByAgentsCached({ start: startDate.toDate(), end: endDate.toDate(), sort, extraQuery });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"3028aa756bab944481dbdf40dcbcd61cdc2c04e5"}
