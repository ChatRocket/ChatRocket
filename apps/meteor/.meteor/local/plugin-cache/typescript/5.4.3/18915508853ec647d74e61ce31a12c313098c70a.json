{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatDepartmentAgents.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/LivechatDepartmentAgents.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatDepartmentAgents.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatDepartmentAgents.ts","sourceRoot":"","sources":["server/models/raw/LivechatDepartmentAgents.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatDepartmentAgents, RocketChatRecordDeleted, IUser } from '@rocket.chat/core-typings';\nimport type { FindPaginated, ILivechatDepartmentAgentsModel } from '@rocket.chat/model-typings';\nimport { Users } from '@rocket.chat/models';\nimport type {\n\tCollection,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tFindOptions,\n\tDocument,\n\tUpdateResult,\n\tDeleteResult,\n\tIndexDescription,\n\tSortDirection,\n\tAggregationCursor,\n} from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class LivechatDepartmentAgentsRaw extends BaseRaw<ILivechatDepartmentAgents> implements ILivechatDepartmentAgentsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatDepartmentAgents>>) {\n\t\tsuper(db, 'livechat_department_agents', trash);\n\t}\n\n\tprotected modelIndexes(): Array<IndexDescription> {\n\t\treturn [\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tdepartmentId: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tdepartmentEnabled: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tagentId: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t}\n\n\tfindUsersInQueue(usersList: string[]): FindCursor<ILivechatDepartmentAgents>;\n\n\tfindUsersInQueue(usersList: string[], options: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents>;\n\n\tfindUsersInQueue<P extends Document>(\n\t\tusersList: string[],\n\t\toptions: FindOptions<P extends ILivechatDepartmentAgents ? ILivechatDepartmentAgents : P>,\n\t): FindCursor<P>;\n\n\tfindUsersInQueue<P extends Document>(\n\t\tusersList: string[],\n\t\toptions?:\n\t\t\t| undefined\n\t\t\t| FindOptions<ILivechatDepartmentAgents>\n\t\t\t| FindOptions<P extends ILivechatDepartmentAgents ? ILivechatDepartmentAgents : P>,\n\t): FindCursor<ILivechatDepartmentAgents> | FindCursor<P> {\n\t\tconst query: Filter<ILivechatDepartmentAgents> = {};\n\n\t\tif (Array.isArray(usersList) && usersList.length) {\n\t\t\t// TODO: Remove\n\t\t\tquery.username = {\n\t\t\t\t$in: usersList,\n\t\t\t};\n\t\t}\n\n\t\tif (options === undefined) {\n\t\t\treturn this.find(query);\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByAgentIds(agentIds: string[], options?: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ agentId: { $in: agentIds } }, options);\n\t}\n\n\tfindByAgentId(agentId: string, options?: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ agentId }, options);\n\t}\n\n\tfindAgentsByDepartmentId(departmentId: string): FindPaginated<FindCursor<ILivechatDepartmentAgents>>;\n\n\tfindAgentsByDepartmentId(\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<ILivechatDepartmentAgents>,\n\t): FindPaginated<FindCursor<ILivechatDepartmentAgents>>;\n\n\tfindAgentsByDepartmentId<P extends Document>(\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<P extends ILivechatDepartmentAgents ? ILivechatDepartmentAgents : P>,\n\t): FindPaginated<FindCursor<P>>;\n\n\tfindAgentsByDepartmentId(\n\t\tdepartmentId: string,\n\t\toptions?: undefined | FindOptions<ILivechatDepartmentAgents>,\n\t): FindPaginated<FindCursor<ILivechatDepartmentAgents>> {\n\t\tconst query = { departmentId };\n\n\t\tif (options === undefined) {\n\t\t\treturn this.findPaginated(query);\n\t\t}\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindByDepartmentIds(departmentIds: string[], options = {}): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ departmentId: { $in: departmentIds } }, options);\n\t}\n\n\tasync findAgentsByAgentIdAndBusinessHourId(_agentId: string, _businessHourId: string): Promise<ILivechatDepartmentAgents[]> {\n\t\treturn [];\n\t}\n\n\tsetDepartmentEnabledByDepartmentId(departmentId: string, departmentEnabled: boolean): Promise<Document | UpdateResult> {\n\t\treturn this.updateMany({ departmentId }, { $set: { departmentEnabled } });\n\t}\n\n\tremoveByDepartmentId(departmentId: string): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ departmentId });\n\t}\n\n\tfindByDepartmentId(departmentId: string, options?: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ departmentId }, options);\n\t}\n\n\tfindOneByAgentIdAndDepartmentId(\n\t\tagentId: string,\n\t\tdepartmentId: string,\n\t\toptions?: FindOptions<ILivechatDepartmentAgents>,\n\t): Promise<ILivechatDepartmentAgents | null> {\n\t\treturn this.findOne({ agentId, departmentId }, options);\n\t}\n\n\tsaveAgent(agent: {\n\t\tagentId: string;\n\t\tdepartmentId: string;\n\t\tusername: string;\n\t\tdepartmentEnabled: boolean;\n\t\tcount: number;\n\t\torder: number;\n\t}): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\tagentId: agent.agentId,\n\t\t\t\tdepartmentId: agent.departmentId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tusername: agent.username,\n\t\t\t\t\tdepartmentEnabled: agent.departmentEnabled,\n\t\t\t\t\tcount: parseInt(`${agent.count}`),\n\t\t\t\t\torder: parseInt(`${agent.order}`),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tasync removeByAgentId(agentId: string): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ agentId });\n\t}\n\n\tasync removeByDepartmentIdAndAgentId(departmentId: string, agentId: string): Promise<void> {\n\t\tawait this.deleteMany({ departmentId, agentId });\n\t}\n\n\tasync getNextAgentForDepartment(\n\t\tdepartmentId: ILivechatDepartmentAgents['departmentId'],\n\t\tisLivechatEnabledWhenAgentIdle?: boolean,\n\t\tignoreAgentId?: ILivechatDepartmentAgents['agentId'],\n\t\textraQuery?: Filter<IUser>,\n\t): Promise<Pick<ILivechatDepartmentAgents, '_id' | 'agentId' | 'departmentId' | 'username'> | null | undefined> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst onlineUsers = await Users.findOnlineUserFromList(\n\t\t\tagents.map((agent) => agent.username),\n\t\t\tisLivechatEnabledWhenAgentIdle,\n\t\t).toArray();\n\n\t\tconst onlineUsernames = onlineUsers.map((user) => user.username).filter(isStringValue);\n\n\t\t// get fully booked agents, to ignore them from the query\n\t\tconst currentUnavailableAgents = (await Users.getUnavailableAgents(departmentId, extraQuery)).map((u) => u.username);\n\n\t\tconst query: Filter<ILivechatDepartmentAgents> = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: onlineUsernames,\n\t\t\t\t$nin: currentUnavailableAgents,\n\t\t\t},\n\t\t\t...(ignoreAgentId && { agentId: { $ne: ignoreAgentId } }),\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tcount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst sort: { [k: string]: SortDirection } = {\n\t\t\tcount: 1,\n\t\t\torder: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst projection = {\n\t\t\t_id: 1,\n\t\t\tagentId: 1,\n\t\t\tdepartmentId: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst agent = await this.findOneAndUpdate(query, update, { sort, projection, returnDocument: 'after' });\n\n\t\treturn agent.value;\n\t}\n\n\tasync checkOnlineForDepartment(departmentId: string): Promise<boolean> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst onlineUser = await Users.findOneOnlineAgentByUserList(agents.map((agent) => agent.username));\n\n\t\treturn Boolean(onlineUser);\n\t}\n\n\tasync getOnlineForDepartment(\n\t\tdepartmentId: string,\n\t\tisLivechatEnabledWhenAgentIdle?: boolean,\n\t): Promise<FindCursor<ILivechatDepartmentAgents> | undefined> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst onlineUsers = await Users.findOnlineUserFromList(\n\t\t\tagents.map((a) => a.username),\n\t\t\tisLivechatEnabledWhenAgentIdle,\n\t\t).toArray();\n\n\t\tconst onlineUsernames = onlineUsers.map((user) => user.username).filter(isStringValue);\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: onlineUsernames,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tasync getBotsForDepartment(departmentId: string): Promise<undefined | FindCursor<ILivechatDepartmentAgents>> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst botUsers = await Users.findBotAgents(agents.map((a) => a.username)).toArray();\n\t\tconst botUsernames = botUsers.map((user) => user.username).filter(isStringValue);\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: botUsernames,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tasync getNextBotForDepartment(\n\t\tdepartmentId: ILivechatDepartmentAgents['departmentId'],\n\t\tignoreAgentId?: ILivechatDepartmentAgents['agentId'],\n\t): Promise<Pick<ILivechatDepartmentAgents, '_id' | 'agentId' | 'departmentId' | 'username'> | null | undefined> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (!agents.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst botUsernames = (await Users.findBotAgents(agents.map((a) => a.username)).toArray())\n\t\t\t.map((user) => user.username)\n\t\t\t.filter(isStringValue);\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: botUsernames,\n\t\t\t},\n\t\t\t...(ignoreAgentId && { agentId: { $ne: ignoreAgentId } }),\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tcount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst sort: { [k: string]: SortDirection } = {\n\t\t\tcount: 1,\n\t\t\torder: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst projection = {\n\t\t\t_id: 1,\n\t\t\tagentId: 1,\n\t\t\tdepartmentId: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst bot = await this.findOneAndUpdate(query, update, { sort, projection, returnDocument: 'after' });\n\n\t\treturn bot.value;\n\t}\n\n\treplaceUsernameOfAgentByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { agentId: userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tusername,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tcountByDepartmentId(departmentId: string): Promise<number> {\n\t\treturn this.col.countDocuments({ departmentId });\n\t}\n\n\tdisableAgentsByDepartmentId(departmentId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany({ departmentId }, { $set: { departmentEnabled: false } });\n\t}\n\n\tenableAgentsByDepartmentId(departmentId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany({ departmentId }, { $set: { departmentEnabled: true } });\n\t}\n\n\tfindAllAgentsConnectedToListOfDepartments(departmentIds: string[]): Promise<string[]> {\n\t\treturn this.col.distinct('agentId', { departmentId: { $in: departmentIds }, departmentEnabled: true });\n\t}\n\n\tfindByAgentsAndDepartmentId(\n\t\tagentsIds: ILivechatDepartmentAgents['agentId'][],\n\t\tdepartmentId: ILivechatDepartmentAgents['departmentId'],\n\t\toptions?: FindOptions<ILivechatDepartmentAgents>,\n\t): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ agentId: { $in: agentsIds }, departmentId }, options);\n\t}\n\n\tfindDepartmentsOfAgent(agentId: string, enabled = false): AggregationCursor<ILivechatDepartmentAgents & { departmentName: string }> {\n\t\treturn this.col.aggregate<ILivechatDepartmentAgents & { departmentName: string }>([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tagentId,\n\t\t\t\t\t...(enabled && { departmentEnabled: true }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\t\tlocalField: 'departmentId',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'department',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $unwind: '$department' },\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: '$_id',\n\t\t\t\t\tagentId: '$agentId',\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\tdepartmentName: '$department.name',\n\t\t\t\t\tusername: '$username',\n\t\t\t\t\tcount: '$count',\n\t\t\t\t\torder: '$order',\n\t\t\t\t\tdepartmentEnabled: '$departmentEnabled',\n\t\t\t\t\t_updatedAt: '$_updatedAt',\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n}\n\nconst isStringValue = (value: any): value is string => typeof value === 'string';\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatDepartmentAgents.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/LivechatDepartmentAgents.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatDepartmentAgents.ts","sourceRoot":"","sources":["server/models/raw/LivechatDepartmentAgents.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatDepartmentAgents, RocketChatRecordDeleted, IUser } from '@rocket.chat/core-typings';\nimport type { FindPaginated, ILivechatDepartmentAgentsModel } from '@rocket.chat/model-typings';\nimport { Users } from '@rocket.chat/models';\nimport type {\n\tCollection,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tFindOptions,\n\tDocument,\n\tUpdateResult,\n\tDeleteResult,\n\tIndexDescription,\n\tSortDirection,\n\tAggregationCursor,\n} from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class LivechatDepartmentAgentsRaw extends BaseRaw<ILivechatDepartmentAgents> implements ILivechatDepartmentAgentsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatDepartmentAgents>>) {\n\t\tsuper(db, 'livechat_department_agents', trash);\n\t}\n\n\tprotected modelIndexes(): Array<IndexDescription> {\n\t\treturn [\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tdepartmentId: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tdepartmentEnabled: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tagentId: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t}\n\n\tfindUsersInQueue(usersList: string[]): FindCursor<ILivechatDepartmentAgents>;\n\n\tfindUsersInQueue(usersList: string[], options: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents>;\n\n\tfindUsersInQueue<P extends Document>(\n\t\tusersList: string[],\n\t\toptions: FindOptions<P extends ILivechatDepartmentAgents ? ILivechatDepartmentAgents : P>,\n\t): FindCursor<P>;\n\n\tfindUsersInQueue<P extends Document>(\n\t\tusersList: string[],\n\t\toptions?:\n\t\t\t| undefined\n\t\t\t| FindOptions<ILivechatDepartmentAgents>\n\t\t\t| FindOptions<P extends ILivechatDepartmentAgents ? ILivechatDepartmentAgents : P>,\n\t): FindCursor<ILivechatDepartmentAgents> | FindCursor<P> {\n\t\tconst query: Filter<ILivechatDepartmentAgents> = {};\n\n\t\tif (Array.isArray(usersList) && usersList.length) {\n\t\t\t// TODO: Remove\n\t\t\tquery.username = {\n\t\t\t\t$in: usersList,\n\t\t\t};\n\t\t}\n\n\t\tif (options === undefined) {\n\t\t\treturn this.find(query);\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByAgentIds(agentIds: string[], options?: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ agentId: { $in: agentIds } }, options);\n\t}\n\n\tfindByAgentId(agentId: string, options?: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ agentId }, options);\n\t}\n\n\tfindAgentsByDepartmentId(departmentId: string): FindPaginated<FindCursor<ILivechatDepartmentAgents>>;\n\n\tfindAgentsByDepartmentId(\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<ILivechatDepartmentAgents>,\n\t): FindPaginated<FindCursor<ILivechatDepartmentAgents>>;\n\n\tfindAgentsByDepartmentId<P extends Document>(\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<P extends ILivechatDepartmentAgents ? ILivechatDepartmentAgents : P>,\n\t): FindPaginated<FindCursor<P>>;\n\n\tfindAgentsByDepartmentId(\n\t\tdepartmentId: string,\n\t\toptions?: undefined | FindOptions<ILivechatDepartmentAgents>,\n\t): FindPaginated<FindCursor<ILivechatDepartmentAgents>> {\n\t\tconst query = { departmentId };\n\n\t\tif (options === undefined) {\n\t\t\treturn this.findPaginated(query);\n\t\t}\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindByDepartmentIds(departmentIds: string[], options = {}): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ departmentId: { $in: departmentIds } }, options);\n\t}\n\n\tasync findAgentsByAgentIdAndBusinessHourId(_agentId: string, _businessHourId: string): Promise<ILivechatDepartmentAgents[]> {\n\t\treturn [];\n\t}\n\n\tsetDepartmentEnabledByDepartmentId(departmentId: string, departmentEnabled: boolean): Promise<Document | UpdateResult> {\n\t\treturn this.updateMany({ departmentId }, { $set: { departmentEnabled } });\n\t}\n\n\tremoveByDepartmentId(departmentId: string): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ departmentId });\n\t}\n\n\tfindByDepartmentId(departmentId: string, options?: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ departmentId }, options);\n\t}\n\n\tfindOneByAgentIdAndDepartmentId(\n\t\tagentId: string,\n\t\tdepartmentId: string,\n\t\toptions?: FindOptions<ILivechatDepartmentAgents>,\n\t): Promise<ILivechatDepartmentAgents | null> {\n\t\treturn this.findOne({ agentId, departmentId }, options);\n\t}\n\n\tsaveAgent(agent: {\n\t\tagentId: string;\n\t\tdepartmentId: string;\n\t\tusername: string;\n\t\tdepartmentEnabled: boolean;\n\t\tcount: number;\n\t\torder: number;\n\t}): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\tagentId: agent.agentId,\n\t\t\t\tdepartmentId: agent.departmentId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tusername: agent.username,\n\t\t\t\t\tdepartmentEnabled: agent.departmentEnabled,\n\t\t\t\t\tcount: parseInt(`${agent.count}`),\n\t\t\t\t\torder: parseInt(`${agent.order}`),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tasync removeByAgentId(agentId: string): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ agentId });\n\t}\n\n\tasync removeByDepartmentIdAndAgentId(departmentId: string, agentId: string): Promise<void> {\n\t\tawait this.deleteMany({ departmentId, agentId });\n\t}\n\n\tasync getNextAgentForDepartment(\n\t\tdepartmentId: ILivechatDepartmentAgents['departmentId'],\n\t\tisLivechatEnabledWhenAgentIdle?: boolean,\n\t\tignoreAgentId?: ILivechatDepartmentAgents['agentId'],\n\t\textraQuery?: Filter<IUser>,\n\t): Promise<Pick<ILivechatDepartmentAgents, '_id' | 'agentId' | 'departmentId' | 'username'> | null | undefined> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst onlineUsers = await Users.findOnlineUserFromList(\n\t\t\tagents.map((agent) => agent.username),\n\t\t\tisLivechatEnabledWhenAgentIdle,\n\t\t).toArray();\n\n\t\tconst onlineUsernames = onlineUsers.map((user) => user.username).filter(isStringValue);\n\n\t\t// get fully booked agents, to ignore them from the query\n\t\tconst currentUnavailableAgents = (await Users.getUnavailableAgents(departmentId, extraQuery)).map((u) => u.username);\n\n\t\tconst query: Filter<ILivechatDepartmentAgents> = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: onlineUsernames,\n\t\t\t\t$nin: currentUnavailableAgents,\n\t\t\t},\n\t\t\t...(ignoreAgentId && { agentId: { $ne: ignoreAgentId } }),\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tcount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst sort: { [k: string]: SortDirection } = {\n\t\t\tcount: 1,\n\t\t\torder: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst projection = {\n\t\t\t_id: 1,\n\t\t\tagentId: 1,\n\t\t\tdepartmentId: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst agent = await this.findOneAndUpdate(query, update, { sort, projection, returnDocument: 'after' });\n\n\t\treturn agent.value;\n\t}\n\n\tasync checkOnlineForDepartment(departmentId: string): Promise<boolean> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst onlineUser = await Users.findOneOnlineAgentByUserList(agents.map((agent) => agent.username));\n\n\t\treturn Boolean(onlineUser);\n\t}\n\n\tasync getOnlineForDepartment(\n\t\tdepartmentId: string,\n\t\tisLivechatEnabledWhenAgentIdle?: boolean,\n\t): Promise<FindCursor<ILivechatDepartmentAgents> | undefined> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst onlineUsers = await Users.findOnlineUserFromList(\n\t\t\tagents.map((a) => a.username),\n\t\t\tisLivechatEnabledWhenAgentIdle,\n\t\t).toArray();\n\n\t\tconst onlineUsernames = onlineUsers.map((user) => user.username).filter(isStringValue);\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: onlineUsernames,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tasync getBotsForDepartment(departmentId: string): Promise<undefined | FindCursor<ILivechatDepartmentAgents>> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst botUsers = await Users.findBotAgents(agents.map((a) => a.username)).toArray();\n\t\tconst botUsernames = botUsers.map((user) => user.username).filter(isStringValue);\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: botUsernames,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tasync getNextBotForDepartment(\n\t\tdepartmentId: ILivechatDepartmentAgents['departmentId'],\n\t\tignoreAgentId?: ILivechatDepartmentAgents['agentId'],\n\t): Promise<Pick<ILivechatDepartmentAgents, '_id' | 'agentId' | 'departmentId' | 'username'> | null | undefined> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (!agents.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst botUsernames = (await Users.findBotAgents(agents.map((a) => a.username)).toArray())\n\t\t\t.map((user) => user.username)\n\t\t\t.filter(isStringValue);\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: botUsernames,\n\t\t\t},\n\t\t\t...(ignoreAgentId && { agentId: { $ne: ignoreAgentId } }),\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tcount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst sort: { [k: string]: SortDirection } = {\n\t\t\tcount: 1,\n\t\t\torder: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst projection = {\n\t\t\t_id: 1,\n\t\t\tagentId: 1,\n\t\t\tdepartmentId: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst bot = await this.findOneAndUpdate(query, update, { sort, projection, returnDocument: 'after' });\n\n\t\treturn bot.value;\n\t}\n\n\treplaceUsernameOfAgentByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { agentId: userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tusername,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tcountByDepartmentId(departmentId: string): Promise<number> {\n\t\treturn this.col.countDocuments({ departmentId });\n\t}\n\n\tdisableAgentsByDepartmentId(departmentId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany({ departmentId }, { $set: { departmentEnabled: false } });\n\t}\n\n\tenableAgentsByDepartmentId(departmentId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany({ departmentId }, { $set: { departmentEnabled: true } });\n\t}\n\n\tfindAllAgentsConnectedToListOfDepartments(departmentIds: string[]): Promise<string[]> {\n\t\treturn this.col.distinct('agentId', { departmentId: { $in: departmentIds }, departmentEnabled: true });\n\t}\n\n\tfindByAgentsAndDepartmentId(\n\t\tagentsIds: ILivechatDepartmentAgents['agentId'][],\n\t\tdepartmentId: ILivechatDepartmentAgents['departmentId'],\n\t\toptions?: FindOptions<ILivechatDepartmentAgents>,\n\t): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ agentId: { $in: agentsIds }, departmentId }, options);\n\t}\n\n\tfindDepartmentsOfAgent(agentId: string, enabled = false): AggregationCursor<ILivechatDepartmentAgents & { departmentName: string }> {\n\t\treturn this.col.aggregate<ILivechatDepartmentAgents & { departmentName: string }>([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tagentId,\n\t\t\t\t\t...(enabled && { departmentEnabled: true }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\t\tlocalField: 'departmentId',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'department',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $unwind: '$department' },\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: '$_id',\n\t\t\t\t\tagentId: '$agentId',\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\tdepartmentName: '$department.name',\n\t\t\t\t\tusername: '$username',\n\t\t\t\t\tcount: '$count',\n\t\t\t\t\torder: '$order',\n\t\t\t\t\tdepartmentEnabled: '$departmentEnabled',\n\t\t\t\t\t_updatedAt: '$_updatedAt',\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n}\n\nconst isStringValue = (value: any): value is string => typeof value === 'string';\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      LivechatDepartmentAgentsRaw: () => LivechatDepartmentAgentsRaw\n    });\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class LivechatDepartmentAgentsRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'livechat_department_agents', trash);\n      }\n      modelIndexes() {\n        return [{\n          key: {\n            departmentId: 1\n          }\n        }, {\n          key: {\n            departmentEnabled: 1\n          }\n        }, {\n          key: {\n            agentId: 1\n          }\n        }, {\n          key: {\n            username: 1\n          }\n        }];\n      }\n      findUsersInQueue(usersList, options) {\n        const query = {};\n        if (Array.isArray(usersList) && usersList.length) {\n          // TODO: Remove\n          query.username = {\n            $in: usersList\n          };\n        }\n        if (options === undefined) {\n          return this.find(query);\n        }\n        return this.find(query, options);\n      }\n      findByAgentIds(agentIds, options) {\n        return this.find({\n          agentId: {\n            $in: agentIds\n          }\n        }, options);\n      }\n      findByAgentId(agentId, options) {\n        return this.find({\n          agentId\n        }, options);\n      }\n      findAgentsByDepartmentId(departmentId, options) {\n        const query = {\n          departmentId\n        };\n        if (options === undefined) {\n          return this.findPaginated(query);\n        }\n        return this.findPaginated(query, options);\n      }\n      findByDepartmentIds(departmentIds) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.find({\n          departmentId: {\n            $in: departmentIds\n          }\n        }, options);\n      }\n      async findAgentsByAgentIdAndBusinessHourId(_agentId, _businessHourId) {\n        return [];\n      }\n      setDepartmentEnabledByDepartmentId(departmentId, departmentEnabled) {\n        return this.updateMany({\n          departmentId\n        }, {\n          $set: {\n            departmentEnabled\n          }\n        });\n      }\n      removeByDepartmentId(departmentId) {\n        return this.deleteMany({\n          departmentId\n        });\n      }\n      findByDepartmentId(departmentId, options) {\n        return this.find({\n          departmentId\n        }, options);\n      }\n      findOneByAgentIdAndDepartmentId(agentId, departmentId, options) {\n        return this.findOne({\n          agentId,\n          departmentId\n        }, options);\n      }\n      saveAgent(agent) {\n        return this.updateOne({\n          agentId: agent.agentId,\n          departmentId: agent.departmentId\n        }, {\n          $set: {\n            username: agent.username,\n            departmentEnabled: agent.departmentEnabled,\n            count: parseInt(\"\".concat(agent.count)),\n            order: parseInt(\"\".concat(agent.order))\n          }\n        }, {\n          upsert: true\n        });\n      }\n      async removeByAgentId(agentId) {\n        return this.deleteMany({\n          agentId\n        });\n      }\n      async removeByDepartmentIdAndAgentId(departmentId, agentId) {\n        await this.deleteMany({\n          departmentId,\n          agentId\n        });\n      }\n      async getNextAgentForDepartment(departmentId, isLivechatEnabledWhenAgentIdle, ignoreAgentId, extraQuery) {\n        const agents = await this.findByDepartmentId(departmentId).toArray();\n        if (agents.length === 0) {\n          return;\n        }\n        const onlineUsers = await Users.findOnlineUserFromList(agents.map(agent => agent.username), isLivechatEnabledWhenAgentIdle).toArray();\n        const onlineUsernames = onlineUsers.map(user => user.username).filter(isStringValue);\n        // get fully booked agents, to ignore them from the query\n        const currentUnavailableAgents = (await Users.getUnavailableAgents(departmentId, extraQuery)).map(u => u.username);\n        const query = _objectSpread({\n          departmentId,\n          username: {\n            $in: onlineUsernames,\n            $nin: currentUnavailableAgents\n          }\n        }, ignoreAgentId && {\n          agentId: {\n            $ne: ignoreAgentId\n          }\n        });\n        const update = {\n          $inc: {\n            count: 1\n          }\n        };\n        const sort = {\n          count: 1,\n          order: 1,\n          username: 1\n        };\n        const projection = {\n          _id: 1,\n          agentId: 1,\n          departmentId: 1,\n          username: 1\n        };\n        const agent = await this.findOneAndUpdate(query, update, {\n          sort,\n          projection,\n          returnDocument: 'after'\n        });\n        return agent.value;\n      }\n      async checkOnlineForDepartment(departmentId) {\n        const agents = await this.findByDepartmentId(departmentId).toArray();\n        if (agents.length === 0) {\n          return false;\n        }\n        const onlineUser = await Users.findOneOnlineAgentByUserList(agents.map(agent => agent.username));\n        return Boolean(onlineUser);\n      }\n      async getOnlineForDepartment(departmentId, isLivechatEnabledWhenAgentIdle) {\n        const agents = await this.findByDepartmentId(departmentId).toArray();\n        if (agents.length === 0) {\n          return;\n        }\n        const onlineUsers = await Users.findOnlineUserFromList(agents.map(a => a.username), isLivechatEnabledWhenAgentIdle).toArray();\n        const onlineUsernames = onlineUsers.map(user => user.username).filter(isStringValue);\n        const query = {\n          departmentId,\n          username: {\n            $in: onlineUsernames\n          }\n        };\n        return this.find(query);\n      }\n      async getBotsForDepartment(departmentId) {\n        const agents = await this.findByDepartmentId(departmentId).toArray();\n        if (agents.length === 0) {\n          return;\n        }\n        const botUsers = await Users.findBotAgents(agents.map(a => a.username)).toArray();\n        const botUsernames = botUsers.map(user => user.username).filter(isStringValue);\n        const query = {\n          departmentId,\n          username: {\n            $in: botUsernames\n          }\n        };\n        return this.find(query);\n      }\n      async getNextBotForDepartment(departmentId, ignoreAgentId) {\n        const agents = await this.findByDepartmentId(departmentId).toArray();\n        if (!agents.length) {\n          return;\n        }\n        const botUsernames = (await Users.findBotAgents(agents.map(a => a.username)).toArray()).map(user => user.username).filter(isStringValue);\n        const query = _objectSpread({\n          departmentId,\n          username: {\n            $in: botUsernames\n          }\n        }, ignoreAgentId && {\n          agentId: {\n            $ne: ignoreAgentId\n          }\n        });\n        const update = {\n          $inc: {\n            count: 1\n          }\n        };\n        const sort = {\n          count: 1,\n          order: 1,\n          username: 1\n        };\n        const projection = {\n          _id: 1,\n          agentId: 1,\n          departmentId: 1,\n          username: 1\n        };\n        const bot = await this.findOneAndUpdate(query, update, {\n          sort,\n          projection,\n          returnDocument: 'after'\n        });\n        return bot.value;\n      }\n      replaceUsernameOfAgentByUserId(userId, username) {\n        const query = {\n          agentId: userId\n        };\n        const update = {\n          $set: {\n            username\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      countByDepartmentId(departmentId) {\n        return this.col.countDocuments({\n          departmentId\n        });\n      }\n      disableAgentsByDepartmentId(departmentId) {\n        return this.updateMany({\n          departmentId\n        }, {\n          $set: {\n            departmentEnabled: false\n          }\n        });\n      }\n      enableAgentsByDepartmentId(departmentId) {\n        return this.updateMany({\n          departmentId\n        }, {\n          $set: {\n            departmentEnabled: true\n          }\n        });\n      }\n      findAllAgentsConnectedToListOfDepartments(departmentIds) {\n        return this.col.distinct('agentId', {\n          departmentId: {\n            $in: departmentIds\n          },\n          departmentEnabled: true\n        });\n      }\n      findByAgentsAndDepartmentId(agentsIds, departmentId, options) {\n        return this.find({\n          agentId: {\n            $in: agentsIds\n          },\n          departmentId\n        }, options);\n      }\n      findDepartmentsOfAgent(agentId) {\n        let enabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        return this.col.aggregate([{\n          $match: _objectSpread({\n            agentId\n          }, enabled && {\n            departmentEnabled: true\n          })\n        }, {\n          $lookup: {\n            from: 'rocketchat_livechat_department',\n            localField: 'departmentId',\n            foreignField: '_id',\n            as: 'department'\n          }\n        }, {\n          $unwind: '$department'\n        }, {\n          $project: {\n            _id: '$_id',\n            agentId: '$agentId',\n            departmentId: '$departmentId',\n            departmentName: '$department.name',\n            username: '$username',\n            count: '$count',\n            order: '$order',\n            departmentEnabled: '$departmentEnabled',\n            _updatedAt: '$_updatedAt'\n          }\n        }]);\n      }\n    }\n    const isStringValue = value => typeof value === 'string';\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","LivechatDepartmentAgentsRaw","Users","BaseRaw","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","departmentId","departmentEnabled","agentId","username","findUsersInQueue","usersList","options","query","Array","isArray","length","$in","undefined","find","findByAgentIds","agentIds","findByAgentId","findAgentsByDepartmentId","findPaginated","findByDepartmentIds","departmentIds","arguments","findAgentsByAgentIdAndBusinessHourId","_agentId","_businessHourId","setDepartmentEnabledByDepartmentId","updateMany","$set","removeByDepartmentId","deleteMany","findByDepartmentId","findOneByAgentIdAndDepartmentId","findOne","saveAgent","agent","updateOne","count","parseInt","concat","order","upsert","removeByAgentId","removeByDepartmentIdAndAgentId","getNextAgentForDepartment","isLivechatEnabledWhenAgentIdle","ignoreAgentId","extraQuery","agents","toArray","onlineUsers","findOnlineUserFromList","map","onlineUsernames","user","filter","isStringValue","currentUnavailableAgents","getUnavailableAgents","u","$nin","$ne","update","$inc","sort","projection","_id","findOneAndUpdate","returnDocument","value","checkOnlineForDepartment","onlineUser","findOneOnlineAgentByUserList","Boolean","getOnlineForDepartment","a","getBotsForDepartment","botUsers","findBotAgents","botUsernames","getNextBotForDepartment","bot","replaceUsernameOfAgentByUserId","userId","countByDepartmentId","col","countDocuments","disableAgentsByDepartmentId","enableAgentsByDepartmentId","findAllAgentsConnectedToListOfDepartments","distinct","findByAgentsAndDepartmentId","agentsIds","findDepartmentsOfAgent","enabled","aggregate","$match","$lookup","from","localField","foreignField","as","$unwind","$project","departmentName","_updatedAt","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/LivechatDepartmentAgents.ts"],"sourcesContent":["import type { ILivechatDepartmentAgents, RocketChatRecordDeleted, IUser } from '@rocket.chat/core-typings';\nimport type { FindPaginated, ILivechatDepartmentAgentsModel } from '@rocket.chat/model-typings';\nimport { Users } from '@rocket.chat/models';\nimport type {\n\tCollection,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tFindOptions,\n\tDocument,\n\tUpdateResult,\n\tDeleteResult,\n\tIndexDescription,\n\tSortDirection,\n\tAggregationCursor,\n} from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class LivechatDepartmentAgentsRaw extends BaseRaw<ILivechatDepartmentAgents> implements ILivechatDepartmentAgentsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatDepartmentAgents>>) {\n\t\tsuper(db, 'livechat_department_agents', trash);\n\t}\n\n\tprotected modelIndexes(): Array<IndexDescription> {\n\t\treturn [\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tdepartmentId: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tdepartmentEnabled: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tagentId: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t}\n\n\tfindUsersInQueue(usersList: string[]): FindCursor<ILivechatDepartmentAgents>;\n\n\tfindUsersInQueue(usersList: string[], options: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents>;\n\n\tfindUsersInQueue<P extends Document>(\n\t\tusersList: string[],\n\t\toptions: FindOptions<P extends ILivechatDepartmentAgents ? ILivechatDepartmentAgents : P>,\n\t): FindCursor<P>;\n\n\tfindUsersInQueue<P extends Document>(\n\t\tusersList: string[],\n\t\toptions?:\n\t\t\t| undefined\n\t\t\t| FindOptions<ILivechatDepartmentAgents>\n\t\t\t| FindOptions<P extends ILivechatDepartmentAgents ? ILivechatDepartmentAgents : P>,\n\t): FindCursor<ILivechatDepartmentAgents> | FindCursor<P> {\n\t\tconst query: Filter<ILivechatDepartmentAgents> = {};\n\n\t\tif (Array.isArray(usersList) && usersList.length) {\n\t\t\t// TODO: Remove\n\t\t\tquery.username = {\n\t\t\t\t$in: usersList,\n\t\t\t};\n\t\t}\n\n\t\tif (options === undefined) {\n\t\t\treturn this.find(query);\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByAgentIds(agentIds: string[], options?: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ agentId: { $in: agentIds } }, options);\n\t}\n\n\tfindByAgentId(agentId: string, options?: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ agentId }, options);\n\t}\n\n\tfindAgentsByDepartmentId(departmentId: string): FindPaginated<FindCursor<ILivechatDepartmentAgents>>;\n\n\tfindAgentsByDepartmentId(\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<ILivechatDepartmentAgents>,\n\t): FindPaginated<FindCursor<ILivechatDepartmentAgents>>;\n\n\tfindAgentsByDepartmentId<P extends Document>(\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<P extends ILivechatDepartmentAgents ? ILivechatDepartmentAgents : P>,\n\t): FindPaginated<FindCursor<P>>;\n\n\tfindAgentsByDepartmentId(\n\t\tdepartmentId: string,\n\t\toptions?: undefined | FindOptions<ILivechatDepartmentAgents>,\n\t): FindPaginated<FindCursor<ILivechatDepartmentAgents>> {\n\t\tconst query = { departmentId };\n\n\t\tif (options === undefined) {\n\t\t\treturn this.findPaginated(query);\n\t\t}\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindByDepartmentIds(departmentIds: string[], options = {}): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ departmentId: { $in: departmentIds } }, options);\n\t}\n\n\tasync findAgentsByAgentIdAndBusinessHourId(_agentId: string, _businessHourId: string): Promise<ILivechatDepartmentAgents[]> {\n\t\treturn [];\n\t}\n\n\tsetDepartmentEnabledByDepartmentId(departmentId: string, departmentEnabled: boolean): Promise<Document | UpdateResult> {\n\t\treturn this.updateMany({ departmentId }, { $set: { departmentEnabled } });\n\t}\n\n\tremoveByDepartmentId(departmentId: string): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ departmentId });\n\t}\n\n\tfindByDepartmentId(departmentId: string, options?: FindOptions<ILivechatDepartmentAgents>): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ departmentId }, options);\n\t}\n\n\tfindOneByAgentIdAndDepartmentId(\n\t\tagentId: string,\n\t\tdepartmentId: string,\n\t\toptions?: FindOptions<ILivechatDepartmentAgents>,\n\t): Promise<ILivechatDepartmentAgents | null> {\n\t\treturn this.findOne({ agentId, departmentId }, options);\n\t}\n\n\tsaveAgent(agent: {\n\t\tagentId: string;\n\t\tdepartmentId: string;\n\t\tusername: string;\n\t\tdepartmentEnabled: boolean;\n\t\tcount: number;\n\t\torder: number;\n\t}): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\tagentId: agent.agentId,\n\t\t\t\tdepartmentId: agent.departmentId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tusername: agent.username,\n\t\t\t\t\tdepartmentEnabled: agent.departmentEnabled,\n\t\t\t\t\tcount: parseInt(`${agent.count}`),\n\t\t\t\t\torder: parseInt(`${agent.order}`),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tasync removeByAgentId(agentId: string): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ agentId });\n\t}\n\n\tasync removeByDepartmentIdAndAgentId(departmentId: string, agentId: string): Promise<void> {\n\t\tawait this.deleteMany({ departmentId, agentId });\n\t}\n\n\tasync getNextAgentForDepartment(\n\t\tdepartmentId: ILivechatDepartmentAgents['departmentId'],\n\t\tisLivechatEnabledWhenAgentIdle?: boolean,\n\t\tignoreAgentId?: ILivechatDepartmentAgents['agentId'],\n\t\textraQuery?: Filter<IUser>,\n\t): Promise<Pick<ILivechatDepartmentAgents, '_id' | 'agentId' | 'departmentId' | 'username'> | null | undefined> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst onlineUsers = await Users.findOnlineUserFromList(\n\t\t\tagents.map((agent) => agent.username),\n\t\t\tisLivechatEnabledWhenAgentIdle,\n\t\t).toArray();\n\n\t\tconst onlineUsernames = onlineUsers.map((user) => user.username).filter(isStringValue);\n\n\t\t// get fully booked agents, to ignore them from the query\n\t\tconst currentUnavailableAgents = (await Users.getUnavailableAgents(departmentId, extraQuery)).map((u) => u.username);\n\n\t\tconst query: Filter<ILivechatDepartmentAgents> = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: onlineUsernames,\n\t\t\t\t$nin: currentUnavailableAgents,\n\t\t\t},\n\t\t\t...(ignoreAgentId && { agentId: { $ne: ignoreAgentId } }),\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tcount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst sort: { [k: string]: SortDirection } = {\n\t\t\tcount: 1,\n\t\t\torder: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst projection = {\n\t\t\t_id: 1,\n\t\t\tagentId: 1,\n\t\t\tdepartmentId: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst agent = await this.findOneAndUpdate(query, update, { sort, projection, returnDocument: 'after' });\n\n\t\treturn agent.value;\n\t}\n\n\tasync checkOnlineForDepartment(departmentId: string): Promise<boolean> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst onlineUser = await Users.findOneOnlineAgentByUserList(agents.map((agent) => agent.username));\n\n\t\treturn Boolean(onlineUser);\n\t}\n\n\tasync getOnlineForDepartment(\n\t\tdepartmentId: string,\n\t\tisLivechatEnabledWhenAgentIdle?: boolean,\n\t): Promise<FindCursor<ILivechatDepartmentAgents> | undefined> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst onlineUsers = await Users.findOnlineUserFromList(\n\t\t\tagents.map((a) => a.username),\n\t\t\tisLivechatEnabledWhenAgentIdle,\n\t\t).toArray();\n\n\t\tconst onlineUsernames = onlineUsers.map((user) => user.username).filter(isStringValue);\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: onlineUsernames,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tasync getBotsForDepartment(departmentId: string): Promise<undefined | FindCursor<ILivechatDepartmentAgents>> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (agents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst botUsers = await Users.findBotAgents(agents.map((a) => a.username)).toArray();\n\t\tconst botUsernames = botUsers.map((user) => user.username).filter(isStringValue);\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: botUsernames,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tasync getNextBotForDepartment(\n\t\tdepartmentId: ILivechatDepartmentAgents['departmentId'],\n\t\tignoreAgentId?: ILivechatDepartmentAgents['agentId'],\n\t): Promise<Pick<ILivechatDepartmentAgents, '_id' | 'agentId' | 'departmentId' | 'username'> | null | undefined> {\n\t\tconst agents = await this.findByDepartmentId(departmentId).toArray();\n\n\t\tif (!agents.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst botUsernames = (await Users.findBotAgents(agents.map((a) => a.username)).toArray())\n\t\t\t.map((user) => user.username)\n\t\t\t.filter(isStringValue);\n\n\t\tconst query = {\n\t\t\tdepartmentId,\n\t\t\tusername: {\n\t\t\t\t$in: botUsernames,\n\t\t\t},\n\t\t\t...(ignoreAgentId && { agentId: { $ne: ignoreAgentId } }),\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tcount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst sort: { [k: string]: SortDirection } = {\n\t\t\tcount: 1,\n\t\t\torder: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst projection = {\n\t\t\t_id: 1,\n\t\t\tagentId: 1,\n\t\t\tdepartmentId: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst bot = await this.findOneAndUpdate(query, update, { sort, projection, returnDocument: 'after' });\n\n\t\treturn bot.value;\n\t}\n\n\treplaceUsernameOfAgentByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { agentId: userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tusername,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tcountByDepartmentId(departmentId: string): Promise<number> {\n\t\treturn this.col.countDocuments({ departmentId });\n\t}\n\n\tdisableAgentsByDepartmentId(departmentId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany({ departmentId }, { $set: { departmentEnabled: false } });\n\t}\n\n\tenableAgentsByDepartmentId(departmentId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany({ departmentId }, { $set: { departmentEnabled: true } });\n\t}\n\n\tfindAllAgentsConnectedToListOfDepartments(departmentIds: string[]): Promise<string[]> {\n\t\treturn this.col.distinct('agentId', { departmentId: { $in: departmentIds }, departmentEnabled: true });\n\t}\n\n\tfindByAgentsAndDepartmentId(\n\t\tagentsIds: ILivechatDepartmentAgents['agentId'][],\n\t\tdepartmentId: ILivechatDepartmentAgents['departmentId'],\n\t\toptions?: FindOptions<ILivechatDepartmentAgents>,\n\t): FindCursor<ILivechatDepartmentAgents> {\n\t\treturn this.find({ agentId: { $in: agentsIds }, departmentId }, options);\n\t}\n\n\tfindDepartmentsOfAgent(agentId: string, enabled = false): AggregationCursor<ILivechatDepartmentAgents & { departmentName: string }> {\n\t\treturn this.col.aggregate<ILivechatDepartmentAgents & { departmentName: string }>([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tagentId,\n\t\t\t\t\t...(enabled && { departmentEnabled: true }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\t\tlocalField: 'departmentId',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'department',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $unwind: '$department' },\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: '$_id',\n\t\t\t\t\tagentId: '$agentId',\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\tdepartmentName: '$department.name',\n\t\t\t\t\tusername: '$username',\n\t\t\t\t\tcount: '$count',\n\t\t\t\t\torder: '$order',\n\t\t\t\t\tdepartmentEnabled: '$departmentEnabled',\n\t\t\t\t\t_updatedAt: '$_updatedAt',\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n}\n\nconst isStringValue = (value: any): value is string => typeof value === 'string';\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"18915508853ec647d74e61ce31a12c313098c70a"}
