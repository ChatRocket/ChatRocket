{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/dashboards.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/imports/server/rest/dashboards.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/dashboards.ts","inputSourceMap":{"version":3,"file":"app/livechat/imports/server/rest/dashboards.ts","sourceRoot":"","sources":["app/livechat/imports/server/rest/dashboards.ts"],"names":[],"mappings":"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","sourcesContent":["import { Users } from '@rocket.chat/models';\nimport { isGETDashboardTotalizerParams, isGETDashboardsAgentStatusParams } from '@rocket.chat/rest-typings';\n\nimport { API } from '../../../../api/server';\nimport {\n\tgetProductivityMetricsAsyncCached,\n\tgetConversationsMetricsAsyncCached,\n\tgetAgentsProductivityMetricsAsyncCached,\n\tgetChatsMetricsAsyncCached,\n\tfindAllChatsStatusAsyncCached,\n\tfindAllChatMetricsByAgentAsyncCached,\n\tfindAllAgentsStatusAsyncCached,\n\tfindAllChatMetricsByDepartmentAsyncCached,\n\tfindAllResponseTimeMetricsAsyncCached,\n} from '../../../server/lib/analytics/dashboards';\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversation-totalizers',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-livechat-manager'],\n\t\tvalidateParams: isGETDashboardTotalizerParams,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tconst totalizers = await getConversationsMetricsAsyncCached({ start, end, departmentId, user });\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/agents-productivity-totalizers',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tconst totalizers = await getAgentsProductivityMetricsAsyncCached({ start, end, departmentId, user });\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/chats-totalizers',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst totalizers = await getChatsMetricsAsyncCached({ start: startDate, end: endDate, departmentId });\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/productivity-totalizers',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tconst totalizers = await getProductivityMetricsAsyncCached({ start, end, departmentId, user });\n\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/chats',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst result = await findAllChatsStatusAsyncCached({ start: startDate, end: endDate, departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/chats-per-agent',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\t\t\tconst result = await findAllChatMetricsByAgentAsyncCached({ start: startDate, end: endDate, departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/agents-status',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardsAgentStatusParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tconst result = await findAllAgentsStatusAsyncCached({ departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/chats-per-department',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst result = (await findAllChatMetricsByDepartmentAsyncCached({ start: startDate, end: endDate, departmentId })) as {\n\t\t\t\t[k: string]: { open: number; closed: number };\n\t\t\t};\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/timings',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst result = await findAllResponseTimeMetricsAsyncCached({ start: startDate, end: endDate, departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/dashboards.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/imports/server/rest/dashboards.ts","inputSourceMap":{"version":3,"file":"app/livechat/imports/server/rest/dashboards.ts","sourceRoot":"","sources":["app/livechat/imports/server/rest/dashboards.ts"],"names":[],"mappings":"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","sourcesContent":["import { Users } from '@rocket.chat/models';\nimport { isGETDashboardTotalizerParams, isGETDashboardsAgentStatusParams } from '@rocket.chat/rest-typings';\n\nimport { API } from '../../../../api/server';\nimport {\n\tgetProductivityMetricsAsyncCached,\n\tgetConversationsMetricsAsyncCached,\n\tgetAgentsProductivityMetricsAsyncCached,\n\tgetChatsMetricsAsyncCached,\n\tfindAllChatsStatusAsyncCached,\n\tfindAllChatMetricsByAgentAsyncCached,\n\tfindAllAgentsStatusAsyncCached,\n\tfindAllChatMetricsByDepartmentAsyncCached,\n\tfindAllResponseTimeMetricsAsyncCached,\n} from '../../../server/lib/analytics/dashboards';\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversation-totalizers',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-livechat-manager'],\n\t\tvalidateParams: isGETDashboardTotalizerParams,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tconst totalizers = await getConversationsMetricsAsyncCached({ start, end, departmentId, user });\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/agents-productivity-totalizers',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tconst totalizers = await getAgentsProductivityMetricsAsyncCached({ start, end, departmentId, user });\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/chats-totalizers',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst totalizers = await getChatsMetricsAsyncCached({ start: startDate, end: endDate, departmentId });\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/productivity-totalizers',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tconst totalizers = await getProductivityMetricsAsyncCached({ start, end, departmentId, user });\n\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/chats',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst result = await findAllChatsStatusAsyncCached({ start: startDate, end: endDate, departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/chats-per-agent',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\t\t\tconst result = await findAllChatMetricsByAgentAsyncCached({ start: startDate, end: endDate, departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/agents-status',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardsAgentStatusParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tconst result = await findAllAgentsStatusAsyncCached({ departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/chats-per-department',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst result = (await findAllChatMetricsByDepartmentAsyncCached({ start: startDate, end: endDate, departmentId })) as {\n\t\t\t\t[k: string]: { open: number; closed: number };\n\t\t\t};\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/timings',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst result = await findAllResponseTimeMetricsAsyncCached({ start: startDate, end: endDate, departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let isGETDashboardTotalizerParams, isGETDashboardsAgentStatusParams;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isGETDashboardTotalizerParams(v) {\n        isGETDashboardTotalizerParams = v;\n      },\n      isGETDashboardsAgentStatusParams(v) {\n        isGETDashboardsAgentStatusParams = v;\n      }\n    }, 1);\n    let API;\n    module.link(\"../../../../api/server\", {\n      API(v) {\n        API = v;\n      }\n    }, 2);\n    let getProductivityMetricsAsyncCached, getConversationsMetricsAsyncCached, getAgentsProductivityMetricsAsyncCached, getChatsMetricsAsyncCached, findAllChatsStatusAsyncCached, findAllChatMetricsByAgentAsyncCached, findAllAgentsStatusAsyncCached, findAllChatMetricsByDepartmentAsyncCached, findAllResponseTimeMetricsAsyncCached;\n    module.link(\"../../../server/lib/analytics/dashboards\", {\n      getProductivityMetricsAsyncCached(v) {\n        getProductivityMetricsAsyncCached = v;\n      },\n      getConversationsMetricsAsyncCached(v) {\n        getConversationsMetricsAsyncCached = v;\n      },\n      getAgentsProductivityMetricsAsyncCached(v) {\n        getAgentsProductivityMetricsAsyncCached = v;\n      },\n      getChatsMetricsAsyncCached(v) {\n        getChatsMetricsAsyncCached = v;\n      },\n      findAllChatsStatusAsyncCached(v) {\n        findAllChatsStatusAsyncCached = v;\n      },\n      findAllChatMetricsByAgentAsyncCached(v) {\n        findAllChatMetricsByAgentAsyncCached = v;\n      },\n      findAllAgentsStatusAsyncCached(v) {\n        findAllAgentsStatusAsyncCached = v;\n      },\n      findAllChatMetricsByDepartmentAsyncCached(v) {\n        findAllChatMetricsByDepartmentAsyncCached = v;\n      },\n      findAllResponseTimeMetricsAsyncCached(v) {\n        findAllResponseTimeMetricsAsyncCached = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    API.v1.addRoute('livechat/analytics/dashboards/conversation-totalizers', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-manager'],\n      validateParams: isGETDashboardTotalizerParams\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const {\n          departmentId\n        } = this.queryParams;\n        if (isNaN(Date.parse(start))) {\n          return API.v1.failure('The \"start\" query parameter must be a valid date.');\n        }\n        if (isNaN(Date.parse(end))) {\n          return API.v1.failure('The \"end\" query parameter must be a valid date.');\n        }\n        const user = await Users.findOneById(this.userId, {\n          projection: {\n            utcOffset: 1,\n            language: 1\n          }\n        });\n        if (!user) {\n          return API.v1.failure('User not found');\n        }\n        const totalizers = await getConversationsMetricsAsyncCached({\n          start,\n          end,\n          departmentId,\n          user\n        });\n        return API.v1.success(totalizers);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/agents-productivity-totalizers', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-manager'],\n      validateParams: isGETDashboardTotalizerParams\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const {\n          departmentId\n        } = this.queryParams;\n        if (isNaN(Date.parse(start))) {\n          return API.v1.failure('The \"start\" query parameter must be a valid date.');\n        }\n        if (isNaN(Date.parse(end))) {\n          return API.v1.failure('The \"end\" query parameter must be a valid date.');\n        }\n        const user = await Users.findOneById(this.userId, {\n          projection: {\n            utcOffset: 1,\n            language: 1\n          }\n        });\n        if (!user) {\n          return API.v1.failure('User not found');\n        }\n        const totalizers = await getAgentsProductivityMetricsAsyncCached({\n          start,\n          end,\n          departmentId,\n          user\n        });\n        return API.v1.success(totalizers);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/chats-totalizers', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-manager'],\n      validateParams: isGETDashboardTotalizerParams\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const {\n          departmentId\n        } = this.queryParams;\n        if (isNaN(Date.parse(start))) {\n          return API.v1.failure('The \"start\" query parameter must be a valid date.');\n        }\n        const startDate = new Date(start);\n        if (isNaN(Date.parse(end))) {\n          return API.v1.failure('The \"end\" query parameter must be a valid date.');\n        }\n        const endDate = new Date(end);\n        const totalizers = await getChatsMetricsAsyncCached({\n          start: startDate,\n          end: endDate,\n          departmentId\n        });\n        return API.v1.success(totalizers);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/productivity-totalizers', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-manager'],\n      validateParams: isGETDashboardTotalizerParams\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const {\n          departmentId\n        } = this.queryParams;\n        if (isNaN(Date.parse(start))) {\n          return API.v1.failure('The \"start\" query parameter must be a valid date.');\n        }\n        if (isNaN(Date.parse(end))) {\n          return API.v1.failure('The \"end\" query parameter must be a valid date.');\n        }\n        const user = await Users.findOneById(this.userId, {\n          projection: {\n            utcOffset: 1,\n            language: 1\n          }\n        });\n        if (!user) {\n          return API.v1.failure('User not found');\n        }\n        const totalizers = await getProductivityMetricsAsyncCached({\n          start,\n          end,\n          departmentId,\n          user\n        });\n        return API.v1.success(totalizers);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/charts/chats', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-manager'],\n      validateParams: isGETDashboardTotalizerParams\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const {\n          departmentId\n        } = this.queryParams;\n        if (isNaN(Date.parse(start))) {\n          return API.v1.failure('The \"start\" query parameter must be a valid date.');\n        }\n        const startDate = new Date(start);\n        if (isNaN(Date.parse(end))) {\n          return API.v1.failure('The \"end\" query parameter must be a valid date.');\n        }\n        const endDate = new Date(end);\n        const result = await findAllChatsStatusAsyncCached({\n          start: startDate,\n          end: endDate,\n          departmentId\n        });\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/charts/chats-per-agent', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-manager'],\n      validateParams: isGETDashboardTotalizerParams\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const {\n          departmentId\n        } = this.queryParams;\n        if (isNaN(Date.parse(start))) {\n          return API.v1.failure('The \"start\" query parameter must be a valid date.');\n        }\n        const startDate = new Date(start);\n        if (isNaN(Date.parse(end))) {\n          return API.v1.failure('The \"end\" query parameter must be a valid date.');\n        }\n        const endDate = new Date(end);\n        const result = await findAllChatMetricsByAgentAsyncCached({\n          start: startDate,\n          end: endDate,\n          departmentId\n        });\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/charts/agents-status', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-manager'],\n      validateParams: isGETDashboardsAgentStatusParams\n    }, {\n      async get() {\n        const {\n          departmentId\n        } = this.queryParams;\n        const result = await findAllAgentsStatusAsyncCached({\n          departmentId\n        });\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/charts/chats-per-department', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-manager'],\n      validateParams: isGETDashboardTotalizerParams\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const {\n          departmentId\n        } = this.queryParams;\n        if (isNaN(Date.parse(start))) {\n          return API.v1.failure('The \"start\" query parameter must be a valid date.');\n        }\n        const startDate = new Date(start);\n        if (isNaN(Date.parse(end))) {\n          return API.v1.failure('The \"end\" query parameter must be a valid date.');\n        }\n        const endDate = new Date(end);\n        const result = await findAllChatMetricsByDepartmentAsyncCached({\n          start: startDate,\n          end: endDate,\n          departmentId\n        });\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('livechat/analytics/dashboards/charts/timings', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-manager'],\n      validateParams: isGETDashboardTotalizerParams\n    }, {\n      async get() {\n        const {\n          start,\n          end\n        } = this.queryParams;\n        const {\n          departmentId\n        } = this.queryParams;\n        if (isNaN(Date.parse(start))) {\n          return API.v1.failure('The \"start\" query parameter must be a valid date.');\n        }\n        const startDate = new Date(start);\n        if (isNaN(Date.parse(end))) {\n          return API.v1.failure('The \"end\" query parameter must be a valid date.');\n        }\n        const endDate = new Date(end);\n        const result = await findAllResponseTimeMetricsAsyncCached({\n          start: startDate,\n          end: endDate,\n          departmentId\n        });\n        return API.v1.success(result);\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Users","module","link","v","isGETDashboardTotalizerParams","isGETDashboardsAgentStatusParams","API","getProductivityMetricsAsyncCached","getConversationsMetricsAsyncCached","getAgentsProductivityMetricsAsyncCached","getChatsMetricsAsyncCached","findAllChatsStatusAsyncCached","findAllChatMetricsByAgentAsyncCached","findAllAgentsStatusAsyncCached","findAllChatMetricsByDepartmentAsyncCached","findAllResponseTimeMetricsAsyncCached","__reifyWaitForDeps__","v1","addRoute","authRequired","permissionsRequired","validateParams","get","start","end","queryParams","departmentId","isNaN","Date","parse","failure","user","findOneById","userId","projection","utcOffset","language","totalizers","success","startDate","endDate","result","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/imports/server/rest/dashboards.ts"],"sourcesContent":["import { Users } from '@rocket.chat/models';\nimport { isGETDashboardTotalizerParams, isGETDashboardsAgentStatusParams } from '@rocket.chat/rest-typings';\n\nimport { API } from '../../../../api/server';\nimport {\n\tgetProductivityMetricsAsyncCached,\n\tgetConversationsMetricsAsyncCached,\n\tgetAgentsProductivityMetricsAsyncCached,\n\tgetChatsMetricsAsyncCached,\n\tfindAllChatsStatusAsyncCached,\n\tfindAllChatMetricsByAgentAsyncCached,\n\tfindAllAgentsStatusAsyncCached,\n\tfindAllChatMetricsByDepartmentAsyncCached,\n\tfindAllResponseTimeMetricsAsyncCached,\n} from '../../../server/lib/analytics/dashboards';\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/conversation-totalizers',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-livechat-manager'],\n\t\tvalidateParams: isGETDashboardTotalizerParams,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tconst totalizers = await getConversationsMetricsAsyncCached({ start, end, departmentId, user });\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/agents-productivity-totalizers',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tconst totalizers = await getAgentsProductivityMetricsAsyncCached({ start, end, departmentId, user });\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/chats-totalizers',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst totalizers = await getChatsMetricsAsyncCached({ start: startDate, end: endDate, departmentId });\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/productivity-totalizers',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { utcOffset: 1, language: 1 } });\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tconst totalizers = await getProductivityMetricsAsyncCached({ start, end, departmentId, user });\n\n\t\t\treturn API.v1.success(totalizers);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/chats',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst result = await findAllChatsStatusAsyncCached({ start: startDate, end: endDate, departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/chats-per-agent',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\t\t\tconst result = await findAllChatMetricsByAgentAsyncCached({ start: startDate, end: endDate, departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/agents-status',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardsAgentStatusParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tconst result = await findAllAgentsStatusAsyncCached({ departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/chats-per-department',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst result = (await findAllChatMetricsByDepartmentAsyncCached({ start: startDate, end: endDate, departmentId })) as {\n\t\t\t\t[k: string]: { open: number; closed: number };\n\t\t\t};\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/analytics/dashboards/charts/timings',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'], validateParams: isGETDashboardTotalizerParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { start, end } = this.queryParams;\n\t\t\tconst { departmentId } = this.queryParams;\n\n\t\t\tif (isNaN(Date.parse(start))) {\n\t\t\t\treturn API.v1.failure('The \"start\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst startDate = new Date(start);\n\n\t\t\tif (isNaN(Date.parse(end))) {\n\t\t\t\treturn API.v1.failure('The \"end\" query parameter must be a valid date.');\n\t\t\t}\n\t\t\tconst endDate = new Date(end);\n\n\t\t\tconst result = await findAllResponseTimeMetricsAsyncCached({ start: startDate, end: endDate, departmentId });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"13a3c564a7f914b985fb196917a1b77bcd211b20"}
