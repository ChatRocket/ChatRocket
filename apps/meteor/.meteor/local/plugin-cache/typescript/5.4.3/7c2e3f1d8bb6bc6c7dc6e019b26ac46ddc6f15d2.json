{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/cleanRoomHistory.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/cleanRoomHistory.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/cleanRoomHistory.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/cleanRoomHistory.ts","sourceRoot":"","sources":["app/lib/server/functions/cleanRoomHistory.ts"],"names":[],"mappings":"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","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { IRoom } from '@rocket.chat/core-typings';\nimport { Messages, Rooms, Subscriptions, ReadReceipts, Users } from '@rocket.chat/models';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { FileUpload } from '../../../file-upload/server';\nimport { notifyOnRoomChangedById, notifyOnSubscriptionChangedById } from '../lib/notifyListener';\nimport { deleteRoom } from './deleteRoom';\n\nexport async function cleanRoomHistory({\n\trid = '',\n\tlatest = new Date(),\n\toldest = new Date('0001-01-01T00:00:00Z'),\n\tinclusive = true,\n\tlimit = 0,\n\texcludePinned = true,\n\tignoreDiscussion = true,\n\tfilesOnly = false,\n\tfromUsers = [],\n\tignoreThreads = true,\n}: {\n\trid?: IRoom['_id'];\n\tlatest?: Date;\n\toldest?: Date;\n\tinclusive?: boolean;\n\tlimit?: number;\n\texcludePinned?: boolean;\n\tignoreDiscussion?: boolean;\n\tfilesOnly?: boolean;\n\tfromUsers?: string[];\n\tignoreThreads?: boolean;\n}): Promise<number> {\n\tconst gt = inclusive ? '$gte' : '$gt';\n\tconst lt = inclusive ? '$lte' : '$lt';\n\n\tconst ts = { [gt]: oldest, [lt]: latest };\n\n\tconst text = `_${i18n.t('File_removed_by_prune')}_`;\n\n\tlet fileCount = 0;\n\n\tconst cursor = Messages.findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ignoreDiscussion, ts, fromUsers, ignoreThreads, {\n\t\tprojection: { pinned: 1, files: 1 },\n\t\tlimit,\n\t});\n\n\tfor await (const document of cursor) {\n\t\tconst uploadsStore = FileUpload.getStore('Uploads');\n\n\t\tdocument.files && (await Promise.all(document.files.map((file) => uploadsStore.deleteById(file._id))));\n\n\t\tfileCount++;\n\t\tif (filesOnly) {\n\t\t\tawait Messages.updateOne({ _id: document._id }, { $unset: { file: 1 }, $set: { attachments: [{ color: '#FD745E', text }] } });\n\t\t}\n\t}\n\n\tif (filesOnly) {\n\t\treturn fileCount;\n\t}\n\n\tif (!ignoreDiscussion) {\n\t\tconst discussionsCursor = Messages.findDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, fromUsers, {\n\t\t\tprojection: { drid: 1 },\n\t\t\t...(limit && { limit }),\n\t\t});\n\n\t\tfor await (const { drid } of discussionsCursor) {\n\t\t\tif (!drid) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tawait deleteRoom(drid);\n\t\t}\n\t}\n\n\tif (!ignoreThreads) {\n\t\tconst threads = new Set<string>();\n\n\t\tawait Messages.findThreadsByRoomIdPinnedTimestampAndUsers(\n\t\t\t{ rid, pinned: excludePinned, ignoreDiscussion, ts, users: fromUsers },\n\t\t\t{ projection: { _id: 1 } },\n\t\t).forEach(({ _id }) => {\n\t\t\tthreads.add(_id);\n\t\t});\n\n\t\tif (threads.size > 0) {\n\t\t\tconst subscriptionIds: string[] = (\n\t\t\t\tawait Subscriptions.findUnreadThreadsByRoomId(rid, [...threads], { projection: { _id: 1 } }).toArray()\n\t\t\t).map(({ _id }) => _id);\n\n\t\t\tconst { modifiedCount } = await Subscriptions.removeUnreadThreadsByRoomId(rid, [...threads]);\n\t\t\tif (modifiedCount) {\n\t\t\t\tsubscriptionIds.forEach((id) => notifyOnSubscriptionChangedById(id));\n\t\t\t}\n\t\t}\n\t}\n\n\tconst selectedMessageIds = limit\n\t\t? await Messages.findByIdPinnedTimestampLimitAndUsers(rid, excludePinned, ignoreDiscussion, ts, limit, fromUsers, ignoreThreads)\n\t\t: undefined;\n\tconst count = await Messages.removeByIdPinnedTimestampLimitAndUsers(\n\t\trid,\n\t\texcludePinned,\n\t\tignoreDiscussion,\n\t\tts,\n\t\tlimit,\n\t\tfromUsers,\n\t\tignoreThreads,\n\t\tselectedMessageIds,\n\t);\n\n\tif (!limit) {\n\t\tconst uids = await Users.findByUsernames(fromUsers, { projection: { _id: 1 } })\n\t\t\t.map((user) => user._id)\n\t\t\t.toArray();\n\t\tawait ReadReceipts.removeByIdPinnedTimestampLimitAndUsers(rid, excludePinned, ignoreDiscussion, ts, uids, ignoreThreads);\n\t} else if (selectedMessageIds) {\n\t\tawait ReadReceipts.removeByMessageIds(selectedMessageIds);\n\t}\n\n\tif (count) {\n\t\tconst lastMessage = await Messages.getLastVisibleUserMessageSentByRoomId(rid);\n\n\t\tawait Rooms.resetLastMessageById(rid, lastMessage, -count);\n\n\t\tvoid notifyOnRoomChangedById(rid);\n\n\t\tvoid api.broadcast('notify.deleteMessageBulk', rid, {\n\t\t\trid,\n\t\t\texcludePinned,\n\t\t\tignoreDiscussion,\n\t\t\tts,\n\t\t\tusers: fromUsers,\n\t\t\tids: selectedMessageIds,\n\t\t});\n\t}\n\n\treturn count;\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/cleanRoomHistory.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/cleanRoomHistory.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/cleanRoomHistory.ts","sourceRoot":"","sources":["app/lib/server/functions/cleanRoomHistory.ts"],"names":[],"mappings":"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","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { IRoom } from '@rocket.chat/core-typings';\nimport { Messages, Rooms, Subscriptions, ReadReceipts, Users } from '@rocket.chat/models';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { FileUpload } from '../../../file-upload/server';\nimport { notifyOnRoomChangedById, notifyOnSubscriptionChangedById } from '../lib/notifyListener';\nimport { deleteRoom } from './deleteRoom';\n\nexport async function cleanRoomHistory({\n\trid = '',\n\tlatest = new Date(),\n\toldest = new Date('0001-01-01T00:00:00Z'),\n\tinclusive = true,\n\tlimit = 0,\n\texcludePinned = true,\n\tignoreDiscussion = true,\n\tfilesOnly = false,\n\tfromUsers = [],\n\tignoreThreads = true,\n}: {\n\trid?: IRoom['_id'];\n\tlatest?: Date;\n\toldest?: Date;\n\tinclusive?: boolean;\n\tlimit?: number;\n\texcludePinned?: boolean;\n\tignoreDiscussion?: boolean;\n\tfilesOnly?: boolean;\n\tfromUsers?: string[];\n\tignoreThreads?: boolean;\n}): Promise<number> {\n\tconst gt = inclusive ? '$gte' : '$gt';\n\tconst lt = inclusive ? '$lte' : '$lt';\n\n\tconst ts = { [gt]: oldest, [lt]: latest };\n\n\tconst text = `_${i18n.t('File_removed_by_prune')}_`;\n\n\tlet fileCount = 0;\n\n\tconst cursor = Messages.findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ignoreDiscussion, ts, fromUsers, ignoreThreads, {\n\t\tprojection: { pinned: 1, files: 1 },\n\t\tlimit,\n\t});\n\n\tfor await (const document of cursor) {\n\t\tconst uploadsStore = FileUpload.getStore('Uploads');\n\n\t\tdocument.files && (await Promise.all(document.files.map((file) => uploadsStore.deleteById(file._id))));\n\n\t\tfileCount++;\n\t\tif (filesOnly) {\n\t\t\tawait Messages.updateOne({ _id: document._id }, { $unset: { file: 1 }, $set: { attachments: [{ color: '#FD745E', text }] } });\n\t\t}\n\t}\n\n\tif (filesOnly) {\n\t\treturn fileCount;\n\t}\n\n\tif (!ignoreDiscussion) {\n\t\tconst discussionsCursor = Messages.findDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, fromUsers, {\n\t\t\tprojection: { drid: 1 },\n\t\t\t...(limit && { limit }),\n\t\t});\n\n\t\tfor await (const { drid } of discussionsCursor) {\n\t\t\tif (!drid) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tawait deleteRoom(drid);\n\t\t}\n\t}\n\n\tif (!ignoreThreads) {\n\t\tconst threads = new Set<string>();\n\n\t\tawait Messages.findThreadsByRoomIdPinnedTimestampAndUsers(\n\t\t\t{ rid, pinned: excludePinned, ignoreDiscussion, ts, users: fromUsers },\n\t\t\t{ projection: { _id: 1 } },\n\t\t).forEach(({ _id }) => {\n\t\t\tthreads.add(_id);\n\t\t});\n\n\t\tif (threads.size > 0) {\n\t\t\tconst subscriptionIds: string[] = (\n\t\t\t\tawait Subscriptions.findUnreadThreadsByRoomId(rid, [...threads], { projection: { _id: 1 } }).toArray()\n\t\t\t).map(({ _id }) => _id);\n\n\t\t\tconst { modifiedCount } = await Subscriptions.removeUnreadThreadsByRoomId(rid, [...threads]);\n\t\t\tif (modifiedCount) {\n\t\t\t\tsubscriptionIds.forEach((id) => notifyOnSubscriptionChangedById(id));\n\t\t\t}\n\t\t}\n\t}\n\n\tconst selectedMessageIds = limit\n\t\t? await Messages.findByIdPinnedTimestampLimitAndUsers(rid, excludePinned, ignoreDiscussion, ts, limit, fromUsers, ignoreThreads)\n\t\t: undefined;\n\tconst count = await Messages.removeByIdPinnedTimestampLimitAndUsers(\n\t\trid,\n\t\texcludePinned,\n\t\tignoreDiscussion,\n\t\tts,\n\t\tlimit,\n\t\tfromUsers,\n\t\tignoreThreads,\n\t\tselectedMessageIds,\n\t);\n\n\tif (!limit) {\n\t\tconst uids = await Users.findByUsernames(fromUsers, { projection: { _id: 1 } })\n\t\t\t.map((user) => user._id)\n\t\t\t.toArray();\n\t\tawait ReadReceipts.removeByIdPinnedTimestampLimitAndUsers(rid, excludePinned, ignoreDiscussion, ts, uids, ignoreThreads);\n\t} else if (selectedMessageIds) {\n\t\tawait ReadReceipts.removeByMessageIds(selectedMessageIds);\n\t}\n\n\tif (count) {\n\t\tconst lastMessage = await Messages.getLastVisibleUserMessageSentByRoomId(rid);\n\n\t\tawait Rooms.resetLastMessageById(rid, lastMessage, -count);\n\n\t\tvoid notifyOnRoomChangedById(rid);\n\n\t\tvoid api.broadcast('notify.deleteMessageBulk', rid, {\n\t\t\trid,\n\t\t\texcludePinned,\n\t\t\tignoreDiscussion,\n\t\t\tts,\n\t\t\tusers: fromUsers,\n\t\t\tids: selectedMessageIds,\n\t\t});\n\t}\n\n\treturn count;\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      cleanRoomHistory: () => cleanRoomHistory\n    });\n    let api;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      }\n    }, 0);\n    let Messages, Rooms, Subscriptions, ReadReceipts, Users;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      ReadReceipts(v) {\n        ReadReceipts = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let i18n;\n    module.link(\"../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 2);\n    let FileUpload;\n    module.link(\"../../../file-upload/server\", {\n      FileUpload(v) {\n        FileUpload = v;\n      }\n    }, 3);\n    let notifyOnRoomChangedById, notifyOnSubscriptionChangedById;\n    module.link(\"../lib/notifyListener\", {\n      notifyOnRoomChangedById(v) {\n        notifyOnRoomChangedById = v;\n      },\n      notifyOnSubscriptionChangedById(v) {\n        notifyOnSubscriptionChangedById = v;\n      }\n    }, 4);\n    let deleteRoom;\n    module.link(\"./deleteRoom\", {\n      deleteRoom(v) {\n        deleteRoom = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function cleanRoomHistory(_ref) {\n      let {\n        rid = '',\n        latest = new Date(),\n        oldest = new Date('0001-01-01T00:00:00Z'),\n        inclusive = true,\n        limit = 0,\n        excludePinned = true,\n        ignoreDiscussion = true,\n        filesOnly = false,\n        fromUsers = [],\n        ignoreThreads = true\n      } = _ref;\n      const gt = inclusive ? '$gte' : '$gt';\n      const lt = inclusive ? '$lte' : '$lt';\n      const ts = {\n        [gt]: oldest,\n        [lt]: latest\n      };\n      const text = \"_\".concat(i18n.t('File_removed_by_prune'), \"_\");\n      let fileCount = 0;\n      const cursor = Messages.findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ignoreDiscussion, ts, fromUsers, ignoreThreads, {\n        projection: {\n          pinned: 1,\n          files: 1\n        },\n        limit\n      });\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(cursor), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const document = _step.value;\n          {\n            const uploadsStore = FileUpload.getStore('Uploads');\n            document.files && (await Promise.all(document.files.map(file => uploadsStore.deleteById(file._id))));\n            fileCount++;\n            if (filesOnly) {\n              await Messages.updateOne({\n                _id: document._id\n              }, {\n                $unset: {\n                  file: 1\n                },\n                $set: {\n                  attachments: [{\n                    color: '#FD745E',\n                    text\n                  }]\n                }\n              });\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      if (filesOnly) {\n        return fileCount;\n      }\n      if (!ignoreDiscussion) {\n        const discussionsCursor = Messages.findDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, fromUsers, _objectSpread({\n          projection: {\n            drid: 1\n          }\n        }, limit && {\n          limit\n        }));\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(discussionsCursor), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            const {\n              drid\n            } = _step2.value;\n            {\n              if (!drid) {\n                continue;\n              }\n              await deleteRoom(drid);\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n      if (!ignoreThreads) {\n        const threads = new Set();\n        await Messages.findThreadsByRoomIdPinnedTimestampAndUsers({\n          rid,\n          pinned: excludePinned,\n          ignoreDiscussion,\n          ts,\n          users: fromUsers\n        }, {\n          projection: {\n            _id: 1\n          }\n        }).forEach(_ref2 => {\n          let {\n            _id\n          } = _ref2;\n          threads.add(_id);\n        });\n        if (threads.size > 0) {\n          const subscriptionIds = (await Subscriptions.findUnreadThreadsByRoomId(rid, [...threads], {\n            projection: {\n              _id: 1\n            }\n          }).toArray()).map(_ref3 => {\n            let {\n              _id\n            } = _ref3;\n            return _id;\n          });\n          const {\n            modifiedCount\n          } = await Subscriptions.removeUnreadThreadsByRoomId(rid, [...threads]);\n          if (modifiedCount) {\n            subscriptionIds.forEach(id => notifyOnSubscriptionChangedById(id));\n          }\n        }\n      }\n      const selectedMessageIds = limit ? await Messages.findByIdPinnedTimestampLimitAndUsers(rid, excludePinned, ignoreDiscussion, ts, limit, fromUsers, ignoreThreads) : undefined;\n      const count = await Messages.removeByIdPinnedTimestampLimitAndUsers(rid, excludePinned, ignoreDiscussion, ts, limit, fromUsers, ignoreThreads, selectedMessageIds);\n      if (!limit) {\n        const uids = await Users.findByUsernames(fromUsers, {\n          projection: {\n            _id: 1\n          }\n        }).map(user => user._id).toArray();\n        await ReadReceipts.removeByIdPinnedTimestampLimitAndUsers(rid, excludePinned, ignoreDiscussion, ts, uids, ignoreThreads);\n      } else if (selectedMessageIds) {\n        await ReadReceipts.removeByMessageIds(selectedMessageIds);\n      }\n      if (count) {\n        const lastMessage = await Messages.getLastVisibleUserMessageSentByRoomId(rid);\n        await Rooms.resetLastMessageById(rid, lastMessage, -count);\n        void notifyOnRoomChangedById(rid);\n        void api.broadcast('notify.deleteMessageBulk', rid, {\n          rid,\n          excludePinned,\n          ignoreDiscussion,\n          ts,\n          users: fromUsers,\n          ids: selectedMessageIds\n        });\n      }\n      return count;\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","cleanRoomHistory","api","Messages","Rooms","Subscriptions","ReadReceipts","Users","i18n","FileUpload","notifyOnRoomChangedById","notifyOnSubscriptionChangedById","deleteRoom","__reifyWaitForDeps__","_ref","rid","latest","Date","oldest","inclusive","limit","excludePinned","ignoreDiscussion","filesOnly","fromUsers","ignoreThreads","gt","lt","ts","text","concat","t","fileCount","cursor","findFilesByRoomIdPinnedTimestampAndUsers","projection","pinned","files","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","document","value","uploadsStore","getStore","Promise","all","map","file","deleteById","_id","updateOne","$unset","$set","attachments","color","err","return","discussionsCursor","findDiscussionByRoomIdPinnedTimestampAndUsers","drid","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","threads","Set","findThreadsByRoomIdPinnedTimestampAndUsers","users","forEach","_ref2","add","size","subscriptionIds","findUnreadThreadsByRoomId","toArray","_ref3","modifiedCount","removeUnreadThreadsByRoomId","id","selectedMessageIds","findByIdPinnedTimestampLimitAndUsers","undefined","count","removeByIdPinnedTimestampLimitAndUsers","uids","findByUsernames","user","removeByMessageIds","lastMessage","getLastVisibleUserMessageSentByRoomId","resetLastMessageById","broadcast","ids","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/functions/cleanRoomHistory.ts"],"sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { IRoom } from '@rocket.chat/core-typings';\nimport { Messages, Rooms, Subscriptions, ReadReceipts, Users } from '@rocket.chat/models';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { FileUpload } from '../../../file-upload/server';\nimport { notifyOnRoomChangedById, notifyOnSubscriptionChangedById } from '../lib/notifyListener';\nimport { deleteRoom } from './deleteRoom';\n\nexport async function cleanRoomHistory({\n\trid = '',\n\tlatest = new Date(),\n\toldest = new Date('0001-01-01T00:00:00Z'),\n\tinclusive = true,\n\tlimit = 0,\n\texcludePinned = true,\n\tignoreDiscussion = true,\n\tfilesOnly = false,\n\tfromUsers = [],\n\tignoreThreads = true,\n}: {\n\trid?: IRoom['_id'];\n\tlatest?: Date;\n\toldest?: Date;\n\tinclusive?: boolean;\n\tlimit?: number;\n\texcludePinned?: boolean;\n\tignoreDiscussion?: boolean;\n\tfilesOnly?: boolean;\n\tfromUsers?: string[];\n\tignoreThreads?: boolean;\n}): Promise<number> {\n\tconst gt = inclusive ? '$gte' : '$gt';\n\tconst lt = inclusive ? '$lte' : '$lt';\n\n\tconst ts = { [gt]: oldest, [lt]: latest };\n\n\tconst text = `_${i18n.t('File_removed_by_prune')}_`;\n\n\tlet fileCount = 0;\n\n\tconst cursor = Messages.findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ignoreDiscussion, ts, fromUsers, ignoreThreads, {\n\t\tprojection: { pinned: 1, files: 1 },\n\t\tlimit,\n\t});\n\n\tfor await (const document of cursor) {\n\t\tconst uploadsStore = FileUpload.getStore('Uploads');\n\n\t\tdocument.files && (await Promise.all(document.files.map((file) => uploadsStore.deleteById(file._id))));\n\n\t\tfileCount++;\n\t\tif (filesOnly) {\n\t\t\tawait Messages.updateOne({ _id: document._id }, { $unset: { file: 1 }, $set: { attachments: [{ color: '#FD745E', text }] } });\n\t\t}\n\t}\n\n\tif (filesOnly) {\n\t\treturn fileCount;\n\t}\n\n\tif (!ignoreDiscussion) {\n\t\tconst discussionsCursor = Messages.findDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, fromUsers, {\n\t\t\tprojection: { drid: 1 },\n\t\t\t...(limit && { limit }),\n\t\t});\n\n\t\tfor await (const { drid } of discussionsCursor) {\n\t\t\tif (!drid) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tawait deleteRoom(drid);\n\t\t}\n\t}\n\n\tif (!ignoreThreads) {\n\t\tconst threads = new Set<string>();\n\n\t\tawait Messages.findThreadsByRoomIdPinnedTimestampAndUsers(\n\t\t\t{ rid, pinned: excludePinned, ignoreDiscussion, ts, users: fromUsers },\n\t\t\t{ projection: { _id: 1 } },\n\t\t).forEach(({ _id }) => {\n\t\t\tthreads.add(_id);\n\t\t});\n\n\t\tif (threads.size > 0) {\n\t\t\tconst subscriptionIds: string[] = (\n\t\t\t\tawait Subscriptions.findUnreadThreadsByRoomId(rid, [...threads], { projection: { _id: 1 } }).toArray()\n\t\t\t).map(({ _id }) => _id);\n\n\t\t\tconst { modifiedCount } = await Subscriptions.removeUnreadThreadsByRoomId(rid, [...threads]);\n\t\t\tif (modifiedCount) {\n\t\t\t\tsubscriptionIds.forEach((id) => notifyOnSubscriptionChangedById(id));\n\t\t\t}\n\t\t}\n\t}\n\n\tconst selectedMessageIds = limit\n\t\t? await Messages.findByIdPinnedTimestampLimitAndUsers(rid, excludePinned, ignoreDiscussion, ts, limit, fromUsers, ignoreThreads)\n\t\t: undefined;\n\tconst count = await Messages.removeByIdPinnedTimestampLimitAndUsers(\n\t\trid,\n\t\texcludePinned,\n\t\tignoreDiscussion,\n\t\tts,\n\t\tlimit,\n\t\tfromUsers,\n\t\tignoreThreads,\n\t\tselectedMessageIds,\n\t);\n\n\tif (!limit) {\n\t\tconst uids = await Users.findByUsernames(fromUsers, { projection: { _id: 1 } })\n\t\t\t.map((user) => user._id)\n\t\t\t.toArray();\n\t\tawait ReadReceipts.removeByIdPinnedTimestampLimitAndUsers(rid, excludePinned, ignoreDiscussion, ts, uids, ignoreThreads);\n\t} else if (selectedMessageIds) {\n\t\tawait ReadReceipts.removeByMessageIds(selectedMessageIds);\n\t}\n\n\tif (count) {\n\t\tconst lastMessage = await Messages.getLastVisibleUserMessageSentByRoomId(rid);\n\n\t\tawait Rooms.resetLastMessageById(rid, lastMessage, -count);\n\n\t\tvoid notifyOnRoomChangedById(rid);\n\n\t\tvoid api.broadcast('notify.deleteMessageBulk', rid, {\n\t\t\trid,\n\t\t\texcludePinned,\n\t\t\tignoreDiscussion,\n\t\t\tts,\n\t\t\tusers: fromUsers,\n\t\t\tids: selectedMessageIds,\n\t\t});\n\t}\n\n\treturn count;\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"7c2e3f1d8bb6bc6c7dc6e019b26ac46ddc6f15d2"}
