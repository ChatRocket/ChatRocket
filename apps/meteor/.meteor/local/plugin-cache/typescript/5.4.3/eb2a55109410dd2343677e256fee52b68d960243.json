{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatBusinessHours.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/LivechatBusinessHours.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatBusinessHours.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatBusinessHours.ts","sourceRoot":"","sources":["server/models/raw/LivechatBusinessHours.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatBusinessHour, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport type { ILivechatBusinessHoursModel } from '@rocket.chat/model-typings';\nimport type { Collection, Db, Document, FindOptions } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\ninterface IWorkHoursCronJobsItem {\n\tday: string;\n\ttimes: string[];\n}\n\nexport interface IWorkHoursCronJobsWrapper {\n\tstart: IWorkHoursCronJobsItem[];\n\tfinish: IWorkHoursCronJobsItem[];\n}\n\nexport class LivechatBusinessHoursRaw extends BaseRaw<ILivechatBusinessHour> implements ILivechatBusinessHoursModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatBusinessHour>>) {\n\t\tsuper(db, 'livechat_business_hours', trash);\n\t}\n\n\tasync findOneDefaultBusinessHour(options?: undefined): Promise<ILivechatBusinessHour | null>;\n\n\tasync findOneDefaultBusinessHour(options: FindOptions<ILivechatBusinessHour>): Promise<ILivechatBusinessHour | null>;\n\n\tasync findOneDefaultBusinessHour<P extends Document>(\n\t\toptions: FindOptions<P extends ILivechatBusinessHour ? ILivechatBusinessHour : P>,\n\t): Promise<P | null>;\n\n\tfindOneDefaultBusinessHour<P>(options?: any): Promise<ILivechatBusinessHour | P | null> {\n\t\treturn this.findOne({ type: LivechatBusinessHourTypes.DEFAULT }, options);\n\t}\n\n\tfindActiveAndOpenBusinessHoursByDay(day: string, options?: any): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t\tworkHours: {\n\t\t\t\t\t$elemMatch: {\n\t\t\t\t\t\t$or: [{ 'start.cron.dayOfWeek': day }, { 'finish.cron.dayOfWeek': day }],\n\t\t\t\t\t\topen: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tfindActiveBusinessHours(options: FindOptions<ILivechatBusinessHour> = {}): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tfindDefaultActiveAndOpenBusinessHoursByDay(day: string, options?: any): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\ttype: LivechatBusinessHourTypes.DEFAULT,\n\t\t\t\tactive: true,\n\t\t\t\tworkHours: {\n\t\t\t\t\t$elemMatch: {\n\t\t\t\t\t\t$or: [{ 'start.cron.dayOfWeek': day }, { 'finish.cron.dayOfWeek': day }],\n\t\t\t\t\t\topen: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tasync insertOne(data: Omit<ILivechatBusinessHour, '_id'>): Promise<any> {\n\t\treturn super.insertOne({\n\t\t\t...data,\n\t\t\tts: new Date(),\n\t\t});\n\t}\n\n\tfindHoursToScheduleJobs(): Promise<IWorkHoursCronJobsWrapper[]> {\n\t\treturn this.col\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$facet: {\n\t\t\t\t\t\tstart: [\n\t\t\t\t\t\t\t{ $match: { active: true } },\n\t\t\t\t\t\t\t{ $project: { _id: 0, workHours: 1 } },\n\t\t\t\t\t\t\t{ $unwind: { path: '$workHours' } },\n\t\t\t\t\t\t\t{ $match: { 'workHours.open': true } },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t\t\t_id: { day: '$workHours.start.cron.dayOfWeek' },\n\t\t\t\t\t\t\t\t\ttimes: { $addToSet: '$workHours.start.cron.time' },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\t\t\ttimes: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tfinish: [\n\t\t\t\t\t\t\t{ $match: { active: true } },\n\t\t\t\t\t\t\t{ $project: { _id: 0, workHours: 1 } },\n\t\t\t\t\t\t\t{ $unwind: { path: '$workHours' } },\n\t\t\t\t\t\t\t{ $match: { 'workHours.open': true } },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t\t\t_id: { day: '$workHours.finish.cron.dayOfWeek' },\n\t\t\t\t\t\t\t\t\ttimes: { $addToSet: '$workHours.finish.cron.time' },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\t\t\ttimes: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray() as any;\n\t}\n\n\tasync findActiveBusinessHoursToOpen(\n\t\tday: string,\n\t\tstart: string,\n\t\ttype?: LivechatBusinessHourTypes,\n\t\toptions?: any,\n\t): Promise<ILivechatBusinessHour[]> {\n\t\tconst query: Record<string, any> = {\n\t\t\tactive: true,\n\t\t\tworkHours: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\t'start.cron.dayOfWeek': day,\n\t\t\t\t\t'start.cron.time': start,\n\t\t\t\t\t'open': true,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (type) {\n\t\t\tquery.type = type;\n\t\t}\n\t\treturn this.col.find(query, options).toArray();\n\t}\n\n\tasync findActiveBusinessHoursToClose(\n\t\tday: string,\n\t\tfinish: string,\n\t\ttype?: LivechatBusinessHourTypes,\n\t\toptions?: any,\n\t): Promise<ILivechatBusinessHour[]> {\n\t\tconst query: Record<string, any> = {\n\t\t\tactive: true,\n\t\t\tworkHours: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\t'finish.cron.dayOfWeek': day,\n\t\t\t\t\t'finish.cron.time': finish,\n\t\t\t\t\t'open': true,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (type) {\n\t\t\tquery.type = type;\n\t\t}\n\t\treturn this.col.find(query, options).toArray();\n\t}\n\n\tdisableBusinessHour(businessHourId: string): Promise<any> {\n\t\treturn this.updateOne({ _id: businessHourId }, { $set: { active: false } });\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatBusinessHours.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/LivechatBusinessHours.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatBusinessHours.ts","sourceRoot":"","sources":["server/models/raw/LivechatBusinessHours.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatBusinessHour, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport type { ILivechatBusinessHoursModel } from '@rocket.chat/model-typings';\nimport type { Collection, Db, Document, FindOptions } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\ninterface IWorkHoursCronJobsItem {\n\tday: string;\n\ttimes: string[];\n}\n\nexport interface IWorkHoursCronJobsWrapper {\n\tstart: IWorkHoursCronJobsItem[];\n\tfinish: IWorkHoursCronJobsItem[];\n}\n\nexport class LivechatBusinessHoursRaw extends BaseRaw<ILivechatBusinessHour> implements ILivechatBusinessHoursModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatBusinessHour>>) {\n\t\tsuper(db, 'livechat_business_hours', trash);\n\t}\n\n\tasync findOneDefaultBusinessHour(options?: undefined): Promise<ILivechatBusinessHour | null>;\n\n\tasync findOneDefaultBusinessHour(options: FindOptions<ILivechatBusinessHour>): Promise<ILivechatBusinessHour | null>;\n\n\tasync findOneDefaultBusinessHour<P extends Document>(\n\t\toptions: FindOptions<P extends ILivechatBusinessHour ? ILivechatBusinessHour : P>,\n\t): Promise<P | null>;\n\n\tfindOneDefaultBusinessHour<P>(options?: any): Promise<ILivechatBusinessHour | P | null> {\n\t\treturn this.findOne({ type: LivechatBusinessHourTypes.DEFAULT }, options);\n\t}\n\n\tfindActiveAndOpenBusinessHoursByDay(day: string, options?: any): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t\tworkHours: {\n\t\t\t\t\t$elemMatch: {\n\t\t\t\t\t\t$or: [{ 'start.cron.dayOfWeek': day }, { 'finish.cron.dayOfWeek': day }],\n\t\t\t\t\t\topen: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tfindActiveBusinessHours(options: FindOptions<ILivechatBusinessHour> = {}): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tfindDefaultActiveAndOpenBusinessHoursByDay(day: string, options?: any): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\ttype: LivechatBusinessHourTypes.DEFAULT,\n\t\t\t\tactive: true,\n\t\t\t\tworkHours: {\n\t\t\t\t\t$elemMatch: {\n\t\t\t\t\t\t$or: [{ 'start.cron.dayOfWeek': day }, { 'finish.cron.dayOfWeek': day }],\n\t\t\t\t\t\topen: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tasync insertOne(data: Omit<ILivechatBusinessHour, '_id'>): Promise<any> {\n\t\treturn super.insertOne({\n\t\t\t...data,\n\t\t\tts: new Date(),\n\t\t});\n\t}\n\n\tfindHoursToScheduleJobs(): Promise<IWorkHoursCronJobsWrapper[]> {\n\t\treturn this.col\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$facet: {\n\t\t\t\t\t\tstart: [\n\t\t\t\t\t\t\t{ $match: { active: true } },\n\t\t\t\t\t\t\t{ $project: { _id: 0, workHours: 1 } },\n\t\t\t\t\t\t\t{ $unwind: { path: '$workHours' } },\n\t\t\t\t\t\t\t{ $match: { 'workHours.open': true } },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t\t\t_id: { day: '$workHours.start.cron.dayOfWeek' },\n\t\t\t\t\t\t\t\t\ttimes: { $addToSet: '$workHours.start.cron.time' },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\t\t\ttimes: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tfinish: [\n\t\t\t\t\t\t\t{ $match: { active: true } },\n\t\t\t\t\t\t\t{ $project: { _id: 0, workHours: 1 } },\n\t\t\t\t\t\t\t{ $unwind: { path: '$workHours' } },\n\t\t\t\t\t\t\t{ $match: { 'workHours.open': true } },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t\t\t_id: { day: '$workHours.finish.cron.dayOfWeek' },\n\t\t\t\t\t\t\t\t\ttimes: { $addToSet: '$workHours.finish.cron.time' },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\t\t\ttimes: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray() as any;\n\t}\n\n\tasync findActiveBusinessHoursToOpen(\n\t\tday: string,\n\t\tstart: string,\n\t\ttype?: LivechatBusinessHourTypes,\n\t\toptions?: any,\n\t): Promise<ILivechatBusinessHour[]> {\n\t\tconst query: Record<string, any> = {\n\t\t\tactive: true,\n\t\t\tworkHours: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\t'start.cron.dayOfWeek': day,\n\t\t\t\t\t'start.cron.time': start,\n\t\t\t\t\t'open': true,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (type) {\n\t\t\tquery.type = type;\n\t\t}\n\t\treturn this.col.find(query, options).toArray();\n\t}\n\n\tasync findActiveBusinessHoursToClose(\n\t\tday: string,\n\t\tfinish: string,\n\t\ttype?: LivechatBusinessHourTypes,\n\t\toptions?: any,\n\t): Promise<ILivechatBusinessHour[]> {\n\t\tconst query: Record<string, any> = {\n\t\t\tactive: true,\n\t\t\tworkHours: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\t'finish.cron.dayOfWeek': day,\n\t\t\t\t\t'finish.cron.time': finish,\n\t\t\t\t\t'open': true,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (type) {\n\t\t\tquery.type = type;\n\t\t}\n\t\treturn this.col.find(query, options).toArray();\n\t}\n\n\tdisableBusinessHour(businessHourId: string): Promise<any> {\n\t\treturn this.updateOne({ _id: businessHourId }, { $set: { active: false } });\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      LivechatBusinessHoursRaw: () => LivechatBusinessHoursRaw\n    });\n    let LivechatBusinessHourTypes;\n    module.link(\"@rocket.chat/core-typings\", {\n      LivechatBusinessHourTypes(v) {\n        LivechatBusinessHourTypes = v;\n      }\n    }, 0);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class LivechatBusinessHoursRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'livechat_business_hours', trash);\n      }\n      findOneDefaultBusinessHour(options) {\n        return this.findOne({\n          type: LivechatBusinessHourTypes.DEFAULT\n        }, options);\n      }\n      findActiveAndOpenBusinessHoursByDay(day, options) {\n        return this.find({\n          active: true,\n          workHours: {\n            $elemMatch: {\n              $or: [{\n                'start.cron.dayOfWeek': day\n              }, {\n                'finish.cron.dayOfWeek': day\n              }],\n              open: true\n            }\n          }\n        }, options).toArray();\n      }\n      findActiveBusinessHours() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this.find({\n          active: true\n        }, options).toArray();\n      }\n      findDefaultActiveAndOpenBusinessHoursByDay(day, options) {\n        return this.find({\n          type: LivechatBusinessHourTypes.DEFAULT,\n          active: true,\n          workHours: {\n            $elemMatch: {\n              $or: [{\n                'start.cron.dayOfWeek': day\n              }, {\n                'finish.cron.dayOfWeek': day\n              }],\n              open: true\n            }\n          }\n        }, options).toArray();\n      }\n      async insertOne(data) {\n        return super.insertOne(_objectSpread(_objectSpread({}, data), {}, {\n          ts: new Date()\n        }));\n      }\n      findHoursToScheduleJobs() {\n        return this.col.aggregate([{\n          $facet: {\n            start: [{\n              $match: {\n                active: true\n              }\n            }, {\n              $project: {\n                _id: 0,\n                workHours: 1\n              }\n            }, {\n              $unwind: {\n                path: '$workHours'\n              }\n            }, {\n              $match: {\n                'workHours.open': true\n              }\n            }, {\n              $group: {\n                _id: {\n                  day: '$workHours.start.cron.dayOfWeek'\n                },\n                times: {\n                  $addToSet: '$workHours.start.cron.time'\n                }\n              }\n            }, {\n              $project: {\n                _id: 0,\n                day: '$_id.day',\n                times: 1\n              }\n            }],\n            finish: [{\n              $match: {\n                active: true\n              }\n            }, {\n              $project: {\n                _id: 0,\n                workHours: 1\n              }\n            }, {\n              $unwind: {\n                path: '$workHours'\n              }\n            }, {\n              $match: {\n                'workHours.open': true\n              }\n            }, {\n              $group: {\n                _id: {\n                  day: '$workHours.finish.cron.dayOfWeek'\n                },\n                times: {\n                  $addToSet: '$workHours.finish.cron.time'\n                }\n              }\n            }, {\n              $project: {\n                _id: 0,\n                day: '$_id.day',\n                times: 1\n              }\n            }]\n          }\n        }]).toArray();\n      }\n      async findActiveBusinessHoursToOpen(day, start, type, options) {\n        const query = {\n          active: true,\n          workHours: {\n            $elemMatch: {\n              'start.cron.dayOfWeek': day,\n              'start.cron.time': start,\n              'open': true\n            }\n          }\n        };\n        if (type) {\n          query.type = type;\n        }\n        return this.col.find(query, options).toArray();\n      }\n      async findActiveBusinessHoursToClose(day, finish, type, options) {\n        const query = {\n          active: true,\n          workHours: {\n            $elemMatch: {\n              'finish.cron.dayOfWeek': day,\n              'finish.cron.time': finish,\n              'open': true\n            }\n          }\n        };\n        if (type) {\n          query.type = type;\n        }\n        return this.col.find(query, options).toArray();\n      }\n      disableBusinessHour(businessHourId) {\n        return this.updateOne({\n          _id: businessHourId\n        }, {\n          $set: {\n            active: false\n          }\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","LivechatBusinessHoursRaw","LivechatBusinessHourTypes","BaseRaw","__reifyWaitForDeps__","constructor","db","trash","findOneDefaultBusinessHour","options","findOne","type","DEFAULT","findActiveAndOpenBusinessHoursByDay","day","find","active","workHours","$elemMatch","$or","open","toArray","findActiveBusinessHours","arguments","length","undefined","findDefaultActiveAndOpenBusinessHoursByDay","insertOne","data","ts","Date","findHoursToScheduleJobs","col","aggregate","$facet","start","$match","$project","_id","$unwind","path","$group","times","$addToSet","finish","findActiveBusinessHoursToOpen","query","findActiveBusinessHoursToClose","disableBusinessHour","businessHourId","updateOne","$set","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/LivechatBusinessHours.ts"],"sourcesContent":["import type { ILivechatBusinessHour, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport type { ILivechatBusinessHoursModel } from '@rocket.chat/model-typings';\nimport type { Collection, Db, Document, FindOptions } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\ninterface IWorkHoursCronJobsItem {\n\tday: string;\n\ttimes: string[];\n}\n\nexport interface IWorkHoursCronJobsWrapper {\n\tstart: IWorkHoursCronJobsItem[];\n\tfinish: IWorkHoursCronJobsItem[];\n}\n\nexport class LivechatBusinessHoursRaw extends BaseRaw<ILivechatBusinessHour> implements ILivechatBusinessHoursModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatBusinessHour>>) {\n\t\tsuper(db, 'livechat_business_hours', trash);\n\t}\n\n\tasync findOneDefaultBusinessHour(options?: undefined): Promise<ILivechatBusinessHour | null>;\n\n\tasync findOneDefaultBusinessHour(options: FindOptions<ILivechatBusinessHour>): Promise<ILivechatBusinessHour | null>;\n\n\tasync findOneDefaultBusinessHour<P extends Document>(\n\t\toptions: FindOptions<P extends ILivechatBusinessHour ? ILivechatBusinessHour : P>,\n\t): Promise<P | null>;\n\n\tfindOneDefaultBusinessHour<P>(options?: any): Promise<ILivechatBusinessHour | P | null> {\n\t\treturn this.findOne({ type: LivechatBusinessHourTypes.DEFAULT }, options);\n\t}\n\n\tfindActiveAndOpenBusinessHoursByDay(day: string, options?: any): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t\tworkHours: {\n\t\t\t\t\t$elemMatch: {\n\t\t\t\t\t\t$or: [{ 'start.cron.dayOfWeek': day }, { 'finish.cron.dayOfWeek': day }],\n\t\t\t\t\t\topen: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tfindActiveBusinessHours(options: FindOptions<ILivechatBusinessHour> = {}): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tfindDefaultActiveAndOpenBusinessHoursByDay(day: string, options?: any): Promise<ILivechatBusinessHour[]> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\ttype: LivechatBusinessHourTypes.DEFAULT,\n\t\t\t\tactive: true,\n\t\t\t\tworkHours: {\n\t\t\t\t\t$elemMatch: {\n\t\t\t\t\t\t$or: [{ 'start.cron.dayOfWeek': day }, { 'finish.cron.dayOfWeek': day }],\n\t\t\t\t\t\topen: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t).toArray();\n\t}\n\n\tasync insertOne(data: Omit<ILivechatBusinessHour, '_id'>): Promise<any> {\n\t\treturn super.insertOne({\n\t\t\t...data,\n\t\t\tts: new Date(),\n\t\t});\n\t}\n\n\tfindHoursToScheduleJobs(): Promise<IWorkHoursCronJobsWrapper[]> {\n\t\treturn this.col\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$facet: {\n\t\t\t\t\t\tstart: [\n\t\t\t\t\t\t\t{ $match: { active: true } },\n\t\t\t\t\t\t\t{ $project: { _id: 0, workHours: 1 } },\n\t\t\t\t\t\t\t{ $unwind: { path: '$workHours' } },\n\t\t\t\t\t\t\t{ $match: { 'workHours.open': true } },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t\t\t_id: { day: '$workHours.start.cron.dayOfWeek' },\n\t\t\t\t\t\t\t\t\ttimes: { $addToSet: '$workHours.start.cron.time' },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\t\t\ttimes: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tfinish: [\n\t\t\t\t\t\t\t{ $match: { active: true } },\n\t\t\t\t\t\t\t{ $project: { _id: 0, workHours: 1 } },\n\t\t\t\t\t\t\t{ $unwind: { path: '$workHours' } },\n\t\t\t\t\t\t\t{ $match: { 'workHours.open': true } },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t\t\t_id: { day: '$workHours.finish.cron.dayOfWeek' },\n\t\t\t\t\t\t\t\t\ttimes: { $addToSet: '$workHours.finish.cron.time' },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\t\t\tday: '$_id.day',\n\t\t\t\t\t\t\t\t\ttimes: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray() as any;\n\t}\n\n\tasync findActiveBusinessHoursToOpen(\n\t\tday: string,\n\t\tstart: string,\n\t\ttype?: LivechatBusinessHourTypes,\n\t\toptions?: any,\n\t): Promise<ILivechatBusinessHour[]> {\n\t\tconst query: Record<string, any> = {\n\t\t\tactive: true,\n\t\t\tworkHours: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\t'start.cron.dayOfWeek': day,\n\t\t\t\t\t'start.cron.time': start,\n\t\t\t\t\t'open': true,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (type) {\n\t\t\tquery.type = type;\n\t\t}\n\t\treturn this.col.find(query, options).toArray();\n\t}\n\n\tasync findActiveBusinessHoursToClose(\n\t\tday: string,\n\t\tfinish: string,\n\t\ttype?: LivechatBusinessHourTypes,\n\t\toptions?: any,\n\t): Promise<ILivechatBusinessHour[]> {\n\t\tconst query: Record<string, any> = {\n\t\t\tactive: true,\n\t\t\tworkHours: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\t'finish.cron.dayOfWeek': day,\n\t\t\t\t\t'finish.cron.time': finish,\n\t\t\t\t\t'open': true,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (type) {\n\t\t\tquery.type = type;\n\t\t}\n\t\treturn this.col.find(query, options).toArray();\n\t}\n\n\tdisableBusinessHour(businessHourId: string): Promise<any> {\n\t\treturn this.updateOne({ _id: businessHourId }, { $set: { active: false } });\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"eb2a55109410dd2343677e256fee52b68d960243"}
