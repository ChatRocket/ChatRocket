{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/emoji-custom.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/emoji-custom.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/emoji-custom.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/emoji-custom.ts","sourceRoot":"","sources":["app/api/server/v1/emoji-custom.ts"],"names":[],"mappings":"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","sourcesContent":["import { Media } from '@rocket.chat/core-services';\nimport { EmojiCustom } from '@rocket.chat/models';\nimport { isEmojiCustomList } from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { insertOrUpdateEmoji } from '../../../emoji-custom/server/lib/insertOrUpdateEmoji';\nimport { uploadEmojiCustomWithBuffer } from '../../../emoji-custom/server/lib/uploadEmojiCustom';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { findEmojisCustom } from '../lib/emoji-custom';\nimport { getUploadFormData } from '../lib/getUploadFormData';\n\nfunction validateDateParam(paramName: string, paramValue: string | undefined): Date | undefined {\n\tif (!paramValue) {\n\t\treturn undefined;\n\t}\n\n\tconst date = new Date(paramValue);\n\tif (isNaN(date.getTime())) {\n\t\tthrow new Meteor.Error('error-roomId-param-invalid', `The \"${paramName}\" query parameter must be a valid date.`);\n\t}\n\n\treturn date;\n}\n\nAPI.v1.addRoute(\n\t'emoji-custom.list',\n\t{ authRequired: true, validateParams: isEmojiCustomList },\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = await this.parseJsonQuery();\n\t\t\tconst { updatedSince, _updatedAt, _id } = this.queryParams;\n\n\t\t\tconst updatedSinceDate = validateDateParam('updatedSince', updatedSince);\n\t\t\tconst _updatedAtDate = validateDateParam('_updatedAt', _updatedAt);\n\n\t\t\tif (updatedSinceDate) {\n\t\t\t\tconst [update, remove] = await Promise.all([\n\t\t\t\t\tEmojiCustom.find({\n\t\t\t\t\t\t...query,\n\t\t\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\t\t\t...(_updatedAtDate ? { _updatedAt: { $gt: _updatedAtDate } } : {}),\n\t\t\t\t\t\t_updatedAt: { $gt: updatedSinceDate },\n\t\t\t\t\t}).toArray(),\n\t\t\t\t\tEmojiCustom.trashFindDeletedAfter(updatedSinceDate).toArray(),\n\t\t\t\t]);\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\temojis: {\n\t\t\t\t\t\tupdate,\n\t\t\t\t\t\tremove,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\temojis: {\n\t\t\t\t\tupdate: await EmojiCustom.find({\n\t\t\t\t\t\t...query,\n\t\t\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\t\t\t...(_updatedAtDate ? { _updatedAt: { $gt: _updatedAtDate } } : {}),\n\t\t\t\t\t}).toArray(),\n\t\t\t\t\tremove: [],\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.all',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, query } = await this.parseJsonQuery();\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findEmojisCustom({\n\t\t\t\t\tquery,\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.create',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst emoji = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'emoji', sizeLimit: settings.get('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tconst { fields, fileBuffer, mimetype } = emoji;\n\n\t\t\tconst isUploadable = await Media.isImage(fileBuffer);\n\t\t\tif (!isUploadable) {\n\t\t\t\tthrow new Meteor.Error('emoji-is-not-image', \"Emoji file provided cannot be uploaded since it's not an image\");\n\t\t\t}\n\n\t\t\tconst [, extension] = mimetype.split('/');\n\t\t\tfields.extension = extension;\n\n\t\t\ttry {\n\t\t\t\tawait Meteor.callAsync('insertOrUpdateEmoji', {\n\t\t\t\t\t...fields,\n\t\t\t\t\tnewFile: true,\n\t\t\t\t\taliases: fields.aliases || '',\n\t\t\t\t});\n\t\t\t\tawait Meteor.callAsync('uploadEmojiCustom', fileBuffer, mimetype, {\n\t\t\t\t\t...fields,\n\t\t\t\t\tnewFile: true,\n\t\t\t\t\taliases: fields.aliases || '',\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tSystemLogger.error(e);\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.update',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst emoji = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'emoji', sizeLimit: settings.get('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tconst { fields, fileBuffer, mimetype } = emoji;\n\n\t\t\tif (!fields._id) {\n\t\t\t\tthrow new Meteor.Error('The required \"_id\" query param is missing.');\n\t\t\t}\n\n\t\t\tconst emojiToUpdate = await EmojiCustom.findOneById(fields._id);\n\t\t\tif (!emojiToUpdate) {\n\t\t\t\tthrow new Meteor.Error('Emoji not found.');\n\t\t\t}\n\n\t\t\tfields.previousName = emojiToUpdate.name;\n\t\t\tfields.previousExtension = emojiToUpdate.extension;\n\t\t\tfields.aliases = fields.aliases || '';\n\t\t\tconst newFile = Boolean(emoji && fileBuffer.length);\n\n\t\t\tif (fields.newFile) {\n\t\t\t\tconst isUploadable = await Media.isImage(fileBuffer);\n\t\t\t\tif (!isUploadable) {\n\t\t\t\t\tthrow new Meteor.Error('emoji-is-not-image', \"Emoji file provided cannot be uploaded since it's not an image\");\n\t\t\t\t}\n\n\t\t\t\tconst [, extension] = mimetype.split('/');\n\t\t\t\tfields.extension = extension;\n\t\t\t} else {\n\t\t\t\tfields.extension = emojiToUpdate.extension;\n\t\t\t}\n\n\t\t\tconst emojiData = {\n\t\t\t\tname: fields.name,\n\t\t\t\t_id: fields._id,\n\t\t\t\taliases: fields.aliases,\n\t\t\t\textension: fields.extension,\n\t\t\t\tpreviousName: fields.previousName,\n\t\t\t\tpreviousExtension: fields.previousExtension,\n\t\t\t\tnewFile,\n\t\t\t};\n\n\t\t\tawait insertOrUpdateEmoji(this.userId, emojiData);\n\t\t\tif (fields.newFile) {\n\t\t\t\tawait uploadEmojiCustomWithBuffer(this.userId, fileBuffer, mimetype, emojiData);\n\t\t\t}\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.delete',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { emojiId } = this.bodyParams;\n\t\t\tif (!emojiId) {\n\t\t\t\treturn API.v1.failure('The \"emojiId\" params is required!');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('deleteEmojiCustom', emojiId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/emoji-custom.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/emoji-custom.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/emoji-custom.ts","sourceRoot":"","sources":["app/api/server/v1/emoji-custom.ts"],"names":[],"mappings":"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","sourcesContent":["import { Media } from '@rocket.chat/core-services';\nimport { EmojiCustom } from '@rocket.chat/models';\nimport { isEmojiCustomList } from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { insertOrUpdateEmoji } from '../../../emoji-custom/server/lib/insertOrUpdateEmoji';\nimport { uploadEmojiCustomWithBuffer } from '../../../emoji-custom/server/lib/uploadEmojiCustom';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { findEmojisCustom } from '../lib/emoji-custom';\nimport { getUploadFormData } from '../lib/getUploadFormData';\n\nfunction validateDateParam(paramName: string, paramValue: string | undefined): Date | undefined {\n\tif (!paramValue) {\n\t\treturn undefined;\n\t}\n\n\tconst date = new Date(paramValue);\n\tif (isNaN(date.getTime())) {\n\t\tthrow new Meteor.Error('error-roomId-param-invalid', `The \"${paramName}\" query parameter must be a valid date.`);\n\t}\n\n\treturn date;\n}\n\nAPI.v1.addRoute(\n\t'emoji-custom.list',\n\t{ authRequired: true, validateParams: isEmojiCustomList },\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = await this.parseJsonQuery();\n\t\t\tconst { updatedSince, _updatedAt, _id } = this.queryParams;\n\n\t\t\tconst updatedSinceDate = validateDateParam('updatedSince', updatedSince);\n\t\t\tconst _updatedAtDate = validateDateParam('_updatedAt', _updatedAt);\n\n\t\t\tif (updatedSinceDate) {\n\t\t\t\tconst [update, remove] = await Promise.all([\n\t\t\t\t\tEmojiCustom.find({\n\t\t\t\t\t\t...query,\n\t\t\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\t\t\t...(_updatedAtDate ? { _updatedAt: { $gt: _updatedAtDate } } : {}),\n\t\t\t\t\t\t_updatedAt: { $gt: updatedSinceDate },\n\t\t\t\t\t}).toArray(),\n\t\t\t\t\tEmojiCustom.trashFindDeletedAfter(updatedSinceDate).toArray(),\n\t\t\t\t]);\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\temojis: {\n\t\t\t\t\t\tupdate,\n\t\t\t\t\t\tremove,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\temojis: {\n\t\t\t\t\tupdate: await EmojiCustom.find({\n\t\t\t\t\t\t...query,\n\t\t\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\t\t\t...(_updatedAtDate ? { _updatedAt: { $gt: _updatedAtDate } } : {}),\n\t\t\t\t\t}).toArray(),\n\t\t\t\t\tremove: [],\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.all',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, query } = await this.parseJsonQuery();\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findEmojisCustom({\n\t\t\t\t\tquery,\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.create',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst emoji = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'emoji', sizeLimit: settings.get('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tconst { fields, fileBuffer, mimetype } = emoji;\n\n\t\t\tconst isUploadable = await Media.isImage(fileBuffer);\n\t\t\tif (!isUploadable) {\n\t\t\t\tthrow new Meteor.Error('emoji-is-not-image', \"Emoji file provided cannot be uploaded since it's not an image\");\n\t\t\t}\n\n\t\t\tconst [, extension] = mimetype.split('/');\n\t\t\tfields.extension = extension;\n\n\t\t\ttry {\n\t\t\t\tawait Meteor.callAsync('insertOrUpdateEmoji', {\n\t\t\t\t\t...fields,\n\t\t\t\t\tnewFile: true,\n\t\t\t\t\taliases: fields.aliases || '',\n\t\t\t\t});\n\t\t\t\tawait Meteor.callAsync('uploadEmojiCustom', fileBuffer, mimetype, {\n\t\t\t\t\t...fields,\n\t\t\t\t\tnewFile: true,\n\t\t\t\t\taliases: fields.aliases || '',\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tSystemLogger.error(e);\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.update',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst emoji = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'emoji', sizeLimit: settings.get('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tconst { fields, fileBuffer, mimetype } = emoji;\n\n\t\t\tif (!fields._id) {\n\t\t\t\tthrow new Meteor.Error('The required \"_id\" query param is missing.');\n\t\t\t}\n\n\t\t\tconst emojiToUpdate = await EmojiCustom.findOneById(fields._id);\n\t\t\tif (!emojiToUpdate) {\n\t\t\t\tthrow new Meteor.Error('Emoji not found.');\n\t\t\t}\n\n\t\t\tfields.previousName = emojiToUpdate.name;\n\t\t\tfields.previousExtension = emojiToUpdate.extension;\n\t\t\tfields.aliases = fields.aliases || '';\n\t\t\tconst newFile = Boolean(emoji && fileBuffer.length);\n\n\t\t\tif (fields.newFile) {\n\t\t\t\tconst isUploadable = await Media.isImage(fileBuffer);\n\t\t\t\tif (!isUploadable) {\n\t\t\t\t\tthrow new Meteor.Error('emoji-is-not-image', \"Emoji file provided cannot be uploaded since it's not an image\");\n\t\t\t\t}\n\n\t\t\t\tconst [, extension] = mimetype.split('/');\n\t\t\t\tfields.extension = extension;\n\t\t\t} else {\n\t\t\t\tfields.extension = emojiToUpdate.extension;\n\t\t\t}\n\n\t\t\tconst emojiData = {\n\t\t\t\tname: fields.name,\n\t\t\t\t_id: fields._id,\n\t\t\t\taliases: fields.aliases,\n\t\t\t\textension: fields.extension,\n\t\t\t\tpreviousName: fields.previousName,\n\t\t\t\tpreviousExtension: fields.previousExtension,\n\t\t\t\tnewFile,\n\t\t\t};\n\n\t\t\tawait insertOrUpdateEmoji(this.userId, emojiData);\n\t\t\tif (fields.newFile) {\n\t\t\t\tawait uploadEmojiCustomWithBuffer(this.userId, fileBuffer, mimetype, emojiData);\n\t\t\t}\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.delete',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { emojiId } = this.bodyParams;\n\t\t\tif (!emojiId) {\n\t\t\t\treturn API.v1.failure('The \"emojiId\" params is required!');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('deleteEmojiCustom', emojiId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let Media;\n    module.link(\"@rocket.chat/core-services\", {\n      Media(v) {\n        Media = v;\n      }\n    }, 0);\n    let EmojiCustom;\n    module.link(\"@rocket.chat/models\", {\n      EmojiCustom(v) {\n        EmojiCustom = v;\n      }\n    }, 1);\n    let isEmojiCustomList;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isEmojiCustomList(v) {\n        isEmojiCustomList = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let SystemLogger;\n    module.link(\"../../../../server/lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 4);\n    let insertOrUpdateEmoji;\n    module.link(\"../../../emoji-custom/server/lib/insertOrUpdateEmoji\", {\n      insertOrUpdateEmoji(v) {\n        insertOrUpdateEmoji = v;\n      }\n    }, 5);\n    let uploadEmojiCustomWithBuffer;\n    module.link(\"../../../emoji-custom/server/lib/uploadEmojiCustom\", {\n      uploadEmojiCustomWithBuffer(v) {\n        uploadEmojiCustomWithBuffer = v;\n      }\n    }, 6);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 7);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 8);\n    let getPaginationItems;\n    module.link(\"../helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 9);\n    let findEmojisCustom;\n    module.link(\"../lib/emoji-custom\", {\n      findEmojisCustom(v) {\n        findEmojisCustom = v;\n      }\n    }, 10);\n    let getUploadFormData;\n    module.link(\"../lib/getUploadFormData\", {\n      getUploadFormData(v) {\n        getUploadFormData = v;\n      }\n    }, 11);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    function validateDateParam(paramName, paramValue) {\n      if (!paramValue) {\n        return undefined;\n      }\n      const date = new Date(paramValue);\n      if (isNaN(date.getTime())) {\n        throw new Meteor.Error('error-roomId-param-invalid', \"The \\\"\".concat(paramName, \"\\\" query parameter must be a valid date.\"));\n      }\n      return date;\n    }\n    API.v1.addRoute('emoji-custom.list', {\n      authRequired: true,\n      validateParams: isEmojiCustomList\n    }, {\n      async get() {\n        const {\n          query\n        } = await this.parseJsonQuery();\n        const {\n          updatedSince,\n          _updatedAt,\n          _id\n        } = this.queryParams;\n        const updatedSinceDate = validateDateParam('updatedSince', updatedSince);\n        const _updatedAtDate = validateDateParam('_updatedAt', _updatedAt);\n        if (updatedSinceDate) {\n          const [update, remove] = await Promise.all([EmojiCustom.find(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, query), _id ? {\n            _id\n          } : {}), _updatedAtDate ? {\n            _updatedAt: {\n              $gt: _updatedAtDate\n            }\n          } : {}), {}, {\n            _updatedAt: {\n              $gt: updatedSinceDate\n            }\n          })).toArray(), EmojiCustom.trashFindDeletedAfter(updatedSinceDate).toArray()]);\n          return API.v1.success({\n            emojis: {\n              update,\n              remove\n            }\n          });\n        }\n        return API.v1.success({\n          emojis: {\n            update: await EmojiCustom.find(_objectSpread(_objectSpread(_objectSpread({}, query), _id ? {\n              _id\n            } : {}), _updatedAtDate ? {\n              _updatedAt: {\n                $gt: _updatedAtDate\n              }\n            } : {})).toArray(),\n            remove: []\n          }\n        });\n      }\n    });\n    API.v1.addRoute('emoji-custom.all', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          query\n        } = await this.parseJsonQuery();\n        return API.v1.success(await findEmojisCustom({\n          query,\n          pagination: {\n            offset,\n            count,\n            sort\n          }\n        }));\n      }\n    });\n    API.v1.addRoute('emoji-custom.create', {\n      authRequired: true\n    }, {\n      async post() {\n        const emoji = await getUploadFormData({\n          request: this.request\n        }, {\n          field: 'emoji',\n          sizeLimit: settings.get('FileUpload_MaxFileSize')\n        });\n        const {\n          fields,\n          fileBuffer,\n          mimetype\n        } = emoji;\n        const isUploadable = await Media.isImage(fileBuffer);\n        if (!isUploadable) {\n          throw new Meteor.Error('emoji-is-not-image', \"Emoji file provided cannot be uploaded since it's not an image\");\n        }\n        const [, extension] = mimetype.split('/');\n        fields.extension = extension;\n        try {\n          await Meteor.callAsync('insertOrUpdateEmoji', _objectSpread(_objectSpread({}, fields), {}, {\n            newFile: true,\n            aliases: fields.aliases || ''\n          }));\n          await Meteor.callAsync('uploadEmojiCustom', fileBuffer, mimetype, _objectSpread(_objectSpread({}, fields), {}, {\n            newFile: true,\n            aliases: fields.aliases || ''\n          }));\n        } catch (e) {\n          SystemLogger.error(e);\n          return API.v1.failure();\n        }\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('emoji-custom.update', {\n      authRequired: true\n    }, {\n      async post() {\n        const emoji = await getUploadFormData({\n          request: this.request\n        }, {\n          field: 'emoji',\n          sizeLimit: settings.get('FileUpload_MaxFileSize')\n        });\n        const {\n          fields,\n          fileBuffer,\n          mimetype\n        } = emoji;\n        if (!fields._id) {\n          throw new Meteor.Error('The required \"_id\" query param is missing.');\n        }\n        const emojiToUpdate = await EmojiCustom.findOneById(fields._id);\n        if (!emojiToUpdate) {\n          throw new Meteor.Error('Emoji not found.');\n        }\n        fields.previousName = emojiToUpdate.name;\n        fields.previousExtension = emojiToUpdate.extension;\n        fields.aliases = fields.aliases || '';\n        const newFile = Boolean(emoji && fileBuffer.length);\n        if (fields.newFile) {\n          const isUploadable = await Media.isImage(fileBuffer);\n          if (!isUploadable) {\n            throw new Meteor.Error('emoji-is-not-image', \"Emoji file provided cannot be uploaded since it's not an image\");\n          }\n          const [, extension] = mimetype.split('/');\n          fields.extension = extension;\n        } else {\n          fields.extension = emojiToUpdate.extension;\n        }\n        const emojiData = {\n          name: fields.name,\n          _id: fields._id,\n          aliases: fields.aliases,\n          extension: fields.extension,\n          previousName: fields.previousName,\n          previousExtension: fields.previousExtension,\n          newFile\n        };\n        await insertOrUpdateEmoji(this.userId, emojiData);\n        if (fields.newFile) {\n          await uploadEmojiCustomWithBuffer(this.userId, fileBuffer, mimetype, emojiData);\n        }\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('emoji-custom.delete', {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          emojiId\n        } = this.bodyParams;\n        if (!emojiId) {\n          return API.v1.failure('The \"emojiId\" params is required!');\n        }\n        await Meteor.callAsync('deleteEmojiCustom', emojiId);\n        return API.v1.success();\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","Media","EmojiCustom","isEmojiCustomList","Meteor","SystemLogger","insertOrUpdateEmoji","uploadEmojiCustomWithBuffer","settings","API","getPaginationItems","findEmojisCustom","getUploadFormData","__reifyWaitForDeps__","validateDateParam","paramName","paramValue","undefined","date","Date","isNaN","getTime","Error","concat","v1","addRoute","authRequired","validateParams","get","query","parseJsonQuery","updatedSince","_updatedAt","_id","queryParams","updatedSinceDate","_updatedAtDate","update","remove","Promise","all","find","$gt","toArray","trashFindDeletedAfter","success","emojis","offset","count","sort","pagination","post","emoji","request","field","sizeLimit","fields","fileBuffer","mimetype","isUploadable","isImage","extension","split","callAsync","newFile","aliases","e","error","failure","emojiToUpdate","findOneById","previousName","name","previousExtension","Boolean","length","emojiData","userId","emojiId","bodyParams","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/emoji-custom.ts"],"sourcesContent":["import { Media } from '@rocket.chat/core-services';\nimport { EmojiCustom } from '@rocket.chat/models';\nimport { isEmojiCustomList } from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { insertOrUpdateEmoji } from '../../../emoji-custom/server/lib/insertOrUpdateEmoji';\nimport { uploadEmojiCustomWithBuffer } from '../../../emoji-custom/server/lib/uploadEmojiCustom';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { findEmojisCustom } from '../lib/emoji-custom';\nimport { getUploadFormData } from '../lib/getUploadFormData';\n\nfunction validateDateParam(paramName: string, paramValue: string | undefined): Date | undefined {\n\tif (!paramValue) {\n\t\treturn undefined;\n\t}\n\n\tconst date = new Date(paramValue);\n\tif (isNaN(date.getTime())) {\n\t\tthrow new Meteor.Error('error-roomId-param-invalid', `The \"${paramName}\" query parameter must be a valid date.`);\n\t}\n\n\treturn date;\n}\n\nAPI.v1.addRoute(\n\t'emoji-custom.list',\n\t{ authRequired: true, validateParams: isEmojiCustomList },\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = await this.parseJsonQuery();\n\t\t\tconst { updatedSince, _updatedAt, _id } = this.queryParams;\n\n\t\t\tconst updatedSinceDate = validateDateParam('updatedSince', updatedSince);\n\t\t\tconst _updatedAtDate = validateDateParam('_updatedAt', _updatedAt);\n\n\t\t\tif (updatedSinceDate) {\n\t\t\t\tconst [update, remove] = await Promise.all([\n\t\t\t\t\tEmojiCustom.find({\n\t\t\t\t\t\t...query,\n\t\t\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\t\t\t...(_updatedAtDate ? { _updatedAt: { $gt: _updatedAtDate } } : {}),\n\t\t\t\t\t\t_updatedAt: { $gt: updatedSinceDate },\n\t\t\t\t\t}).toArray(),\n\t\t\t\t\tEmojiCustom.trashFindDeletedAfter(updatedSinceDate).toArray(),\n\t\t\t\t]);\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\temojis: {\n\t\t\t\t\t\tupdate,\n\t\t\t\t\t\tremove,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\temojis: {\n\t\t\t\t\tupdate: await EmojiCustom.find({\n\t\t\t\t\t\t...query,\n\t\t\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\t\t\t...(_updatedAtDate ? { _updatedAt: { $gt: _updatedAtDate } } : {}),\n\t\t\t\t\t}).toArray(),\n\t\t\t\t\tremove: [],\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.all',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, query } = await this.parseJsonQuery();\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findEmojisCustom({\n\t\t\t\t\tquery,\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.create',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst emoji = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'emoji', sizeLimit: settings.get('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tconst { fields, fileBuffer, mimetype } = emoji;\n\n\t\t\tconst isUploadable = await Media.isImage(fileBuffer);\n\t\t\tif (!isUploadable) {\n\t\t\t\tthrow new Meteor.Error('emoji-is-not-image', \"Emoji file provided cannot be uploaded since it's not an image\");\n\t\t\t}\n\n\t\t\tconst [, extension] = mimetype.split('/');\n\t\t\tfields.extension = extension;\n\n\t\t\ttry {\n\t\t\t\tawait Meteor.callAsync('insertOrUpdateEmoji', {\n\t\t\t\t\t...fields,\n\t\t\t\t\tnewFile: true,\n\t\t\t\t\taliases: fields.aliases || '',\n\t\t\t\t});\n\t\t\t\tawait Meteor.callAsync('uploadEmojiCustom', fileBuffer, mimetype, {\n\t\t\t\t\t...fields,\n\t\t\t\t\tnewFile: true,\n\t\t\t\t\taliases: fields.aliases || '',\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tSystemLogger.error(e);\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.update',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst emoji = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'emoji', sizeLimit: settings.get('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tconst { fields, fileBuffer, mimetype } = emoji;\n\n\t\t\tif (!fields._id) {\n\t\t\t\tthrow new Meteor.Error('The required \"_id\" query param is missing.');\n\t\t\t}\n\n\t\t\tconst emojiToUpdate = await EmojiCustom.findOneById(fields._id);\n\t\t\tif (!emojiToUpdate) {\n\t\t\t\tthrow new Meteor.Error('Emoji not found.');\n\t\t\t}\n\n\t\t\tfields.previousName = emojiToUpdate.name;\n\t\t\tfields.previousExtension = emojiToUpdate.extension;\n\t\t\tfields.aliases = fields.aliases || '';\n\t\t\tconst newFile = Boolean(emoji && fileBuffer.length);\n\n\t\t\tif (fields.newFile) {\n\t\t\t\tconst isUploadable = await Media.isImage(fileBuffer);\n\t\t\t\tif (!isUploadable) {\n\t\t\t\t\tthrow new Meteor.Error('emoji-is-not-image', \"Emoji file provided cannot be uploaded since it's not an image\");\n\t\t\t\t}\n\n\t\t\t\tconst [, extension] = mimetype.split('/');\n\t\t\t\tfields.extension = extension;\n\t\t\t} else {\n\t\t\t\tfields.extension = emojiToUpdate.extension;\n\t\t\t}\n\n\t\t\tconst emojiData = {\n\t\t\t\tname: fields.name,\n\t\t\t\t_id: fields._id,\n\t\t\t\taliases: fields.aliases,\n\t\t\t\textension: fields.extension,\n\t\t\t\tpreviousName: fields.previousName,\n\t\t\t\tpreviousExtension: fields.previousExtension,\n\t\t\t\tnewFile,\n\t\t\t};\n\n\t\t\tawait insertOrUpdateEmoji(this.userId, emojiData);\n\t\t\tif (fields.newFile) {\n\t\t\t\tawait uploadEmojiCustomWithBuffer(this.userId, fileBuffer, mimetype, emojiData);\n\t\t\t}\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'emoji-custom.delete',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { emojiId } = this.bodyParams;\n\t\t\tif (!emojiId) {\n\t\t\t\treturn API.v1.failure('The \"emojiId\" params is required!');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('deleteEmojiCustom', emojiId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"5ec8cbf1c16b82593fba90a0bac80544845425ed"}
