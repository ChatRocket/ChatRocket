{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/loadMessageHistory.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/loadMessageHistory.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/loadMessageHistory.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/loadMessageHistory.ts","sourceRoot":"","sources":["app/lib/server/functions/loadMessageHistory.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAGtD,OAAO,EAAE,QAAQ,EAAE,MAAM,iCAAiC,CAAC;AAC3D,OAAO,EAAE,wBAAwB,EAAE,MAAM,oDAAoD,CAAC;AAC9F,OAAO,EAAE,uBAAuB,EAAE,MAAM,gCAAgC,CAAC;AAEzE,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,EACxC,MAAM,EACN,GAAG,EACH,GAAG,EACH,KAAK,GAAG,EAAE,EACV,EAAE,EACF,kBAAkB,GAAG,IAAI,EACzB,MAAM,GAAG,CAAC,GAUV;IACA,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAEzE,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAuB,sBAAsB,CAAC,CAAC;IAExF,MAAM,kBAAkB,GAAG,uBAAuB,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;IAE/E,MAAM,OAAO,GAA0B;QACtC,IAAI,EAAE;YACL,EAAE,EAAE,CAAC,CAAC;SACN;QACD,KAAK;QACL,IAAI,EAAE,MAAM;KACZ,CAAC;IAEF,MAAM,OAAO,GAAG,GAAG;QAClB,CAAC,CAAC,MAAM,QAAQ,CAAC,oDAAoD,CACnE,GAAG,EACH,GAAG,EACH,kBAAkB,EAClB,OAAO,EACP,kBAAkB,CACjB,CAAC,OAAO,EAAE;QACb,CAAC,CAAC,MAAM,QAAQ,CAAC,qCAAqC,CAAC,GAAG,EAAE,kBAAkB,EAAE,OAAO,EAAE,kBAAkB,CAAC,CAAC,OAAO,EAAE,CAAC;IACxH,MAAM,QAAQ,GAAG,MAAM,wBAAwB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACjE,IAAI,eAAe,GAAG,CAAC,CAAC;IACxB,IAAI,WAAW,CAAC;IAEhB,IAAI,EAAE,EAAE,CAAC;QACR,MAAM,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEnD,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC;QAE9B,IAAI,YAAY,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC;YAC1D,MAAM,cAAc,GAAG,QAAQ,CAAC,sDAAsD,CACrF,GAAG,EACH,QAAQ,EACR,YAAY,CAAC,EAAE,EACf,kBAAkB,EAClB;gBACC,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE;oBACL,EAAE,EAAE,CAAC;iBACL;aACD,EACD,kBAAkB,CAClB,CAAC;YAEF,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,uDAAuD,CACzF,GAAG,EACH,QAAQ,EACR,YAAY,CAAC,EAAE,EACf,kBAAkB,EAClB,kBAAkB,CAClB,CAAC;YAEF,WAAW,GAAG,CAAC,MAAM,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,eAAe,GAAG,WAAW,CAAC;QAC/B,CAAC;IACF,CAAC;IAED,OAAO;QACN,QAAQ;QACR,WAAW;QACX,eAAe;KACf,CAAC;AACH,CAAC","sourcesContent":["import type { IMessage, MessageTypesValues } from '@rocket.chat/core-typings';\nimport { Messages, Rooms } from '@rocket.chat/models';\nimport type { FindOptions } from 'mongodb';\n\nimport { settings } from '../../../settings/server/cached';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { getHiddenSystemMessages } from '../lib/getHiddenSystemMessages';\n\nexport async function loadMessageHistory({\n\tuserId,\n\trid,\n\tend,\n\tlimit = 20,\n\tls,\n\tshowThreadMessages = true,\n\toffset = 0,\n}: {\n\t// userId is undefined if user is reading anonymously\n\tuserId?: string;\n\trid: string;\n\tend: Date | undefined;\n\tlimit?: number;\n\tls?: string | Date;\n\tshowThreadMessages?: boolean;\n\toffset?: number;\n}) {\n\tconst room = await Rooms.findOneById(rid, { projection: { sysMes: 1 } });\n\n\tif (!room) {\n\t\tthrow new Error('error-invalid-room');\n\t}\n\n\tconst hiddenSystemMessages = settings.get<MessageTypesValues[]>('Hide_System_Messages');\n\n\tconst hiddenMessageTypes = getHiddenSystemMessages(room, hiddenSystemMessages);\n\n\tconst options: FindOptions<IMessage> = {\n\t\tsort: {\n\t\t\tts: -1,\n\t\t},\n\t\tlimit,\n\t\tskip: offset,\n\t};\n\n\tconst records = end\n\t\t? await Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\t\t\trid,\n\t\t\t\tend,\n\t\t\t\thiddenMessageTypes,\n\t\t\t\toptions,\n\t\t\t\tshowThreadMessages,\n\t\t  ).toArray()\n\t\t: await Messages.findVisibleByRoomIdNotContainingTypes(rid, hiddenMessageTypes, options, showThreadMessages).toArray();\n\tconst messages = await normalizeMessagesForUser(records, userId);\n\tlet unreadNotLoaded = 0;\n\tlet firstUnread;\n\n\tif (ls) {\n\t\tconst firstMessage = messages[messages.length - 1];\n\n\t\tconst lastSeen = new Date(ls);\n\n\t\tif (firstMessage && new Date(firstMessage.ts) > lastSeen) {\n\t\t\tconst unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\trid,\n\t\t\t\tlastSeen,\n\t\t\t\tfirstMessage.ts,\n\t\t\t\thiddenMessageTypes,\n\t\t\t\t{\n\t\t\t\t\tlimit: 1,\n\t\t\t\t\tsort: {\n\t\t\t\t\t\tts: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tshowThreadMessages,\n\t\t\t);\n\n\t\t\tconst totalCursor = await Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\trid,\n\t\t\t\tlastSeen,\n\t\t\t\tfirstMessage.ts,\n\t\t\t\thiddenMessageTypes,\n\t\t\t\tshowThreadMessages,\n\t\t\t);\n\n\t\t\tfirstUnread = (await unreadMessages.toArray())[0];\n\t\t\tunreadNotLoaded = totalCursor;\n\t\t}\n\t}\n\n\treturn {\n\t\tmessages,\n\t\tfirstUnread,\n\t\tunreadNotLoaded,\n\t};\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/loadMessageHistory.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/loadMessageHistory.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/loadMessageHistory.ts","sourceRoot":"","sources":["app/lib/server/functions/loadMessageHistory.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAGtD,OAAO,EAAE,QAAQ,EAAE,MAAM,iCAAiC,CAAC;AAC3D,OAAO,EAAE,wBAAwB,EAAE,MAAM,oDAAoD,CAAC;AAC9F,OAAO,EAAE,uBAAuB,EAAE,MAAM,gCAAgC,CAAC;AAEzE,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,EACxC,MAAM,EACN,GAAG,EACH,GAAG,EACH,KAAK,GAAG,EAAE,EACV,EAAE,EACF,kBAAkB,GAAG,IAAI,EACzB,MAAM,GAAG,CAAC,GAUV;IACA,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAEzE,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAuB,sBAAsB,CAAC,CAAC;IAExF,MAAM,kBAAkB,GAAG,uBAAuB,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;IAE/E,MAAM,OAAO,GAA0B;QACtC,IAAI,EAAE;YACL,EAAE,EAAE,CAAC,CAAC;SACN;QACD,KAAK;QACL,IAAI,EAAE,MAAM;KACZ,CAAC;IAEF,MAAM,OAAO,GAAG,GAAG;QAClB,CAAC,CAAC,MAAM,QAAQ,CAAC,oDAAoD,CACnE,GAAG,EACH,GAAG,EACH,kBAAkB,EAClB,OAAO,EACP,kBAAkB,CACjB,CAAC,OAAO,EAAE;QACb,CAAC,CAAC,MAAM,QAAQ,CAAC,qCAAqC,CAAC,GAAG,EAAE,kBAAkB,EAAE,OAAO,EAAE,kBAAkB,CAAC,CAAC,OAAO,EAAE,CAAC;IACxH,MAAM,QAAQ,GAAG,MAAM,wBAAwB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACjE,IAAI,eAAe,GAAG,CAAC,CAAC;IACxB,IAAI,WAAW,CAAC;IAEhB,IAAI,EAAE,EAAE,CAAC;QACR,MAAM,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEnD,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC;QAE9B,IAAI,YAAY,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC;YAC1D,MAAM,cAAc,GAAG,QAAQ,CAAC,sDAAsD,CACrF,GAAG,EACH,QAAQ,EACR,YAAY,CAAC,EAAE,EACf,kBAAkB,EAClB;gBACC,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE;oBACL,EAAE,EAAE,CAAC;iBACL;aACD,EACD,kBAAkB,CAClB,CAAC;YAEF,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,uDAAuD,CACzF,GAAG,EACH,QAAQ,EACR,YAAY,CAAC,EAAE,EACf,kBAAkB,EAClB,kBAAkB,CAClB,CAAC;YAEF,WAAW,GAAG,CAAC,MAAM,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,eAAe,GAAG,WAAW,CAAC;QAC/B,CAAC;IACF,CAAC;IAED,OAAO;QACN,QAAQ;QACR,WAAW;QACX,eAAe;KACf,CAAC;AACH,CAAC","sourcesContent":["import type { IMessage, MessageTypesValues } from '@rocket.chat/core-typings';\nimport { Messages, Rooms } from '@rocket.chat/models';\nimport type { FindOptions } from 'mongodb';\n\nimport { settings } from '../../../settings/server/cached';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { getHiddenSystemMessages } from '../lib/getHiddenSystemMessages';\n\nexport async function loadMessageHistory({\n\tuserId,\n\trid,\n\tend,\n\tlimit = 20,\n\tls,\n\tshowThreadMessages = true,\n\toffset = 0,\n}: {\n\t// userId is undefined if user is reading anonymously\n\tuserId?: string;\n\trid: string;\n\tend: Date | undefined;\n\tlimit?: number;\n\tls?: string | Date;\n\tshowThreadMessages?: boolean;\n\toffset?: number;\n}) {\n\tconst room = await Rooms.findOneById(rid, { projection: { sysMes: 1 } });\n\n\tif (!room) {\n\t\tthrow new Error('error-invalid-room');\n\t}\n\n\tconst hiddenSystemMessages = settings.get<MessageTypesValues[]>('Hide_System_Messages');\n\n\tconst hiddenMessageTypes = getHiddenSystemMessages(room, hiddenSystemMessages);\n\n\tconst options: FindOptions<IMessage> = {\n\t\tsort: {\n\t\t\tts: -1,\n\t\t},\n\t\tlimit,\n\t\tskip: offset,\n\t};\n\n\tconst records = end\n\t\t? await Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\t\t\trid,\n\t\t\t\tend,\n\t\t\t\thiddenMessageTypes,\n\t\t\t\toptions,\n\t\t\t\tshowThreadMessages,\n\t\t  ).toArray()\n\t\t: await Messages.findVisibleByRoomIdNotContainingTypes(rid, hiddenMessageTypes, options, showThreadMessages).toArray();\n\tconst messages = await normalizeMessagesForUser(records, userId);\n\tlet unreadNotLoaded = 0;\n\tlet firstUnread;\n\n\tif (ls) {\n\t\tconst firstMessage = messages[messages.length - 1];\n\n\t\tconst lastSeen = new Date(ls);\n\n\t\tif (firstMessage && new Date(firstMessage.ts) > lastSeen) {\n\t\t\tconst unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\trid,\n\t\t\t\tlastSeen,\n\t\t\t\tfirstMessage.ts,\n\t\t\t\thiddenMessageTypes,\n\t\t\t\t{\n\t\t\t\t\tlimit: 1,\n\t\t\t\t\tsort: {\n\t\t\t\t\t\tts: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tshowThreadMessages,\n\t\t\t);\n\n\t\t\tconst totalCursor = await Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\trid,\n\t\t\t\tlastSeen,\n\t\t\t\tfirstMessage.ts,\n\t\t\t\thiddenMessageTypes,\n\t\t\t\tshowThreadMessages,\n\t\t\t);\n\n\t\t\tfirstUnread = (await unreadMessages.toArray())[0];\n\t\t\tunreadNotLoaded = totalCursor;\n\t\t}\n\t}\n\n\treturn {\n\t\tmessages,\n\t\tfirstUnread,\n\t\tunreadNotLoaded,\n\t};\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      loadMessageHistory: () => loadMessageHistory\n    });\n    let Messages, Rooms;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      }\n    }, 0);\n    let settings;\n    module.link(\"../../../settings/server/cached\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 1);\n    let normalizeMessagesForUser;\n    module.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n      normalizeMessagesForUser(v) {\n        normalizeMessagesForUser = v;\n      }\n    }, 2);\n    let getHiddenSystemMessages;\n    module.link(\"../lib/getHiddenSystemMessages\", {\n      getHiddenSystemMessages(v) {\n        getHiddenSystemMessages = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function loadMessageHistory(_ref) {\n      let {\n        userId,\n        rid,\n        end,\n        limit = 20,\n        ls,\n        showThreadMessages = true,\n        offset = 0\n      } = _ref;\n      const room = await Rooms.findOneById(rid, {\n        projection: {\n          sysMes: 1\n        }\n      });\n      if (!room) {\n        throw new Error('error-invalid-room');\n      }\n      const hiddenSystemMessages = settings.get('Hide_System_Messages');\n      const hiddenMessageTypes = getHiddenSystemMessages(room, hiddenSystemMessages);\n      const options = {\n        sort: {\n          ts: -1\n        },\n        limit,\n        skip: offset\n      };\n      const records = end ? await Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(rid, end, hiddenMessageTypes, options, showThreadMessages).toArray() : await Messages.findVisibleByRoomIdNotContainingTypes(rid, hiddenMessageTypes, options, showThreadMessages).toArray();\n      const messages = await normalizeMessagesForUser(records, userId);\n      let unreadNotLoaded = 0;\n      let firstUnread;\n      if (ls) {\n        const firstMessage = messages[messages.length - 1];\n        const lastSeen = new Date(ls);\n        if (firstMessage && new Date(firstMessage.ts) > lastSeen) {\n          const unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(rid, lastSeen, firstMessage.ts, hiddenMessageTypes, {\n            limit: 1,\n            sort: {\n              ts: 1\n            }\n          }, showThreadMessages);\n          const totalCursor = await Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(rid, lastSeen, firstMessage.ts, hiddenMessageTypes, showThreadMessages);\n          firstUnread = (await unreadMessages.toArray())[0];\n          unreadNotLoaded = totalCursor;\n        }\n      }\n      return {\n        messages,\n        firstUnread,\n        unreadNotLoaded\n      };\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","loadMessageHistory","Messages","Rooms","link","v","settings","normalizeMessagesForUser","getHiddenSystemMessages","__reifyWaitForDeps__","_ref","userId","rid","end","limit","ls","showThreadMessages","offset","room","findOneById","projection","sysMes","Error","hiddenSystemMessages","get","hiddenMessageTypes","options","sort","ts","skip","records","findVisibleByRoomIdBeforeTimestampNotContainingTypes","toArray","findVisibleByRoomIdNotContainingTypes","messages","unreadNotLoaded","firstUnread","firstMessage","length","lastSeen","Date","unreadMessages","findVisibleByRoomIdBetweenTimestampsNotContainingTypes","totalCursor","countVisibleByRoomIdBetweenTimestampsNotContainingTypes","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/functions/loadMessageHistory.ts"],"sourcesContent":["import type { IMessage, MessageTypesValues } from '@rocket.chat/core-typings';\nimport { Messages, Rooms } from '@rocket.chat/models';\nimport type { FindOptions } from 'mongodb';\n\nimport { settings } from '../../../settings/server/cached';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { getHiddenSystemMessages } from '../lib/getHiddenSystemMessages';\n\nexport async function loadMessageHistory({\n\tuserId,\n\trid,\n\tend,\n\tlimit = 20,\n\tls,\n\tshowThreadMessages = true,\n\toffset = 0,\n}: {\n\t// userId is undefined if user is reading anonymously\n\tuserId?: string;\n\trid: string;\n\tend: Date | undefined;\n\tlimit?: number;\n\tls?: string | Date;\n\tshowThreadMessages?: boolean;\n\toffset?: number;\n}) {\n\tconst room = await Rooms.findOneById(rid, { projection: { sysMes: 1 } });\n\n\tif (!room) {\n\t\tthrow new Error('error-invalid-room');\n\t}\n\n\tconst hiddenSystemMessages = settings.get<MessageTypesValues[]>('Hide_System_Messages');\n\n\tconst hiddenMessageTypes = getHiddenSystemMessages(room, hiddenSystemMessages);\n\n\tconst options: FindOptions<IMessage> = {\n\t\tsort: {\n\t\t\tts: -1,\n\t\t},\n\t\tlimit,\n\t\tskip: offset,\n\t};\n\n\tconst records = end\n\t\t? await Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\t\t\trid,\n\t\t\t\tend,\n\t\t\t\thiddenMessageTypes,\n\t\t\t\toptions,\n\t\t\t\tshowThreadMessages,\n\t\t  ).toArray()\n\t\t: await Messages.findVisibleByRoomIdNotContainingTypes(rid, hiddenMessageTypes, options, showThreadMessages).toArray();\n\tconst messages = await normalizeMessagesForUser(records, userId);\n\tlet unreadNotLoaded = 0;\n\tlet firstUnread;\n\n\tif (ls) {\n\t\tconst firstMessage = messages[messages.length - 1];\n\n\t\tconst lastSeen = new Date(ls);\n\n\t\tif (firstMessage && new Date(firstMessage.ts) > lastSeen) {\n\t\t\tconst unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\trid,\n\t\t\t\tlastSeen,\n\t\t\t\tfirstMessage.ts,\n\t\t\t\thiddenMessageTypes,\n\t\t\t\t{\n\t\t\t\t\tlimit: 1,\n\t\t\t\t\tsort: {\n\t\t\t\t\t\tts: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tshowThreadMessages,\n\t\t\t);\n\n\t\t\tconst totalCursor = await Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\trid,\n\t\t\t\tlastSeen,\n\t\t\t\tfirstMessage.ts,\n\t\t\t\thiddenMessageTypes,\n\t\t\t\tshowThreadMessages,\n\t\t\t);\n\n\t\t\tfirstUnread = (await unreadMessages.toArray())[0];\n\t\t\tunreadNotLoaded = totalCursor;\n\t\t}\n\t}\n\n\treturn {\n\t\tmessages,\n\t\tfirstUnread,\n\t\tunreadNotLoaded,\n\t};\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"7f18285600c687321bac17747a070e2f7a9d13ad"}
