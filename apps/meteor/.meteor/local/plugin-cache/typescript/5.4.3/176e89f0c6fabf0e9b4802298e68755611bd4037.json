{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/visitor.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/api/v1/visitor.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/visitor.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/api/v1/visitor.ts","sourceRoot":"","sources":["app/livechat/server/api/v1/visitor.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatCustomField, IRoom } from '@rocket.chat/core-typings';\nimport { LivechatVisitors as VisitorsRaw, LivechatCustomField, LivechatRooms } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { API } from '../../../../api/server';\nimport { settings } from '../../../../settings/server';\nimport { Livechat as LivechatTyped } from '../../lib/LivechatTyped';\nimport { findGuest, normalizeHttpHeaderData } from '../lib/livechat';\n\nAPI.v1.addRoute(\n\t'livechat/visitor',\n\t{\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: 5,\n\t\t\tintervalTimeInMS: 60000,\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tvisitor: Match.ObjectIncluding({\n\t\t\t\t\ttoken: String,\n\t\t\t\t\tname: Match.Maybe(String),\n\t\t\t\t\temail: Match.Maybe(String),\n\t\t\t\t\tdepartment: Match.Maybe(String),\n\t\t\t\t\tphone: Match.Maybe(String),\n\t\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\t\tcustomFields: Match.Maybe([\n\t\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\t\tkey: String,\n\t\t\t\t\t\t\tvalue: String,\n\t\t\t\t\t\t\toverwrite: Boolean,\n\t\t\t\t\t\t}),\n\t\t\t\t\t]),\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tconst { customFields, id, token, name, email, department, phone, username, connectionData } = this.bodyParams.visitor;\n\n\t\t\tif (!token?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-token', 'Token cannot be empty', { method: 'livechat/visitor' });\n\t\t\t}\n\n\t\t\tconst guest = {\n\t\t\t\ttoken,\n\t\t\t\t...(id && { id }),\n\t\t\t\t...(name && { name }),\n\t\t\t\t...(email && { email }),\n\t\t\t\t...(department && { department }),\n\t\t\t\t...(username && { username }),\n\t\t\t\t...(connectionData && { connectionData }),\n\t\t\t\t...(phone && typeof phone === 'string' && { phone: { number: phone as string } }),\n\t\t\t\tconnectionData: normalizeHttpHeaderData(this.request.headers),\n\t\t\t};\n\n\t\t\tconst visitor = await LivechatTyped.registerGuest(guest);\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Meteor.Error('error-livechat-visitor-registration', 'Error registering visitor', {\n\t\t\t\t\tmethod: 'livechat/visitor',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\t\t// If it's updating an existing visitor, it must also update the roomInfo\n\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(visitor?.token, {}, extraQuery).toArray();\n\t\t\tawait Promise.all(\n\t\t\t\trooms.map(\n\t\t\t\t\t(room: IRoom) =>\n\t\t\t\t\t\tvisitor &&\n\t\t\t\t\t\tLivechatTyped.saveRoomInfo(room, {\n\t\t\t\t\t\t\t_id: visitor._id,\n\t\t\t\t\t\t\tname: visitor.name,\n\t\t\t\t\t\t\tphone: visitor.phone?.[0]?.phoneNumber,\n\t\t\t\t\t\t\tlivechatData: visitor.livechatData as { [k: string]: string },\n\t\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (customFields && Array.isArray(customFields) && customFields.length > 0) {\n\t\t\t\tconst keys = customFields.map((field) => field.key);\n\t\t\t\tconst errors: string[] = [];\n\n\t\t\t\tconst processedKeys = await Promise.all(\n\t\t\t\t\tawait LivechatCustomField.findByIdsAndScope<Pick<ILivechatCustomField, '_id'>>(keys, 'visitor', {\n\t\t\t\t\t\tprojection: { _id: 1 },\n\t\t\t\t\t})\n\t\t\t\t\t\t.map(async (field) => {\n\t\t\t\t\t\t\tconst customField = customFields.find((f) => f.key === field._id);\n\t\t\t\t\t\t\tif (!customField) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst { key, value, overwrite } = customField;\n\t\t\t\t\t\t\t// TODO: Change this to Bulk update\n\t\t\t\t\t\t\tif (!(await VisitorsRaw.updateLivechatDataByToken(token, key, value, overwrite))) {\n\t\t\t\t\t\t\t\terrors.push(key);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn key;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.toArray(),\n\t\t\t\t);\n\n\t\t\t\tif (processedKeys.length !== keys.length) {\n\t\t\t\t\tLivechatTyped.logger.warn({\n\t\t\t\t\t\tmsg: 'Some custom fields were not processed',\n\t\t\t\t\t\tvisitorId: visitor._id,\n\t\t\t\t\t\tmissingKeys: keys.filter((key) => !processedKeys.includes(key)),\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\tLivechatTyped.logger.error({\n\t\t\t\t\t\tmsg: 'Error updating custom fields',\n\t\t\t\t\t\tvisitorId: visitor._id,\n\t\t\t\t\t\terrors,\n\t\t\t\t\t});\n\t\t\t\t\tthrow new Error('error-updating-custom-fields');\n\t\t\t\t}\n\n\t\t\t\treturn API.v1.success({ visitor: await VisitorsRaw.findOneEnabledById(visitor._id) });\n\t\t\t}\n\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Meteor.Error('error-saving-visitor', 'An error ocurred while saving visitor');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ visitor });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute('livechat/visitor/:token', {\n\tasync get() {\n\t\tcheck(this.urlParams, {\n\t\t\ttoken: String,\n\t\t});\n\n\t\tconst visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});\n\n\t\tif (!visitor) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\n\t\treturn API.v1.success({ visitor });\n\t},\n\tasync delete() {\n\t\tcheck(this.urlParams, {\n\t\t\ttoken: String,\n\t\t});\n\n\t\tconst visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});\n\t\tif (!visitor) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(\n\t\t\tthis.urlParams.token,\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\tname: 1,\n\t\t\t\t\tt: 1,\n\t\t\t\t\tcl: 1,\n\t\t\t\t\tu: 1,\n\t\t\t\t\tusernames: 1,\n\t\t\t\t\tservedBy: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\textraQuery,\n\t\t).toArray();\n\n\t\t// if gdpr is enabled, bypass rooms check\n\t\tif (rooms?.length && !settings.get('Livechat_Allow_collect_and_store_HTTP_header_informations')) {\n\t\t\tthrow new Meteor.Error('visitor-has-open-rooms', 'Cannot remove visitors with opened rooms');\n\t\t}\n\n\t\tconst { _id } = visitor;\n\t\tconst result = await LivechatTyped.removeGuest(_id);\n\t\tif (!result.modifiedCount) {\n\t\t\tthrow new Meteor.Error('error-removing-visitor', 'An error ocurred while deleting visitor');\n\t\t}\n\n\t\treturn API.v1.success({\n\t\t\tvisitor: {\n\t\t\t\t_id,\n\t\t\t\tts: new Date().toISOString(),\n\t\t\t},\n\t\t});\n\t},\n});\n\nAPI.v1.addRoute(\n\t'livechat/visitor/:token/room',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'] },\n\t{\n\t\tasync get() {\n\t\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(\n\t\t\t\tthis.urlParams.token,\n\t\t\t\t{\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\tcl: 1,\n\t\t\t\t\t\tu: 1,\n\t\t\t\t\t\tusernames: 1,\n\t\t\t\t\t\tservedBy: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\textraQuery,\n\t\t\t).toArray();\n\t\t\treturn API.v1.success({ rooms });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute('livechat/visitor.callStatus', {\n\tasync post() {\n\t\tcheck(this.bodyParams, {\n\t\t\ttoken: String,\n\t\t\tcallStatus: String,\n\t\t\trid: String,\n\t\t\tcallId: String,\n\t\t});\n\n\t\tconst { token, callStatus, rid, callId } = this.bodyParams;\n\t\tconst guest = await findGuest(token);\n\t\tif (!guest) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\t\tawait LivechatTyped.updateCallStatus(callId, rid, callStatus, guest);\n\t\treturn API.v1.success({ token, callStatus });\n\t},\n});\n\nAPI.v1.addRoute('livechat/visitor.status', {\n\tasync post() {\n\t\tcheck(this.bodyParams, {\n\t\t\ttoken: String,\n\t\t\tstatus: String,\n\t\t});\n\n\t\tconst { token, status } = this.bodyParams;\n\n\t\tconst guest = await findGuest(token);\n\t\tif (!guest) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\n\t\tawait LivechatTyped.notifyGuestStatusChanged(token, status);\n\n\t\treturn API.v1.success({ token, status });\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/visitor.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/api/v1/visitor.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/api/v1/visitor.ts","sourceRoot":"","sources":["app/livechat/server/api/v1/visitor.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatCustomField, IRoom } from '@rocket.chat/core-typings';\nimport { LivechatVisitors as VisitorsRaw, LivechatCustomField, LivechatRooms } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { API } from '../../../../api/server';\nimport { settings } from '../../../../settings/server';\nimport { Livechat as LivechatTyped } from '../../lib/LivechatTyped';\nimport { findGuest, normalizeHttpHeaderData } from '../lib/livechat';\n\nAPI.v1.addRoute(\n\t'livechat/visitor',\n\t{\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: 5,\n\t\t\tintervalTimeInMS: 60000,\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tvisitor: Match.ObjectIncluding({\n\t\t\t\t\ttoken: String,\n\t\t\t\t\tname: Match.Maybe(String),\n\t\t\t\t\temail: Match.Maybe(String),\n\t\t\t\t\tdepartment: Match.Maybe(String),\n\t\t\t\t\tphone: Match.Maybe(String),\n\t\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\t\tcustomFields: Match.Maybe([\n\t\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\t\tkey: String,\n\t\t\t\t\t\t\tvalue: String,\n\t\t\t\t\t\t\toverwrite: Boolean,\n\t\t\t\t\t\t}),\n\t\t\t\t\t]),\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tconst { customFields, id, token, name, email, department, phone, username, connectionData } = this.bodyParams.visitor;\n\n\t\t\tif (!token?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-token', 'Token cannot be empty', { method: 'livechat/visitor' });\n\t\t\t}\n\n\t\t\tconst guest = {\n\t\t\t\ttoken,\n\t\t\t\t...(id && { id }),\n\t\t\t\t...(name && { name }),\n\t\t\t\t...(email && { email }),\n\t\t\t\t...(department && { department }),\n\t\t\t\t...(username && { username }),\n\t\t\t\t...(connectionData && { connectionData }),\n\t\t\t\t...(phone && typeof phone === 'string' && { phone: { number: phone as string } }),\n\t\t\t\tconnectionData: normalizeHttpHeaderData(this.request.headers),\n\t\t\t};\n\n\t\t\tconst visitor = await LivechatTyped.registerGuest(guest);\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Meteor.Error('error-livechat-visitor-registration', 'Error registering visitor', {\n\t\t\t\t\tmethod: 'livechat/visitor',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\t\t// If it's updating an existing visitor, it must also update the roomInfo\n\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(visitor?.token, {}, extraQuery).toArray();\n\t\t\tawait Promise.all(\n\t\t\t\trooms.map(\n\t\t\t\t\t(room: IRoom) =>\n\t\t\t\t\t\tvisitor &&\n\t\t\t\t\t\tLivechatTyped.saveRoomInfo(room, {\n\t\t\t\t\t\t\t_id: visitor._id,\n\t\t\t\t\t\t\tname: visitor.name,\n\t\t\t\t\t\t\tphone: visitor.phone?.[0]?.phoneNumber,\n\t\t\t\t\t\t\tlivechatData: visitor.livechatData as { [k: string]: string },\n\t\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (customFields && Array.isArray(customFields) && customFields.length > 0) {\n\t\t\t\tconst keys = customFields.map((field) => field.key);\n\t\t\t\tconst errors: string[] = [];\n\n\t\t\t\tconst processedKeys = await Promise.all(\n\t\t\t\t\tawait LivechatCustomField.findByIdsAndScope<Pick<ILivechatCustomField, '_id'>>(keys, 'visitor', {\n\t\t\t\t\t\tprojection: { _id: 1 },\n\t\t\t\t\t})\n\t\t\t\t\t\t.map(async (field) => {\n\t\t\t\t\t\t\tconst customField = customFields.find((f) => f.key === field._id);\n\t\t\t\t\t\t\tif (!customField) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst { key, value, overwrite } = customField;\n\t\t\t\t\t\t\t// TODO: Change this to Bulk update\n\t\t\t\t\t\t\tif (!(await VisitorsRaw.updateLivechatDataByToken(token, key, value, overwrite))) {\n\t\t\t\t\t\t\t\terrors.push(key);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn key;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.toArray(),\n\t\t\t\t);\n\n\t\t\t\tif (processedKeys.length !== keys.length) {\n\t\t\t\t\tLivechatTyped.logger.warn({\n\t\t\t\t\t\tmsg: 'Some custom fields were not processed',\n\t\t\t\t\t\tvisitorId: visitor._id,\n\t\t\t\t\t\tmissingKeys: keys.filter((key) => !processedKeys.includes(key)),\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\tLivechatTyped.logger.error({\n\t\t\t\t\t\tmsg: 'Error updating custom fields',\n\t\t\t\t\t\tvisitorId: visitor._id,\n\t\t\t\t\t\terrors,\n\t\t\t\t\t});\n\t\t\t\t\tthrow new Error('error-updating-custom-fields');\n\t\t\t\t}\n\n\t\t\t\treturn API.v1.success({ visitor: await VisitorsRaw.findOneEnabledById(visitor._id) });\n\t\t\t}\n\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Meteor.Error('error-saving-visitor', 'An error ocurred while saving visitor');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ visitor });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute('livechat/visitor/:token', {\n\tasync get() {\n\t\tcheck(this.urlParams, {\n\t\t\ttoken: String,\n\t\t});\n\n\t\tconst visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});\n\n\t\tif (!visitor) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\n\t\treturn API.v1.success({ visitor });\n\t},\n\tasync delete() {\n\t\tcheck(this.urlParams, {\n\t\t\ttoken: String,\n\t\t});\n\n\t\tconst visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});\n\t\tif (!visitor) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(\n\t\t\tthis.urlParams.token,\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\tname: 1,\n\t\t\t\t\tt: 1,\n\t\t\t\t\tcl: 1,\n\t\t\t\t\tu: 1,\n\t\t\t\t\tusernames: 1,\n\t\t\t\t\tservedBy: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\textraQuery,\n\t\t).toArray();\n\n\t\t// if gdpr is enabled, bypass rooms check\n\t\tif (rooms?.length && !settings.get('Livechat_Allow_collect_and_store_HTTP_header_informations')) {\n\t\t\tthrow new Meteor.Error('visitor-has-open-rooms', 'Cannot remove visitors with opened rooms');\n\t\t}\n\n\t\tconst { _id } = visitor;\n\t\tconst result = await LivechatTyped.removeGuest(_id);\n\t\tif (!result.modifiedCount) {\n\t\t\tthrow new Meteor.Error('error-removing-visitor', 'An error ocurred while deleting visitor');\n\t\t}\n\n\t\treturn API.v1.success({\n\t\t\tvisitor: {\n\t\t\t\t_id,\n\t\t\t\tts: new Date().toISOString(),\n\t\t\t},\n\t\t});\n\t},\n});\n\nAPI.v1.addRoute(\n\t'livechat/visitor/:token/room',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'] },\n\t{\n\t\tasync get() {\n\t\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(\n\t\t\t\tthis.urlParams.token,\n\t\t\t\t{\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\tcl: 1,\n\t\t\t\t\t\tu: 1,\n\t\t\t\t\t\tusernames: 1,\n\t\t\t\t\t\tservedBy: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\textraQuery,\n\t\t\t).toArray();\n\t\t\treturn API.v1.success({ rooms });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute('livechat/visitor.callStatus', {\n\tasync post() {\n\t\tcheck(this.bodyParams, {\n\t\t\ttoken: String,\n\t\t\tcallStatus: String,\n\t\t\trid: String,\n\t\t\tcallId: String,\n\t\t});\n\n\t\tconst { token, callStatus, rid, callId } = this.bodyParams;\n\t\tconst guest = await findGuest(token);\n\t\tif (!guest) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\t\tawait LivechatTyped.updateCallStatus(callId, rid, callStatus, guest);\n\t\treturn API.v1.success({ token, callStatus });\n\t},\n});\n\nAPI.v1.addRoute('livechat/visitor.status', {\n\tasync post() {\n\t\tcheck(this.bodyParams, {\n\t\t\ttoken: String,\n\t\t\tstatus: String,\n\t\t});\n\n\t\tconst { token, status } = this.bodyParams;\n\n\t\tconst guest = await findGuest(token);\n\t\tif (!guest) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\n\t\tawait LivechatTyped.notifyGuestStatusChanged(token, status);\n\n\t\treturn API.v1.success({ token, status });\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let VisitorsRaw, LivechatCustomField, LivechatRooms;\n    module.link(\"@rocket.chat/models\", {\n      LivechatVisitors(v) {\n        VisitorsRaw = v;\n      },\n      LivechatCustomField(v) {\n        LivechatCustomField = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      }\n    }, 0);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 1);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let callbacks;\n    module.link(\"../../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 3);\n    let API;\n    module.link(\"../../../../api/server\", {\n      API(v) {\n        API = v;\n      }\n    }, 4);\n    let settings;\n    module.link(\"../../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 5);\n    let LivechatTyped;\n    module.link(\"../../lib/LivechatTyped\", {\n      Livechat(v) {\n        LivechatTyped = v;\n      }\n    }, 6);\n    let findGuest, normalizeHttpHeaderData;\n    module.link(\"../lib/livechat\", {\n      findGuest(v) {\n        findGuest = v;\n      },\n      normalizeHttpHeaderData(v) {\n        normalizeHttpHeaderData = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    API.v1.addRoute('livechat/visitor', {\n      rateLimiterOptions: {\n        numRequestsAllowed: 5,\n        intervalTimeInMS: 60000\n      }\n    }, {\n      async post() {\n        check(this.bodyParams, {\n          visitor: Match.ObjectIncluding({\n            token: String,\n            name: Match.Maybe(String),\n            email: Match.Maybe(String),\n            department: Match.Maybe(String),\n            phone: Match.Maybe(String),\n            username: Match.Maybe(String),\n            customFields: Match.Maybe([Match.ObjectIncluding({\n              key: String,\n              value: String,\n              overwrite: Boolean\n            })])\n          })\n        });\n        const {\n          customFields,\n          id,\n          token,\n          name,\n          email,\n          department,\n          phone,\n          username,\n          connectionData\n        } = this.bodyParams.visitor;\n        if (!(token !== null && token !== void 0 && token.trim())) {\n          throw new Meteor.Error('error-invalid-token', 'Token cannot be empty', {\n            method: 'livechat/visitor'\n          });\n        }\n        const guest = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n          token\n        }, id && {\n          id\n        }), name && {\n          name\n        }), email && {\n          email\n        }), department && {\n          department\n        }), username && {\n          username\n        }), connectionData && {\n          connectionData\n        }), phone && typeof phone === 'string' && {\n          phone: {\n            number: phone\n          }\n        }), {}, {\n          connectionData: normalizeHttpHeaderData(this.request.headers)\n        });\n        const visitor = await LivechatTyped.registerGuest(guest);\n        if (!visitor) {\n          throw new Meteor.Error('error-livechat-visitor-registration', 'Error registering visitor', {\n            method: 'livechat/visitor'\n          });\n        }\n        const extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n        // If it's updating an existing visitor, it must also update the roomInfo\n        const rooms = await LivechatRooms.findOpenByVisitorToken(visitor === null || visitor === void 0 ? void 0 : visitor.token, {}, extraQuery).toArray();\n        await Promise.all(rooms.map(room => {\n          var _visitor$phone, _visitor$phone$;\n          return visitor && LivechatTyped.saveRoomInfo(room, {\n            _id: visitor._id,\n            name: visitor.name,\n            phone: (_visitor$phone = visitor.phone) === null || _visitor$phone === void 0 ? void 0 : (_visitor$phone$ = _visitor$phone[0]) === null || _visitor$phone$ === void 0 ? void 0 : _visitor$phone$.phoneNumber,\n            livechatData: visitor.livechatData\n          });\n        }));\n        if (customFields && Array.isArray(customFields) && customFields.length > 0) {\n          const keys = customFields.map(field => field.key);\n          const errors = [];\n          const processedKeys = await Promise.all(await LivechatCustomField.findByIdsAndScope(keys, 'visitor', {\n            projection: {\n              _id: 1\n            }\n          }).map(async field => {\n            const customField = customFields.find(f => f.key === field._id);\n            if (!customField) {\n              return;\n            }\n            const {\n              key,\n              value,\n              overwrite\n            } = customField;\n            // TODO: Change this to Bulk update\n            if (!(await VisitorsRaw.updateLivechatDataByToken(token, key, value, overwrite))) {\n              errors.push(key);\n            }\n            return key;\n          }).toArray());\n          if (processedKeys.length !== keys.length) {\n            LivechatTyped.logger.warn({\n              msg: 'Some custom fields were not processed',\n              visitorId: visitor._id,\n              missingKeys: keys.filter(key => !processedKeys.includes(key))\n            });\n          }\n          if (errors.length > 0) {\n            LivechatTyped.logger.error({\n              msg: 'Error updating custom fields',\n              visitorId: visitor._id,\n              errors\n            });\n            throw new Error('error-updating-custom-fields');\n          }\n          return API.v1.success({\n            visitor: await VisitorsRaw.findOneEnabledById(visitor._id)\n          });\n        }\n        if (!visitor) {\n          throw new Meteor.Error('error-saving-visitor', 'An error ocurred while saving visitor');\n        }\n        return API.v1.success({\n          visitor\n        });\n      }\n    });\n    API.v1.addRoute('livechat/visitor/:token', {\n      async get() {\n        check(this.urlParams, {\n          token: String\n        });\n        const visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});\n        if (!visitor) {\n          throw new Meteor.Error('invalid-token');\n        }\n        return API.v1.success({\n          visitor\n        });\n      },\n      async delete() {\n        check(this.urlParams, {\n          token: String\n        });\n        const visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});\n        if (!visitor) {\n          throw new Meteor.Error('invalid-token');\n        }\n        const extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n        const rooms = await LivechatRooms.findOpenByVisitorToken(this.urlParams.token, {\n          projection: {\n            name: 1,\n            t: 1,\n            cl: 1,\n            u: 1,\n            usernames: 1,\n            servedBy: 1\n          }\n        }, extraQuery).toArray();\n        // if gdpr is enabled, bypass rooms check\n        if (rooms !== null && rooms !== void 0 && rooms.length && !settings.get('Livechat_Allow_collect_and_store_HTTP_header_informations')) {\n          throw new Meteor.Error('visitor-has-open-rooms', 'Cannot remove visitors with opened rooms');\n        }\n        const {\n          _id\n        } = visitor;\n        const result = await LivechatTyped.removeGuest(_id);\n        if (!result.modifiedCount) {\n          throw new Meteor.Error('error-removing-visitor', 'An error ocurred while deleting visitor');\n        }\n        return API.v1.success({\n          visitor: {\n            _id,\n            ts: new Date().toISOString()\n          }\n        });\n      }\n    });\n    API.v1.addRoute('livechat/visitor/:token/room', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-manager']\n    }, {\n      async get() {\n        const extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n        const rooms = await LivechatRooms.findOpenByVisitorToken(this.urlParams.token, {\n          projection: {\n            name: 1,\n            t: 1,\n            cl: 1,\n            u: 1,\n            usernames: 1,\n            servedBy: 1\n          }\n        }, extraQuery).toArray();\n        return API.v1.success({\n          rooms\n        });\n      }\n    });\n    API.v1.addRoute('livechat/visitor.callStatus', {\n      async post() {\n        check(this.bodyParams, {\n          token: String,\n          callStatus: String,\n          rid: String,\n          callId: String\n        });\n        const {\n          token,\n          callStatus,\n          rid,\n          callId\n        } = this.bodyParams;\n        const guest = await findGuest(token);\n        if (!guest) {\n          throw new Meteor.Error('invalid-token');\n        }\n        await LivechatTyped.updateCallStatus(callId, rid, callStatus, guest);\n        return API.v1.success({\n          token,\n          callStatus\n        });\n      }\n    });\n    API.v1.addRoute('livechat/visitor.status', {\n      async post() {\n        check(this.bodyParams, {\n          token: String,\n          status: String\n        });\n        const {\n          token,\n          status\n        } = this.bodyParams;\n        const guest = await findGuest(token);\n        if (!guest) {\n          throw new Meteor.Error('invalid-token');\n        }\n        await LivechatTyped.notifyGuestStatusChanged(token, status);\n        return API.v1.success({\n          token,\n          status\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","VisitorsRaw","LivechatCustomField","LivechatRooms","LivechatVisitors","Match","check","Meteor","callbacks","API","settings","LivechatTyped","Livechat","findGuest","normalizeHttpHeaderData","__reifyWaitForDeps__","v1","addRoute","rateLimiterOptions","numRequestsAllowed","intervalTimeInMS","post","bodyParams","visitor","ObjectIncluding","token","String","name","Maybe","email","department","phone","username","customFields","key","value","overwrite","Boolean","id","connectionData","trim","Error","method","guest","number","request","headers","registerGuest","extraQuery","run","rooms","findOpenByVisitorToken","toArray","Promise","all","map","room","_visitor$phone","_visitor$phone$","saveRoomInfo","_id","phoneNumber","livechatData","Array","isArray","length","keys","field","errors","processedKeys","findByIdsAndScope","projection","customField","find","f","updateLivechatDataByToken","push","logger","warn","msg","visitorId","missingKeys","filter","includes","error","success","findOneEnabledById","get","urlParams","getVisitorByToken","delete","t","cl","u","usernames","servedBy","result","removeGuest","modifiedCount","ts","Date","toISOString","authRequired","permissionsRequired","callStatus","rid","callId","updateCallStatus","status","notifyGuestStatusChanged","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/api/v1/visitor.ts"],"sourcesContent":["import type { ILivechatCustomField, IRoom } from '@rocket.chat/core-typings';\nimport { LivechatVisitors as VisitorsRaw, LivechatCustomField, LivechatRooms } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { API } from '../../../../api/server';\nimport { settings } from '../../../../settings/server';\nimport { Livechat as LivechatTyped } from '../../lib/LivechatTyped';\nimport { findGuest, normalizeHttpHeaderData } from '../lib/livechat';\n\nAPI.v1.addRoute(\n\t'livechat/visitor',\n\t{\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: 5,\n\t\t\tintervalTimeInMS: 60000,\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\tvisitor: Match.ObjectIncluding({\n\t\t\t\t\ttoken: String,\n\t\t\t\t\tname: Match.Maybe(String),\n\t\t\t\t\temail: Match.Maybe(String),\n\t\t\t\t\tdepartment: Match.Maybe(String),\n\t\t\t\t\tphone: Match.Maybe(String),\n\t\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\t\tcustomFields: Match.Maybe([\n\t\t\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\t\t\tkey: String,\n\t\t\t\t\t\t\tvalue: String,\n\t\t\t\t\t\t\toverwrite: Boolean,\n\t\t\t\t\t\t}),\n\t\t\t\t\t]),\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tconst { customFields, id, token, name, email, department, phone, username, connectionData } = this.bodyParams.visitor;\n\n\t\t\tif (!token?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-token', 'Token cannot be empty', { method: 'livechat/visitor' });\n\t\t\t}\n\n\t\t\tconst guest = {\n\t\t\t\ttoken,\n\t\t\t\t...(id && { id }),\n\t\t\t\t...(name && { name }),\n\t\t\t\t...(email && { email }),\n\t\t\t\t...(department && { department }),\n\t\t\t\t...(username && { username }),\n\t\t\t\t...(connectionData && { connectionData }),\n\t\t\t\t...(phone && typeof phone === 'string' && { phone: { number: phone as string } }),\n\t\t\t\tconnectionData: normalizeHttpHeaderData(this.request.headers),\n\t\t\t};\n\n\t\t\tconst visitor = await LivechatTyped.registerGuest(guest);\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Meteor.Error('error-livechat-visitor-registration', 'Error registering visitor', {\n\t\t\t\t\tmethod: 'livechat/visitor',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\t\t// If it's updating an existing visitor, it must also update the roomInfo\n\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(visitor?.token, {}, extraQuery).toArray();\n\t\t\tawait Promise.all(\n\t\t\t\trooms.map(\n\t\t\t\t\t(room: IRoom) =>\n\t\t\t\t\t\tvisitor &&\n\t\t\t\t\t\tLivechatTyped.saveRoomInfo(room, {\n\t\t\t\t\t\t\t_id: visitor._id,\n\t\t\t\t\t\t\tname: visitor.name,\n\t\t\t\t\t\t\tphone: visitor.phone?.[0]?.phoneNumber,\n\t\t\t\t\t\t\tlivechatData: visitor.livechatData as { [k: string]: string },\n\t\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (customFields && Array.isArray(customFields) && customFields.length > 0) {\n\t\t\t\tconst keys = customFields.map((field) => field.key);\n\t\t\t\tconst errors: string[] = [];\n\n\t\t\t\tconst processedKeys = await Promise.all(\n\t\t\t\t\tawait LivechatCustomField.findByIdsAndScope<Pick<ILivechatCustomField, '_id'>>(keys, 'visitor', {\n\t\t\t\t\t\tprojection: { _id: 1 },\n\t\t\t\t\t})\n\t\t\t\t\t\t.map(async (field) => {\n\t\t\t\t\t\t\tconst customField = customFields.find((f) => f.key === field._id);\n\t\t\t\t\t\t\tif (!customField) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst { key, value, overwrite } = customField;\n\t\t\t\t\t\t\t// TODO: Change this to Bulk update\n\t\t\t\t\t\t\tif (!(await VisitorsRaw.updateLivechatDataByToken(token, key, value, overwrite))) {\n\t\t\t\t\t\t\t\terrors.push(key);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn key;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.toArray(),\n\t\t\t\t);\n\n\t\t\t\tif (processedKeys.length !== keys.length) {\n\t\t\t\t\tLivechatTyped.logger.warn({\n\t\t\t\t\t\tmsg: 'Some custom fields were not processed',\n\t\t\t\t\t\tvisitorId: visitor._id,\n\t\t\t\t\t\tmissingKeys: keys.filter((key) => !processedKeys.includes(key)),\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (errors.length > 0) {\n\t\t\t\t\tLivechatTyped.logger.error({\n\t\t\t\t\t\tmsg: 'Error updating custom fields',\n\t\t\t\t\t\tvisitorId: visitor._id,\n\t\t\t\t\t\terrors,\n\t\t\t\t\t});\n\t\t\t\t\tthrow new Error('error-updating-custom-fields');\n\t\t\t\t}\n\n\t\t\t\treturn API.v1.success({ visitor: await VisitorsRaw.findOneEnabledById(visitor._id) });\n\t\t\t}\n\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Meteor.Error('error-saving-visitor', 'An error ocurred while saving visitor');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ visitor });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute('livechat/visitor/:token', {\n\tasync get() {\n\t\tcheck(this.urlParams, {\n\t\t\ttoken: String,\n\t\t});\n\n\t\tconst visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});\n\n\t\tif (!visitor) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\n\t\treturn API.v1.success({ visitor });\n\t},\n\tasync delete() {\n\t\tcheck(this.urlParams, {\n\t\t\ttoken: String,\n\t\t});\n\n\t\tconst visitor = await VisitorsRaw.getVisitorByToken(this.urlParams.token, {});\n\t\tif (!visitor) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(\n\t\t\tthis.urlParams.token,\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\tname: 1,\n\t\t\t\t\tt: 1,\n\t\t\t\t\tcl: 1,\n\t\t\t\t\tu: 1,\n\t\t\t\t\tusernames: 1,\n\t\t\t\t\tservedBy: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\textraQuery,\n\t\t).toArray();\n\n\t\t// if gdpr is enabled, bypass rooms check\n\t\tif (rooms?.length && !settings.get('Livechat_Allow_collect_and_store_HTTP_header_informations')) {\n\t\t\tthrow new Meteor.Error('visitor-has-open-rooms', 'Cannot remove visitors with opened rooms');\n\t\t}\n\n\t\tconst { _id } = visitor;\n\t\tconst result = await LivechatTyped.removeGuest(_id);\n\t\tif (!result.modifiedCount) {\n\t\t\tthrow new Meteor.Error('error-removing-visitor', 'An error ocurred while deleting visitor');\n\t\t}\n\n\t\treturn API.v1.success({\n\t\t\tvisitor: {\n\t\t\t\t_id,\n\t\t\t\tts: new Date().toISOString(),\n\t\t\t},\n\t\t});\n\t},\n});\n\nAPI.v1.addRoute(\n\t'livechat/visitor/:token/room',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-manager'] },\n\t{\n\t\tasync get() {\n\t\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(\n\t\t\t\tthis.urlParams.token,\n\t\t\t\t{\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\tcl: 1,\n\t\t\t\t\t\tu: 1,\n\t\t\t\t\t\tusernames: 1,\n\t\t\t\t\t\tservedBy: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\textraQuery,\n\t\t\t).toArray();\n\t\t\treturn API.v1.success({ rooms });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute('livechat/visitor.callStatus', {\n\tasync post() {\n\t\tcheck(this.bodyParams, {\n\t\t\ttoken: String,\n\t\t\tcallStatus: String,\n\t\t\trid: String,\n\t\t\tcallId: String,\n\t\t});\n\n\t\tconst { token, callStatus, rid, callId } = this.bodyParams;\n\t\tconst guest = await findGuest(token);\n\t\tif (!guest) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\t\tawait LivechatTyped.updateCallStatus(callId, rid, callStatus, guest);\n\t\treturn API.v1.success({ token, callStatus });\n\t},\n});\n\nAPI.v1.addRoute('livechat/visitor.status', {\n\tasync post() {\n\t\tcheck(this.bodyParams, {\n\t\t\ttoken: String,\n\t\t\tstatus: String,\n\t\t});\n\n\t\tconst { token, status } = this.bodyParams;\n\n\t\tconst guest = await findGuest(token);\n\t\tif (!guest) {\n\t\t\tthrow new Meteor.Error('invalid-token');\n\t\t}\n\n\t\tawait LivechatTyped.notifyGuestStatusChanged(token, status);\n\n\t\treturn API.v1.success({ token, status });\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"176e89f0c6fabf0e9b4802298e68755611bd4037"}
