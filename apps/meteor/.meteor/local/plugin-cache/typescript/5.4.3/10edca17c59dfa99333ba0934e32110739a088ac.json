{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/voip/server-connection.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/voip/server-connection.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/voip/server-connection.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/voip/server-connection.ts","sourceRoot":"","sources":["app/api/server/v1/voip/server-connection.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAE5C,OAAO,EAAE,GAAG,EAAE,MAAM,WAAW,CAAC;AAEhC,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,uCAAuC,EACvC,EAAE,YAAY,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,qCAAqC,CAAC,EAAE,EACpF;IACC,KAAK,CAAC,GAAG;QACR,KAAK,CACJ,IAAI,CAAC,WAAW,EAChB,KAAK,CAAC,eAAe,CAAC;YACrB,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,MAAM;SAChB,CAAC,CACF,CAAC;QACF,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAC5D,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,YAAY,CAAC,yBAAyB,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;IACrG,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iCAAiC,EACjC,EAAE,YAAY,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,qCAAqC,CAAC,EAAE,EACpF;IACC,KAAK,CAAC,GAAG;QACR,KAAK,CACJ,IAAI,CAAC,WAAW,EAChB,KAAK,CAAC,eAAe,CAAC;YACrB,YAAY,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YACjC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YACzB,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YACzB,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;SACzB,CAAC,CACF,CAAC;QACF,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAC5D,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC;YAC9C,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC;QAC9D,CAAC;QACD,IAAI,SAAS,GAAG,YAAsB,CAAC;QACvC,IAAI,CAAC,SAAS,EAAE,CAAC;YAChB,2CAA2C;YAC3C,0EAA0E;YAC1E,8DAA8D;YAC9D,IAAI,QAAQ,CAAC,IAAc,CAAC,KAAK,GAAG,EAAE,CAAC;gBACtC,SAAS,GAAG,SAAS,IAAI,IAAI,IAAI,IAAK,IAAe,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;YAC1E,CAAC;iBAAM,CAAC;gBACP,SAAS,GAAG,SAAS,IAAI,IAAK,IAAe,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;YAClE,CAAC;QACF,CAAC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,YAAY,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC,CAAC;IAChF,CAAC;CACD,CACD,CAAC","sourcesContent":["import { VoipAsterisk } from '@rocket.chat/core-services';\nimport { Match, check } from 'meteor/check';\n\nimport { API } from '../../api';\n\nAPI.v1.addRoute(\n\t'voip/managementServer/checkConnection',\n\t{ authRequired: true, permissionsRequired: ['manage-voip-contact-center-settings'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\thost: String,\n\t\t\t\t\tport: String,\n\t\t\t\t\tusername: String,\n\t\t\t\t\tpassword: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { host, port, username, password } = this.queryParams;\n\t\t\treturn API.v1.success(await VoipAsterisk.checkManagementConnection(host, port, username, password));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'voip/callServer/checkConnection',\n\t{ authRequired: true, permissionsRequired: ['manage-voip-contact-center-settings'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\twebsocketUrl: Match.Maybe(String),\n\t\t\t\t\thost: Match.Maybe(String),\n\t\t\t\t\tport: Match.Maybe(String),\n\t\t\t\t\tpath: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { websocketUrl, host, port, path } = this.queryParams;\n\t\t\tif (!websocketUrl && !(host && port && path)) {\n\t\t\t\treturn API.v1.failure('Incorrect / Insufficient Parameters');\n\t\t\t}\n\t\t\tlet socketUrl = websocketUrl as string;\n\t\t\tif (!socketUrl) {\n\t\t\t\t// We will assume that it is always secure.\n\t\t\t\t// This is because you can not have webRTC working with non-secure server.\n\t\t\t\t// It works on non-secure server if it is tested on localhost.\n\t\t\t\tif (parseInt(port as string) !== 443) {\n\t\t\t\t\tsocketUrl = `wss://${host}:${port}/${(path as string).replace('/', '')}`;\n\t\t\t\t} else {\n\t\t\t\t\tsocketUrl = `wss://${host}/${(path as string).replace('/', '')}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn API.v1.success(await VoipAsterisk.checkCallserverConnection(socketUrl));\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/voip/server-connection.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/voip/server-connection.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/voip/server-connection.ts","sourceRoot":"","sources":["app/api/server/v1/voip/server-connection.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAE5C,OAAO,EAAE,GAAG,EAAE,MAAM,WAAW,CAAC;AAEhC,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,uCAAuC,EACvC,EAAE,YAAY,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,qCAAqC,CAAC,EAAE,EACpF;IACC,KAAK,CAAC,GAAG;QACR,KAAK,CACJ,IAAI,CAAC,WAAW,EAChB,KAAK,CAAC,eAAe,CAAC;YACrB,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,MAAM;SAChB,CAAC,CACF,CAAC;QACF,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAC5D,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,YAAY,CAAC,yBAAyB,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;IACrG,CAAC;CACD,CACD,CAAC;AAEF,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iCAAiC,EACjC,EAAE,YAAY,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,qCAAqC,CAAC,EAAE,EACpF;IACC,KAAK,CAAC,GAAG;QACR,KAAK,CACJ,IAAI,CAAC,WAAW,EAChB,KAAK,CAAC,eAAe,CAAC;YACrB,YAAY,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YACjC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YACzB,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YACzB,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;SACzB,CAAC,CACF,CAAC;QACF,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAC5D,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC;YAC9C,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC;QAC9D,CAAC;QACD,IAAI,SAAS,GAAG,YAAsB,CAAC;QACvC,IAAI,CAAC,SAAS,EAAE,CAAC;YAChB,2CAA2C;YAC3C,0EAA0E;YAC1E,8DAA8D;YAC9D,IAAI,QAAQ,CAAC,IAAc,CAAC,KAAK,GAAG,EAAE,CAAC;gBACtC,SAAS,GAAG,SAAS,IAAI,IAAI,IAAI,IAAK,IAAe,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;YAC1E,CAAC;iBAAM,CAAC;gBACP,SAAS,GAAG,SAAS,IAAI,IAAK,IAAe,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;YAClE,CAAC;QACF,CAAC;QAED,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,YAAY,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC,CAAC;IAChF,CAAC;CACD,CACD,CAAC","sourcesContent":["import { VoipAsterisk } from '@rocket.chat/core-services';\nimport { Match, check } from 'meteor/check';\n\nimport { API } from '../../api';\n\nAPI.v1.addRoute(\n\t'voip/managementServer/checkConnection',\n\t{ authRequired: true, permissionsRequired: ['manage-voip-contact-center-settings'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\thost: String,\n\t\t\t\t\tport: String,\n\t\t\t\t\tusername: String,\n\t\t\t\t\tpassword: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { host, port, username, password } = this.queryParams;\n\t\t\treturn API.v1.success(await VoipAsterisk.checkManagementConnection(host, port, username, password));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'voip/callServer/checkConnection',\n\t{ authRequired: true, permissionsRequired: ['manage-voip-contact-center-settings'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\twebsocketUrl: Match.Maybe(String),\n\t\t\t\t\thost: Match.Maybe(String),\n\t\t\t\t\tport: Match.Maybe(String),\n\t\t\t\t\tpath: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { websocketUrl, host, port, path } = this.queryParams;\n\t\t\tif (!websocketUrl && !(host && port && path)) {\n\t\t\t\treturn API.v1.failure('Incorrect / Insufficient Parameters');\n\t\t\t}\n\t\t\tlet socketUrl = websocketUrl as string;\n\t\t\tif (!socketUrl) {\n\t\t\t\t// We will assume that it is always secure.\n\t\t\t\t// This is because you can not have webRTC working with non-secure server.\n\t\t\t\t// It works on non-secure server if it is tested on localhost.\n\t\t\t\tif (parseInt(port as string) !== 443) {\n\t\t\t\t\tsocketUrl = `wss://${host}:${port}/${(path as string).replace('/', '')}`;\n\t\t\t\t} else {\n\t\t\t\t\tsocketUrl = `wss://${host}/${(path as string).replace('/', '')}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn API.v1.success(await VoipAsterisk.checkCallserverConnection(socketUrl));\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let VoipAsterisk;\n    module.link(\"@rocket.chat/core-services\", {\n      VoipAsterisk(v) {\n        VoipAsterisk = v;\n      }\n    }, 0);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 1);\n    let API;\n    module.link(\"../../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    API.v1.addRoute('voip/managementServer/checkConnection', {\n      authRequired: true,\n      permissionsRequired: ['manage-voip-contact-center-settings']\n    }, {\n      async get() {\n        check(this.queryParams, Match.ObjectIncluding({\n          host: String,\n          port: String,\n          username: String,\n          password: String\n        }));\n        const {\n          host,\n          port,\n          username,\n          password\n        } = this.queryParams;\n        return API.v1.success(await VoipAsterisk.checkManagementConnection(host, port, username, password));\n      }\n    });\n    API.v1.addRoute('voip/callServer/checkConnection', {\n      authRequired: true,\n      permissionsRequired: ['manage-voip-contact-center-settings']\n    }, {\n      async get() {\n        check(this.queryParams, Match.ObjectIncluding({\n          websocketUrl: Match.Maybe(String),\n          host: Match.Maybe(String),\n          port: Match.Maybe(String),\n          path: Match.Maybe(String)\n        }));\n        const {\n          websocketUrl,\n          host,\n          port,\n          path\n        } = this.queryParams;\n        if (!websocketUrl && !(host && port && path)) {\n          return API.v1.failure('Incorrect / Insufficient Parameters');\n        }\n        let socketUrl = websocketUrl;\n        if (!socketUrl) {\n          // We will assume that it is always secure.\n          // This is because you can not have webRTC working with non-secure server.\n          // It works on non-secure server if it is tested on localhost.\n          if (parseInt(port) !== 443) {\n            socketUrl = \"wss://\".concat(host, \":\").concat(port, \"/\").concat(path.replace('/', ''));\n          } else {\n            socketUrl = \"wss://\".concat(host, \"/\").concat(path.replace('/', ''));\n          }\n        }\n        return API.v1.success(await VoipAsterisk.checkCallserverConnection(socketUrl));\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["VoipAsterisk","module","link","v","Match","check","API","__reifyWaitForDeps__","v1","addRoute","authRequired","permissionsRequired","get","queryParams","ObjectIncluding","host","String","port","username","password","success","checkManagementConnection","websocketUrl","Maybe","path","failure","socketUrl","parseInt","concat","replace","checkCallserverConnection","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/voip/server-connection.ts"],"sourcesContent":["import { VoipAsterisk } from '@rocket.chat/core-services';\nimport { Match, check } from 'meteor/check';\n\nimport { API } from '../../api';\n\nAPI.v1.addRoute(\n\t'voip/managementServer/checkConnection',\n\t{ authRequired: true, permissionsRequired: ['manage-voip-contact-center-settings'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\thost: String,\n\t\t\t\t\tport: String,\n\t\t\t\t\tusername: String,\n\t\t\t\t\tpassword: String,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { host, port, username, password } = this.queryParams;\n\t\t\treturn API.v1.success(await VoipAsterisk.checkManagementConnection(host, port, username, password));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'voip/callServer/checkConnection',\n\t{ authRequired: true, permissionsRequired: ['manage-voip-contact-center-settings'] },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\twebsocketUrl: Match.Maybe(String),\n\t\t\t\t\thost: Match.Maybe(String),\n\t\t\t\t\tport: Match.Maybe(String),\n\t\t\t\t\tpath: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { websocketUrl, host, port, path } = this.queryParams;\n\t\t\tif (!websocketUrl && !(host && port && path)) {\n\t\t\t\treturn API.v1.failure('Incorrect / Insufficient Parameters');\n\t\t\t}\n\t\t\tlet socketUrl = websocketUrl as string;\n\t\t\tif (!socketUrl) {\n\t\t\t\t// We will assume that it is always secure.\n\t\t\t\t// This is because you can not have webRTC working with non-secure server.\n\t\t\t\t// It works on non-secure server if it is tested on localhost.\n\t\t\t\tif (parseInt(port as string) !== 443) {\n\t\t\t\t\tsocketUrl = `wss://${host}:${port}/${(path as string).replace('/', '')}`;\n\t\t\t\t} else {\n\t\t\t\t\tsocketUrl = `wss://${host}/${(path as string).replace('/', '')}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn API.v1.success(await VoipAsterisk.checkCallserverConnection(socketUrl));\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"10edca17c59dfa99333ba0934e32110739a088ac"}
