{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/ui-utils/client/lib/LegacyRoomManager.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/ui-utils/client/lib/LegacyRoomManager.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/ui-utils/client/lib/LegacyRoomManager.ts","inputSourceMap":{"version":3,"file":"app/ui-utils/client/lib/LegacyRoomManager.ts","sourceRoot":"","sources":["app/ui-utils/client/lib/LegacyRoomManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessage, IRoom } from '@rocket.chat/core-typings';\nimport type { Mongo } from 'meteor/mongo';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport { upsertMessage, RoomHistoryManager } from './RoomHistoryManager';\nimport { mainReady } from './mainReady';\nimport { RoomManager } from '../../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../../client/lib/rooms/roomCoordinator';\nimport { fireGlobalEvent } from '../../../../client/lib/utils/fireGlobalEvent';\nimport { getConfig } from '../../../../client/lib/utils/getConfig';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { CachedChatRoom, ChatMessage, ChatSubscription, CachedChatSubscription } from '../../../models/client';\nimport { sdk } from '../../../utils/client/lib/SDKClient';\n\nconst maxRoomsOpen = parseInt(getConfig('maxRoomsOpen') ?? '5') || 5;\n\nconst openedRooms: Record<\n\tstring,\n\t{\n\t\ttypeName: string;\n\t\trid: IRoom['_id'];\n\t\tready: boolean;\n\t\tactive: boolean;\n\t\tdom?: Node;\n\t\tstreamActive?: boolean;\n\t\tunreadSince: ReactiveVar<Date | undefined>;\n\t\tlastSeen: Date;\n\t\tunreadFirstId?: string;\n\t}\n> = {};\n\nconst openedRoomsDependency = new Tracker.Dependency();\n\nfunction close(typeName: string) {\n\tif (openedRooms[typeName]) {\n\t\tif (openedRooms[typeName].rid) {\n\t\t\tsdk.stop('room-messages', openedRooms[typeName].rid);\n\t\t\tsdk.stop('notify-room', `${openedRooms[typeName].rid}/deleteMessage`);\n\t\t\tsdk.stop('notify-room', `${openedRooms[typeName].rid}/deleteMessageBulk`);\n\t\t}\n\n\t\topenedRooms[typeName].ready = false;\n\t\topenedRooms[typeName].active = false;\n\n\t\tdelete openedRooms[typeName].dom;\n\n\t\tconst { rid } = openedRooms[typeName];\n\t\tdelete openedRooms[typeName];\n\n\t\tif (rid) {\n\t\t\tRoomManager.close(rid);\n\t\t\treturn RoomHistoryManager.clear(rid);\n\t\t}\n\t}\n}\n\nfunction closeOlderRooms() {\n\tif (Object.keys(openedRooms).length <= maxRoomsOpen) {\n\t\treturn;\n\t}\n\tconst roomsToClose = Object.values(openedRooms)\n\t\t.sort((a, b) => b.lastSeen.getTime() - a.lastSeen.getTime())\n\t\t.slice(maxRoomsOpen);\n\treturn Array.from(roomsToClose).map((roomToClose) => close(roomToClose.typeName));\n}\n\nasync function closeAllRooms() {\n\tfor await (const openedRoom of Object.values(openedRooms)) {\n\t\tawait close(openedRoom.typeName);\n\t}\n}\n\nfunction getOpenedRoomByRid(rid: IRoom['_id']) {\n\topenedRoomsDependency.depend();\n\treturn Object.keys(openedRooms)\n\t\t.map((typeName) => openedRooms[typeName])\n\t\t.find((openedRoom) => openedRoom.rid === rid);\n}\n\nconst computation = Tracker.autorun(() => {\n\tconst ready = CachedChatRoom.ready.get() && mainReady.get();\n\tif (ready !== true) {\n\t\treturn;\n\t}\n\tTracker.nonreactive(() =>\n\t\tObject.entries(openedRooms).forEach(([typeName, record]) => {\n\t\t\tif (record.active !== true || record.ready === true) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst type = typeName.slice(0, 1);\n\t\t\tconst name = typeName.slice(1);\n\n\t\t\tconst room = roomCoordinator.getRoomDirectives(type).findRoom(name);\n\n\t\t\tvoid RoomHistoryManager.getMoreIfIsEmpty(record.rid);\n\n\t\t\tif (room) {\n\t\t\t\tif (record.streamActive !== true) {\n\t\t\t\t\tvoid sdk\n\t\t\t\t\t\t.stream('room-messages', [record.rid], async (msg) => {\n\t\t\t\t\t\t\t// Should not send message to room if room has not loaded all the current messages\n\t\t\t\t\t\t\t// if (RoomHistoryManager.hasMoreNext(record.rid) !== false) {\n\t\t\t\t\t\t\t// \treturn;\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// Do not load command messages into channel\n\t\t\t\t\t\t\tif (msg.t !== 'command') {\n\t\t\t\t\t\t\t\tconst subscription = ChatSubscription.findOne({ rid: record.rid }, { reactive: false });\n\t\t\t\t\t\t\t\tconst isNew = !ChatMessage.findOne({ _id: msg._id, temp: { $ne: true } });\n\t\t\t\t\t\t\t\tawait upsertMessage({ msg, subscription });\n\n\t\t\t\t\t\t\t\tif (isNew) {\n\t\t\t\t\t\t\t\t\tawait callbacks.run('streamNewMessage', msg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait callbacks.run('streamMessage', { ...msg, name: room.name || '' });\n\n\t\t\t\t\t\t\tfireGlobalEvent('new-message', {\n\t\t\t\t\t\t\t\t...msg,\n\t\t\t\t\t\t\t\tname: room.name || '',\n\t\t\t\t\t\t\t\troom: {\n\t\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\t.ready()\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\trecord.streamActive = true;\n\t\t\t\t\t\t\topenedRoomsDependency.changed();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t// when we receive a messages imported event we just clear the room history and fetch it again\n\t\t\t\t\tsdk.stream('notify-room', [`${record.rid}/messagesImported`], async () => {\n\t\t\t\t\t\tawait RoomHistoryManager.clear(record.rid);\n\t\t\t\t\t\tawait RoomHistoryManager.getMore(record.rid);\n\t\t\t\t\t});\n\n\t\t\t\t\tsdk.stream('notify-room', [`${record.rid}/deleteMessage`], (msg) => {\n\t\t\t\t\t\tChatMessage.remove({ _id: msg._id });\n\n\t\t\t\t\t\t// remove thread refenrece from deleted message\n\t\t\t\t\t\tChatMessage.update({ tmid: msg._id }, { $unset: { tmid: 1 } }, { multi: true });\n\t\t\t\t\t});\n\n\t\t\t\t\tsdk.stream(\n\t\t\t\t\t\t'notify-room',\n\t\t\t\t\t\t[`${record.rid}/deleteMessageBulk`],\n\t\t\t\t\t\t({ rid, ts, excludePinned, ignoreDiscussion, users, ids, showDeletedStatus }) => {\n\t\t\t\t\t\t\tconst query: Mongo.Selector<IMessage> = { rid };\n\n\t\t\t\t\t\t\tif (ids) {\n\t\t\t\t\t\t\t\tquery._id = { $in: ids };\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tquery.ts = ts;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (excludePinned) {\n\t\t\t\t\t\t\t\tquery.pinned = { $ne: true };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (ignoreDiscussion) {\n\t\t\t\t\t\t\t\tquery.drid = { $exists: false };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (users?.length) {\n\t\t\t\t\t\t\t\tquery['u.username'] = { $in: users };\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (showDeletedStatus) {\n\t\t\t\t\t\t\t\treturn ChatMessage.update(\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t{ $set: { t: 'rm', msg: '', urls: [], mentions: [], attachments: [], reactions: {} } },\n\t\t\t\t\t\t\t\t\t{ multi: true },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ChatMessage.remove(query);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\tsdk.stream('notify-room', [`${record.rid}/messagesRead`], ({ tmid, until }) => {\n\t\t\t\t\t\tif (tmid) {\n\t\t\t\t\t\t\treturn ChatMessage.update(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmid,\n\t\t\t\t\t\t\t\t\tunread: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ $unset: { unread: 1 } },\n\t\t\t\t\t\t\t\t{ multi: true },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tChatMessage.update(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trid: record.rid,\n\t\t\t\t\t\t\t\tunread: true,\n\t\t\t\t\t\t\t\tts: { $lt: until },\n\t\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ $unset: { unread: 1 } },\n\t\t\t\t\t\t\t{ multi: true },\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trecord.ready = true;\n\t\t}),\n\t);\n\topenedRoomsDependency.changed();\n});\n\nfunction open({ typeName, rid }: { typeName: string; rid: IRoom['_id'] }) {\n\tif (!openedRooms[typeName]) {\n\t\topenedRooms[typeName] = {\n\t\t\ttypeName,\n\t\t\trid,\n\t\t\tactive: false,\n\t\t\tready: false,\n\t\t\tunreadSince: new ReactiveVar(undefined),\n\t\t\tlastSeen: new Date(),\n\t\t};\n\t}\n\n\topenedRooms[typeName].lastSeen = new Date();\n\n\tif (openedRooms[typeName].ready) {\n\t\tcloseOlderRooms();\n\t}\n\n\tif (CachedChatSubscription.ready.get() === true) {\n\t\tif (openedRooms[typeName].active !== true) {\n\t\t\topenedRooms[typeName].active = true;\n\t\t\tif (computation) {\n\t\t\t\tcomputation.invalidate();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tready() {\n\t\t\topenedRoomsDependency.depend();\n\t\t\treturn openedRooms[typeName].ready;\n\t\t},\n\t};\n}\n\nlet openedRoom: string | undefined = undefined;\n\nexport const LegacyRoomManager = {\n\tget openedRoom() {\n\t\treturn openedRoom;\n\t},\n\n\tset openedRoom(rid) {\n\t\topenedRoom = rid;\n\t},\n\n\tget openedRooms() {\n\t\treturn openedRooms;\n\t},\n\n\tgetOpenedRoomByRid,\n\n\tclose,\n\n\tcloseAllRooms,\n\n\tget computation() {\n\t\treturn computation;\n\t},\n\n\topen,\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/ui-utils/client/lib/LegacyRoomManager.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/ui-utils/client/lib/LegacyRoomManager.ts","inputSourceMap":{"version":3,"file":"app/ui-utils/client/lib/LegacyRoomManager.ts","sourceRoot":"","sources":["app/ui-utils/client/lib/LegacyRoomManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessage, IRoom } from '@rocket.chat/core-typings';\nimport type { Mongo } from 'meteor/mongo';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport { upsertMessage, RoomHistoryManager } from './RoomHistoryManager';\nimport { mainReady } from './mainReady';\nimport { RoomManager } from '../../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../../client/lib/rooms/roomCoordinator';\nimport { fireGlobalEvent } from '../../../../client/lib/utils/fireGlobalEvent';\nimport { getConfig } from '../../../../client/lib/utils/getConfig';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { CachedChatRoom, ChatMessage, ChatSubscription, CachedChatSubscription } from '../../../models/client';\nimport { sdk } from '../../../utils/client/lib/SDKClient';\n\nconst maxRoomsOpen = parseInt(getConfig('maxRoomsOpen') ?? '5') || 5;\n\nconst openedRooms: Record<\n\tstring,\n\t{\n\t\ttypeName: string;\n\t\trid: IRoom['_id'];\n\t\tready: boolean;\n\t\tactive: boolean;\n\t\tdom?: Node;\n\t\tstreamActive?: boolean;\n\t\tunreadSince: ReactiveVar<Date | undefined>;\n\t\tlastSeen: Date;\n\t\tunreadFirstId?: string;\n\t}\n> = {};\n\nconst openedRoomsDependency = new Tracker.Dependency();\n\nfunction close(typeName: string) {\n\tif (openedRooms[typeName]) {\n\t\tif (openedRooms[typeName].rid) {\n\t\t\tsdk.stop('room-messages', openedRooms[typeName].rid);\n\t\t\tsdk.stop('notify-room', `${openedRooms[typeName].rid}/deleteMessage`);\n\t\t\tsdk.stop('notify-room', `${openedRooms[typeName].rid}/deleteMessageBulk`);\n\t\t}\n\n\t\topenedRooms[typeName].ready = false;\n\t\topenedRooms[typeName].active = false;\n\n\t\tdelete openedRooms[typeName].dom;\n\n\t\tconst { rid } = openedRooms[typeName];\n\t\tdelete openedRooms[typeName];\n\n\t\tif (rid) {\n\t\t\tRoomManager.close(rid);\n\t\t\treturn RoomHistoryManager.clear(rid);\n\t\t}\n\t}\n}\n\nfunction closeOlderRooms() {\n\tif (Object.keys(openedRooms).length <= maxRoomsOpen) {\n\t\treturn;\n\t}\n\tconst roomsToClose = Object.values(openedRooms)\n\t\t.sort((a, b) => b.lastSeen.getTime() - a.lastSeen.getTime())\n\t\t.slice(maxRoomsOpen);\n\treturn Array.from(roomsToClose).map((roomToClose) => close(roomToClose.typeName));\n}\n\nasync function closeAllRooms() {\n\tfor await (const openedRoom of Object.values(openedRooms)) {\n\t\tawait close(openedRoom.typeName);\n\t}\n}\n\nfunction getOpenedRoomByRid(rid: IRoom['_id']) {\n\topenedRoomsDependency.depend();\n\treturn Object.keys(openedRooms)\n\t\t.map((typeName) => openedRooms[typeName])\n\t\t.find((openedRoom) => openedRoom.rid === rid);\n}\n\nconst computation = Tracker.autorun(() => {\n\tconst ready = CachedChatRoom.ready.get() && mainReady.get();\n\tif (ready !== true) {\n\t\treturn;\n\t}\n\tTracker.nonreactive(() =>\n\t\tObject.entries(openedRooms).forEach(([typeName, record]) => {\n\t\t\tif (record.active !== true || record.ready === true) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst type = typeName.slice(0, 1);\n\t\t\tconst name = typeName.slice(1);\n\n\t\t\tconst room = roomCoordinator.getRoomDirectives(type).findRoom(name);\n\n\t\t\tvoid RoomHistoryManager.getMoreIfIsEmpty(record.rid);\n\n\t\t\tif (room) {\n\t\t\t\tif (record.streamActive !== true) {\n\t\t\t\t\tvoid sdk\n\t\t\t\t\t\t.stream('room-messages', [record.rid], async (msg) => {\n\t\t\t\t\t\t\t// Should not send message to room if room has not loaded all the current messages\n\t\t\t\t\t\t\t// if (RoomHistoryManager.hasMoreNext(record.rid) !== false) {\n\t\t\t\t\t\t\t// \treturn;\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// Do not load command messages into channel\n\t\t\t\t\t\t\tif (msg.t !== 'command') {\n\t\t\t\t\t\t\t\tconst subscription = ChatSubscription.findOne({ rid: record.rid }, { reactive: false });\n\t\t\t\t\t\t\t\tconst isNew = !ChatMessage.findOne({ _id: msg._id, temp: { $ne: true } });\n\t\t\t\t\t\t\t\tawait upsertMessage({ msg, subscription });\n\n\t\t\t\t\t\t\t\tif (isNew) {\n\t\t\t\t\t\t\t\t\tawait callbacks.run('streamNewMessage', msg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait callbacks.run('streamMessage', { ...msg, name: room.name || '' });\n\n\t\t\t\t\t\t\tfireGlobalEvent('new-message', {\n\t\t\t\t\t\t\t\t...msg,\n\t\t\t\t\t\t\t\tname: room.name || '',\n\t\t\t\t\t\t\t\troom: {\n\t\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\t.ready()\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\trecord.streamActive = true;\n\t\t\t\t\t\t\topenedRoomsDependency.changed();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t// when we receive a messages imported event we just clear the room history and fetch it again\n\t\t\t\t\tsdk.stream('notify-room', [`${record.rid}/messagesImported`], async () => {\n\t\t\t\t\t\tawait RoomHistoryManager.clear(record.rid);\n\t\t\t\t\t\tawait RoomHistoryManager.getMore(record.rid);\n\t\t\t\t\t});\n\n\t\t\t\t\tsdk.stream('notify-room', [`${record.rid}/deleteMessage`], (msg) => {\n\t\t\t\t\t\tChatMessage.remove({ _id: msg._id });\n\n\t\t\t\t\t\t// remove thread refenrece from deleted message\n\t\t\t\t\t\tChatMessage.update({ tmid: msg._id }, { $unset: { tmid: 1 } }, { multi: true });\n\t\t\t\t\t});\n\n\t\t\t\t\tsdk.stream(\n\t\t\t\t\t\t'notify-room',\n\t\t\t\t\t\t[`${record.rid}/deleteMessageBulk`],\n\t\t\t\t\t\t({ rid, ts, excludePinned, ignoreDiscussion, users, ids, showDeletedStatus }) => {\n\t\t\t\t\t\t\tconst query: Mongo.Selector<IMessage> = { rid };\n\n\t\t\t\t\t\t\tif (ids) {\n\t\t\t\t\t\t\t\tquery._id = { $in: ids };\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tquery.ts = ts;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (excludePinned) {\n\t\t\t\t\t\t\t\tquery.pinned = { $ne: true };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (ignoreDiscussion) {\n\t\t\t\t\t\t\t\tquery.drid = { $exists: false };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (users?.length) {\n\t\t\t\t\t\t\t\tquery['u.username'] = { $in: users };\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (showDeletedStatus) {\n\t\t\t\t\t\t\t\treturn ChatMessage.update(\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t{ $set: { t: 'rm', msg: '', urls: [], mentions: [], attachments: [], reactions: {} } },\n\t\t\t\t\t\t\t\t\t{ multi: true },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ChatMessage.remove(query);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\tsdk.stream('notify-room', [`${record.rid}/messagesRead`], ({ tmid, until }) => {\n\t\t\t\t\t\tif (tmid) {\n\t\t\t\t\t\t\treturn ChatMessage.update(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmid,\n\t\t\t\t\t\t\t\t\tunread: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ $unset: { unread: 1 } },\n\t\t\t\t\t\t\t\t{ multi: true },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tChatMessage.update(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trid: record.rid,\n\t\t\t\t\t\t\t\tunread: true,\n\t\t\t\t\t\t\t\tts: { $lt: until },\n\t\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ $unset: { unread: 1 } },\n\t\t\t\t\t\t\t{ multi: true },\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trecord.ready = true;\n\t\t}),\n\t);\n\topenedRoomsDependency.changed();\n});\n\nfunction open({ typeName, rid }: { typeName: string; rid: IRoom['_id'] }) {\n\tif (!openedRooms[typeName]) {\n\t\topenedRooms[typeName] = {\n\t\t\ttypeName,\n\t\t\trid,\n\t\t\tactive: false,\n\t\t\tready: false,\n\t\t\tunreadSince: new ReactiveVar(undefined),\n\t\t\tlastSeen: new Date(),\n\t\t};\n\t}\n\n\topenedRooms[typeName].lastSeen = new Date();\n\n\tif (openedRooms[typeName].ready) {\n\t\tcloseOlderRooms();\n\t}\n\n\tif (CachedChatSubscription.ready.get() === true) {\n\t\tif (openedRooms[typeName].active !== true) {\n\t\t\topenedRooms[typeName].active = true;\n\t\t\tif (computation) {\n\t\t\t\tcomputation.invalidate();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tready() {\n\t\t\topenedRoomsDependency.depend();\n\t\t\treturn openedRooms[typeName].ready;\n\t\t},\n\t};\n}\n\nlet openedRoom: string | undefined = undefined;\n\nexport const LegacyRoomManager = {\n\tget openedRoom() {\n\t\treturn openedRoom;\n\t},\n\n\tset openedRoom(rid) {\n\t\topenedRoom = rid;\n\t},\n\n\tget openedRooms() {\n\t\treturn openedRooms;\n\t},\n\n\tgetOpenedRoomByRid,\n\n\tclose,\n\n\tcloseAllRooms,\n\n\tget computation() {\n\t\treturn computation;\n\t},\n\n\topen,\n};\n"]}}},"code":"var _getConfig;\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nlet _asyncIterator;\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n}, 1);\nmodule.export({\n  LegacyRoomManager: () => LegacyRoomManager\n});\nlet ReactiveVar;\nmodule.link(\"meteor/reactive-var\", {\n  ReactiveVar(v) {\n    ReactiveVar = v;\n  }\n}, 0);\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n}, 1);\nlet upsertMessage, RoomHistoryManager;\nmodule.link(\"./RoomHistoryManager\", {\n  upsertMessage(v) {\n    upsertMessage = v;\n  },\n  RoomHistoryManager(v) {\n    RoomHistoryManager = v;\n  }\n}, 2);\nlet mainReady;\nmodule.link(\"./mainReady\", {\n  mainReady(v) {\n    mainReady = v;\n  }\n}, 3);\nlet RoomManager;\nmodule.link(\"../../../../client/lib/RoomManager\", {\n  RoomManager(v) {\n    RoomManager = v;\n  }\n}, 4);\nlet roomCoordinator;\nmodule.link(\"../../../../client/lib/rooms/roomCoordinator\", {\n  roomCoordinator(v) {\n    roomCoordinator = v;\n  }\n}, 5);\nlet fireGlobalEvent;\nmodule.link(\"../../../../client/lib/utils/fireGlobalEvent\", {\n  fireGlobalEvent(v) {\n    fireGlobalEvent = v;\n  }\n}, 6);\nlet getConfig;\nmodule.link(\"../../../../client/lib/utils/getConfig\", {\n  getConfig(v) {\n    getConfig = v;\n  }\n}, 7);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n}, 8);\nlet CachedChatRoom, ChatMessage, ChatSubscription, CachedChatSubscription;\nmodule.link(\"../../../models/client\", {\n  CachedChatRoom(v) {\n    CachedChatRoom = v;\n  },\n  ChatMessage(v) {\n    ChatMessage = v;\n  },\n  ChatSubscription(v) {\n    ChatSubscription = v;\n  },\n  CachedChatSubscription(v) {\n    CachedChatSubscription = v;\n  }\n}, 9);\nlet sdk;\nmodule.link(\"../../../utils/client/lib/SDKClient\", {\n  sdk(v) {\n    sdk = v;\n  }\n}, 10);\nconst maxRoomsOpen = parseInt((_getConfig = getConfig('maxRoomsOpen')) !== null && _getConfig !== void 0 ? _getConfig : '5') || 5;\nconst openedRooms = {};\nconst openedRoomsDependency = new Tracker.Dependency();\nfunction close(typeName) {\n  if (openedRooms[typeName]) {\n    if (openedRooms[typeName].rid) {\n      sdk.stop('room-messages', openedRooms[typeName].rid);\n      sdk.stop('notify-room', \"\".concat(openedRooms[typeName].rid, \"/deleteMessage\"));\n      sdk.stop('notify-room', \"\".concat(openedRooms[typeName].rid, \"/deleteMessageBulk\"));\n    }\n    openedRooms[typeName].ready = false;\n    openedRooms[typeName].active = false;\n    delete openedRooms[typeName].dom;\n    const {\n      rid\n    } = openedRooms[typeName];\n    delete openedRooms[typeName];\n    if (rid) {\n      RoomManager.close(rid);\n      return RoomHistoryManager.clear(rid);\n    }\n  }\n}\nfunction closeOlderRooms() {\n  if (Object.keys(openedRooms).length <= maxRoomsOpen) {\n    return;\n  }\n  const roomsToClose = Object.values(openedRooms).sort((a, b) => b.lastSeen.getTime() - a.lastSeen.getTime()).slice(maxRoomsOpen);\n  return Array.from(roomsToClose).map(roomToClose => close(roomToClose.typeName));\n}\nasync function closeAllRooms() {\n  var _iteratorAbruptCompletion = false;\n  var _didIteratorError = false;\n  var _iteratorError;\n  try {\n    for (var _iterator = _asyncIterator(Object.values(openedRooms)), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n      const openedRoom = _step.value;\n      {\n        await close(openedRoom.typeName);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (_iteratorAbruptCompletion && _iterator.return != null) {\n        await _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\nfunction getOpenedRoomByRid(rid) {\n  openedRoomsDependency.depend();\n  return Object.keys(openedRooms).map(typeName => openedRooms[typeName]).find(openedRoom => openedRoom.rid === rid);\n}\nconst computation = Tracker.autorun(() => {\n  const ready = CachedChatRoom.ready.get() && mainReady.get();\n  if (ready !== true) {\n    return;\n  }\n  Tracker.nonreactive(() => Object.entries(openedRooms).forEach(_ref => {\n    let [typeName, record] = _ref;\n    if (record.active !== true || record.ready === true) {\n      return;\n    }\n    const type = typeName.slice(0, 1);\n    const name = typeName.slice(1);\n    const room = roomCoordinator.getRoomDirectives(type).findRoom(name);\n    void RoomHistoryManager.getMoreIfIsEmpty(record.rid);\n    if (room) {\n      if (record.streamActive !== true) {\n        void sdk.stream('room-messages', [record.rid], async msg => {\n          // Should not send message to room if room has not loaded all the current messages\n          // if (RoomHistoryManager.hasMoreNext(record.rid) !== false) {\n          // \treturn;\n          // }\n          // Do not load command messages into channel\n          if (msg.t !== 'command') {\n            const subscription = ChatSubscription.findOne({\n              rid: record.rid\n            }, {\n              reactive: false\n            });\n            const isNew = !ChatMessage.findOne({\n              _id: msg._id,\n              temp: {\n                $ne: true\n              }\n            });\n            await upsertMessage({\n              msg,\n              subscription\n            });\n            if (isNew) {\n              await callbacks.run('streamNewMessage', msg);\n            }\n          }\n          await callbacks.run('streamMessage', _objectSpread(_objectSpread({}, msg), {}, {\n            name: room.name || ''\n          }));\n          fireGlobalEvent('new-message', _objectSpread(_objectSpread({}, msg), {}, {\n            name: room.name || '',\n            room: {\n              type,\n              name\n            }\n          }));\n        }).ready().then(() => {\n          record.streamActive = true;\n          openedRoomsDependency.changed();\n        });\n        // when we receive a messages imported event we just clear the room history and fetch it again\n        sdk.stream('notify-room', [\"\".concat(record.rid, \"/messagesImported\")], async () => {\n          await RoomHistoryManager.clear(record.rid);\n          await RoomHistoryManager.getMore(record.rid);\n        });\n        sdk.stream('notify-room', [\"\".concat(record.rid, \"/deleteMessage\")], msg => {\n          ChatMessage.remove({\n            _id: msg._id\n          });\n          // remove thread refenrece from deleted message\n          ChatMessage.update({\n            tmid: msg._id\n          }, {\n            $unset: {\n              tmid: 1\n            }\n          }, {\n            multi: true\n          });\n        });\n        sdk.stream('notify-room', [\"\".concat(record.rid, \"/deleteMessageBulk\")], _ref2 => {\n          let {\n            rid,\n            ts,\n            excludePinned,\n            ignoreDiscussion,\n            users,\n            ids,\n            showDeletedStatus\n          } = _ref2;\n          const query = {\n            rid\n          };\n          if (ids) {\n            query._id = {\n              $in: ids\n            };\n          } else {\n            query.ts = ts;\n          }\n          if (excludePinned) {\n            query.pinned = {\n              $ne: true\n            };\n          }\n          if (ignoreDiscussion) {\n            query.drid = {\n              $exists: false\n            };\n          }\n          if (users !== null && users !== void 0 && users.length) {\n            query['u.username'] = {\n              $in: users\n            };\n          }\n          if (showDeletedStatus) {\n            return ChatMessage.update(query, {\n              $set: {\n                t: 'rm',\n                msg: '',\n                urls: [],\n                mentions: [],\n                attachments: [],\n                reactions: {}\n              }\n            }, {\n              multi: true\n            });\n          }\n          return ChatMessage.remove(query);\n        });\n        sdk.stream('notify-room', [\"\".concat(record.rid, \"/messagesRead\")], _ref3 => {\n          let {\n            tmid,\n            until\n          } = _ref3;\n          if (tmid) {\n            return ChatMessage.update({\n              tmid,\n              unread: true\n            }, {\n              $unset: {\n                unread: 1\n              }\n            }, {\n              multi: true\n            });\n          }\n          ChatMessage.update({\n            rid: record.rid,\n            unread: true,\n            ts: {\n              $lt: until\n            },\n            $or: [{\n              tmid: {\n                $exists: false\n              }\n            }, {\n              tshow: true\n            }]\n          }, {\n            $unset: {\n              unread: 1\n            }\n          }, {\n            multi: true\n          });\n        });\n      }\n    }\n    record.ready = true;\n  }));\n  openedRoomsDependency.changed();\n});\nfunction open(_ref4) {\n  let {\n    typeName,\n    rid\n  } = _ref4;\n  if (!openedRooms[typeName]) {\n    openedRooms[typeName] = {\n      typeName,\n      rid,\n      active: false,\n      ready: false,\n      unreadSince: new ReactiveVar(undefined),\n      lastSeen: new Date()\n    };\n  }\n  openedRooms[typeName].lastSeen = new Date();\n  if (openedRooms[typeName].ready) {\n    closeOlderRooms();\n  }\n  if (CachedChatSubscription.ready.get() === true) {\n    if (openedRooms[typeName].active !== true) {\n      openedRooms[typeName].active = true;\n      if (computation) {\n        computation.invalidate();\n      }\n    }\n  }\n  return {\n    ready() {\n      openedRoomsDependency.depend();\n      return openedRooms[typeName].ready;\n    }\n  };\n}\nlet openedRoom = undefined;\nconst LegacyRoomManager = {\n  get openedRoom() {\n    return openedRoom;\n  },\n  set openedRoom(rid) {\n    openedRoom = rid;\n  },\n  get openedRooms() {\n    return openedRooms;\n  },\n  getOpenedRoomByRid,\n  close,\n  closeAllRooms,\n  get computation() {\n    return computation;\n  },\n  open\n};","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","LegacyRoomManager","ReactiveVar","Tracker","upsertMessage","RoomHistoryManager","mainReady","RoomManager","roomCoordinator","fireGlobalEvent","getConfig","callbacks","CachedChatRoom","ChatMessage","ChatSubscription","CachedChatSubscription","sdk","maxRoomsOpen","parseInt","_getConfig","openedRooms","openedRoomsDependency","Dependency","close","typeName","rid","stop","concat","ready","active","dom","clear","closeOlderRooms","Object","keys","length","roomsToClose","values","sort","a","b","lastSeen","getTime","slice","Array","from","map","roomToClose","closeAllRooms","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","openedRoom","value","err","return","getOpenedRoomByRid","depend","find","computation","autorun","get","nonreactive","entries","forEach","_ref","record","type","name","room","getRoomDirectives","findRoom","getMoreIfIsEmpty","streamActive","stream","msg","t","subscription","findOne","reactive","isNew","_id","temp","$ne","run","then","changed","getMore","remove","update","tmid","$unset","multi","_ref2","ts","excludePinned","ignoreDiscussion","users","ids","showDeletedStatus","query","$in","pinned","drid","$exists","$set","urls","mentions","attachments","reactions","_ref3","until","unread","$lt","$or","tshow","open","_ref4","unreadSince","undefined","Date","invalidate"],"sources":["app/ui-utils/client/lib/LegacyRoomManager.ts"],"sourcesContent":["import type { IMessage, IRoom } from '@rocket.chat/core-typings';\nimport type { Mongo } from 'meteor/mongo';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport { upsertMessage, RoomHistoryManager } from './RoomHistoryManager';\nimport { mainReady } from './mainReady';\nimport { RoomManager } from '../../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../../client/lib/rooms/roomCoordinator';\nimport { fireGlobalEvent } from '../../../../client/lib/utils/fireGlobalEvent';\nimport { getConfig } from '../../../../client/lib/utils/getConfig';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { CachedChatRoom, ChatMessage, ChatSubscription, CachedChatSubscription } from '../../../models/client';\nimport { sdk } from '../../../utils/client/lib/SDKClient';\n\nconst maxRoomsOpen = parseInt(getConfig('maxRoomsOpen') ?? '5') || 5;\n\nconst openedRooms: Record<\n\tstring,\n\t{\n\t\ttypeName: string;\n\t\trid: IRoom['_id'];\n\t\tready: boolean;\n\t\tactive: boolean;\n\t\tdom?: Node;\n\t\tstreamActive?: boolean;\n\t\tunreadSince: ReactiveVar<Date | undefined>;\n\t\tlastSeen: Date;\n\t\tunreadFirstId?: string;\n\t}\n> = {};\n\nconst openedRoomsDependency = new Tracker.Dependency();\n\nfunction close(typeName: string) {\n\tif (openedRooms[typeName]) {\n\t\tif (openedRooms[typeName].rid) {\n\t\t\tsdk.stop('room-messages', openedRooms[typeName].rid);\n\t\t\tsdk.stop('notify-room', `${openedRooms[typeName].rid}/deleteMessage`);\n\t\t\tsdk.stop('notify-room', `${openedRooms[typeName].rid}/deleteMessageBulk`);\n\t\t}\n\n\t\topenedRooms[typeName].ready = false;\n\t\topenedRooms[typeName].active = false;\n\n\t\tdelete openedRooms[typeName].dom;\n\n\t\tconst { rid } = openedRooms[typeName];\n\t\tdelete openedRooms[typeName];\n\n\t\tif (rid) {\n\t\t\tRoomManager.close(rid);\n\t\t\treturn RoomHistoryManager.clear(rid);\n\t\t}\n\t}\n}\n\nfunction closeOlderRooms() {\n\tif (Object.keys(openedRooms).length <= maxRoomsOpen) {\n\t\treturn;\n\t}\n\tconst roomsToClose = Object.values(openedRooms)\n\t\t.sort((a, b) => b.lastSeen.getTime() - a.lastSeen.getTime())\n\t\t.slice(maxRoomsOpen);\n\treturn Array.from(roomsToClose).map((roomToClose) => close(roomToClose.typeName));\n}\n\nasync function closeAllRooms() {\n\tfor await (const openedRoom of Object.values(openedRooms)) {\n\t\tawait close(openedRoom.typeName);\n\t}\n}\n\nfunction getOpenedRoomByRid(rid: IRoom['_id']) {\n\topenedRoomsDependency.depend();\n\treturn Object.keys(openedRooms)\n\t\t.map((typeName) => openedRooms[typeName])\n\t\t.find((openedRoom) => openedRoom.rid === rid);\n}\n\nconst computation = Tracker.autorun(() => {\n\tconst ready = CachedChatRoom.ready.get() && mainReady.get();\n\tif (ready !== true) {\n\t\treturn;\n\t}\n\tTracker.nonreactive(() =>\n\t\tObject.entries(openedRooms).forEach(([typeName, record]) => {\n\t\t\tif (record.active !== true || record.ready === true) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst type = typeName.slice(0, 1);\n\t\t\tconst name = typeName.slice(1);\n\n\t\t\tconst room = roomCoordinator.getRoomDirectives(type).findRoom(name);\n\n\t\t\tvoid RoomHistoryManager.getMoreIfIsEmpty(record.rid);\n\n\t\t\tif (room) {\n\t\t\t\tif (record.streamActive !== true) {\n\t\t\t\t\tvoid sdk\n\t\t\t\t\t\t.stream('room-messages', [record.rid], async (msg) => {\n\t\t\t\t\t\t\t// Should not send message to room if room has not loaded all the current messages\n\t\t\t\t\t\t\t// if (RoomHistoryManager.hasMoreNext(record.rid) !== false) {\n\t\t\t\t\t\t\t// \treturn;\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t// Do not load command messages into channel\n\t\t\t\t\t\t\tif (msg.t !== 'command') {\n\t\t\t\t\t\t\t\tconst subscription = ChatSubscription.findOne({ rid: record.rid }, { reactive: false });\n\t\t\t\t\t\t\t\tconst isNew = !ChatMessage.findOne({ _id: msg._id, temp: { $ne: true } });\n\t\t\t\t\t\t\t\tawait upsertMessage({ msg, subscription });\n\n\t\t\t\t\t\t\t\tif (isNew) {\n\t\t\t\t\t\t\t\t\tawait callbacks.run('streamNewMessage', msg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait callbacks.run('streamMessage', { ...msg, name: room.name || '' });\n\n\t\t\t\t\t\t\tfireGlobalEvent('new-message', {\n\t\t\t\t\t\t\t\t...msg,\n\t\t\t\t\t\t\t\tname: room.name || '',\n\t\t\t\t\t\t\t\troom: {\n\t\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\t.ready()\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\trecord.streamActive = true;\n\t\t\t\t\t\t\topenedRoomsDependency.changed();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t// when we receive a messages imported event we just clear the room history and fetch it again\n\t\t\t\t\tsdk.stream('notify-room', [`${record.rid}/messagesImported`], async () => {\n\t\t\t\t\t\tawait RoomHistoryManager.clear(record.rid);\n\t\t\t\t\t\tawait RoomHistoryManager.getMore(record.rid);\n\t\t\t\t\t});\n\n\t\t\t\t\tsdk.stream('notify-room', [`${record.rid}/deleteMessage`], (msg) => {\n\t\t\t\t\t\tChatMessage.remove({ _id: msg._id });\n\n\t\t\t\t\t\t// remove thread refenrece from deleted message\n\t\t\t\t\t\tChatMessage.update({ tmid: msg._id }, { $unset: { tmid: 1 } }, { multi: true });\n\t\t\t\t\t});\n\n\t\t\t\t\tsdk.stream(\n\t\t\t\t\t\t'notify-room',\n\t\t\t\t\t\t[`${record.rid}/deleteMessageBulk`],\n\t\t\t\t\t\t({ rid, ts, excludePinned, ignoreDiscussion, users, ids, showDeletedStatus }) => {\n\t\t\t\t\t\t\tconst query: Mongo.Selector<IMessage> = { rid };\n\n\t\t\t\t\t\t\tif (ids) {\n\t\t\t\t\t\t\t\tquery._id = { $in: ids };\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tquery.ts = ts;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (excludePinned) {\n\t\t\t\t\t\t\t\tquery.pinned = { $ne: true };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (ignoreDiscussion) {\n\t\t\t\t\t\t\t\tquery.drid = { $exists: false };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (users?.length) {\n\t\t\t\t\t\t\t\tquery['u.username'] = { $in: users };\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (showDeletedStatus) {\n\t\t\t\t\t\t\t\treturn ChatMessage.update(\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t{ $set: { t: 'rm', msg: '', urls: [], mentions: [], attachments: [], reactions: {} } },\n\t\t\t\t\t\t\t\t\t{ multi: true },\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn ChatMessage.remove(query);\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\tsdk.stream('notify-room', [`${record.rid}/messagesRead`], ({ tmid, until }) => {\n\t\t\t\t\t\tif (tmid) {\n\t\t\t\t\t\t\treturn ChatMessage.update(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmid,\n\t\t\t\t\t\t\t\t\tunread: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ $unset: { unread: 1 } },\n\t\t\t\t\t\t\t\t{ multi: true },\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tChatMessage.update(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trid: record.rid,\n\t\t\t\t\t\t\t\tunread: true,\n\t\t\t\t\t\t\t\tts: { $lt: until },\n\t\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ $unset: { unread: 1 } },\n\t\t\t\t\t\t\t{ multi: true },\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trecord.ready = true;\n\t\t}),\n\t);\n\topenedRoomsDependency.changed();\n});\n\nfunction open({ typeName, rid }: { typeName: string; rid: IRoom['_id'] }) {\n\tif (!openedRooms[typeName]) {\n\t\topenedRooms[typeName] = {\n\t\t\ttypeName,\n\t\t\trid,\n\t\t\tactive: false,\n\t\t\tready: false,\n\t\t\tunreadSince: new ReactiveVar(undefined),\n\t\t\tlastSeen: new Date(),\n\t\t};\n\t}\n\n\topenedRooms[typeName].lastSeen = new Date();\n\n\tif (openedRooms[typeName].ready) {\n\t\tcloseOlderRooms();\n\t}\n\n\tif (CachedChatSubscription.ready.get() === true) {\n\t\tif (openedRooms[typeName].active !== true) {\n\t\t\topenedRooms[typeName].active = true;\n\t\t\tif (computation) {\n\t\t\t\tcomputation.invalidate();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tready() {\n\t\t\topenedRoomsDependency.depend();\n\t\t\treturn openedRooms[typeName].ready;\n\t\t},\n\t};\n}\n\nlet openedRoom: string | undefined = undefined;\n\nexport const LegacyRoomManager = {\n\tget openedRoom() {\n\t\treturn openedRoom;\n\t},\n\n\tset openedRoom(rid) {\n\t\topenedRoom = rid;\n\t},\n\n\tget openedRooms() {\n\t\treturn openedRooms;\n\t},\n\n\tgetOpenedRoomByRid,\n\n\tclose,\n\n\tcloseAllRooms,\n\n\tget computation() {\n\t\treturn computation;\n\t},\n\n\topen,\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"a82f4c4dac1c768aa6c899f0ee16202afa4e1776"}
