{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push/server/push.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/push/server/push.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push/server/push.ts","inputSourceMap":{"version":3,"file":"app/push/server/push.ts","sourceRoot":"","sources":["app/push/server/push.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAppsTokens, RequiredField, Optional, IPushNotificationConfig } from '@rocket.chat/core-typings';\nimport { AppsTokens } from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { pick } from '@rocket.chat/tools';\nimport Ajv from 'ajv';\nimport { JWT } from 'google-auth-library';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { initAPN, sendAPN } from './apn';\nimport type { PushOptions, PendingPushNotification } from './definition';\nimport { sendFCM } from './fcm';\nimport { sendGCM } from './gcm';\nimport { logger } from './logger';\nimport { settings } from '../../settings/server';\n\nexport const _matchToken = Match.OneOf({ apn: String }, { gcm: String });\n\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\nexport type FCMCredentials = {\n\ttype: string;\n\tproject_id: string;\n\tprivate_key_id: string;\n\tprivate_key: string;\n\tclient_email: string;\n\tclient_id: string;\n\tauth_uri: string;\n\ttoken_uri: string;\n\tauth_provider_x509_cert_url: string;\n\tclient_x509_cert_url: string;\n\tuniverse_domain: string;\n};\n\nexport const FCMCredentialsValidationSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\ttype: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tproject_id: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tprivate_key_id: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tprivate_key: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tclient_email: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tclient_id: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tauth_uri: {\n\t\t\ttype: 'string',\n\t\t},\n\t\ttoken_uri: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tauth_provider_x509_cert_url: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tclient_x509_cert_url: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tuniverse_domain: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n\trequired: ['client_email', 'project_id', 'private_key_id', 'private_key'],\n};\n\nexport const isFCMCredentials = ajv.compile<FCMCredentials>(FCMCredentialsValidationSchema);\n\n// This type must match the type defined in the push gateway\ntype GatewayNotification = {\n\tuniqueId: string;\n\tfrom: string;\n\ttitle: string;\n\ttext: string;\n\tbadge?: number;\n\tsound?: string;\n\tnotId?: number;\n\tcontentAvailable?: 1 | 0;\n\tforceStart?: number;\n\ttopic?: string;\n\tapn?: {\n\t\tfrom?: string;\n\t\ttitle?: string;\n\t\ttext?: string;\n\t\tbadge?: number;\n\t\tsound?: string;\n\t\tnotId?: number;\n\t\tcategory?: string;\n\t};\n\tgcm?: {\n\t\tfrom?: string;\n\t\ttitle?: string;\n\t\ttext?: string;\n\t\timage?: string;\n\t\tstyle?: string;\n\t\tsummaryText?: string;\n\t\tpicture?: string;\n\t\tbadge?: number;\n\t\tsound?: string;\n\t\tnotId?: number;\n\t\tactions?: any[];\n\t};\n\tquery?: {\n\t\tuserId: any;\n\t};\n\ttoken?: IAppsTokens['token'];\n\ttokens?: IAppsTokens['token'][];\n\tpayload?: Record<string, any>;\n\tdelayUntil?: Date;\n\tcreatedAt: Date;\n\tcreatedBy?: string;\n};\n\nexport type NativeNotificationParameters = {\n\tuserTokens: string | string[];\n\tnotification: PendingPushNotification;\n\t_replaceToken: (currentToken: IAppsTokens['token'], newToken: IAppsTokens['token']) => void;\n\t_removeToken: (token: IAppsTokens['token']) => void;\n\toptions: RequiredField<PushOptions, 'gcm'>;\n};\n\nclass PushClass {\n\toptions: PushOptions = {\n\t\tuniqueId: '',\n\t};\n\n\tisConfigured = false;\n\n\tpublic configure(options: PushOptions): void {\n\t\tthis.options = {\n\t\t\tsendTimeout: 60000, // Timeout period for notification send\n\t\t\t...options,\n\t\t};\n\t\t// https://npmjs.org/package/apn\n\n\t\t// After requesting the certificate from Apple, export your private key as\n\t\t// a .p12 file anddownload the .cer file from the iOS Provisioning Portal.\n\n\t\t// gateway.push.apple.com, port 2195\n\t\t// gateway.sandbox.push.apple.com, port 2195\n\n\t\t// Now, in the directory containing cert.cer and key.p12 execute the\n\t\t// following commands to generate your .pem files:\n\t\t// $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem\n\t\t// $ openssl pkcs12 -in key.p12 -out key.pem -nodes\n\n\t\t// Block multiple calls\n\t\tif (this.isConfigured) {\n\t\t\tthrow new Error('Configure should not be called more than once!');\n\t\t}\n\n\t\tthis.isConfigured = true;\n\n\t\tlogger.debug('Configure', this.options);\n\n\t\tif (this.options.apn) {\n\t\t\tinitAPN({ options: this.options as RequiredField<PushOptions, 'apn'>, absoluteUrl: Meteor.absoluteUrl() });\n\t\t}\n\t}\n\n\tprivate replaceToken(currentToken: IAppsTokens['token'], newToken: IAppsTokens['token']): void {\n\t\tvoid AppsTokens.updateMany({ token: currentToken }, { $set: { token: newToken } });\n\t}\n\n\tprivate removeToken(token: IAppsTokens['token']): void {\n\t\tvoid AppsTokens.deleteOne({ token });\n\t}\n\n\tprivate shouldUseGateway(): boolean {\n\t\treturn Boolean(!!this.options.gateways && settings.get('Register_Server') && settings.get('Cloud_Service_Agree_PrivacyTerms'));\n\t}\n\n\tprivate async sendNotificationNative(\n\t\tapp: IAppsTokens,\n\t\tnotification: PendingPushNotification,\n\t\tcountApn: string[],\n\t\tcountGcm: string[],\n\t): Promise<void> {\n\t\tlogger.debug('send to token', app.token);\n\n\t\tif ('apn' in app.token && app.token.apn) {\n\t\t\tcountApn.push(app._id);\n\t\t\t// Send to APN\n\t\t\tif (this.options.apn) {\n\t\t\t\tsendAPN({ userToken: app.token.apn, notification: { topic: app.appName, ...notification }, _removeToken: this.removeToken });\n\t\t\t}\n\t\t} else if ('gcm' in app.token && app.token.gcm) {\n\t\t\tcountGcm.push(app._id);\n\n\t\t\t// Send to GCM\n\t\t\t// We do support multiple here - so we should construct an array\n\t\t\t// and send it bulk - Investigate limit count of id's\n\t\t\t// TODO: Remove this after the legacy provider is removed\n\t\t\tconst useLegacyProvider = settings.get<boolean>('Push_UseLegacy');\n\n\t\t\tif (!useLegacyProvider) {\n\t\t\t\t// override this.options.gcm.apiKey with the oauth2 token\n\t\t\t\tconst { projectId, token } = await this.getNativeNotificationAuthorizationCredentials();\n\t\t\t\tconst sendGCMOptions = {\n\t\t\t\t\t...this.options,\n\t\t\t\t\tgcm: {\n\t\t\t\t\t\t...this.options.gcm,\n\t\t\t\t\t\tapiKey: token,\n\t\t\t\t\t\tprojectNumber: projectId,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tsendFCM({\n\t\t\t\t\tuserTokens: app.token.gcm,\n\t\t\t\t\tnotification,\n\t\t\t\t\t_replaceToken: this.replaceToken,\n\t\t\t\t\t_removeToken: this.removeToken,\n\t\t\t\t\toptions: sendGCMOptions as RequiredField<PushOptions, 'gcm'>,\n\t\t\t\t});\n\t\t\t} else if (this.options.gcm?.apiKey) {\n\t\t\t\tsendGCM({\n\t\t\t\t\tuserTokens: app.token.gcm,\n\t\t\t\t\tnotification,\n\t\t\t\t\t_replaceToken: this.replaceToken,\n\t\t\t\t\t_removeToken: this.removeToken,\n\t\t\t\t\toptions: this.options as RequiredField<PushOptions, 'gcm'>,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('send got a faulty query');\n\t\t}\n\t}\n\n\tprivate async getNativeNotificationAuthorizationCredentials(): Promise<{ token: string; projectId: string }> {\n\t\tconst credentialsString = settings.get<string>('Push_google_api_credentials');\n\t\tif (!credentialsString.trim()) {\n\t\t\tthrow new Error('Push_google_api_credentials is not set');\n\t\t}\n\n\t\ttry {\n\t\t\tconst credentials = JSON.parse(credentialsString);\n\t\t\tif (!isFCMCredentials(credentials)) {\n\t\t\t\tthrow new Error('Push_google_api_credentials is not in the correct format');\n\t\t\t}\n\n\t\t\tconst client = new JWT({\n\t\t\t\temail: credentials.client_email,\n\t\t\t\tkey: credentials.private_key,\n\t\t\t\tkeyId: credentials.private_key_id,\n\t\t\t\tscopes: 'https://www.googleapis.com/auth/firebase.messaging',\n\t\t\t});\n\n\t\t\tawait client.authorize();\n\n\t\t\treturn {\n\t\t\t\ttoken: client.credentials.access_token as string,\n\t\t\t\tprojectId: credentials.project_id,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tlogger.error('Error getting FCM token', error);\n\t\t\tthrow new Error('Error getting FCM token');\n\t\t}\n\t}\n\n\tprivate async sendGatewayPush(\n\t\tgateway: string,\n\t\tservice: 'apn' | 'gcm',\n\t\ttoken: string,\n\t\tnotification: Optional<GatewayNotification, 'uniqueId'>,\n\t\ttries = 0,\n\t): Promise<void> {\n\t\tnotification.uniqueId = this.options.uniqueId;\n\n\t\tconst options = {\n\t\t\tmethod: 'POST',\n\t\t\tbody: {\n\t\t\t\ttoken,\n\t\t\t\toptions: notification,\n\t\t\t},\n\t\t\t...(token && this.options.getAuthorization && { headers: { Authorization: await this.options.getAuthorization() } }),\n\t\t};\n\n\t\tconst result = await fetch(`${gateway}/push/${service}/send`, options);\n\t\tconst response = await result.text();\n\n\t\tif (result.status === 406) {\n\t\t\tlogger.info('removing push token', token);\n\t\t\tawait AppsTokens.deleteMany({\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\t'token.apn': token,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t'token.gcm': token,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (result.status === 422) {\n\t\t\tlogger.info('gateway rejected push notification. not retrying.', response);\n\t\t\treturn;\n\t\t}\n\n\t\tif (result.status === 401) {\n\t\t\tlogger.warn('Error sending push to gateway (not authorized)', response);\n\t\t\treturn;\n\t\t}\n\n\t\tif (result.ok) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.error({ msg: `Error sending push to gateway (${tries} try) ->`, err: response });\n\n\t\tif (tries <= 4) {\n\t\t\t// [1, 2, 4, 8, 16] minutes (total 31)\n\t\t\tconst ms = 60000 * Math.pow(2, tries);\n\n\t\t\tlogger.log('Trying sending push to gateway again in', ms, 'milliseconds');\n\n\t\t\tsetTimeout(() => this.sendGatewayPush(gateway, service, token, notification, tries + 1), ms);\n\t\t}\n\t}\n\n\tprivate getGatewayNotificationData(notification: PendingPushNotification): Omit<GatewayNotification, 'uniqueId'> {\n\t\t// Gateway currently accepts every attribute from the PendingPushNotification type, except for the priority\n\t\t// If new attributes are added to the PendingPushNotification type, they'll need to be removed here as well.\n\t\tconst { priority: _priority, ...notifData } = notification;\n\n\t\treturn {\n\t\t\t...notifData,\n\t\t};\n\t}\n\n\tprivate async sendNotificationGateway(\n\t\tapp: IAppsTokens,\n\t\tnotification: PendingPushNotification,\n\t\tcountApn: string[],\n\t\tcountGcm: string[],\n\t): Promise<void> {\n\t\tif (!this.options.gateways) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst gatewayNotification = this.getGatewayNotificationData(notification);\n\n\t\tfor (const gateway of this.options.gateways) {\n\t\t\tlogger.debug('send to token', app.token);\n\n\t\t\tif ('apn' in app.token && app.token.apn) {\n\t\t\t\tcountApn.push(app._id);\n\t\t\t\treturn this.sendGatewayPush(gateway, 'apn', app.token.apn, { topic: app.appName, ...gatewayNotification });\n\t\t\t}\n\n\t\t\tif ('gcm' in app.token && app.token.gcm) {\n\t\t\t\tcountGcm.push(app._id);\n\t\t\t\treturn this.sendGatewayPush(gateway, 'gcm', app.token.gcm, gatewayNotification);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async sendNotification(notification: PendingPushNotification): Promise<{ apn: string[]; gcm: string[] }> {\n\t\tlogger.debug('Sending notification', notification);\n\n\t\tconst countApn: string[] = [];\n\t\tconst countGcm: string[] = [];\n\n\t\tif (notification.from !== String(notification.from)) {\n\t\t\tthrow new Error('Push.send: option \"from\" not a string');\n\t\t}\n\t\tif (notification.title !== String(notification.title)) {\n\t\t\tthrow new Error('Push.send: option \"title\" not a string');\n\t\t}\n\t\tif (notification.text !== String(notification.text)) {\n\t\t\tthrow new Error('Push.send: option \"text\" not a string');\n\t\t}\n\n\t\tlogger.debug(`send message \"${notification.title}\" to userId`, notification.userId);\n\n\t\tconst query = {\n\t\t\tuserId: notification.userId,\n\t\t\t$or: [{ 'token.apn': { $exists: true } }, { 'token.gcm': { $exists: true } }],\n\t\t};\n\n\t\tconst appTokens = AppsTokens.find(query);\n\n\t\tfor await (const app of appTokens) {\n\t\t\tlogger.debug('send to token', app.token);\n\n\t\t\tif (this.shouldUseGateway()) {\n\t\t\t\tawait this.sendNotificationGateway(app, notification, countApn, countGcm);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait this.sendNotificationNative(app, notification, countApn, countGcm);\n\t\t}\n\n\t\tif (settings.get('Log_Level') === '2') {\n\t\t\tlogger.debug(`Sent message \"${notification.title}\" to ${countApn.length} ios apps ${countGcm.length} android apps`);\n\n\t\t\t// Add some verbosity about the send result, making sure the developer\n\t\t\t// understands what just happened.\n\t\t\tif (!countApn.length && !countGcm.length) {\n\t\t\t\tif ((await AppsTokens.col.estimatedDocumentCount()) === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"AppsTokens\" is empty - No clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t} else if (!countApn.length) {\n\t\t\t\tif ((await AppsTokens.countApnTokens()) === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"AppsTokens\" - No APN clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t} else if (!countGcm.length) {\n\t\t\t\tif ((await AppsTokens.countGcmTokens()) === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"AppsTokens\" - No GCM clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tapn: countApn,\n\t\t\tgcm: countGcm,\n\t\t};\n\t}\n\n\t// This is a general function to validate that the data added to notifications\n\t// is in the correct format. If not this function will throw errors\n\tprivate _validateDocument(notification: PendingPushNotification): void {\n\t\t// Check the general notification\n\t\tcheck(notification, {\n\t\t\tfrom: String,\n\t\t\ttitle: String,\n\t\t\ttext: String,\n\t\t\tsent: Match.Optional(Boolean),\n\t\t\tsending: Match.Optional(Match.Integer),\n\t\t\tbadge: Match.Optional(Match.Integer),\n\t\t\tsound: Match.Optional(String),\n\t\t\tnotId: Match.Optional(Match.Integer),\n\t\t\tcontentAvailable: Match.Optional(Match.Integer),\n\t\t\tapn: Match.Optional({\n\t\t\t\tcategory: Match.Optional(String),\n\t\t\t}),\n\t\t\tgcm: Match.Optional({\n\t\t\t\timage: Match.Optional(String),\n\t\t\t\tstyle: Match.Optional(String),\n\t\t\t}),\n\t\t\tuserId: String,\n\t\t\tpayload: Match.Optional(Object),\n\t\t\tcreatedAt: Date,\n\t\t\tcreatedBy: Match.OneOf(String, null),\n\t\t\tpriority: Match.Optional(Match.Integer),\n\t\t});\n\n\t\tif (!notification.userId) {\n\t\t\tthrow new Error('No userId found');\n\t\t}\n\t}\n\n\tprivate hasApnOptions(options: IPushNotificationConfig): options is RequiredField<IPushNotificationConfig, 'apn'> {\n\t\treturn Match.test(options.apn, Object);\n\t}\n\n\tprivate hasGcmOptions(options: IPushNotificationConfig): options is RequiredField<IPushNotificationConfig, 'gcm'> {\n\t\treturn Match.test(options.gcm, Object);\n\t}\n\n\tpublic async send(options: IPushNotificationConfig) {\n\t\tconst notification: PendingPushNotification = {\n\t\t\tcreatedAt: new Date(),\n\t\t\t// createdBy is no longer used, but the gateway still expects it\n\t\t\tcreatedBy: '<SERVER>',\n\t\t\tsent: false,\n\t\t\tsending: 0,\n\n\t\t\t...pick(options, 'from', 'title', 'text', 'userId', 'payload', 'badge', 'sound', 'notId', 'priority'),\n\n\t\t\t...(this.hasApnOptions(options)\n\t\t\t\t? {\n\t\t\t\t\t\tapn: {\n\t\t\t\t\t\t\t...pick(options.apn, 'category'),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {}),\n\t\t\t...(this.hasGcmOptions(options)\n\t\t\t\t? {\n\t\t\t\t\t\tgcm: {\n\t\t\t\t\t\t\t...pick(options.gcm, 'image', 'style'),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {}),\n\t\t};\n\n\t\t// Validate the notification\n\t\tthis._validateDocument(notification);\n\n\t\ttry {\n\t\t\tawait this.sendNotification(notification);\n\t\t} catch (error: any) {\n\t\t\tlogger.debug(`Could not send notification to user \"${notification.userId}\", Error: ${error.message}`);\n\t\t\tlogger.debug(error.stack);\n\t\t}\n\t}\n}\n\nexport const Push = new PushClass();\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push/server/push.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/push/server/push.ts","inputSourceMap":{"version":3,"file":"app/push/server/push.ts","sourceRoot":"","sources":["app/push/server/push.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAppsTokens, RequiredField, Optional, IPushNotificationConfig } from '@rocket.chat/core-typings';\nimport { AppsTokens } from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { pick } from '@rocket.chat/tools';\nimport Ajv from 'ajv';\nimport { JWT } from 'google-auth-library';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { initAPN, sendAPN } from './apn';\nimport type { PushOptions, PendingPushNotification } from './definition';\nimport { sendFCM } from './fcm';\nimport { sendGCM } from './gcm';\nimport { logger } from './logger';\nimport { settings } from '../../settings/server';\n\nexport const _matchToken = Match.OneOf({ apn: String }, { gcm: String });\n\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\nexport type FCMCredentials = {\n\ttype: string;\n\tproject_id: string;\n\tprivate_key_id: string;\n\tprivate_key: string;\n\tclient_email: string;\n\tclient_id: string;\n\tauth_uri: string;\n\ttoken_uri: string;\n\tauth_provider_x509_cert_url: string;\n\tclient_x509_cert_url: string;\n\tuniverse_domain: string;\n};\n\nexport const FCMCredentialsValidationSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\ttype: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tproject_id: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tprivate_key_id: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tprivate_key: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tclient_email: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tclient_id: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tauth_uri: {\n\t\t\ttype: 'string',\n\t\t},\n\t\ttoken_uri: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tauth_provider_x509_cert_url: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tclient_x509_cert_url: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tuniverse_domain: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n\trequired: ['client_email', 'project_id', 'private_key_id', 'private_key'],\n};\n\nexport const isFCMCredentials = ajv.compile<FCMCredentials>(FCMCredentialsValidationSchema);\n\n// This type must match the type defined in the push gateway\ntype GatewayNotification = {\n\tuniqueId: string;\n\tfrom: string;\n\ttitle: string;\n\ttext: string;\n\tbadge?: number;\n\tsound?: string;\n\tnotId?: number;\n\tcontentAvailable?: 1 | 0;\n\tforceStart?: number;\n\ttopic?: string;\n\tapn?: {\n\t\tfrom?: string;\n\t\ttitle?: string;\n\t\ttext?: string;\n\t\tbadge?: number;\n\t\tsound?: string;\n\t\tnotId?: number;\n\t\tcategory?: string;\n\t};\n\tgcm?: {\n\t\tfrom?: string;\n\t\ttitle?: string;\n\t\ttext?: string;\n\t\timage?: string;\n\t\tstyle?: string;\n\t\tsummaryText?: string;\n\t\tpicture?: string;\n\t\tbadge?: number;\n\t\tsound?: string;\n\t\tnotId?: number;\n\t\tactions?: any[];\n\t};\n\tquery?: {\n\t\tuserId: any;\n\t};\n\ttoken?: IAppsTokens['token'];\n\ttokens?: IAppsTokens['token'][];\n\tpayload?: Record<string, any>;\n\tdelayUntil?: Date;\n\tcreatedAt: Date;\n\tcreatedBy?: string;\n};\n\nexport type NativeNotificationParameters = {\n\tuserTokens: string | string[];\n\tnotification: PendingPushNotification;\n\t_replaceToken: (currentToken: IAppsTokens['token'], newToken: IAppsTokens['token']) => void;\n\t_removeToken: (token: IAppsTokens['token']) => void;\n\toptions: RequiredField<PushOptions, 'gcm'>;\n};\n\nclass PushClass {\n\toptions: PushOptions = {\n\t\tuniqueId: '',\n\t};\n\n\tisConfigured = false;\n\n\tpublic configure(options: PushOptions): void {\n\t\tthis.options = {\n\t\t\tsendTimeout: 60000, // Timeout period for notification send\n\t\t\t...options,\n\t\t};\n\t\t// https://npmjs.org/package/apn\n\n\t\t// After requesting the certificate from Apple, export your private key as\n\t\t// a .p12 file anddownload the .cer file from the iOS Provisioning Portal.\n\n\t\t// gateway.push.apple.com, port 2195\n\t\t// gateway.sandbox.push.apple.com, port 2195\n\n\t\t// Now, in the directory containing cert.cer and key.p12 execute the\n\t\t// following commands to generate your .pem files:\n\t\t// $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem\n\t\t// $ openssl pkcs12 -in key.p12 -out key.pem -nodes\n\n\t\t// Block multiple calls\n\t\tif (this.isConfigured) {\n\t\t\tthrow new Error('Configure should not be called more than once!');\n\t\t}\n\n\t\tthis.isConfigured = true;\n\n\t\tlogger.debug('Configure', this.options);\n\n\t\tif (this.options.apn) {\n\t\t\tinitAPN({ options: this.options as RequiredField<PushOptions, 'apn'>, absoluteUrl: Meteor.absoluteUrl() });\n\t\t}\n\t}\n\n\tprivate replaceToken(currentToken: IAppsTokens['token'], newToken: IAppsTokens['token']): void {\n\t\tvoid AppsTokens.updateMany({ token: currentToken }, { $set: { token: newToken } });\n\t}\n\n\tprivate removeToken(token: IAppsTokens['token']): void {\n\t\tvoid AppsTokens.deleteOne({ token });\n\t}\n\n\tprivate shouldUseGateway(): boolean {\n\t\treturn Boolean(!!this.options.gateways && settings.get('Register_Server') && settings.get('Cloud_Service_Agree_PrivacyTerms'));\n\t}\n\n\tprivate async sendNotificationNative(\n\t\tapp: IAppsTokens,\n\t\tnotification: PendingPushNotification,\n\t\tcountApn: string[],\n\t\tcountGcm: string[],\n\t): Promise<void> {\n\t\tlogger.debug('send to token', app.token);\n\n\t\tif ('apn' in app.token && app.token.apn) {\n\t\t\tcountApn.push(app._id);\n\t\t\t// Send to APN\n\t\t\tif (this.options.apn) {\n\t\t\t\tsendAPN({ userToken: app.token.apn, notification: { topic: app.appName, ...notification }, _removeToken: this.removeToken });\n\t\t\t}\n\t\t} else if ('gcm' in app.token && app.token.gcm) {\n\t\t\tcountGcm.push(app._id);\n\n\t\t\t// Send to GCM\n\t\t\t// We do support multiple here - so we should construct an array\n\t\t\t// and send it bulk - Investigate limit count of id's\n\t\t\t// TODO: Remove this after the legacy provider is removed\n\t\t\tconst useLegacyProvider = settings.get<boolean>('Push_UseLegacy');\n\n\t\t\tif (!useLegacyProvider) {\n\t\t\t\t// override this.options.gcm.apiKey with the oauth2 token\n\t\t\t\tconst { projectId, token } = await this.getNativeNotificationAuthorizationCredentials();\n\t\t\t\tconst sendGCMOptions = {\n\t\t\t\t\t...this.options,\n\t\t\t\t\tgcm: {\n\t\t\t\t\t\t...this.options.gcm,\n\t\t\t\t\t\tapiKey: token,\n\t\t\t\t\t\tprojectNumber: projectId,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tsendFCM({\n\t\t\t\t\tuserTokens: app.token.gcm,\n\t\t\t\t\tnotification,\n\t\t\t\t\t_replaceToken: this.replaceToken,\n\t\t\t\t\t_removeToken: this.removeToken,\n\t\t\t\t\toptions: sendGCMOptions as RequiredField<PushOptions, 'gcm'>,\n\t\t\t\t});\n\t\t\t} else if (this.options.gcm?.apiKey) {\n\t\t\t\tsendGCM({\n\t\t\t\t\tuserTokens: app.token.gcm,\n\t\t\t\t\tnotification,\n\t\t\t\t\t_replaceToken: this.replaceToken,\n\t\t\t\t\t_removeToken: this.removeToken,\n\t\t\t\t\toptions: this.options as RequiredField<PushOptions, 'gcm'>,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('send got a faulty query');\n\t\t}\n\t}\n\n\tprivate async getNativeNotificationAuthorizationCredentials(): Promise<{ token: string; projectId: string }> {\n\t\tconst credentialsString = settings.get<string>('Push_google_api_credentials');\n\t\tif (!credentialsString.trim()) {\n\t\t\tthrow new Error('Push_google_api_credentials is not set');\n\t\t}\n\n\t\ttry {\n\t\t\tconst credentials = JSON.parse(credentialsString);\n\t\t\tif (!isFCMCredentials(credentials)) {\n\t\t\t\tthrow new Error('Push_google_api_credentials is not in the correct format');\n\t\t\t}\n\n\t\t\tconst client = new JWT({\n\t\t\t\temail: credentials.client_email,\n\t\t\t\tkey: credentials.private_key,\n\t\t\t\tkeyId: credentials.private_key_id,\n\t\t\t\tscopes: 'https://www.googleapis.com/auth/firebase.messaging',\n\t\t\t});\n\n\t\t\tawait client.authorize();\n\n\t\t\treturn {\n\t\t\t\ttoken: client.credentials.access_token as string,\n\t\t\t\tprojectId: credentials.project_id,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tlogger.error('Error getting FCM token', error);\n\t\t\tthrow new Error('Error getting FCM token');\n\t\t}\n\t}\n\n\tprivate async sendGatewayPush(\n\t\tgateway: string,\n\t\tservice: 'apn' | 'gcm',\n\t\ttoken: string,\n\t\tnotification: Optional<GatewayNotification, 'uniqueId'>,\n\t\ttries = 0,\n\t): Promise<void> {\n\t\tnotification.uniqueId = this.options.uniqueId;\n\n\t\tconst options = {\n\t\t\tmethod: 'POST',\n\t\t\tbody: {\n\t\t\t\ttoken,\n\t\t\t\toptions: notification,\n\t\t\t},\n\t\t\t...(token && this.options.getAuthorization && { headers: { Authorization: await this.options.getAuthorization() } }),\n\t\t};\n\n\t\tconst result = await fetch(`${gateway}/push/${service}/send`, options);\n\t\tconst response = await result.text();\n\n\t\tif (result.status === 406) {\n\t\t\tlogger.info('removing push token', token);\n\t\t\tawait AppsTokens.deleteMany({\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\t'token.apn': token,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t'token.gcm': token,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (result.status === 422) {\n\t\t\tlogger.info('gateway rejected push notification. not retrying.', response);\n\t\t\treturn;\n\t\t}\n\n\t\tif (result.status === 401) {\n\t\t\tlogger.warn('Error sending push to gateway (not authorized)', response);\n\t\t\treturn;\n\t\t}\n\n\t\tif (result.ok) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.error({ msg: `Error sending push to gateway (${tries} try) ->`, err: response });\n\n\t\tif (tries <= 4) {\n\t\t\t// [1, 2, 4, 8, 16] minutes (total 31)\n\t\t\tconst ms = 60000 * Math.pow(2, tries);\n\n\t\t\tlogger.log('Trying sending push to gateway again in', ms, 'milliseconds');\n\n\t\t\tsetTimeout(() => this.sendGatewayPush(gateway, service, token, notification, tries + 1), ms);\n\t\t}\n\t}\n\n\tprivate getGatewayNotificationData(notification: PendingPushNotification): Omit<GatewayNotification, 'uniqueId'> {\n\t\t// Gateway currently accepts every attribute from the PendingPushNotification type, except for the priority\n\t\t// If new attributes are added to the PendingPushNotification type, they'll need to be removed here as well.\n\t\tconst { priority: _priority, ...notifData } = notification;\n\n\t\treturn {\n\t\t\t...notifData,\n\t\t};\n\t}\n\n\tprivate async sendNotificationGateway(\n\t\tapp: IAppsTokens,\n\t\tnotification: PendingPushNotification,\n\t\tcountApn: string[],\n\t\tcountGcm: string[],\n\t): Promise<void> {\n\t\tif (!this.options.gateways) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst gatewayNotification = this.getGatewayNotificationData(notification);\n\n\t\tfor (const gateway of this.options.gateways) {\n\t\t\tlogger.debug('send to token', app.token);\n\n\t\t\tif ('apn' in app.token && app.token.apn) {\n\t\t\t\tcountApn.push(app._id);\n\t\t\t\treturn this.sendGatewayPush(gateway, 'apn', app.token.apn, { topic: app.appName, ...gatewayNotification });\n\t\t\t}\n\n\t\t\tif ('gcm' in app.token && app.token.gcm) {\n\t\t\t\tcountGcm.push(app._id);\n\t\t\t\treturn this.sendGatewayPush(gateway, 'gcm', app.token.gcm, gatewayNotification);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async sendNotification(notification: PendingPushNotification): Promise<{ apn: string[]; gcm: string[] }> {\n\t\tlogger.debug('Sending notification', notification);\n\n\t\tconst countApn: string[] = [];\n\t\tconst countGcm: string[] = [];\n\n\t\tif (notification.from !== String(notification.from)) {\n\t\t\tthrow new Error('Push.send: option \"from\" not a string');\n\t\t}\n\t\tif (notification.title !== String(notification.title)) {\n\t\t\tthrow new Error('Push.send: option \"title\" not a string');\n\t\t}\n\t\tif (notification.text !== String(notification.text)) {\n\t\t\tthrow new Error('Push.send: option \"text\" not a string');\n\t\t}\n\n\t\tlogger.debug(`send message \"${notification.title}\" to userId`, notification.userId);\n\n\t\tconst query = {\n\t\t\tuserId: notification.userId,\n\t\t\t$or: [{ 'token.apn': { $exists: true } }, { 'token.gcm': { $exists: true } }],\n\t\t};\n\n\t\tconst appTokens = AppsTokens.find(query);\n\n\t\tfor await (const app of appTokens) {\n\t\t\tlogger.debug('send to token', app.token);\n\n\t\t\tif (this.shouldUseGateway()) {\n\t\t\t\tawait this.sendNotificationGateway(app, notification, countApn, countGcm);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait this.sendNotificationNative(app, notification, countApn, countGcm);\n\t\t}\n\n\t\tif (settings.get('Log_Level') === '2') {\n\t\t\tlogger.debug(`Sent message \"${notification.title}\" to ${countApn.length} ios apps ${countGcm.length} android apps`);\n\n\t\t\t// Add some verbosity about the send result, making sure the developer\n\t\t\t// understands what just happened.\n\t\t\tif (!countApn.length && !countGcm.length) {\n\t\t\t\tif ((await AppsTokens.col.estimatedDocumentCount()) === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"AppsTokens\" is empty - No clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t} else if (!countApn.length) {\n\t\t\t\tif ((await AppsTokens.countApnTokens()) === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"AppsTokens\" - No APN clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t} else if (!countGcm.length) {\n\t\t\t\tif ((await AppsTokens.countGcmTokens()) === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"AppsTokens\" - No GCM clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tapn: countApn,\n\t\t\tgcm: countGcm,\n\t\t};\n\t}\n\n\t// This is a general function to validate that the data added to notifications\n\t// is in the correct format. If not this function will throw errors\n\tprivate _validateDocument(notification: PendingPushNotification): void {\n\t\t// Check the general notification\n\t\tcheck(notification, {\n\t\t\tfrom: String,\n\t\t\ttitle: String,\n\t\t\ttext: String,\n\t\t\tsent: Match.Optional(Boolean),\n\t\t\tsending: Match.Optional(Match.Integer),\n\t\t\tbadge: Match.Optional(Match.Integer),\n\t\t\tsound: Match.Optional(String),\n\t\t\tnotId: Match.Optional(Match.Integer),\n\t\t\tcontentAvailable: Match.Optional(Match.Integer),\n\t\t\tapn: Match.Optional({\n\t\t\t\tcategory: Match.Optional(String),\n\t\t\t}),\n\t\t\tgcm: Match.Optional({\n\t\t\t\timage: Match.Optional(String),\n\t\t\t\tstyle: Match.Optional(String),\n\t\t\t}),\n\t\t\tuserId: String,\n\t\t\tpayload: Match.Optional(Object),\n\t\t\tcreatedAt: Date,\n\t\t\tcreatedBy: Match.OneOf(String, null),\n\t\t\tpriority: Match.Optional(Match.Integer),\n\t\t});\n\n\t\tif (!notification.userId) {\n\t\t\tthrow new Error('No userId found');\n\t\t}\n\t}\n\n\tprivate hasApnOptions(options: IPushNotificationConfig): options is RequiredField<IPushNotificationConfig, 'apn'> {\n\t\treturn Match.test(options.apn, Object);\n\t}\n\n\tprivate hasGcmOptions(options: IPushNotificationConfig): options is RequiredField<IPushNotificationConfig, 'gcm'> {\n\t\treturn Match.test(options.gcm, Object);\n\t}\n\n\tpublic async send(options: IPushNotificationConfig) {\n\t\tconst notification: PendingPushNotification = {\n\t\t\tcreatedAt: new Date(),\n\t\t\t// createdBy is no longer used, but the gateway still expects it\n\t\t\tcreatedBy: '<SERVER>',\n\t\t\tsent: false,\n\t\t\tsending: 0,\n\n\t\t\t...pick(options, 'from', 'title', 'text', 'userId', 'payload', 'badge', 'sound', 'notId', 'priority'),\n\n\t\t\t...(this.hasApnOptions(options)\n\t\t\t\t? {\n\t\t\t\t\t\tapn: {\n\t\t\t\t\t\t\t...pick(options.apn, 'category'),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {}),\n\t\t\t...(this.hasGcmOptions(options)\n\t\t\t\t? {\n\t\t\t\t\t\tgcm: {\n\t\t\t\t\t\t\t...pick(options.gcm, 'image', 'style'),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {}),\n\t\t};\n\n\t\t// Validate the notification\n\t\tthis._validateDocument(notification);\n\n\t\ttry {\n\t\t\tawait this.sendNotification(notification);\n\t\t} catch (error: any) {\n\t\t\tlogger.debug(`Could not send notification to user \"${notification.userId}\", Error: ${error.message}`);\n\t\t\tlogger.debug(error.stack);\n\t\t}\n\t}\n}\n\nexport const Push = new PushClass();\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 1);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 2);\n    const _excluded = [\"priority\"];\n    module.export({\n      _matchToken: () => _matchToken,\n      FCMCredentialsValidationSchema: () => FCMCredentialsValidationSchema,\n      isFCMCredentials: () => isFCMCredentials,\n      Push: () => Push\n    });\n    let AppsTokens;\n    module.link(\"@rocket.chat/models\", {\n      AppsTokens(v) {\n        AppsTokens = v;\n      }\n    }, 0);\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 1);\n    let pick;\n    module.link(\"@rocket.chat/tools\", {\n      pick(v) {\n        pick = v;\n      }\n    }, 2);\n    let Ajv;\n    module.link(\"ajv\", {\n      default(v) {\n        Ajv = v;\n      }\n    }, 3);\n    let JWT;\n    module.link(\"google-auth-library\", {\n      JWT(v) {\n        JWT = v;\n      }\n    }, 4);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 5);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 6);\n    let initAPN, sendAPN;\n    module.link(\"./apn\", {\n      initAPN(v) {\n        initAPN = v;\n      },\n      sendAPN(v) {\n        sendAPN = v;\n      }\n    }, 7);\n    let sendFCM;\n    module.link(\"./fcm\", {\n      sendFCM(v) {\n        sendFCM = v;\n      }\n    }, 8);\n    let sendGCM;\n    module.link(\"./gcm\", {\n      sendGCM(v) {\n        sendGCM = v;\n      }\n    }, 9);\n    let logger;\n    module.link(\"./logger\", {\n      logger(v) {\n        logger = v;\n      }\n    }, 10);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 11);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const _matchToken = Match.OneOf({\n      apn: String\n    }, {\n      gcm: String\n    });\n    const ajv = new Ajv({\n      coerceTypes: true\n    });\n    const FCMCredentialsValidationSchema = {\n      type: 'object',\n      properties: {\n        type: {\n          type: 'string'\n        },\n        project_id: {\n          type: 'string'\n        },\n        private_key_id: {\n          type: 'string'\n        },\n        private_key: {\n          type: 'string'\n        },\n        client_email: {\n          type: 'string'\n        },\n        client_id: {\n          type: 'string'\n        },\n        auth_uri: {\n          type: 'string'\n        },\n        token_uri: {\n          type: 'string'\n        },\n        auth_provider_x509_cert_url: {\n          type: 'string'\n        },\n        client_x509_cert_url: {\n          type: 'string'\n        },\n        universe_domain: {\n          type: 'string'\n        }\n      },\n      required: ['client_email', 'project_id', 'private_key_id', 'private_key']\n    };\n    const isFCMCredentials = ajv.compile(FCMCredentialsValidationSchema);\n    class PushClass {\n      constructor() {\n        this.options = {\n          uniqueId: ''\n        };\n        this.isConfigured = false;\n      }\n      configure(options) {\n        this.options = _objectSpread({\n          sendTimeout: 60000\n        }, options);\n        // https://npmjs.org/package/apn\n        // After requesting the certificate from Apple, export your private key as\n        // a .p12 file anddownload the .cer file from the iOS Provisioning Portal.\n        // gateway.push.apple.com, port 2195\n        // gateway.sandbox.push.apple.com, port 2195\n        // Now, in the directory containing cert.cer and key.p12 execute the\n        // following commands to generate your .pem files:\n        // $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem\n        // $ openssl pkcs12 -in key.p12 -out key.pem -nodes\n        // Block multiple calls\n        if (this.isConfigured) {\n          throw new Error('Configure should not be called more than once!');\n        }\n        this.isConfigured = true;\n        logger.debug('Configure', this.options);\n        if (this.options.apn) {\n          initAPN({\n            options: this.options,\n            absoluteUrl: Meteor.absoluteUrl()\n          });\n        }\n      }\n      replaceToken(currentToken, newToken) {\n        void AppsTokens.updateMany({\n          token: currentToken\n        }, {\n          $set: {\n            token: newToken\n          }\n        });\n      }\n      removeToken(token) {\n        void AppsTokens.deleteOne({\n          token\n        });\n      }\n      shouldUseGateway() {\n        return Boolean(!!this.options.gateways && settings.get('Register_Server') && settings.get('Cloud_Service_Agree_PrivacyTerms'));\n      }\n      async sendNotificationNative(app, notification, countApn, countGcm) {\n        logger.debug('send to token', app.token);\n        if ('apn' in app.token && app.token.apn) {\n          countApn.push(app._id);\n          // Send to APN\n          if (this.options.apn) {\n            sendAPN({\n              userToken: app.token.apn,\n              notification: _objectSpread({\n                topic: app.appName\n              }, notification),\n              _removeToken: this.removeToken\n            });\n          }\n        } else if ('gcm' in app.token && app.token.gcm) {\n          var _this$options$gcm;\n          countGcm.push(app._id);\n          // Send to GCM\n          // We do support multiple here - so we should construct an array\n          // and send it bulk - Investigate limit count of id's\n          // TODO: Remove this after the legacy provider is removed\n          const useLegacyProvider = settings.get('Push_UseLegacy');\n          if (!useLegacyProvider) {\n            // override this.options.gcm.apiKey with the oauth2 token\n            const {\n              projectId,\n              token\n            } = await this.getNativeNotificationAuthorizationCredentials();\n            const sendGCMOptions = _objectSpread(_objectSpread({}, this.options), {}, {\n              gcm: _objectSpread(_objectSpread({}, this.options.gcm), {}, {\n                apiKey: token,\n                projectNumber: projectId\n              })\n            });\n            sendFCM({\n              userTokens: app.token.gcm,\n              notification,\n              _replaceToken: this.replaceToken,\n              _removeToken: this.removeToken,\n              options: sendGCMOptions\n            });\n          } else if ((_this$options$gcm = this.options.gcm) !== null && _this$options$gcm !== void 0 && _this$options$gcm.apiKey) {\n            sendGCM({\n              userTokens: app.token.gcm,\n              notification,\n              _replaceToken: this.replaceToken,\n              _removeToken: this.removeToken,\n              options: this.options\n            });\n          }\n        } else {\n          throw new Error('send got a faulty query');\n        }\n      }\n      async getNativeNotificationAuthorizationCredentials() {\n        const credentialsString = settings.get('Push_google_api_credentials');\n        if (!credentialsString.trim()) {\n          throw new Error('Push_google_api_credentials is not set');\n        }\n        try {\n          const credentials = JSON.parse(credentialsString);\n          if (!isFCMCredentials(credentials)) {\n            throw new Error('Push_google_api_credentials is not in the correct format');\n          }\n          const client = new JWT({\n            email: credentials.client_email,\n            key: credentials.private_key,\n            keyId: credentials.private_key_id,\n            scopes: 'https://www.googleapis.com/auth/firebase.messaging'\n          });\n          await client.authorize();\n          return {\n            token: client.credentials.access_token,\n            projectId: credentials.project_id\n          };\n        } catch (error) {\n          logger.error('Error getting FCM token', error);\n          throw new Error('Error getting FCM token');\n        }\n      }\n      async sendGatewayPush(gateway, service, token, notification) {\n        let tries = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n        notification.uniqueId = this.options.uniqueId;\n        const options = _objectSpread({\n          method: 'POST',\n          body: {\n            token,\n            options: notification\n          }\n        }, token && this.options.getAuthorization && {\n          headers: {\n            Authorization: await this.options.getAuthorization()\n          }\n        });\n        const result = await fetch(\"\".concat(gateway, \"/push/\").concat(service, \"/send\"), options);\n        const response = await result.text();\n        if (result.status === 406) {\n          logger.info('removing push token', token);\n          await AppsTokens.deleteMany({\n            $or: [{\n              'token.apn': token\n            }, {\n              'token.gcm': token\n            }]\n          });\n          return;\n        }\n        if (result.status === 422) {\n          logger.info('gateway rejected push notification. not retrying.', response);\n          return;\n        }\n        if (result.status === 401) {\n          logger.warn('Error sending push to gateway (not authorized)', response);\n          return;\n        }\n        if (result.ok) {\n          return;\n        }\n        logger.error({\n          msg: \"Error sending push to gateway (\".concat(tries, \" try) ->\"),\n          err: response\n        });\n        if (tries <= 4) {\n          // [1, 2, 4, 8, 16] minutes (total 31)\n          const ms = 60000 * Math.pow(2, tries);\n          logger.log('Trying sending push to gateway again in', ms, 'milliseconds');\n          setTimeout(() => this.sendGatewayPush(gateway, service, token, notification, tries + 1), ms);\n        }\n      }\n      getGatewayNotificationData(notification) {\n        // Gateway currently accepts every attribute from the PendingPushNotification type, except for the priority\n        // If new attributes are added to the PendingPushNotification type, they'll need to be removed here as well.\n        const {\n            priority: _priority\n          } = notification,\n          notifData = _objectWithoutProperties(notification, _excluded);\n        return _objectSpread({}, notifData);\n      }\n      async sendNotificationGateway(app, notification, countApn, countGcm) {\n        if (!this.options.gateways) {\n          return;\n        }\n        const gatewayNotification = this.getGatewayNotificationData(notification);\n        for (const gateway of this.options.gateways) {\n          logger.debug('send to token', app.token);\n          if ('apn' in app.token && app.token.apn) {\n            countApn.push(app._id);\n            return this.sendGatewayPush(gateway, 'apn', app.token.apn, _objectSpread({\n              topic: app.appName\n            }, gatewayNotification));\n          }\n          if ('gcm' in app.token && app.token.gcm) {\n            countGcm.push(app._id);\n            return this.sendGatewayPush(gateway, 'gcm', app.token.gcm, gatewayNotification);\n          }\n        }\n      }\n      async sendNotification(notification) {\n        logger.debug('Sending notification', notification);\n        const countApn = [];\n        const countGcm = [];\n        if (notification.from !== String(notification.from)) {\n          throw new Error('Push.send: option \"from\" not a string');\n        }\n        if (notification.title !== String(notification.title)) {\n          throw new Error('Push.send: option \"title\" not a string');\n        }\n        if (notification.text !== String(notification.text)) {\n          throw new Error('Push.send: option \"text\" not a string');\n        }\n        logger.debug(\"send message \\\"\".concat(notification.title, \"\\\" to userId\"), notification.userId);\n        const query = {\n          userId: notification.userId,\n          $or: [{\n            'token.apn': {\n              $exists: true\n            }\n          }, {\n            'token.gcm': {\n              $exists: true\n            }\n          }]\n        };\n        const appTokens = AppsTokens.find(query);\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(appTokens), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const app = _step.value;\n            {\n              logger.debug('send to token', app.token);\n              if (this.shouldUseGateway()) {\n                await this.sendNotificationGateway(app, notification, countApn, countGcm);\n                continue;\n              }\n              await this.sendNotificationNative(app, notification, countApn, countGcm);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        if (settings.get('Log_Level') === '2') {\n          logger.debug(\"Sent message \\\"\".concat(notification.title, \"\\\" to \").concat(countApn.length, \" ios apps \").concat(countGcm.length, \" android apps\"));\n          // Add some verbosity about the send result, making sure the developer\n          // understands what just happened.\n          if (!countApn.length && !countGcm.length) {\n            if ((await AppsTokens.col.estimatedDocumentCount()) === 0) {\n              logger.debug('GUIDE: The \"AppsTokens\" is empty - No clients have registered on the server yet...');\n            }\n          } else if (!countApn.length) {\n            if ((await AppsTokens.countApnTokens()) === 0) {\n              logger.debug('GUIDE: The \"AppsTokens\" - No APN clients have registered on the server yet...');\n            }\n          } else if (!countGcm.length) {\n            if ((await AppsTokens.countGcmTokens()) === 0) {\n              logger.debug('GUIDE: The \"AppsTokens\" - No GCM clients have registered on the server yet...');\n            }\n          }\n        }\n        return {\n          apn: countApn,\n          gcm: countGcm\n        };\n      }\n      // This is a general function to validate that the data added to notifications\n      // is in the correct format. If not this function will throw errors\n      _validateDocument(notification) {\n        // Check the general notification\n        check(notification, {\n          from: String,\n          title: String,\n          text: String,\n          sent: Match.Optional(Boolean),\n          sending: Match.Optional(Match.Integer),\n          badge: Match.Optional(Match.Integer),\n          sound: Match.Optional(String),\n          notId: Match.Optional(Match.Integer),\n          contentAvailable: Match.Optional(Match.Integer),\n          apn: Match.Optional({\n            category: Match.Optional(String)\n          }),\n          gcm: Match.Optional({\n            image: Match.Optional(String),\n            style: Match.Optional(String)\n          }),\n          userId: String,\n          payload: Match.Optional(Object),\n          createdAt: Date,\n          createdBy: Match.OneOf(String, null),\n          priority: Match.Optional(Match.Integer)\n        });\n        if (!notification.userId) {\n          throw new Error('No userId found');\n        }\n      }\n      hasApnOptions(options) {\n        return Match.test(options.apn, Object);\n      }\n      hasGcmOptions(options) {\n        return Match.test(options.gcm, Object);\n      }\n      async send(options) {\n        const notification = _objectSpread(_objectSpread(_objectSpread({\n          createdAt: new Date(),\n          // createdBy is no longer used, but the gateway still expects it\n          createdBy: '<SERVER>',\n          sent: false,\n          sending: 0\n        }, pick(options, 'from', 'title', 'text', 'userId', 'payload', 'badge', 'sound', 'notId', 'priority')), this.hasApnOptions(options) ? {\n          apn: _objectSpread({}, pick(options.apn, 'category'))\n        } : {}), this.hasGcmOptions(options) ? {\n          gcm: _objectSpread({}, pick(options.gcm, 'image', 'style'))\n        } : {});\n        // Validate the notification\n        this._validateDocument(notification);\n        try {\n          await this.sendNotification(notification);\n        } catch (error) {\n          logger.debug(\"Could not send notification to user \\\"\".concat(notification.userId, \"\\\", Error: \").concat(error.message));\n          logger.debug(error.stack);\n        }\n      }\n    }\n    const Push = new PushClass();\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_asyncIterator","_excluded","export","_matchToken","FCMCredentialsValidationSchema","isFCMCredentials","Push","AppsTokens","fetch","serverFetch","pick","Ajv","JWT","Match","check","Meteor","initAPN","sendAPN","sendFCM","sendGCM","logger","settings","__reifyWaitForDeps__","OneOf","apn","String","gcm","ajv","coerceTypes","type","properties","project_id","private_key_id","private_key","client_email","client_id","auth_uri","token_uri","auth_provider_x509_cert_url","client_x509_cert_url","universe_domain","required","compile","PushClass","constructor","options","uniqueId","isConfigured","configure","sendTimeout","Error","debug","absoluteUrl","replaceToken","currentToken","newToken","updateMany","token","$set","removeToken","deleteOne","shouldUseGateway","Boolean","gateways","get","sendNotificationNative","app","notification","countApn","countGcm","push","_id","userToken","topic","appName","_removeToken","_this$options$gcm","useLegacyProvider","projectId","getNativeNotificationAuthorizationCredentials","sendGCMOptions","apiKey","projectNumber","userTokens","_replaceToken","credentialsString","trim","credentials","JSON","parse","client","email","key","keyId","scopes","authorize","access_token","error","sendGatewayPush","gateway","service","tries","arguments","length","undefined","method","body","getAuthorization","headers","Authorization","result","concat","response","text","status","info","deleteMany","$or","warn","ok","msg","err","ms","Math","pow","log","setTimeout","getGatewayNotificationData","priority","_priority","notifData","sendNotificationGateway","gatewayNotification","sendNotification","from","title","userId","query","$exists","appTokens","find","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","return","col","estimatedDocumentCount","countApnTokens","countGcmTokens","_validateDocument","sent","Optional","sending","Integer","badge","sound","notId","contentAvailable","category","image","style","payload","Object","createdAt","Date","createdBy","hasApnOptions","test","hasGcmOptions","send","message","stack","__reify_async_result__","_reifyError","self","async"],"sources":["app/push/server/push.ts"],"sourcesContent":["import type { IAppsTokens, RequiredField, Optional, IPushNotificationConfig } from '@rocket.chat/core-typings';\nimport { AppsTokens } from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { pick } from '@rocket.chat/tools';\nimport Ajv from 'ajv';\nimport { JWT } from 'google-auth-library';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { initAPN, sendAPN } from './apn';\nimport type { PushOptions, PendingPushNotification } from './definition';\nimport { sendFCM } from './fcm';\nimport { sendGCM } from './gcm';\nimport { logger } from './logger';\nimport { settings } from '../../settings/server';\n\nexport const _matchToken = Match.OneOf({ apn: String }, { gcm: String });\n\nconst ajv = new Ajv({\n\tcoerceTypes: true,\n});\n\nexport type FCMCredentials = {\n\ttype: string;\n\tproject_id: string;\n\tprivate_key_id: string;\n\tprivate_key: string;\n\tclient_email: string;\n\tclient_id: string;\n\tauth_uri: string;\n\ttoken_uri: string;\n\tauth_provider_x509_cert_url: string;\n\tclient_x509_cert_url: string;\n\tuniverse_domain: string;\n};\n\nexport const FCMCredentialsValidationSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\ttype: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tproject_id: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tprivate_key_id: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tprivate_key: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tclient_email: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tclient_id: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tauth_uri: {\n\t\t\ttype: 'string',\n\t\t},\n\t\ttoken_uri: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tauth_provider_x509_cert_url: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tclient_x509_cert_url: {\n\t\t\ttype: 'string',\n\t\t},\n\t\tuniverse_domain: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n\trequired: ['client_email', 'project_id', 'private_key_id', 'private_key'],\n};\n\nexport const isFCMCredentials = ajv.compile<FCMCredentials>(FCMCredentialsValidationSchema);\n\n// This type must match the type defined in the push gateway\ntype GatewayNotification = {\n\tuniqueId: string;\n\tfrom: string;\n\ttitle: string;\n\ttext: string;\n\tbadge?: number;\n\tsound?: string;\n\tnotId?: number;\n\tcontentAvailable?: 1 | 0;\n\tforceStart?: number;\n\ttopic?: string;\n\tapn?: {\n\t\tfrom?: string;\n\t\ttitle?: string;\n\t\ttext?: string;\n\t\tbadge?: number;\n\t\tsound?: string;\n\t\tnotId?: number;\n\t\tcategory?: string;\n\t};\n\tgcm?: {\n\t\tfrom?: string;\n\t\ttitle?: string;\n\t\ttext?: string;\n\t\timage?: string;\n\t\tstyle?: string;\n\t\tsummaryText?: string;\n\t\tpicture?: string;\n\t\tbadge?: number;\n\t\tsound?: string;\n\t\tnotId?: number;\n\t\tactions?: any[];\n\t};\n\tquery?: {\n\t\tuserId: any;\n\t};\n\ttoken?: IAppsTokens['token'];\n\ttokens?: IAppsTokens['token'][];\n\tpayload?: Record<string, any>;\n\tdelayUntil?: Date;\n\tcreatedAt: Date;\n\tcreatedBy?: string;\n};\n\nexport type NativeNotificationParameters = {\n\tuserTokens: string | string[];\n\tnotification: PendingPushNotification;\n\t_replaceToken: (currentToken: IAppsTokens['token'], newToken: IAppsTokens['token']) => void;\n\t_removeToken: (token: IAppsTokens['token']) => void;\n\toptions: RequiredField<PushOptions, 'gcm'>;\n};\n\nclass PushClass {\n\toptions: PushOptions = {\n\t\tuniqueId: '',\n\t};\n\n\tisConfigured = false;\n\n\tpublic configure(options: PushOptions): void {\n\t\tthis.options = {\n\t\t\tsendTimeout: 60000, // Timeout period for notification send\n\t\t\t...options,\n\t\t};\n\t\t// https://npmjs.org/package/apn\n\n\t\t// After requesting the certificate from Apple, export your private key as\n\t\t// a .p12 file anddownload the .cer file from the iOS Provisioning Portal.\n\n\t\t// gateway.push.apple.com, port 2195\n\t\t// gateway.sandbox.push.apple.com, port 2195\n\n\t\t// Now, in the directory containing cert.cer and key.p12 execute the\n\t\t// following commands to generate your .pem files:\n\t\t// $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem\n\t\t// $ openssl pkcs12 -in key.p12 -out key.pem -nodes\n\n\t\t// Block multiple calls\n\t\tif (this.isConfigured) {\n\t\t\tthrow new Error('Configure should not be called more than once!');\n\t\t}\n\n\t\tthis.isConfigured = true;\n\n\t\tlogger.debug('Configure', this.options);\n\n\t\tif (this.options.apn) {\n\t\t\tinitAPN({ options: this.options as RequiredField<PushOptions, 'apn'>, absoluteUrl: Meteor.absoluteUrl() });\n\t\t}\n\t}\n\n\tprivate replaceToken(currentToken: IAppsTokens['token'], newToken: IAppsTokens['token']): void {\n\t\tvoid AppsTokens.updateMany({ token: currentToken }, { $set: { token: newToken } });\n\t}\n\n\tprivate removeToken(token: IAppsTokens['token']): void {\n\t\tvoid AppsTokens.deleteOne({ token });\n\t}\n\n\tprivate shouldUseGateway(): boolean {\n\t\treturn Boolean(!!this.options.gateways && settings.get('Register_Server') && settings.get('Cloud_Service_Agree_PrivacyTerms'));\n\t}\n\n\tprivate async sendNotificationNative(\n\t\tapp: IAppsTokens,\n\t\tnotification: PendingPushNotification,\n\t\tcountApn: string[],\n\t\tcountGcm: string[],\n\t): Promise<void> {\n\t\tlogger.debug('send to token', app.token);\n\n\t\tif ('apn' in app.token && app.token.apn) {\n\t\t\tcountApn.push(app._id);\n\t\t\t// Send to APN\n\t\t\tif (this.options.apn) {\n\t\t\t\tsendAPN({ userToken: app.token.apn, notification: { topic: app.appName, ...notification }, _removeToken: this.removeToken });\n\t\t\t}\n\t\t} else if ('gcm' in app.token && app.token.gcm) {\n\t\t\tcountGcm.push(app._id);\n\n\t\t\t// Send to GCM\n\t\t\t// We do support multiple here - so we should construct an array\n\t\t\t// and send it bulk - Investigate limit count of id's\n\t\t\t// TODO: Remove this after the legacy provider is removed\n\t\t\tconst useLegacyProvider = settings.get<boolean>('Push_UseLegacy');\n\n\t\t\tif (!useLegacyProvider) {\n\t\t\t\t// override this.options.gcm.apiKey with the oauth2 token\n\t\t\t\tconst { projectId, token } = await this.getNativeNotificationAuthorizationCredentials();\n\t\t\t\tconst sendGCMOptions = {\n\t\t\t\t\t...this.options,\n\t\t\t\t\tgcm: {\n\t\t\t\t\t\t...this.options.gcm,\n\t\t\t\t\t\tapiKey: token,\n\t\t\t\t\t\tprojectNumber: projectId,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tsendFCM({\n\t\t\t\t\tuserTokens: app.token.gcm,\n\t\t\t\t\tnotification,\n\t\t\t\t\t_replaceToken: this.replaceToken,\n\t\t\t\t\t_removeToken: this.removeToken,\n\t\t\t\t\toptions: sendGCMOptions as RequiredField<PushOptions, 'gcm'>,\n\t\t\t\t});\n\t\t\t} else if (this.options.gcm?.apiKey) {\n\t\t\t\tsendGCM({\n\t\t\t\t\tuserTokens: app.token.gcm,\n\t\t\t\t\tnotification,\n\t\t\t\t\t_replaceToken: this.replaceToken,\n\t\t\t\t\t_removeToken: this.removeToken,\n\t\t\t\t\toptions: this.options as RequiredField<PushOptions, 'gcm'>,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('send got a faulty query');\n\t\t}\n\t}\n\n\tprivate async getNativeNotificationAuthorizationCredentials(): Promise<{ token: string; projectId: string }> {\n\t\tconst credentialsString = settings.get<string>('Push_google_api_credentials');\n\t\tif (!credentialsString.trim()) {\n\t\t\tthrow new Error('Push_google_api_credentials is not set');\n\t\t}\n\n\t\ttry {\n\t\t\tconst credentials = JSON.parse(credentialsString);\n\t\t\tif (!isFCMCredentials(credentials)) {\n\t\t\t\tthrow new Error('Push_google_api_credentials is not in the correct format');\n\t\t\t}\n\n\t\t\tconst client = new JWT({\n\t\t\t\temail: credentials.client_email,\n\t\t\t\tkey: credentials.private_key,\n\t\t\t\tkeyId: credentials.private_key_id,\n\t\t\t\tscopes: 'https://www.googleapis.com/auth/firebase.messaging',\n\t\t\t});\n\n\t\t\tawait client.authorize();\n\n\t\t\treturn {\n\t\t\t\ttoken: client.credentials.access_token as string,\n\t\t\t\tprojectId: credentials.project_id,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tlogger.error('Error getting FCM token', error);\n\t\t\tthrow new Error('Error getting FCM token');\n\t\t}\n\t}\n\n\tprivate async sendGatewayPush(\n\t\tgateway: string,\n\t\tservice: 'apn' | 'gcm',\n\t\ttoken: string,\n\t\tnotification: Optional<GatewayNotification, 'uniqueId'>,\n\t\ttries = 0,\n\t): Promise<void> {\n\t\tnotification.uniqueId = this.options.uniqueId;\n\n\t\tconst options = {\n\t\t\tmethod: 'POST',\n\t\t\tbody: {\n\t\t\t\ttoken,\n\t\t\t\toptions: notification,\n\t\t\t},\n\t\t\t...(token && this.options.getAuthorization && { headers: { Authorization: await this.options.getAuthorization() } }),\n\t\t};\n\n\t\tconst result = await fetch(`${gateway}/push/${service}/send`, options);\n\t\tconst response = await result.text();\n\n\t\tif (result.status === 406) {\n\t\t\tlogger.info('removing push token', token);\n\t\t\tawait AppsTokens.deleteMany({\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\t'token.apn': token,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t'token.gcm': token,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (result.status === 422) {\n\t\t\tlogger.info('gateway rejected push notification. not retrying.', response);\n\t\t\treturn;\n\t\t}\n\n\t\tif (result.status === 401) {\n\t\t\tlogger.warn('Error sending push to gateway (not authorized)', response);\n\t\t\treturn;\n\t\t}\n\n\t\tif (result.ok) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.error({ msg: `Error sending push to gateway (${tries} try) ->`, err: response });\n\n\t\tif (tries <= 4) {\n\t\t\t// [1, 2, 4, 8, 16] minutes (total 31)\n\t\t\tconst ms = 60000 * Math.pow(2, tries);\n\n\t\t\tlogger.log('Trying sending push to gateway again in', ms, 'milliseconds');\n\n\t\t\tsetTimeout(() => this.sendGatewayPush(gateway, service, token, notification, tries + 1), ms);\n\t\t}\n\t}\n\n\tprivate getGatewayNotificationData(notification: PendingPushNotification): Omit<GatewayNotification, 'uniqueId'> {\n\t\t// Gateway currently accepts every attribute from the PendingPushNotification type, except for the priority\n\t\t// If new attributes are added to the PendingPushNotification type, they'll need to be removed here as well.\n\t\tconst { priority: _priority, ...notifData } = notification;\n\n\t\treturn {\n\t\t\t...notifData,\n\t\t};\n\t}\n\n\tprivate async sendNotificationGateway(\n\t\tapp: IAppsTokens,\n\t\tnotification: PendingPushNotification,\n\t\tcountApn: string[],\n\t\tcountGcm: string[],\n\t): Promise<void> {\n\t\tif (!this.options.gateways) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst gatewayNotification = this.getGatewayNotificationData(notification);\n\n\t\tfor (const gateway of this.options.gateways) {\n\t\t\tlogger.debug('send to token', app.token);\n\n\t\t\tif ('apn' in app.token && app.token.apn) {\n\t\t\t\tcountApn.push(app._id);\n\t\t\t\treturn this.sendGatewayPush(gateway, 'apn', app.token.apn, { topic: app.appName, ...gatewayNotification });\n\t\t\t}\n\n\t\t\tif ('gcm' in app.token && app.token.gcm) {\n\t\t\t\tcountGcm.push(app._id);\n\t\t\t\treturn this.sendGatewayPush(gateway, 'gcm', app.token.gcm, gatewayNotification);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async sendNotification(notification: PendingPushNotification): Promise<{ apn: string[]; gcm: string[] }> {\n\t\tlogger.debug('Sending notification', notification);\n\n\t\tconst countApn: string[] = [];\n\t\tconst countGcm: string[] = [];\n\n\t\tif (notification.from !== String(notification.from)) {\n\t\t\tthrow new Error('Push.send: option \"from\" not a string');\n\t\t}\n\t\tif (notification.title !== String(notification.title)) {\n\t\t\tthrow new Error('Push.send: option \"title\" not a string');\n\t\t}\n\t\tif (notification.text !== String(notification.text)) {\n\t\t\tthrow new Error('Push.send: option \"text\" not a string');\n\t\t}\n\n\t\tlogger.debug(`send message \"${notification.title}\" to userId`, notification.userId);\n\n\t\tconst query = {\n\t\t\tuserId: notification.userId,\n\t\t\t$or: [{ 'token.apn': { $exists: true } }, { 'token.gcm': { $exists: true } }],\n\t\t};\n\n\t\tconst appTokens = AppsTokens.find(query);\n\n\t\tfor await (const app of appTokens) {\n\t\t\tlogger.debug('send to token', app.token);\n\n\t\t\tif (this.shouldUseGateway()) {\n\t\t\t\tawait this.sendNotificationGateway(app, notification, countApn, countGcm);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait this.sendNotificationNative(app, notification, countApn, countGcm);\n\t\t}\n\n\t\tif (settings.get('Log_Level') === '2') {\n\t\t\tlogger.debug(`Sent message \"${notification.title}\" to ${countApn.length} ios apps ${countGcm.length} android apps`);\n\n\t\t\t// Add some verbosity about the send result, making sure the developer\n\t\t\t// understands what just happened.\n\t\t\tif (!countApn.length && !countGcm.length) {\n\t\t\t\tif ((await AppsTokens.col.estimatedDocumentCount()) === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"AppsTokens\" is empty - No clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t} else if (!countApn.length) {\n\t\t\t\tif ((await AppsTokens.countApnTokens()) === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"AppsTokens\" - No APN clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t} else if (!countGcm.length) {\n\t\t\t\tif ((await AppsTokens.countGcmTokens()) === 0) {\n\t\t\t\t\tlogger.debug('GUIDE: The \"AppsTokens\" - No GCM clients have registered on the server yet...');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tapn: countApn,\n\t\t\tgcm: countGcm,\n\t\t};\n\t}\n\n\t// This is a general function to validate that the data added to notifications\n\t// is in the correct format. If not this function will throw errors\n\tprivate _validateDocument(notification: PendingPushNotification): void {\n\t\t// Check the general notification\n\t\tcheck(notification, {\n\t\t\tfrom: String,\n\t\t\ttitle: String,\n\t\t\ttext: String,\n\t\t\tsent: Match.Optional(Boolean),\n\t\t\tsending: Match.Optional(Match.Integer),\n\t\t\tbadge: Match.Optional(Match.Integer),\n\t\t\tsound: Match.Optional(String),\n\t\t\tnotId: Match.Optional(Match.Integer),\n\t\t\tcontentAvailable: Match.Optional(Match.Integer),\n\t\t\tapn: Match.Optional({\n\t\t\t\tcategory: Match.Optional(String),\n\t\t\t}),\n\t\t\tgcm: Match.Optional({\n\t\t\t\timage: Match.Optional(String),\n\t\t\t\tstyle: Match.Optional(String),\n\t\t\t}),\n\t\t\tuserId: String,\n\t\t\tpayload: Match.Optional(Object),\n\t\t\tcreatedAt: Date,\n\t\t\tcreatedBy: Match.OneOf(String, null),\n\t\t\tpriority: Match.Optional(Match.Integer),\n\t\t});\n\n\t\tif (!notification.userId) {\n\t\t\tthrow new Error('No userId found');\n\t\t}\n\t}\n\n\tprivate hasApnOptions(options: IPushNotificationConfig): options is RequiredField<IPushNotificationConfig, 'apn'> {\n\t\treturn Match.test(options.apn, Object);\n\t}\n\n\tprivate hasGcmOptions(options: IPushNotificationConfig): options is RequiredField<IPushNotificationConfig, 'gcm'> {\n\t\treturn Match.test(options.gcm, Object);\n\t}\n\n\tpublic async send(options: IPushNotificationConfig) {\n\t\tconst notification: PendingPushNotification = {\n\t\t\tcreatedAt: new Date(),\n\t\t\t// createdBy is no longer used, but the gateway still expects it\n\t\t\tcreatedBy: '<SERVER>',\n\t\t\tsent: false,\n\t\t\tsending: 0,\n\n\t\t\t...pick(options, 'from', 'title', 'text', 'userId', 'payload', 'badge', 'sound', 'notId', 'priority'),\n\n\t\t\t...(this.hasApnOptions(options)\n\t\t\t\t? {\n\t\t\t\t\t\tapn: {\n\t\t\t\t\t\t\t...pick(options.apn, 'category'),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {}),\n\t\t\t...(this.hasGcmOptions(options)\n\t\t\t\t? {\n\t\t\t\t\t\tgcm: {\n\t\t\t\t\t\t\t...pick(options.gcm, 'image', 'style'),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {}),\n\t\t};\n\n\t\t// Validate the notification\n\t\tthis._validateDocument(notification);\n\n\t\ttry {\n\t\t\tawait this.sendNotification(notification);\n\t\t} catch (error: any) {\n\t\t\tlogger.debug(`Could not send notification to user \"${notification.userId}\", Error: ${error.message}`);\n\t\t\tlogger.debug(error.stack);\n\t\t}\n\t}\n}\n\nexport const Push = new PushClass();\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"b9dc7888e93e9a7efaf531ebbdb1f90d3736efc0"}
