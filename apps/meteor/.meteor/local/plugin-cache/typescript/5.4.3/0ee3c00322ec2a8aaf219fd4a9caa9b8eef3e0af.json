{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/2fa/server/code/index.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/2fa/server/code/index.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/2fa/server/code/index.ts","inputSourceMap":{"version":3,"file":"app/2fa/server/code/index.ts","sourceRoot":"","sources":["app/2fa/server/code/index.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\n\nimport type { IUser, IMethodConnection } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\n\nimport { EmailCheck } from './EmailCheck';\nimport type { ICodeCheck } from './ICodeCheck';\nimport { PasswordCheckFallback } from './PasswordCheckFallback';\nimport { TOTPCheck } from './TOTPCheck';\nimport { settings } from '../../../settings/server';\n\nexport interface ITwoFactorOptions {\n\tdisablePasswordFallback?: boolean;\n\tdisableRememberMe?: boolean;\n\trequireSecondFactor?: boolean; // whether any two factor should be required\n}\n\nconst totpCheck = new TOTPCheck();\nexport const emailCheck = new EmailCheck();\nconst passwordCheckFallback = new PasswordCheckFallback();\n\nconst checkMethods = new Map<string, ICodeCheck>();\n\ncheckMethods.set(totpCheck.name, totpCheck);\ncheckMethods.set(emailCheck.name, emailCheck);\n\nfunction getMethodByNameOrFirstActiveForUser(user: IUser, name?: string): ICodeCheck | undefined {\n\tif (name && checkMethods.has(name)) {\n\t\treturn checkMethods.get(name);\n\t}\n\n\treturn Array.from(checkMethods.values()).find((method) => method.isEnabled(user));\n}\n\nfunction getAvailableMethodNames(user: IUser): string[] {\n\treturn (\n\t\tArray.from(checkMethods)\n\t\t\t.filter(([, method]) => method.isEnabled(user))\n\t\t\t.map(([name]) => name) || []\n\t);\n}\n\nexport async function getUserForCheck(userId: string): Promise<IUser | null> {\n\treturn Users.findOneById(userId, {\n\t\tprojection: {\n\t\t\temails: 1,\n\t\t\tlanguage: 1,\n\t\t\tcreatedAt: 1,\n\t\t\tservices: 1,\n\t\t},\n\t});\n}\n\nfunction getFingerprintFromConnection(connection: IMethodConnection): string {\n\tconst data = JSON.stringify({\n\t\tuserAgent: connection.httpHeaders['user-agent'],\n\t\tclientAddress: connection.clientAddress,\n\t});\n\n\treturn crypto.createHash('md5').update(data).digest('hex');\n}\n\nfunction getRememberDate(from: Date = new Date()): Date | undefined {\n\tconst rememberFor = parseInt(settings.get('Accounts_TwoFactorAuthentication_RememberFor') as string, 10);\n\n\tif (rememberFor <= 0) {\n\t\treturn;\n\t}\n\n\tconst expires = new Date(from);\n\texpires.setSeconds(expires.getSeconds() + rememberFor);\n\n\treturn expires;\n}\n\nfunction isAuthorizedForToken(connection: IMethodConnection, user: IUser, options: ITwoFactorOptions): boolean {\n\tconst currentToken = Accounts._getLoginToken(connection.id);\n\tconst tokenObject = user.services?.resume?.loginTokens?.find((i) => i.hashedToken === currentToken);\n\n\tif (!tokenObject) {\n\t\treturn false;\n\t}\n\n\t// if any two factor is required, early abort\n\tif (options.requireSecondFactor) {\n\t\treturn false;\n\t}\n\n\tif ('bypassTwoFactor' in tokenObject && tokenObject.bypassTwoFactor === true) {\n\t\treturn true;\n\t}\n\n\tif (options.disableRememberMe === true) {\n\t\treturn false;\n\t}\n\n\t// remember user right after their registration\n\tconst rememberAfterRegistration = user.createdAt && getRememberDate(user.createdAt);\n\tif (rememberAfterRegistration && rememberAfterRegistration >= new Date()) {\n\t\treturn true;\n\t}\n\n\tif (!tokenObject.twoFactorAuthorizedUntil || !tokenObject.twoFactorAuthorizedHash) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.twoFactorAuthorizedUntil < new Date()) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.twoFactorAuthorizedHash !== getFingerprintFromConnection(connection)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nasync function rememberAuthorization(connection: IMethodConnection, user: IUser): Promise<void> {\n\tconst currentToken = Accounts._getLoginToken(connection.id);\n\n\tconst expires = getRememberDate();\n\tif (!expires) {\n\t\treturn;\n\t}\n\n\tif (!currentToken) {\n\t\treturn;\n\t}\n\n\tawait Users.setTwoFactorAuthorizationHashAndUntilForUserIdAndToken(\n\t\tuser._id,\n\t\tcurrentToken,\n\t\tgetFingerprintFromConnection(connection),\n\t\texpires,\n\t);\n}\n\ninterface ICheckCodeForUser {\n\tuser: IUser | string;\n\tcode?: string;\n\tmethod?: string;\n\toptions?: ITwoFactorOptions;\n\tconnection?: IMethodConnection;\n}\n\nconst getSecondFactorMethod = (user: IUser, method: string | undefined, options: ITwoFactorOptions): ICodeCheck | undefined => {\n\t// try first getting one of the available methods or the one that was already provided\n\tconst selectedMethod = getMethodByNameOrFirstActiveForUser(user, method);\n\tif (selectedMethod) {\n\t\treturn selectedMethod;\n\t}\n\n\t// if none found but a second factor is required, chose the password check\n\tif (options.requireSecondFactor) {\n\t\treturn passwordCheckFallback;\n\t}\n\n\t// check if password fallback is enabled\n\tif (!options.disablePasswordFallback && passwordCheckFallback.isEnabled(user, !!options.requireSecondFactor)) {\n\t\treturn passwordCheckFallback;\n\t}\n};\n\nexport async function checkCodeForUser({ user, code, method, options = {}, connection }: ICheckCodeForUser): Promise<boolean> {\n\tif (process.env.TEST_MODE && !options.requireSecondFactor) {\n\t\treturn true;\n\t}\n\n\tif (!settings.get('Accounts_TwoFactorAuthentication_Enabled')) {\n\t\treturn true;\n\t}\n\n\tlet existingUser: IUser | null;\n\n\tif (typeof user === 'string') {\n\t\texistingUser = await getUserForCheck(user);\n\t} else {\n\t\texistingUser = user;\n\t}\n\n\tif (!existingUser) {\n\t\tthrow new Meteor.Error('totp-user-not-found', 'TOTP User not found');\n\t}\n\n\tif (!code && !method && connection?.httpHeaders?.['x-2fa-code'] && connection.httpHeaders['x-2fa-method']) {\n\t\tcode = connection.httpHeaders['x-2fa-code'];\n\t\tmethod = connection.httpHeaders['x-2fa-method'];\n\t}\n\n\tif (connection && isAuthorizedForToken(connection, existingUser, options)) {\n\t\treturn true;\n\t}\n\n\t// select a second factor method or return if none is found/available\n\tconst selectedMethod = getSecondFactorMethod(existingUser, method, options);\n\tif (!selectedMethod) {\n\t\treturn true;\n\t}\n\n\tconst data = await selectedMethod.processInvalidCode(existingUser);\n\n\tconst availableMethods = getAvailableMethodNames(existingUser);\n\n\tif (!code) {\n\t\tthrow new Meteor.Error('totp-required', 'TOTP Required', {\n\t\t\tmethod: selectedMethod.name,\n\t\t\t...data,\n\t\t\tavailableMethods,\n\t\t});\n\t}\n\n\tconst valid = await selectedMethod.verify(existingUser, code, options.requireSecondFactor);\n\tif (!valid) {\n\t\tconst tooManyFailedAttempts = await selectedMethod.maxFaildedAttemtpsReached(existingUser);\n\t\tif (tooManyFailedAttempts) {\n\t\t\tthrow new Meteor.Error('totp-max-attempts', 'TOTP Maximun Failed Attempts Reached', {\n\t\t\t\tmethod: selectedMethod.name,\n\t\t\t\t...data,\n\t\t\t\tavailableMethods,\n\t\t\t});\n\t\t}\n\n\t\tthrow new Meteor.Error('totp-invalid', 'TOTP Invalid', {\n\t\t\tmethod: selectedMethod.name,\n\t\t\t...data,\n\t\t\tavailableMethods,\n\t\t});\n\t}\n\n\tif (options.disableRememberMe !== true && connection) {\n\t\tawait rememberAuthorization(connection, existingUser);\n\t}\n\n\treturn true;\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/2fa/server/code/index.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/2fa/server/code/index.ts","inputSourceMap":{"version":3,"file":"app/2fa/server/code/index.ts","sourceRoot":"","sources":["app/2fa/server/code/index.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\n\nimport type { IUser, IMethodConnection } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\n\nimport { EmailCheck } from './EmailCheck';\nimport type { ICodeCheck } from './ICodeCheck';\nimport { PasswordCheckFallback } from './PasswordCheckFallback';\nimport { TOTPCheck } from './TOTPCheck';\nimport { settings } from '../../../settings/server';\n\nexport interface ITwoFactorOptions {\n\tdisablePasswordFallback?: boolean;\n\tdisableRememberMe?: boolean;\n\trequireSecondFactor?: boolean; // whether any two factor should be required\n}\n\nconst totpCheck = new TOTPCheck();\nexport const emailCheck = new EmailCheck();\nconst passwordCheckFallback = new PasswordCheckFallback();\n\nconst checkMethods = new Map<string, ICodeCheck>();\n\ncheckMethods.set(totpCheck.name, totpCheck);\ncheckMethods.set(emailCheck.name, emailCheck);\n\nfunction getMethodByNameOrFirstActiveForUser(user: IUser, name?: string): ICodeCheck | undefined {\n\tif (name && checkMethods.has(name)) {\n\t\treturn checkMethods.get(name);\n\t}\n\n\treturn Array.from(checkMethods.values()).find((method) => method.isEnabled(user));\n}\n\nfunction getAvailableMethodNames(user: IUser): string[] {\n\treturn (\n\t\tArray.from(checkMethods)\n\t\t\t.filter(([, method]) => method.isEnabled(user))\n\t\t\t.map(([name]) => name) || []\n\t);\n}\n\nexport async function getUserForCheck(userId: string): Promise<IUser | null> {\n\treturn Users.findOneById(userId, {\n\t\tprojection: {\n\t\t\temails: 1,\n\t\t\tlanguage: 1,\n\t\t\tcreatedAt: 1,\n\t\t\tservices: 1,\n\t\t},\n\t});\n}\n\nfunction getFingerprintFromConnection(connection: IMethodConnection): string {\n\tconst data = JSON.stringify({\n\t\tuserAgent: connection.httpHeaders['user-agent'],\n\t\tclientAddress: connection.clientAddress,\n\t});\n\n\treturn crypto.createHash('md5').update(data).digest('hex');\n}\n\nfunction getRememberDate(from: Date = new Date()): Date | undefined {\n\tconst rememberFor = parseInt(settings.get('Accounts_TwoFactorAuthentication_RememberFor') as string, 10);\n\n\tif (rememberFor <= 0) {\n\t\treturn;\n\t}\n\n\tconst expires = new Date(from);\n\texpires.setSeconds(expires.getSeconds() + rememberFor);\n\n\treturn expires;\n}\n\nfunction isAuthorizedForToken(connection: IMethodConnection, user: IUser, options: ITwoFactorOptions): boolean {\n\tconst currentToken = Accounts._getLoginToken(connection.id);\n\tconst tokenObject = user.services?.resume?.loginTokens?.find((i) => i.hashedToken === currentToken);\n\n\tif (!tokenObject) {\n\t\treturn false;\n\t}\n\n\t// if any two factor is required, early abort\n\tif (options.requireSecondFactor) {\n\t\treturn false;\n\t}\n\n\tif ('bypassTwoFactor' in tokenObject && tokenObject.bypassTwoFactor === true) {\n\t\treturn true;\n\t}\n\n\tif (options.disableRememberMe === true) {\n\t\treturn false;\n\t}\n\n\t// remember user right after their registration\n\tconst rememberAfterRegistration = user.createdAt && getRememberDate(user.createdAt);\n\tif (rememberAfterRegistration && rememberAfterRegistration >= new Date()) {\n\t\treturn true;\n\t}\n\n\tif (!tokenObject.twoFactorAuthorizedUntil || !tokenObject.twoFactorAuthorizedHash) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.twoFactorAuthorizedUntil < new Date()) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.twoFactorAuthorizedHash !== getFingerprintFromConnection(connection)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nasync function rememberAuthorization(connection: IMethodConnection, user: IUser): Promise<void> {\n\tconst currentToken = Accounts._getLoginToken(connection.id);\n\n\tconst expires = getRememberDate();\n\tif (!expires) {\n\t\treturn;\n\t}\n\n\tif (!currentToken) {\n\t\treturn;\n\t}\n\n\tawait Users.setTwoFactorAuthorizationHashAndUntilForUserIdAndToken(\n\t\tuser._id,\n\t\tcurrentToken,\n\t\tgetFingerprintFromConnection(connection),\n\t\texpires,\n\t);\n}\n\ninterface ICheckCodeForUser {\n\tuser: IUser | string;\n\tcode?: string;\n\tmethod?: string;\n\toptions?: ITwoFactorOptions;\n\tconnection?: IMethodConnection;\n}\n\nconst getSecondFactorMethod = (user: IUser, method: string | undefined, options: ITwoFactorOptions): ICodeCheck | undefined => {\n\t// try first getting one of the available methods or the one that was already provided\n\tconst selectedMethod = getMethodByNameOrFirstActiveForUser(user, method);\n\tif (selectedMethod) {\n\t\treturn selectedMethod;\n\t}\n\n\t// if none found but a second factor is required, chose the password check\n\tif (options.requireSecondFactor) {\n\t\treturn passwordCheckFallback;\n\t}\n\n\t// check if password fallback is enabled\n\tif (!options.disablePasswordFallback && passwordCheckFallback.isEnabled(user, !!options.requireSecondFactor)) {\n\t\treturn passwordCheckFallback;\n\t}\n};\n\nexport async function checkCodeForUser({ user, code, method, options = {}, connection }: ICheckCodeForUser): Promise<boolean> {\n\tif (process.env.TEST_MODE && !options.requireSecondFactor) {\n\t\treturn true;\n\t}\n\n\tif (!settings.get('Accounts_TwoFactorAuthentication_Enabled')) {\n\t\treturn true;\n\t}\n\n\tlet existingUser: IUser | null;\n\n\tif (typeof user === 'string') {\n\t\texistingUser = await getUserForCheck(user);\n\t} else {\n\t\texistingUser = user;\n\t}\n\n\tif (!existingUser) {\n\t\tthrow new Meteor.Error('totp-user-not-found', 'TOTP User not found');\n\t}\n\n\tif (!code && !method && connection?.httpHeaders?.['x-2fa-code'] && connection.httpHeaders['x-2fa-method']) {\n\t\tcode = connection.httpHeaders['x-2fa-code'];\n\t\tmethod = connection.httpHeaders['x-2fa-method'];\n\t}\n\n\tif (connection && isAuthorizedForToken(connection, existingUser, options)) {\n\t\treturn true;\n\t}\n\n\t// select a second factor method or return if none is found/available\n\tconst selectedMethod = getSecondFactorMethod(existingUser, method, options);\n\tif (!selectedMethod) {\n\t\treturn true;\n\t}\n\n\tconst data = await selectedMethod.processInvalidCode(existingUser);\n\n\tconst availableMethods = getAvailableMethodNames(existingUser);\n\n\tif (!code) {\n\t\tthrow new Meteor.Error('totp-required', 'TOTP Required', {\n\t\t\tmethod: selectedMethod.name,\n\t\t\t...data,\n\t\t\tavailableMethods,\n\t\t});\n\t}\n\n\tconst valid = await selectedMethod.verify(existingUser, code, options.requireSecondFactor);\n\tif (!valid) {\n\t\tconst tooManyFailedAttempts = await selectedMethod.maxFaildedAttemtpsReached(existingUser);\n\t\tif (tooManyFailedAttempts) {\n\t\t\tthrow new Meteor.Error('totp-max-attempts', 'TOTP Maximun Failed Attempts Reached', {\n\t\t\t\tmethod: selectedMethod.name,\n\t\t\t\t...data,\n\t\t\t\tavailableMethods,\n\t\t\t});\n\t\t}\n\n\t\tthrow new Meteor.Error('totp-invalid', 'TOTP Invalid', {\n\t\t\tmethod: selectedMethod.name,\n\t\t\t...data,\n\t\t\tavailableMethods,\n\t\t});\n\t}\n\n\tif (options.disableRememberMe !== true && connection) {\n\t\tawait rememberAuthorization(connection, existingUser);\n\t}\n\n\treturn true;\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      emailCheck: () => emailCheck,\n      getUserForCheck: () => getUserForCheck,\n      checkCodeForUser: () => checkCodeForUser\n    });\n    let crypto;\n    module.link(\"crypto\", {\n      default(v) {\n        crypto = v;\n      }\n    }, 0);\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let EmailCheck;\n    module.link(\"./EmailCheck\", {\n      EmailCheck(v) {\n        EmailCheck = v;\n      }\n    }, 4);\n    let PasswordCheckFallback;\n    module.link(\"./PasswordCheckFallback\", {\n      PasswordCheckFallback(v) {\n        PasswordCheckFallback = v;\n      }\n    }, 5);\n    let TOTPCheck;\n    module.link(\"./TOTPCheck\", {\n      TOTPCheck(v) {\n        TOTPCheck = v;\n      }\n    }, 6);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const totpCheck = new TOTPCheck();\n    const emailCheck = new EmailCheck();\n    const passwordCheckFallback = new PasswordCheckFallback();\n    const checkMethods = new Map();\n    checkMethods.set(totpCheck.name, totpCheck);\n    checkMethods.set(emailCheck.name, emailCheck);\n    function getMethodByNameOrFirstActiveForUser(user, name) {\n      if (name && checkMethods.has(name)) {\n        return checkMethods.get(name);\n      }\n      return Array.from(checkMethods.values()).find(method => method.isEnabled(user));\n    }\n    function getAvailableMethodNames(user) {\n      return Array.from(checkMethods).filter(_ref => {\n        let [, method] = _ref;\n        return method.isEnabled(user);\n      }).map(_ref2 => {\n        let [name] = _ref2;\n        return name;\n      }) || [];\n    }\n    async function getUserForCheck(userId) {\n      return Users.findOneById(userId, {\n        projection: {\n          emails: 1,\n          language: 1,\n          createdAt: 1,\n          services: 1\n        }\n      });\n    }\n    function getFingerprintFromConnection(connection) {\n      const data = JSON.stringify({\n        userAgent: connection.httpHeaders['user-agent'],\n        clientAddress: connection.clientAddress\n      });\n      return crypto.createHash('md5').update(data).digest('hex');\n    }\n    function getRememberDate() {\n      let from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n      const rememberFor = parseInt(settings.get('Accounts_TwoFactorAuthentication_RememberFor'), 10);\n      if (rememberFor <= 0) {\n        return;\n      }\n      const expires = new Date(from);\n      expires.setSeconds(expires.getSeconds() + rememberFor);\n      return expires;\n    }\n    function isAuthorizedForToken(connection, user, options) {\n      var _user$services, _user$services$resume, _user$services$resume2;\n      const currentToken = Accounts._getLoginToken(connection.id);\n      const tokenObject = (_user$services = user.services) === null || _user$services === void 0 ? void 0 : (_user$services$resume = _user$services.resume) === null || _user$services$resume === void 0 ? void 0 : (_user$services$resume2 = _user$services$resume.loginTokens) === null || _user$services$resume2 === void 0 ? void 0 : _user$services$resume2.find(i => i.hashedToken === currentToken);\n      if (!tokenObject) {\n        return false;\n      }\n      // if any two factor is required, early abort\n      if (options.requireSecondFactor) {\n        return false;\n      }\n      if ('bypassTwoFactor' in tokenObject && tokenObject.bypassTwoFactor === true) {\n        return true;\n      }\n      if (options.disableRememberMe === true) {\n        return false;\n      }\n      // remember user right after their registration\n      const rememberAfterRegistration = user.createdAt && getRememberDate(user.createdAt);\n      if (rememberAfterRegistration && rememberAfterRegistration >= new Date()) {\n        return true;\n      }\n      if (!tokenObject.twoFactorAuthorizedUntil || !tokenObject.twoFactorAuthorizedHash) {\n        return false;\n      }\n      if (tokenObject.twoFactorAuthorizedUntil < new Date()) {\n        return false;\n      }\n      if (tokenObject.twoFactorAuthorizedHash !== getFingerprintFromConnection(connection)) {\n        return false;\n      }\n      return true;\n    }\n    async function rememberAuthorization(connection, user) {\n      const currentToken = Accounts._getLoginToken(connection.id);\n      const expires = getRememberDate();\n      if (!expires) {\n        return;\n      }\n      if (!currentToken) {\n        return;\n      }\n      await Users.setTwoFactorAuthorizationHashAndUntilForUserIdAndToken(user._id, currentToken, getFingerprintFromConnection(connection), expires);\n    }\n    const getSecondFactorMethod = (user, method, options) => {\n      // try first getting one of the available methods or the one that was already provided\n      const selectedMethod = getMethodByNameOrFirstActiveForUser(user, method);\n      if (selectedMethod) {\n        return selectedMethod;\n      }\n      // if none found but a second factor is required, chose the password check\n      if (options.requireSecondFactor) {\n        return passwordCheckFallback;\n      }\n      // check if password fallback is enabled\n      if (!options.disablePasswordFallback && passwordCheckFallback.isEnabled(user, !!options.requireSecondFactor)) {\n        return passwordCheckFallback;\n      }\n    };\n    async function checkCodeForUser(_ref3) {\n      var _connection$httpHeade;\n      let {\n        user,\n        code,\n        method,\n        options = {},\n        connection\n      } = _ref3;\n      if (process.env.TEST_MODE && !options.requireSecondFactor) {\n        return true;\n      }\n      if (!settings.get('Accounts_TwoFactorAuthentication_Enabled')) {\n        return true;\n      }\n      let existingUser;\n      if (typeof user === 'string') {\n        existingUser = await getUserForCheck(user);\n      } else {\n        existingUser = user;\n      }\n      if (!existingUser) {\n        throw new Meteor.Error('totp-user-not-found', 'TOTP User not found');\n      }\n      if (!code && !method && connection !== null && connection !== void 0 && (_connection$httpHeade = connection.httpHeaders) !== null && _connection$httpHeade !== void 0 && _connection$httpHeade['x-2fa-code'] && connection.httpHeaders['x-2fa-method']) {\n        code = connection.httpHeaders['x-2fa-code'];\n        method = connection.httpHeaders['x-2fa-method'];\n      }\n      if (connection && isAuthorizedForToken(connection, existingUser, options)) {\n        return true;\n      }\n      // select a second factor method or return if none is found/available\n      const selectedMethod = getSecondFactorMethod(existingUser, method, options);\n      if (!selectedMethod) {\n        return true;\n      }\n      const data = await selectedMethod.processInvalidCode(existingUser);\n      const availableMethods = getAvailableMethodNames(existingUser);\n      if (!code) {\n        throw new Meteor.Error('totp-required', 'TOTP Required', _objectSpread(_objectSpread({\n          method: selectedMethod.name\n        }, data), {}, {\n          availableMethods\n        }));\n      }\n      const valid = await selectedMethod.verify(existingUser, code, options.requireSecondFactor);\n      if (!valid) {\n        const tooManyFailedAttempts = await selectedMethod.maxFaildedAttemtpsReached(existingUser);\n        if (tooManyFailedAttempts) {\n          throw new Meteor.Error('totp-max-attempts', 'TOTP Maximun Failed Attempts Reached', _objectSpread(_objectSpread({\n            method: selectedMethod.name\n          }, data), {}, {\n            availableMethods\n          }));\n        }\n        throw new Meteor.Error('totp-invalid', 'TOTP Invalid', _objectSpread(_objectSpread({\n          method: selectedMethod.name\n        }, data), {}, {\n          availableMethods\n        }));\n      }\n      if (options.disableRememberMe !== true && connection) {\n        await rememberAuthorization(connection, existingUser);\n      }\n      return true;\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","emailCheck","getUserForCheck","checkCodeForUser","crypto","Users","Accounts","Meteor","EmailCheck","PasswordCheckFallback","TOTPCheck","settings","__reifyWaitForDeps__","totpCheck","passwordCheckFallback","checkMethods","Map","set","name","getMethodByNameOrFirstActiveForUser","user","has","get","Array","from","values","find","method","isEnabled","getAvailableMethodNames","filter","_ref","map","_ref2","userId","findOneById","projection","emails","language","createdAt","services","getFingerprintFromConnection","connection","data","JSON","stringify","userAgent","httpHeaders","clientAddress","createHash","update","digest","getRememberDate","arguments","length","undefined","Date","rememberFor","parseInt","expires","setSeconds","getSeconds","isAuthorizedForToken","options","_user$services","_user$services$resume","_user$services$resume2","currentToken","_getLoginToken","id","tokenObject","resume","loginTokens","i","hashedToken","requireSecondFactor","bypassTwoFactor","disableRememberMe","rememberAfterRegistration","twoFactorAuthorizedUntil","twoFactorAuthorizedHash","rememberAuthorization","setTwoFactorAuthorizationHashAndUntilForUserIdAndToken","_id","getSecondFactorMethod","selectedMethod","disablePasswordFallback","_ref3","_connection$httpHeade","code","process","env","TEST_MODE","existingUser","Error","processInvalidCode","availableMethods","valid","verify","tooManyFailedAttempts","maxFaildedAttemtpsReached","__reify_async_result__","_reifyError","self","async"],"sources":["app/2fa/server/code/index.ts"],"sourcesContent":["import crypto from 'crypto';\n\nimport type { IUser, IMethodConnection } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\n\nimport { EmailCheck } from './EmailCheck';\nimport type { ICodeCheck } from './ICodeCheck';\nimport { PasswordCheckFallback } from './PasswordCheckFallback';\nimport { TOTPCheck } from './TOTPCheck';\nimport { settings } from '../../../settings/server';\n\nexport interface ITwoFactorOptions {\n\tdisablePasswordFallback?: boolean;\n\tdisableRememberMe?: boolean;\n\trequireSecondFactor?: boolean; // whether any two factor should be required\n}\n\nconst totpCheck = new TOTPCheck();\nexport const emailCheck = new EmailCheck();\nconst passwordCheckFallback = new PasswordCheckFallback();\n\nconst checkMethods = new Map<string, ICodeCheck>();\n\ncheckMethods.set(totpCheck.name, totpCheck);\ncheckMethods.set(emailCheck.name, emailCheck);\n\nfunction getMethodByNameOrFirstActiveForUser(user: IUser, name?: string): ICodeCheck | undefined {\n\tif (name && checkMethods.has(name)) {\n\t\treturn checkMethods.get(name);\n\t}\n\n\treturn Array.from(checkMethods.values()).find((method) => method.isEnabled(user));\n}\n\nfunction getAvailableMethodNames(user: IUser): string[] {\n\treturn (\n\t\tArray.from(checkMethods)\n\t\t\t.filter(([, method]) => method.isEnabled(user))\n\t\t\t.map(([name]) => name) || []\n\t);\n}\n\nexport async function getUserForCheck(userId: string): Promise<IUser | null> {\n\treturn Users.findOneById(userId, {\n\t\tprojection: {\n\t\t\temails: 1,\n\t\t\tlanguage: 1,\n\t\t\tcreatedAt: 1,\n\t\t\tservices: 1,\n\t\t},\n\t});\n}\n\nfunction getFingerprintFromConnection(connection: IMethodConnection): string {\n\tconst data = JSON.stringify({\n\t\tuserAgent: connection.httpHeaders['user-agent'],\n\t\tclientAddress: connection.clientAddress,\n\t});\n\n\treturn crypto.createHash('md5').update(data).digest('hex');\n}\n\nfunction getRememberDate(from: Date = new Date()): Date | undefined {\n\tconst rememberFor = parseInt(settings.get('Accounts_TwoFactorAuthentication_RememberFor') as string, 10);\n\n\tif (rememberFor <= 0) {\n\t\treturn;\n\t}\n\n\tconst expires = new Date(from);\n\texpires.setSeconds(expires.getSeconds() + rememberFor);\n\n\treturn expires;\n}\n\nfunction isAuthorizedForToken(connection: IMethodConnection, user: IUser, options: ITwoFactorOptions): boolean {\n\tconst currentToken = Accounts._getLoginToken(connection.id);\n\tconst tokenObject = user.services?.resume?.loginTokens?.find((i) => i.hashedToken === currentToken);\n\n\tif (!tokenObject) {\n\t\treturn false;\n\t}\n\n\t// if any two factor is required, early abort\n\tif (options.requireSecondFactor) {\n\t\treturn false;\n\t}\n\n\tif ('bypassTwoFactor' in tokenObject && tokenObject.bypassTwoFactor === true) {\n\t\treturn true;\n\t}\n\n\tif (options.disableRememberMe === true) {\n\t\treturn false;\n\t}\n\n\t// remember user right after their registration\n\tconst rememberAfterRegistration = user.createdAt && getRememberDate(user.createdAt);\n\tif (rememberAfterRegistration && rememberAfterRegistration >= new Date()) {\n\t\treturn true;\n\t}\n\n\tif (!tokenObject.twoFactorAuthorizedUntil || !tokenObject.twoFactorAuthorizedHash) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.twoFactorAuthorizedUntil < new Date()) {\n\t\treturn false;\n\t}\n\n\tif (tokenObject.twoFactorAuthorizedHash !== getFingerprintFromConnection(connection)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nasync function rememberAuthorization(connection: IMethodConnection, user: IUser): Promise<void> {\n\tconst currentToken = Accounts._getLoginToken(connection.id);\n\n\tconst expires = getRememberDate();\n\tif (!expires) {\n\t\treturn;\n\t}\n\n\tif (!currentToken) {\n\t\treturn;\n\t}\n\n\tawait Users.setTwoFactorAuthorizationHashAndUntilForUserIdAndToken(\n\t\tuser._id,\n\t\tcurrentToken,\n\t\tgetFingerprintFromConnection(connection),\n\t\texpires,\n\t);\n}\n\ninterface ICheckCodeForUser {\n\tuser: IUser | string;\n\tcode?: string;\n\tmethod?: string;\n\toptions?: ITwoFactorOptions;\n\tconnection?: IMethodConnection;\n}\n\nconst getSecondFactorMethod = (user: IUser, method: string | undefined, options: ITwoFactorOptions): ICodeCheck | undefined => {\n\t// try first getting one of the available methods or the one that was already provided\n\tconst selectedMethod = getMethodByNameOrFirstActiveForUser(user, method);\n\tif (selectedMethod) {\n\t\treturn selectedMethod;\n\t}\n\n\t// if none found but a second factor is required, chose the password check\n\tif (options.requireSecondFactor) {\n\t\treturn passwordCheckFallback;\n\t}\n\n\t// check if password fallback is enabled\n\tif (!options.disablePasswordFallback && passwordCheckFallback.isEnabled(user, !!options.requireSecondFactor)) {\n\t\treturn passwordCheckFallback;\n\t}\n};\n\nexport async function checkCodeForUser({ user, code, method, options = {}, connection }: ICheckCodeForUser): Promise<boolean> {\n\tif (process.env.TEST_MODE && !options.requireSecondFactor) {\n\t\treturn true;\n\t}\n\n\tif (!settings.get('Accounts_TwoFactorAuthentication_Enabled')) {\n\t\treturn true;\n\t}\n\n\tlet existingUser: IUser | null;\n\n\tif (typeof user === 'string') {\n\t\texistingUser = await getUserForCheck(user);\n\t} else {\n\t\texistingUser = user;\n\t}\n\n\tif (!existingUser) {\n\t\tthrow new Meteor.Error('totp-user-not-found', 'TOTP User not found');\n\t}\n\n\tif (!code && !method && connection?.httpHeaders?.['x-2fa-code'] && connection.httpHeaders['x-2fa-method']) {\n\t\tcode = connection.httpHeaders['x-2fa-code'];\n\t\tmethod = connection.httpHeaders['x-2fa-method'];\n\t}\n\n\tif (connection && isAuthorizedForToken(connection, existingUser, options)) {\n\t\treturn true;\n\t}\n\n\t// select a second factor method or return if none is found/available\n\tconst selectedMethod = getSecondFactorMethod(existingUser, method, options);\n\tif (!selectedMethod) {\n\t\treturn true;\n\t}\n\n\tconst data = await selectedMethod.processInvalidCode(existingUser);\n\n\tconst availableMethods = getAvailableMethodNames(existingUser);\n\n\tif (!code) {\n\t\tthrow new Meteor.Error('totp-required', 'TOTP Required', {\n\t\t\tmethod: selectedMethod.name,\n\t\t\t...data,\n\t\t\tavailableMethods,\n\t\t});\n\t}\n\n\tconst valid = await selectedMethod.verify(existingUser, code, options.requireSecondFactor);\n\tif (!valid) {\n\t\tconst tooManyFailedAttempts = await selectedMethod.maxFaildedAttemtpsReached(existingUser);\n\t\tif (tooManyFailedAttempts) {\n\t\t\tthrow new Meteor.Error('totp-max-attempts', 'TOTP Maximun Failed Attempts Reached', {\n\t\t\t\tmethod: selectedMethod.name,\n\t\t\t\t...data,\n\t\t\t\tavailableMethods,\n\t\t\t});\n\t\t}\n\n\t\tthrow new Meteor.Error('totp-invalid', 'TOTP Invalid', {\n\t\t\tmethod: selectedMethod.name,\n\t\t\t...data,\n\t\t\tavailableMethods,\n\t\t});\n\t}\n\n\tif (options.disableRememberMe !== true && connection) {\n\t\tawait rememberAuthorization(connection, existingUser);\n\t}\n\n\treturn true;\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"0ee3c00322ec2a8aaf219fd4a9caa9b8eef3e0af"}
