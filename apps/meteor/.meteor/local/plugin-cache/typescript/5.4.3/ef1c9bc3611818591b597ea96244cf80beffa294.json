{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/crowd/server/methods.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/crowd/server/methods.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/crowd/server/methods.ts","inputSourceMap":{"version":3,"file":"app/crowd/server/methods.ts","sourceRoot":"","sources":["app/crowd/server/methods.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ServerMethods } from '@rocket.chat/ddp-client';\nimport type { TranslationKey } from '@rocket.chat/ui-contexts';\nimport { Meteor } from 'meteor/meteor';\n\nimport { CROWD } from './crowd';\nimport { logger } from './logger';\nimport { hasPermissionAsync } from '../../authorization/server/functions/hasPermission';\nimport { settings } from '../../settings/server';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tcrowd_test_connection(): { message: TranslationKey; params: string[] };\n\t\tcrowd_sync_users(): { message: string; params: string[] };\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync crowd_test_connection() {\n\t\tconst user = await Meteor.userAsync();\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'crowd_test_connection',\n\t\t\t});\n\t\t}\n\n\t\tif (!(await hasPermissionAsync(user._id, 'test-admin-options'))) {\n\t\t\tthrow new Meteor.Error('error-not-authorized', 'Not authorized', {\n\t\t\t\tmethod: 'crowd_test_connection',\n\t\t\t});\n\t\t}\n\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\tthrow new Meteor.Error('crowd_disabled');\n\t\t}\n\n\t\ttry {\n\t\t\tconst crowd = new CROWD();\n\t\t\tawait crowd.checkConnection();\n\n\t\t\treturn {\n\t\t\t\tmessage: 'Crowd_Connection_successful' as const,\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tlogger.error({\n\t\t\t\tmsg: 'Invalid crowd connection details, check the url and application username/password and make sure this server is allowed to speak to crowd',\n\t\t\t\terr,\n\t\t\t});\n\t\t\tthrow new Meteor.Error('Invalid connection details', '', { method: 'crowd_test_connection' });\n\t\t}\n\t},\n\tasync crowd_sync_users() {\n\t\tconst user = await Meteor.userAsync();\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\tthrow new Meteor.Error('crowd_disabled');\n\t\t}\n\n\t\tif (!user || !(await hasPermissionAsync(user._id, 'sync-auth-services-users'))) {\n\t\t\tthrow new Meteor.Error('error-not-authorized', 'Not authorized', {\n\t\t\t\tmethod: 'crowd_sync_users',\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tconst crowd = new CROWD();\n\t\t\tconst startTime = Date.now();\n\t\t\tawait crowd.sync();\n\t\t\tconst stopTime = Date.now();\n\t\t\tconst actual = Math.ceil((stopTime - startTime) / 1000);\n\n\t\t\treturn {\n\t\t\t\tmessage: `User data synced in ${actual} seconds`,\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: 'Error syncing user data. ', err });\n\t\t\tthrow new Meteor.Error('Error syncing user data', '', { method: 'crowd_sync_users' });\n\t\t}\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/crowd/server/methods.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/crowd/server/methods.ts","inputSourceMap":{"version":3,"file":"app/crowd/server/methods.ts","sourceRoot":"","sources":["app/crowd/server/methods.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ServerMethods } from '@rocket.chat/ddp-client';\nimport type { TranslationKey } from '@rocket.chat/ui-contexts';\nimport { Meteor } from 'meteor/meteor';\n\nimport { CROWD } from './crowd';\nimport { logger } from './logger';\nimport { hasPermissionAsync } from '../../authorization/server/functions/hasPermission';\nimport { settings } from '../../settings/server';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tcrowd_test_connection(): { message: TranslationKey; params: string[] };\n\t\tcrowd_sync_users(): { message: string; params: string[] };\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync crowd_test_connection() {\n\t\tconst user = await Meteor.userAsync();\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'crowd_test_connection',\n\t\t\t});\n\t\t}\n\n\t\tif (!(await hasPermissionAsync(user._id, 'test-admin-options'))) {\n\t\t\tthrow new Meteor.Error('error-not-authorized', 'Not authorized', {\n\t\t\t\tmethod: 'crowd_test_connection',\n\t\t\t});\n\t\t}\n\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\tthrow new Meteor.Error('crowd_disabled');\n\t\t}\n\n\t\ttry {\n\t\t\tconst crowd = new CROWD();\n\t\t\tawait crowd.checkConnection();\n\n\t\t\treturn {\n\t\t\t\tmessage: 'Crowd_Connection_successful' as const,\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tlogger.error({\n\t\t\t\tmsg: 'Invalid crowd connection details, check the url and application username/password and make sure this server is allowed to speak to crowd',\n\t\t\t\terr,\n\t\t\t});\n\t\t\tthrow new Meteor.Error('Invalid connection details', '', { method: 'crowd_test_connection' });\n\t\t}\n\t},\n\tasync crowd_sync_users() {\n\t\tconst user = await Meteor.userAsync();\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\tthrow new Meteor.Error('crowd_disabled');\n\t\t}\n\n\t\tif (!user || !(await hasPermissionAsync(user._id, 'sync-auth-services-users'))) {\n\t\t\tthrow new Meteor.Error('error-not-authorized', 'Not authorized', {\n\t\t\t\tmethod: 'crowd_sync_users',\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tconst crowd = new CROWD();\n\t\t\tconst startTime = Date.now();\n\t\t\tawait crowd.sync();\n\t\t\tconst stopTime = Date.now();\n\t\t\tconst actual = Math.ceil((stopTime - startTime) / 1000);\n\n\t\t\treturn {\n\t\t\t\tmessage: `User data synced in ${actual} seconds`,\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: 'Error syncing user data. ', err });\n\t\t\tthrow new Meteor.Error('Error syncing user data', '', { method: 'crowd_sync_users' });\n\t\t}\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 0);\n    let CROWD;\n    module.link(\"./crowd\", {\n      CROWD(v) {\n        CROWD = v;\n      }\n    }, 1);\n    let logger;\n    module.link(\"./logger\", {\n      logger(v) {\n        logger = v;\n      }\n    }, 2);\n    let hasPermissionAsync;\n    module.link(\"../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    Meteor.methods({\n      async crowd_test_connection() {\n        const user = await Meteor.userAsync();\n        if (!user) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'crowd_test_connection'\n          });\n        }\n        if (!(await hasPermissionAsync(user._id, 'test-admin-options'))) {\n          throw new Meteor.Error('error-not-authorized', 'Not authorized', {\n            method: 'crowd_test_connection'\n          });\n        }\n        if (settings.get('CROWD_Enable') !== true) {\n          throw new Meteor.Error('crowd_disabled');\n        }\n        try {\n          const crowd = new CROWD();\n          await crowd.checkConnection();\n          return {\n            message: 'Crowd_Connection_successful',\n            params: []\n          };\n        } catch (err) {\n          logger.error({\n            msg: 'Invalid crowd connection details, check the url and application username/password and make sure this server is allowed to speak to crowd',\n            err\n          });\n          throw new Meteor.Error('Invalid connection details', '', {\n            method: 'crowd_test_connection'\n          });\n        }\n      },\n      async crowd_sync_users() {\n        const user = await Meteor.userAsync();\n        if (settings.get('CROWD_Enable') !== true) {\n          throw new Meteor.Error('crowd_disabled');\n        }\n        if (!user || !(await hasPermissionAsync(user._id, 'sync-auth-services-users'))) {\n          throw new Meteor.Error('error-not-authorized', 'Not authorized', {\n            method: 'crowd_sync_users'\n          });\n        }\n        try {\n          const crowd = new CROWD();\n          const startTime = Date.now();\n          await crowd.sync();\n          const stopTime = Date.now();\n          const actual = Math.ceil((stopTime - startTime) / 1000);\n          return {\n            message: \"User data synced in \".concat(actual, \" seconds\"),\n            params: []\n          };\n        } catch (err) {\n          logger.error({\n            msg: 'Error syncing user data. ',\n            err\n          });\n          throw new Meteor.Error('Error syncing user data', '', {\n            method: 'crowd_sync_users'\n          });\n        }\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Meteor","module","link","v","CROWD","logger","hasPermissionAsync","settings","__reifyWaitForDeps__","methods","crowd_test_connection","user","userAsync","Error","method","_id","get","crowd","checkConnection","message","params","err","error","msg","crowd_sync_users","startTime","Date","now","sync","stopTime","actual","Math","ceil","concat","__reify_async_result__","_reifyError","self","async"],"sources":["app/crowd/server/methods.ts"],"sourcesContent":["import type { ServerMethods } from '@rocket.chat/ddp-client';\nimport type { TranslationKey } from '@rocket.chat/ui-contexts';\nimport { Meteor } from 'meteor/meteor';\n\nimport { CROWD } from './crowd';\nimport { logger } from './logger';\nimport { hasPermissionAsync } from '../../authorization/server/functions/hasPermission';\nimport { settings } from '../../settings/server';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tcrowd_test_connection(): { message: TranslationKey; params: string[] };\n\t\tcrowd_sync_users(): { message: string; params: string[] };\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync crowd_test_connection() {\n\t\tconst user = await Meteor.userAsync();\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'crowd_test_connection',\n\t\t\t});\n\t\t}\n\n\t\tif (!(await hasPermissionAsync(user._id, 'test-admin-options'))) {\n\t\t\tthrow new Meteor.Error('error-not-authorized', 'Not authorized', {\n\t\t\t\tmethod: 'crowd_test_connection',\n\t\t\t});\n\t\t}\n\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\tthrow new Meteor.Error('crowd_disabled');\n\t\t}\n\n\t\ttry {\n\t\t\tconst crowd = new CROWD();\n\t\t\tawait crowd.checkConnection();\n\n\t\t\treturn {\n\t\t\t\tmessage: 'Crowd_Connection_successful' as const,\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tlogger.error({\n\t\t\t\tmsg: 'Invalid crowd connection details, check the url and application username/password and make sure this server is allowed to speak to crowd',\n\t\t\t\terr,\n\t\t\t});\n\t\t\tthrow new Meteor.Error('Invalid connection details', '', { method: 'crowd_test_connection' });\n\t\t}\n\t},\n\tasync crowd_sync_users() {\n\t\tconst user = await Meteor.userAsync();\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\tthrow new Meteor.Error('crowd_disabled');\n\t\t}\n\n\t\tif (!user || !(await hasPermissionAsync(user._id, 'sync-auth-services-users'))) {\n\t\t\tthrow new Meteor.Error('error-not-authorized', 'Not authorized', {\n\t\t\t\tmethod: 'crowd_sync_users',\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tconst crowd = new CROWD();\n\t\t\tconst startTime = Date.now();\n\t\t\tawait crowd.sync();\n\t\t\tconst stopTime = Date.now();\n\t\t\tconst actual = Math.ceil((stopTime - startTime) / 1000);\n\n\t\t\treturn {\n\t\t\t\tmessage: `User data synced in ${actual} seconds`,\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: 'Error syncing user data. ', err });\n\t\t\tthrow new Meteor.Error('Error syncing user data', '', { method: 'crowd_sync_users' });\n\t\t}\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"ef1c9bc3611818591b597ea96244cf80beffa294"}
