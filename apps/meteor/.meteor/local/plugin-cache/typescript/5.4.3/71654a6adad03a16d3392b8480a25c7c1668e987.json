{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/models/client/models/Roles.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/models/client/models/Roles.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/models/client/models/Roles.ts","inputSourceMap":{"version":3,"file":"app/models/client/models/Roles.ts","sourceRoot":"","sources":["app/models/client/models/Roles.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACrC,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAGlD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,MAAM,eAAgB,SAAQ,KAAK,CAAC,UAAiB;IACpD,KAAK,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;IAE/B;QACC,KAAK,CAAC,IAAI,CAAC,CAAC;IACb,CAAC;IAED,eAAe,CAAC,MAAoB,EAAE,KAAmB,EAAE,OAAY;QACtE,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClC,MAAM,SAAS,GAAG,IAAI,EAAE,KAAK,IAAI,OAAO,CAAC;QAEzC,QAAQ,SAAS,EAAE,CAAC;YACnB,KAAK,eAAe;gBACnB,OAAO,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YAElE,KAAK,OAAO;gBACX,OAAO,KAAK,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YAEvD;gBACC,OAAO,SAAS,CAAC;QACnB,CAAC;IACF,CAAC;IAED,aAAa,CAAC,MAAoB,EAAE,KAAoC,EAAE,KAAc,EAAE,mBAAmB,GAAG,KAAK;QACpH,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC/C,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAClC,MAAM,SAAS,GAAG,mBAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,IAAI,OAAO,CAAC;YAEzE,QAAQ,SAAS,EAAE,CAAC;gBACnB,KAAK,eAAe;oBACnB,OAAO,gBAAgB,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;gBAE7D,KAAK,OAAO;oBACX,OAAO,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBAE3C;oBACC,OAAO,KAAK,CAAC;YACf,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;CAKD;AAED,qMAAqM;AACrM,MAAM,CAAC,MAAM,KAAK,GAAG,IAAI,eAAe,EAAE,CAAC","sourcesContent":["import type { IRole, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { Mongo } from 'meteor/mongo';\nimport { ReactiveVar } from 'meteor/reactive-var';\n\nimport type { MinimongoCollection } from '../../../../client/definitions/MinimongoCollection';\nimport { ChatSubscription } from './ChatSubscription';\nimport { Users } from './Users';\n\nclass RolesCollection extends Mongo.Collection<IRole> implements MinimongoCollection<IRole> {\n\tready = new ReactiveVar(false);\n\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tfindUsersInRole(roleId: IRole['_id'], scope: IRoom['_id'], options: any) {\n\t\tconst role = this.findOne(roleId);\n\t\tconst roleScope = role?.scope || 'Users';\n\n\t\tswitch (roleScope) {\n\t\t\tcase 'Subscriptions':\n\t\t\t\treturn ChatSubscription.findUsersInRoles(roleId, scope, options);\n\n\t\t\tcase 'Users':\n\t\t\t\treturn Users.findUsersInRoles(roleId, scope, options);\n\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tisUserInRoles(userId: IUser['_id'], roles: IRole['_id'][] | IRole['_id'], scope?: string, ignoreSubscriptions = false) {\n\t\troles = Array.isArray(roles) ? roles : [roles];\n\t\treturn roles.some((roleId) => {\n\t\t\tconst role = this.findOne(roleId);\n\t\t\tconst roleScope = ignoreSubscriptions ? 'Users' : role?.scope || 'Users';\n\n\t\t\tswitch (roleScope) {\n\t\t\t\tcase 'Subscriptions':\n\t\t\t\t\treturn ChatSubscription.isUserInRole(userId, roleId, scope);\n\n\t\t\t\tcase 'Users':\n\t\t\t\t\treturn Users.isUserInRole(userId, roleId);\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic declare _collection: MinimongoCollection<IRole>['_collection'];\n\n\tpublic declare queries: MinimongoCollection<IRole>['queries'];\n}\n\n/** @deprecated new code refer to Minimongo collections like this one; prefer fetching data from the REST API, listening to changes via streamer events, and storing the state in a Tanstack Query */\nexport const Roles = new RolesCollection();\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/models/client/models/Roles.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/models/client/models/Roles.ts","inputSourceMap":{"version":3,"file":"app/models/client/models/Roles.ts","sourceRoot":"","sources":["app/models/client/models/Roles.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACrC,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAGlD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,MAAM,eAAgB,SAAQ,KAAK,CAAC,UAAiB;IACpD,KAAK,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;IAE/B;QACC,KAAK,CAAC,IAAI,CAAC,CAAC;IACb,CAAC;IAED,eAAe,CAAC,MAAoB,EAAE,KAAmB,EAAE,OAAY;QACtE,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClC,MAAM,SAAS,GAAG,IAAI,EAAE,KAAK,IAAI,OAAO,CAAC;QAEzC,QAAQ,SAAS,EAAE,CAAC;YACnB,KAAK,eAAe;gBACnB,OAAO,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YAElE,KAAK,OAAO;gBACX,OAAO,KAAK,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YAEvD;gBACC,OAAO,SAAS,CAAC;QACnB,CAAC;IACF,CAAC;IAED,aAAa,CAAC,MAAoB,EAAE,KAAoC,EAAE,KAAc,EAAE,mBAAmB,GAAG,KAAK;QACpH,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC/C,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAClC,MAAM,SAAS,GAAG,mBAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,IAAI,OAAO,CAAC;YAEzE,QAAQ,SAAS,EAAE,CAAC;gBACnB,KAAK,eAAe;oBACnB,OAAO,gBAAgB,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;gBAE7D,KAAK,OAAO;oBACX,OAAO,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBAE3C;oBACC,OAAO,KAAK,CAAC;YACf,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;CAKD;AAED,qMAAqM;AACrM,MAAM,CAAC,MAAM,KAAK,GAAG,IAAI,eAAe,EAAE,CAAC","sourcesContent":["import type { IRole, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { Mongo } from 'meteor/mongo';\nimport { ReactiveVar } from 'meteor/reactive-var';\n\nimport type { MinimongoCollection } from '../../../../client/definitions/MinimongoCollection';\nimport { ChatSubscription } from './ChatSubscription';\nimport { Users } from './Users';\n\nclass RolesCollection extends Mongo.Collection<IRole> implements MinimongoCollection<IRole> {\n\tready = new ReactiveVar(false);\n\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tfindUsersInRole(roleId: IRole['_id'], scope: IRoom['_id'], options: any) {\n\t\tconst role = this.findOne(roleId);\n\t\tconst roleScope = role?.scope || 'Users';\n\n\t\tswitch (roleScope) {\n\t\t\tcase 'Subscriptions':\n\t\t\t\treturn ChatSubscription.findUsersInRoles(roleId, scope, options);\n\n\t\t\tcase 'Users':\n\t\t\t\treturn Users.findUsersInRoles(roleId, scope, options);\n\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tisUserInRoles(userId: IUser['_id'], roles: IRole['_id'][] | IRole['_id'], scope?: string, ignoreSubscriptions = false) {\n\t\troles = Array.isArray(roles) ? roles : [roles];\n\t\treturn roles.some((roleId) => {\n\t\t\tconst role = this.findOne(roleId);\n\t\t\tconst roleScope = ignoreSubscriptions ? 'Users' : role?.scope || 'Users';\n\n\t\t\tswitch (roleScope) {\n\t\t\t\tcase 'Subscriptions':\n\t\t\t\t\treturn ChatSubscription.isUserInRole(userId, roleId, scope);\n\n\t\t\t\tcase 'Users':\n\t\t\t\t\treturn Users.isUserInRole(userId, roleId);\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic declare _collection: MinimongoCollection<IRole>['_collection'];\n\n\tpublic declare queries: MinimongoCollection<IRole>['queries'];\n}\n\n/** @deprecated new code refer to Minimongo collections like this one; prefer fetching data from the REST API, listening to changes via streamer events, and storing the state in a Tanstack Query */\nexport const Roles = new RolesCollection();\n"]}}},"code":"module.export({\n  Roles: () => Roles\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n}, 0);\nlet ReactiveVar;\nmodule.link(\"meteor/reactive-var\", {\n  ReactiveVar(v) {\n    ReactiveVar = v;\n  }\n}, 1);\nlet ChatSubscription;\nmodule.link(\"./ChatSubscription\", {\n  ChatSubscription(v) {\n    ChatSubscription = v;\n  }\n}, 2);\nlet Users;\nmodule.link(\"./Users\", {\n  Users(v) {\n    Users = v;\n  }\n}, 3);\nclass RolesCollection extends Mongo.Collection {\n  constructor() {\n    super(null);\n    this.ready = new ReactiveVar(false);\n  }\n  findUsersInRole(roleId, scope, options) {\n    const role = this.findOne(roleId);\n    const roleScope = (role === null || role === void 0 ? void 0 : role.scope) || 'Users';\n    switch (roleScope) {\n      case 'Subscriptions':\n        return ChatSubscription.findUsersInRoles(roleId, scope, options);\n      case 'Users':\n        return Users.findUsersInRoles(roleId, scope, options);\n      default:\n        return undefined;\n    }\n  }\n  isUserInRoles(userId, roles, scope) {\n    let ignoreSubscriptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    roles = Array.isArray(roles) ? roles : [roles];\n    return roles.some(roleId => {\n      const role = this.findOne(roleId);\n      const roleScope = ignoreSubscriptions ? 'Users' : (role === null || role === void 0 ? void 0 : role.scope) || 'Users';\n      switch (roleScope) {\n        case 'Subscriptions':\n          return ChatSubscription.isUserInRole(userId, roleId, scope);\n        case 'Users':\n          return Users.isUserInRole(userId, roleId);\n        default:\n          return false;\n      }\n    });\n  }\n}\n/** @deprecated new code refer to Minimongo collections like this one; prefer fetching data from the REST API, listening to changes via streamer events, and storing the state in a Tanstack Query */\nconst Roles = new RolesCollection();","map":{"version":3,"names":["module","export","Roles","Mongo","link","v","ReactiveVar","ChatSubscription","Users","RolesCollection","Collection","constructor","ready","findUsersInRole","roleId","scope","options","role","findOne","roleScope","findUsersInRoles","undefined","isUserInRoles","userId","roles","ignoreSubscriptions","arguments","length","Array","isArray","some","isUserInRole"],"sources":["app/models/client/models/Roles.ts"],"sourcesContent":["import type { IRole, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { Mongo } from 'meteor/mongo';\nimport { ReactiveVar } from 'meteor/reactive-var';\n\nimport type { MinimongoCollection } from '../../../../client/definitions/MinimongoCollection';\nimport { ChatSubscription } from './ChatSubscription';\nimport { Users } from './Users';\n\nclass RolesCollection extends Mongo.Collection<IRole> implements MinimongoCollection<IRole> {\n\tready = new ReactiveVar(false);\n\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tfindUsersInRole(roleId: IRole['_id'], scope: IRoom['_id'], options: any) {\n\t\tconst role = this.findOne(roleId);\n\t\tconst roleScope = role?.scope || 'Users';\n\n\t\tswitch (roleScope) {\n\t\t\tcase 'Subscriptions':\n\t\t\t\treturn ChatSubscription.findUsersInRoles(roleId, scope, options);\n\n\t\t\tcase 'Users':\n\t\t\t\treturn Users.findUsersInRoles(roleId, scope, options);\n\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tisUserInRoles(userId: IUser['_id'], roles: IRole['_id'][] | IRole['_id'], scope?: string, ignoreSubscriptions = false) {\n\t\troles = Array.isArray(roles) ? roles : [roles];\n\t\treturn roles.some((roleId) => {\n\t\t\tconst role = this.findOne(roleId);\n\t\t\tconst roleScope = ignoreSubscriptions ? 'Users' : role?.scope || 'Users';\n\n\t\t\tswitch (roleScope) {\n\t\t\t\tcase 'Subscriptions':\n\t\t\t\t\treturn ChatSubscription.isUserInRole(userId, roleId, scope);\n\n\t\t\t\tcase 'Users':\n\t\t\t\t\treturn Users.isUserInRole(userId, roleId);\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic declare _collection: MinimongoCollection<IRole>['_collection'];\n\n\tpublic declare queries: MinimongoCollection<IRole>['queries'];\n}\n\n/** @deprecated new code refer to Minimongo collections like this one; prefer fetching data from the REST API, listening to changes via streamer events, and storing the state in a Tanstack Query */\nexport const Roles = new RolesCollection();\n"],"mappings":"AACAA,MAAA,CAAOC,MAAE,CAAK;EAAAC,KAAE,EAAAA,CAAA,KAAMA;AAAA;AAAA,IAAeC,KAAA;AAAAH,MAAA,CAAAI,IAAA;EAAAD,MAAAE,CAAA;IAAAF,KAAA,GAAAE,CAAA;EAAA;AAAA;AAAA,IAAAC,WAAA;AAAAN,MAAA,CAAAI,IAAA;EAAAE,YAAAD,CAAA;IAAAC,WAAA,GAAAD,CAAA;EAAA;AAAA;AAAA,IAAAE,gBAAA;AAAAP,MAAA,CAAAI,IAAA;EAAAG,iBAAAF,CAAA;IAAAE,gBAAA,GAAAF,CAAA;EAAA;AAAA;AAAA,IAAAG,KAAA;AAAAR,MAAA,CAAAI,IAAA;EAAAI,MAAAH,CAAA;IAAAG,KAAA,GAAAH,CAAA;EAAA;AAAA;AAOrC,MAAMI,eAAgB,SAAQN,KAAK,CAACO,UAAiB;EAGpDC,YAAA;IACC,KAAK,CAAC,IAAI,CAAC;IAAC,KAHbC,KAAK,GAAG,IAAIN,WAAW,CAAC,KAAK,CAAC;EAI9B;EAEAO,eAAeA,CAACC,MAAoB,EAAEC,KAAmB,EAAEC,OAAY;IACtE,MAAMC,IAAI,GAAG,IAAI,CAACC,OAAO,CAACJ,MAAM,CAAC;IACjC,MAAMK,SAAS,GAAG,CAAAF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEF,KAAK,KAAI,OAAO;IAExC,QAAQI,SAAS;MAChB,KAAK,eAAe;QACnB,OAAOZ,gBAAgB,CAACa,gBAAgB,CAACN,MAAM,EAAEC,KAAK,EAAEC,OAAO,CAAC;MAEjE,KAAK,OAAO;QACX,OAAOR,KAAK,CAACY,gBAAgB,CAACN,MAAM,EAAEC,KAAK,EAAEC,OAAO,CAAC;MAEtD;QACC,OAAOK,SAAS;IAClB;EACD;EAEAC,aAAaA,CAACC,MAAoB,EAAEC,KAAoC,EAAET,KAAc,EAA6B;IAAA,IAA3BU,mBAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAL,SAAA,GAAAK,SAAA,MAAG,KAAK;IACpHF,KAAK,GAAGI,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;IAC9C,OAAOA,KAAK,CAACM,IAAI,CAAEhB,MAAM,IAAI;MAC5B,MAAMG,IAAI,GAAG,IAAI,CAACC,OAAO,CAACJ,MAAM,CAAC;MACjC,MAAMK,SAAS,GAAGM,mBAAmB,GAAG,OAAO,GAAG,CAAAR,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEF,KAAK,KAAI,OAAO;MAExE,QAAQI,SAAS;QAChB,KAAK,eAAe;UACnB,OAAOZ,gBAAgB,CAACwB,YAAY,CAACR,MAAM,EAAET,MAAM,EAAEC,KAAK,CAAC;QAE5D,KAAK,OAAO;UACX,OAAOP,KAAK,CAACuB,YAAY,CAACR,MAAM,EAAET,MAAM,CAAC;QAE1C;UACC,OAAO,KAAK;MACd;IACD,CAAC,CAAC;EACH;;AAOD;AACO,MAAMZ,KAAK,GAAG,IAAIO,eAAe,EAAE","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"71654a6adad03a16d3392b8480a25c7c1668e987"}
