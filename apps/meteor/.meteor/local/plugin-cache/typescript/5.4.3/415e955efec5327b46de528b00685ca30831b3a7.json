{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/RoutingManager.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/RoutingManager.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/RoutingManager.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/RoutingManager.ts","sourceRoot":"","sources":["app/livechat/server/lib/RoutingManager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,4BAA4B,CAAC;AAYlE,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAC;AAClE,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAC/C,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAClG,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAE,kCAAkC,EAAE,8BAA8B,EAAE,MAAM,wCAAwC,CAAC;AAC5H,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EACN,0BAA0B,EAC1B,sBAAsB,EACtB,qBAAqB,EACrB,kBAAkB,EAClB,uBAAuB,EACvB,2BAA2B,EAC3B,oBAAoB,EACpB,mBAAmB,GACnB,MAAM,UAAU,CAAC;AAElB,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAiC5C,MAAM,CAAC,MAAM,cAAc,GAAY;IACtC,OAAO,EAAE,EAAE;IAEX,KAAK,CAAC,UAAU;QACf,MAAM,uBAAuB,GAAG,MAAM,OAAO,CAAC,mBAAmB,CAAC,uBAAuB,CAAC,CAAC;QAE3F,IAAI,uBAAuB,EAAE,CAAC;YAC7B,MAAM,CAAC,KAAK,CAAC,6DAA6D,CAAC,CAAC;YAC5E,OAAO;QACR,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAClC,MAAM,CAAC,MAAM,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IAC1D,CAAC;IAED,WAAW;QACV,OAAO,QAAQ,CAAC,GAAG,CAAS,yBAAyB,CAAC,KAAK,EAAE,CAAC;IAC/D,CAAC;IAED,gEAAgE;IAChE,cAAc,CAAC,IAAI,EAAE,MAAM;QAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,MAAM,EAAE,CAAC;IACnC,CAAC;IAED,SAAS;QACR,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAS,yBAAyB,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;QAC9D,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED,SAAS;QACR,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE,aAAa;QAC3C,MAAM,CAAC,KAAK,CAAC,4CAA4C,QAAQ,CAAC,GAAG,CAAC,yBAAyB,CAAC,EAAE,CAAC,CAAC;QACpG,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IACjE,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,GAAG,EAAE,EAAE,IAAI;QACvD,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;QACpC,MAAM,CAAC,KAAK,CAAC,kCAAkC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,4BAA4B,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACtI,MAAM,CAAC,KAAK,CAAC,gFAAgF,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;YAC5G,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YAC5C,MAAM,CAAC,KAAK,CAAC,iCAAiC,KAAK,EAAE,OAAO,gBAAgB,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAC5F,CAAC;QAED,IAAI,CAAC,KAAK,EAAE,CAAC;YACZ,MAAM,CAAC,KAAK,CAAC,mDAAmD,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;YAC/E,mHAAmH;YACnH,8GAA8G;YAC9G,OAAO,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACvC,CAAC;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QAC9C,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,WAAW,OAAO,CAAC,GAAG,2BAA2B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC/E,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAA6B,EAAE,IAAsB,EAAE,KAAoB;QAC5F,KAAK,CACJ,KAAK,EACL,KAAK,CAAC,eAAe,CAAC;YACrB,OAAO,EAAE,MAAM;YACf,QAAQ,EAAE,MAAM;SAChB,CAAC,CACF,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,mBAAmB,KAAK,CAAC,OAAO,eAAe,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAE3E,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;QAC7C,IAAI,CAAC,CAAC,MAAM,0BAA0B,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,EAAE,CAAC;YAC1E,MAAM,CAAC,KAAK,CAAC,kCAAkC,OAAO,CAAC,GAAG,8BAA8B,CAAC,CAAC;YAC1F,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,6BAA6B,CAAC,CAAC;QACtF,CAAC;QAED,MAAM,aAAa,CAAC,mBAAmB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACpD,MAAM,KAAK,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAEtC,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEpD,IAAI,IAAI,EAAE,CAAC;YACV,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,SAAS,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,EAAE,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACnI,CAAC;QAED,MAAM,sBAAsB,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QAEjD,MAAM,CAAC,KAAK,CAAC,SAAS,KAAK,CAAC,OAAO,wBAAwB,OAAO,CAAC,GAAG,sBAAsB,CAAC,CAAC;QAE9F,KAAK,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,EAAE,iBAAiB,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,0BAA0B,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QACtH,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,YAAY,EAAE,WAAW,GAAG,KAAK;QAC7D,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;QACpC,MAAM,IAAI,GAAG,MAAM,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAElD,MAAM,CAAC,KAAK,CAAC,oCAAoC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;YACjB,MAAM,CAAC,KAAK,CAAC,sCAAsC,OAAO,CAAC,GAAG,uBAAuB,CAAC,CAAC;YACvF,OAAO,KAAK,CAAC;QACd,CAAC;QAED,IAAI,YAAY,IAAI,YAAY,KAAK,UAAU,EAAE,CAAC;YACjD,MAAM,CAAC,KAAK,CAAC,oCAAoC,OAAO,CAAC,GAAG,cAAc,UAAU,YAAY,YAAY,GAAG,CAAC,CAAC;YACjH,MAAM,oBAAoB,CAAC;gBAC1B,GAAG;gBACH,eAAe,EAAE,YAAY;gBAC7B,eAAe,EAAE,UAAU;aAC3B,CAAC,CAAC;YACH,+CAA+C;YAC/C,OAAO,CAAC,UAAU,GAAG,YAAY,CAAC;QACnC,CAAC;QAED,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;QAE1B,IAAI,WAAW,EAAE,CAAC;YACjB,MAAM,aAAa,GAAG,MAAM,eAAe,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACtE,IAAI,aAAa,EAAE,CAAC;gBACnB,OAAO,GAAG,aAAa,CAAC;gBACxB,KAAK,8BAA8B,CAAC,OAAO,EAAE,SAAS,EAAE;oBACvD,MAAM,EAAE,qBAAqB,CAAC,MAAM;oBACpC,QAAQ,EAAE,IAAI,IAAI,EAAE;oBACpB,OAAO,EAAE,SAAS;iBAClB,CAAC,CAAC;YACJ,CAAC;QACF,CAAC;QAED,IAAI,QAAQ,EAAE,CAAC;YACd,MAAM,aAAa,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;YAC5C,MAAM,sBAAsB,CAAC,GAAG,CAAC,CAAC;QACnC,CAAC;QAED,MAAM,qBAAqB,CAAC,OAAO,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC;IACb,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,EAAE,IAAI;QACxE,KAAK,CACJ,KAAK,EACL,KAAK,CAAC,eAAe,CAAC;YACrB,OAAO,EAAE,MAAM;YACf,QAAQ,EAAE,MAAM;SAChB,CAAC,CACF,CAAC;QAEF,KAAK,CACJ,OAAO,EACP,KAAK,CAAC,eAAe,CAAC;YACrB,GAAG,EAAE,MAAM;YACX,GAAG,EAAE,MAAM;YACX,MAAM,EAAE,MAAM;SACd,CAAC,CACF,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,8BAA8B,OAAO,CAAC,GAAG,WAAW,KAAK,CAAC,OAAO,IAAI,CAAC,CAAC;QAEpF,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;QAC7B,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;YACjB,MAAM,CAAC,KAAK,CAAC,uBAAuB,OAAO,CAAC,GAAG,kBAAkB,CAAC,CAAC;YACnE,OAAO,IAAI,CAAC;QACb,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC;YAC1D,MAAM,CAAC,KAAK,CAAC,uBAAuB,OAAO,CAAC,GAAG,4BAA4B,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;YAChG,OAAO,IAAI,CAAC;QACb,CAAC;QAED,IAAI,CAAC;YACJ,MAAM,SAAS,CAAC,GAAG,CAAC,sCAAsC,EAAE;gBAC3D,KAAK;gBACL,OAAO;gBACP,OAAO;aACP,CAAC,CAAC;QACJ,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,IAAI,OAAO,CAAC,YAAY,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC;gBAC7D,MAAM,CAAC,CAAC;YACT,CAAC;YACD,KAAK,GAAG,IAAI,CAAC;QACd,CAAC;QAED,IAAI,CAAC,KAAK,EAAE,CAAC;YACZ,MAAM,CAAC,KAAK,CAAC,uBAAuB,OAAO,CAAC,GAAG,iCAAiC,CAAC,CAAC;YAClF,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,GAAG,CAAqC,kCAAkC,EAAE,IAAI,EAAE;gBAChH,OAAO;gBACP,OAAO;aACP,CAAC,CAAC;YACH,OAAO,MAAM,CAAC;QACf,CAAC;QAED,MAAM,eAAe,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAEvC,MAAM,CAAC,IAAI,CAAC,WAAW,OAAO,CAAC,GAAG,mBAAmB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAEtE,kIAAkI;QAClI,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAA+B,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACjF,MAAM,eAAe,GAAG,MAAM,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAE7D,IAAI,CAAC,eAAe,EAAE,CAAC;YACtB,2BAA2B;YAC3B,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;QACzC,CAAC;QAED,SAAS,CAAC,QAAQ,CACjB,2BAA2B,EAC3B;YACC,OAAO,EAAE,GAAG;YACZ,IAAI,EAAE,eAAe;SACrB,EACD,KAAK,CACL,CAAC;QAEF,KAAK,kCAAkC,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,EAAE;YAC/D,MAAM,EAAE,qBAAqB,CAAC,KAAK;YACnC,OAAO,EAAE,IAAI,IAAI,EAAE;YACnB,YAAY,EAAE,SAAS;YACvB,8BAA8B,EAAE,SAAS;YACzC,QAAQ,EAAE,SAAS;SACnB,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE,YAAY;QAC3C,MAAM,CAAC,KAAK,CAAC,oBAAoB,IAAI,CAAC,GAAG,OAAO,YAAY,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC;QAClF,IAAI,YAAY,CAAC,YAAY,EAAE,CAAC;YAC/B,MAAM,CAAC,KAAK,CAAC,oBAAoB,IAAI,CAAC,GAAG,kBAAkB,YAAY,CAAC,YAAY,EAAE,CAAC,CAAC;YACxF,OAAO,uBAAuB,CAAC,IAAI,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;QAC3D,CAAC;QAED,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC;YACzB,MAAM,CAAC,KAAK,CAAC,oBAAoB,IAAI,CAAC,GAAG,YAAY,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;YAC5E,OAAO,kBAAkB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAC/C,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,2BAA2B,IAAI,CAAC,GAAG,sBAAsB,CAAC,CAAC;QACxE,OAAO,KAAK,CAAC;IACd,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO;QACjC,MAAM,YAAY,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,8BAA8B,EAAE,KAAK,EAAE;YAC/E,UAAU,EAAE,OAAO,EAAE,UAAU;SAC/B,CAAC,CAAC;QAEH,IAAI,YAAY,EAAE,CAAC;YAClB,MAAM,CAAC,KAAK,CAAC,sBAAsB,OAAO,CAAC,GAAG,aAAa,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;YACpF,MAAM,eAAe,CAAC,mBAAmB,CAAC,OAAO,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;YACrE,KAAK,8BAA8B,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC;QAC3E,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,oBAAoB,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAChD,MAAM,qBAAqB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QACnD,OAAO,YAAY,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,IAAI,EAAE,UAAU;QAChD,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QAE7B,MAAM,aAAa,GAAG,MAAM,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;QACzE,aAAa,EAAE,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;YAChC,IAAI,UAAU,IAAI,UAAU,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;gBAC5C,OAAO;YACR,CAAC;YACD,KAAK,2BAA2B,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACJ,CAAC;CACD,CAAC","sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Message, Omnichannel } from '@rocket.chat/core-services';\nimport type {\n\tILivechatInquiryRecord,\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tIRoutingMethod,\n\tIRoutingMethodConstructor,\n\tRoutingMethodConfig,\n\tSelectedAgent,\n\tInquiryWithAgentInfo,\n\tTransferData,\n} from '@rocket.chat/core-typings';\nimport { LivechatInquiryStatus } from '@rocket.chat/core-typings';\nimport { License } from '@rocket.chat/license';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatInquiry, LivechatRooms, Subscriptions, Rooms, Users } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { notifyOnLivechatInquiryChangedById, notifyOnLivechatInquiryChanged } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport {\n\tcreateLivechatSubscription,\n\tdispatchAgentDelegated,\n\tdispatchInquiryQueued,\n\tforwardRoomToAgent,\n\tforwardRoomToDepartment,\n\tremoveAgentFromSubscription,\n\tupdateChatDepartment,\n\tallowAgentSkipQueue,\n} from './Helper';\n\nconst logger = new Logger('RoutingManager');\n\ntype Routing = {\n\tmethods: Record<string, IRoutingMethod>;\n\tstartQueue(): Promise<void>;\n\tisMethodSet(): boolean;\n\tregisterMethod(name: string, Method: IRoutingMethodConstructor): void;\n\tgetMethod(): IRoutingMethod;\n\tgetConfig(): RoutingMethodConfig | undefined;\n\tgetNextAgent(department?: string, ignoreAgentId?: string): Promise<SelectedAgent | null | undefined>;\n\tdelegateInquiry(\n\t\tinquiry: InquiryWithAgentInfo,\n\t\tagent?: SelectedAgent | null,\n\t\toptions?: { clientAction?: boolean; forwardingToDepartment?: { oldDepartmentId?: string; transferData?: any } },\n\t\troom?: IOmnichannelRoom,\n\t): Promise<(IOmnichannelRoom & { chatQueued?: boolean }) | null | void>;\n\tunassignAgent(inquiry: ILivechatInquiryRecord, departmentId?: string, shouldQueue?: boolean): Promise<boolean>;\n\ttakeInquiry(\n\t\tinquiry: Omit<\n\t\t\tILivechatInquiryRecord,\n\t\t\t'estimatedInactivityCloseTimeAt' | 'message' | 't' | 'source' | 'estimatedWaitingTimeQueue' | 'priorityWeight' | '_updatedAt'\n\t\t>,\n\t\tagent: SelectedAgent | null,\n\t\toptions: { clientAction?: boolean; forwardingToDepartment?: { oldDepartmentId?: string; transferData?: any } },\n\t\troom: IOmnichannelRoom,\n\t): Promise<IOmnichannelRoom | null | void>;\n\ttransferRoom(room: IOmnichannelRoom, guest: ILivechatVisitor, transferData: TransferData): Promise<boolean>;\n\tdelegateAgent(agent: SelectedAgent | undefined, inquiry: ILivechatInquiryRecord): Promise<SelectedAgent | null | undefined>;\n\tremoveAllRoomSubscriptions(room: Pick<IOmnichannelRoom, '_id'>, ignoreUser?: { _id: string }): Promise<void>;\n\n\tassignAgent(inquiry: InquiryWithAgentInfo, room: IOmnichannelRoom, agent: SelectedAgent): Promise<InquiryWithAgentInfo>;\n};\n\nexport const RoutingManager: Routing = {\n\tmethods: {},\n\n\tasync startQueue() {\n\t\tconst shouldPreventQueueStart = await License.shouldPreventAction('monthlyActiveContacts');\n\n\t\tif (shouldPreventQueueStart) {\n\t\t\tlogger.error('Monthly Active Contacts limit reached. Queue will not start');\n\t\t\treturn;\n\t\t}\n\t\tconsole.log('Should start queue');\n\t\tawait (await Omnichannel.getQueueWorker()).shouldStart();\n\t},\n\n\tisMethodSet() {\n\t\treturn settings.get<string>('Livechat_Routing_Method') !== '';\n\t},\n\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tregisterMethod(name, Method) {\n\t\tthis.methods[name] = new Method();\n\t},\n\n\tgetMethod() {\n\t\tconst setting = settings.get<string>('Livechat_Routing_Method');\n\t\tif (!this.methods[setting]) {\n\t\t\tthrow new Meteor.Error('error-routing-method-not-available');\n\t\t}\n\t\treturn this.methods[setting];\n\t},\n\n\tgetConfig() {\n\t\treturn this.getMethod().config;\n\t},\n\n\tasync getNextAgent(department, ignoreAgentId) {\n\t\tlogger.debug(`Getting next available agent with method ${settings.get('Livechat_Routing_Method')}`);\n\t\treturn this.getMethod().getNextAgent(department, ignoreAgentId);\n\t},\n\n\tasync delegateInquiry(inquiry, agent, options = {}, room) {\n\t\tconst { department, rid } = inquiry;\n\t\tlogger.debug(`Attempting to delegate inquiry ${inquiry._id}`);\n\t\tif (!agent || (agent.username && !(await Users.findOneOnlineAgentByUserList(agent.username)) && !(await allowAgentSkipQueue(agent)))) {\n\t\t\tlogger.debug(`Agent offline or invalid. Using routing method to get next agent for inquiry ${inquiry._id}`);\n\t\t\tagent = await this.getNextAgent(department);\n\t\t\tlogger.debug(`Routing method returned agent ${agent?.agentId} for inquiry ${inquiry._id}`);\n\t\t}\n\n\t\tif (!agent) {\n\t\t\tlogger.debug(`No agents available. Unable to delegate inquiry ${inquiry._id}`);\n\t\t\t// When an inqury reaches here on CE, it will stay here as 'ready' since on CE there's no mechanism to re queue it.\n\t\t\t// When reaching this point, managers have to manually transfer the inquiry to another room. This is expected.\n\t\t\treturn LivechatRooms.findOneById(rid);\n\t\t}\n\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('error-invalid-room');\n\t\t}\n\n\t\tlogger.debug(`Inquiry ${inquiry._id} will be taken by agent ${agent.agentId}`);\n\t\treturn this.takeInquiry(inquiry, agent, options, room);\n\t},\n\n\tasync assignAgent(inquiry: InquiryWithAgentInfo, room: IOmnichannelRoom, agent: SelectedAgent): Promise<InquiryWithAgentInfo> {\n\t\tcheck(\n\t\t\tagent,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: String,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`Assigning agent ${agent.agentId} to inquiry ${inquiry._id}`);\n\n\t\tconst { rid, name, v, department } = inquiry;\n\t\tif (!(await createLivechatSubscription(rid, name, v, agent, department))) {\n\t\t\tlogger.debug(`Cannot assign agent to inquiry ${inquiry._id}: Cannot create subscription`);\n\t\t\tthrow new Meteor.Error('error-creating-subscription', 'Error creating subscription');\n\t\t}\n\n\t\tawait LivechatRooms.changeAgentByRoomId(rid, agent);\n\t\tawait Rooms.incUsersCountById(rid, 1);\n\n\t\tconst user = await Users.findOneById(agent.agentId);\n\n\t\tif (user) {\n\t\t\tawait Promise.all([Message.saveSystemMessage('command', rid, 'connected', user), Message.saveSystemMessage('uj', rid, '', user)]);\n\t\t}\n\n\t\tawait dispatchAgentDelegated(rid, agent.agentId);\n\n\t\tlogger.debug(`Agent ${agent.agentId} assigned to inquiry ${inquiry._id}. Instances notified`);\n\n\t\tvoid Apps.self?.getBridges()?.getListenerBridge().livechatEvent(AppEvents.IPostLivechatAgentAssigned, { room, user });\n\t\treturn inquiry;\n\t},\n\n\tasync unassignAgent(inquiry, departmentId, shouldQueue = false) {\n\t\tconst { rid, department } = inquiry;\n\t\tconst room = await LivechatRooms.findOneById(rid);\n\n\t\tlogger.debug(`Removing assignations of inquiry ${inquiry._id}`);\n\t\tif (!room?.open) {\n\t\t\tlogger.debug(`Cannot unassign agent from inquiry ${inquiry._id}: Room already closed`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (departmentId && departmentId !== department) {\n\t\t\tlogger.debug(`Switching department for inquiry ${inquiry._id} [Current: ${department} | Next: ${departmentId}]`);\n\t\t\tawait updateChatDepartment({\n\t\t\t\trid,\n\t\t\t\tnewDepartmentId: departmentId,\n\t\t\t\toldDepartmentId: department,\n\t\t\t});\n\t\t\t// Fake the department to delegate the inquiry;\n\t\t\tinquiry.department = departmentId;\n\t\t}\n\n\t\tconst { servedBy } = room;\n\n\t\tif (shouldQueue) {\n\t\t\tconst queuedInquiry = await LivechatInquiry.queueInquiry(inquiry._id);\n\t\t\tif (queuedInquiry) {\n\t\t\t\tinquiry = queuedInquiry;\n\t\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'updated', {\n\t\t\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t\t\t\tqueuedAt: new Date(),\n\t\t\t\t\ttakenAt: undefined,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (servedBy) {\n\t\t\tawait LivechatRooms.removeAgentByRoomId(rid);\n\t\t\tawait this.removeAllRoomSubscriptions(room);\n\t\t\tawait dispatchAgentDelegated(rid);\n\t\t}\n\n\t\tawait dispatchInquiryQueued(inquiry);\n\n\t\treturn true;\n\t},\n\n\tasync takeInquiry(inquiry, agent, options = { clientAction: false }, room) {\n\t\tcheck(\n\t\t\tagent,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: String,\n\t\t\t}),\n\t\t);\n\n\t\tcheck(\n\t\t\tinquiry,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\trid: String,\n\t\t\t\tstatus: String,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`Attempting to take Inquiry ${inquiry._id} [Agent ${agent.agentId}] `);\n\n\t\tconst { _id, rid } = inquiry;\n\t\tif (!room?.open) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Room is closed`);\n\t\t\treturn room;\n\t\t}\n\n\t\tif (room.servedBy && room.servedBy._id === agent.agentId) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Already taken by agent ${room.servedBy._id}`);\n\t\t\treturn room;\n\t\t}\n\n\t\ttry {\n\t\t\tawait callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n\t\t\t\tagent,\n\t\t\t\tinquiry,\n\t\t\t\toptions,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tif (options.clientAction && !options.forwardingToDepartment) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\tagent = null;\n\t\t}\n\n\t\tif (!agent) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Precondition failed for agent`);\n\t\t\tconst cbRoom = await callbacks.run<'livechat.onAgentAssignmentFailed'>('livechat.onAgentAssignmentFailed', room, {\n\t\t\t\tinquiry,\n\t\t\t\toptions,\n\t\t\t});\n\t\t\treturn cbRoom;\n\t\t}\n\n\t\tawait LivechatInquiry.takeInquiry(_id);\n\n\t\tlogger.info(`Inquiry ${inquiry._id} taken by agent ${agent.agentId}`);\n\n\t\t// assignAgent changes the room data to add the agent serving the conversation. afterTakeInquiry expects room object to be updated\n\t\tconst inq = await this.assignAgent(inquiry as InquiryWithAgentInfo, room, agent);\n\t\tconst roomAfterUpdate = await LivechatRooms.findOneById(rid);\n\n\t\tif (!roomAfterUpdate) {\n\t\t\t// This should never happen\n\t\t\tthrow new Error('error-room-not-found');\n\t\t}\n\n\t\tcallbacks.runAsync(\n\t\t\t'livechat.afterTakeInquiry',\n\t\t\t{\n\t\t\t\tinquiry: inq,\n\t\t\t\troom: roomAfterUpdate,\n\t\t\t},\n\t\t\tagent,\n\t\t);\n\n\t\tvoid notifyOnLivechatInquiryChangedById(inquiry._id, 'updated', {\n\t\t\tstatus: LivechatInquiryStatus.TAKEN,\n\t\t\ttakenAt: new Date(),\n\t\t\tdefaultAgent: undefined,\n\t\t\testimatedInactivityCloseTimeAt: undefined,\n\t\t\tqueuedAt: undefined,\n\t\t});\n\n\t\treturn roomAfterUpdate;\n\t},\n\n\tasync transferRoom(room, guest, transferData) {\n\t\tlogger.debug(`Transfering room ${room._id} by ${transferData.transferredBy._id}`);\n\t\tif (transferData.departmentId) {\n\t\t\tlogger.debug(`Transfering room ${room._id} to department ${transferData.departmentId}`);\n\t\t\treturn forwardRoomToDepartment(room, guest, transferData);\n\t\t}\n\n\t\tif (transferData.userId) {\n\t\t\tlogger.debug(`Transfering room ${room._id} to user ${transferData.userId}`);\n\t\t\treturn forwardRoomToAgent(room, transferData);\n\t\t}\n\n\t\tlogger.debug(`Unable to transfer room ${room._id}: No target provided`);\n\t\treturn false;\n\t},\n\n\tasync delegateAgent(agent, inquiry) {\n\t\tconst defaultAgent = await callbacks.run('livechat.beforeDelegateAgent', agent, {\n\t\t\tdepartment: inquiry?.department,\n\t\t});\n\n\t\tif (defaultAgent) {\n\t\t\tlogger.debug(`Delegating Inquiry ${inquiry._id} to agent ${defaultAgent.username}`);\n\t\t\tawait LivechatInquiry.setDefaultAgentById(inquiry._id, defaultAgent);\n\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'updated', { defaultAgent });\n\t\t}\n\n\t\tlogger.debug(`Queueing inquiry ${inquiry._id}`);\n\t\tawait dispatchInquiryQueued(inquiry, defaultAgent);\n\t\treturn defaultAgent;\n\t},\n\n\tasync removeAllRoomSubscriptions(room, ignoreUser) {\n\t\tconst { _id: roomId } = room;\n\n\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId).toArray();\n\t\tsubscriptions?.forEach(({ u }) => {\n\t\t\tif (ignoreUser && ignoreUser._id === u._id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid removeAgentFromSubscription(roomId, u);\n\t\t});\n\t},\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/RoutingManager.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/RoutingManager.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/RoutingManager.ts","sourceRoot":"","sources":["app/livechat/server/lib/RoutingManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Message, Omnichannel } from '@rocket.chat/core-services';\nimport type {\n\tILivechatInquiryRecord,\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tIRoutingMethod,\n\tIRoutingMethodConstructor,\n\tRoutingMethodConfig,\n\tSelectedAgent,\n\tInquiryWithAgentInfo,\n\tTransferData,\n} from '@rocket.chat/core-typings';\nimport { LivechatInquiryStatus } from '@rocket.chat/core-typings';\nimport { License } from '@rocket.chat/license';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatInquiry, LivechatRooms, Subscriptions, Rooms, Users } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { notifyOnLivechatInquiryChangedById, notifyOnLivechatInquiryChanged } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport {\n\tcreateLivechatSubscription,\n\tdispatchAgentDelegated,\n\tdispatchInquiryQueued,\n\tforwardRoomToAgent,\n\tforwardRoomToDepartment,\n\tremoveAgentFromSubscription,\n\tupdateChatDepartment,\n\tallowAgentSkipQueue,\n} from './Helper';\n\nconst logger = new Logger('RoutingManager');\n\ntype Routing = {\n\tmethods: Record<string, IRoutingMethod>;\n\tstartQueue(): Promise<void>;\n\tisMethodSet(): boolean;\n\tregisterMethod(name: string, Method: IRoutingMethodConstructor): void;\n\tgetMethod(): IRoutingMethod;\n\tgetConfig(): RoutingMethodConfig | undefined;\n\tgetNextAgent(department?: string, ignoreAgentId?: string): Promise<SelectedAgent | null | undefined>;\n\tdelegateInquiry(\n\t\tinquiry: InquiryWithAgentInfo,\n\t\tagent?: SelectedAgent | null,\n\t\toptions?: { clientAction?: boolean; forwardingToDepartment?: { oldDepartmentId?: string; transferData?: any } },\n\t\troom?: IOmnichannelRoom,\n\t): Promise<(IOmnichannelRoom & { chatQueued?: boolean }) | null | void>;\n\tunassignAgent(inquiry: ILivechatInquiryRecord, departmentId?: string, shouldQueue?: boolean): Promise<boolean>;\n\ttakeInquiry(\n\t\tinquiry: Omit<\n\t\t\tILivechatInquiryRecord,\n\t\t\t'estimatedInactivityCloseTimeAt' | 'message' | 't' | 'source' | 'estimatedWaitingTimeQueue' | 'priorityWeight' | '_updatedAt'\n\t\t>,\n\t\tagent: SelectedAgent | null,\n\t\toptions: { clientAction?: boolean; forwardingToDepartment?: { oldDepartmentId?: string; transferData?: any } },\n\t\troom: IOmnichannelRoom,\n\t): Promise<IOmnichannelRoom | null | void>;\n\ttransferRoom(room: IOmnichannelRoom, guest: ILivechatVisitor, transferData: TransferData): Promise<boolean>;\n\tdelegateAgent(agent: SelectedAgent | undefined, inquiry: ILivechatInquiryRecord): Promise<SelectedAgent | null | undefined>;\n\tremoveAllRoomSubscriptions(room: Pick<IOmnichannelRoom, '_id'>, ignoreUser?: { _id: string }): Promise<void>;\n\n\tassignAgent(inquiry: InquiryWithAgentInfo, room: IOmnichannelRoom, agent: SelectedAgent): Promise<InquiryWithAgentInfo>;\n};\n\nexport const RoutingManager: Routing = {\n\tmethods: {},\n\n\tasync startQueue() {\n\t\tconst shouldPreventQueueStart = await License.shouldPreventAction('monthlyActiveContacts');\n\n\t\tif (shouldPreventQueueStart) {\n\t\t\tlogger.error('Monthly Active Contacts limit reached. Queue will not start');\n\t\t\treturn;\n\t\t}\n\t\tconsole.log('Should start queue');\n\t\tawait (await Omnichannel.getQueueWorker()).shouldStart();\n\t},\n\n\tisMethodSet() {\n\t\treturn settings.get<string>('Livechat_Routing_Method') !== '';\n\t},\n\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tregisterMethod(name, Method) {\n\t\tthis.methods[name] = new Method();\n\t},\n\n\tgetMethod() {\n\t\tconst setting = settings.get<string>('Livechat_Routing_Method');\n\t\tif (!this.methods[setting]) {\n\t\t\tthrow new Meteor.Error('error-routing-method-not-available');\n\t\t}\n\t\treturn this.methods[setting];\n\t},\n\n\tgetConfig() {\n\t\treturn this.getMethod().config;\n\t},\n\n\tasync getNextAgent(department, ignoreAgentId) {\n\t\tlogger.debug(`Getting next available agent with method ${settings.get('Livechat_Routing_Method')}`);\n\t\treturn this.getMethod().getNextAgent(department, ignoreAgentId);\n\t},\n\n\tasync delegateInquiry(inquiry, agent, options = {}, room) {\n\t\tconst { department, rid } = inquiry;\n\t\tlogger.debug(`Attempting to delegate inquiry ${inquiry._id}`);\n\t\tif (!agent || (agent.username && !(await Users.findOneOnlineAgentByUserList(agent.username)) && !(await allowAgentSkipQueue(agent)))) {\n\t\t\tlogger.debug(`Agent offline or invalid. Using routing method to get next agent for inquiry ${inquiry._id}`);\n\t\t\tagent = await this.getNextAgent(department);\n\t\t\tlogger.debug(`Routing method returned agent ${agent?.agentId} for inquiry ${inquiry._id}`);\n\t\t}\n\n\t\tif (!agent) {\n\t\t\tlogger.debug(`No agents available. Unable to delegate inquiry ${inquiry._id}`);\n\t\t\t// When an inqury reaches here on CE, it will stay here as 'ready' since on CE there's no mechanism to re queue it.\n\t\t\t// When reaching this point, managers have to manually transfer the inquiry to another room. This is expected.\n\t\t\treturn LivechatRooms.findOneById(rid);\n\t\t}\n\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('error-invalid-room');\n\t\t}\n\n\t\tlogger.debug(`Inquiry ${inquiry._id} will be taken by agent ${agent.agentId}`);\n\t\treturn this.takeInquiry(inquiry, agent, options, room);\n\t},\n\n\tasync assignAgent(inquiry: InquiryWithAgentInfo, room: IOmnichannelRoom, agent: SelectedAgent): Promise<InquiryWithAgentInfo> {\n\t\tcheck(\n\t\t\tagent,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: String,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`Assigning agent ${agent.agentId} to inquiry ${inquiry._id}`);\n\n\t\tconst { rid, name, v, department } = inquiry;\n\t\tif (!(await createLivechatSubscription(rid, name, v, agent, department))) {\n\t\t\tlogger.debug(`Cannot assign agent to inquiry ${inquiry._id}: Cannot create subscription`);\n\t\t\tthrow new Meteor.Error('error-creating-subscription', 'Error creating subscription');\n\t\t}\n\n\t\tawait LivechatRooms.changeAgentByRoomId(rid, agent);\n\t\tawait Rooms.incUsersCountById(rid, 1);\n\n\t\tconst user = await Users.findOneById(agent.agentId);\n\n\t\tif (user) {\n\t\t\tawait Promise.all([Message.saveSystemMessage('command', rid, 'connected', user), Message.saveSystemMessage('uj', rid, '', user)]);\n\t\t}\n\n\t\tawait dispatchAgentDelegated(rid, agent.agentId);\n\n\t\tlogger.debug(`Agent ${agent.agentId} assigned to inquiry ${inquiry._id}. Instances notified`);\n\n\t\tvoid Apps.self?.getBridges()?.getListenerBridge().livechatEvent(AppEvents.IPostLivechatAgentAssigned, { room, user });\n\t\treturn inquiry;\n\t},\n\n\tasync unassignAgent(inquiry, departmentId, shouldQueue = false) {\n\t\tconst { rid, department } = inquiry;\n\t\tconst room = await LivechatRooms.findOneById(rid);\n\n\t\tlogger.debug(`Removing assignations of inquiry ${inquiry._id}`);\n\t\tif (!room?.open) {\n\t\t\tlogger.debug(`Cannot unassign agent from inquiry ${inquiry._id}: Room already closed`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (departmentId && departmentId !== department) {\n\t\t\tlogger.debug(`Switching department for inquiry ${inquiry._id} [Current: ${department} | Next: ${departmentId}]`);\n\t\t\tawait updateChatDepartment({\n\t\t\t\trid,\n\t\t\t\tnewDepartmentId: departmentId,\n\t\t\t\toldDepartmentId: department,\n\t\t\t});\n\t\t\t// Fake the department to delegate the inquiry;\n\t\t\tinquiry.department = departmentId;\n\t\t}\n\n\t\tconst { servedBy } = room;\n\n\t\tif (shouldQueue) {\n\t\t\tconst queuedInquiry = await LivechatInquiry.queueInquiry(inquiry._id);\n\t\t\tif (queuedInquiry) {\n\t\t\t\tinquiry = queuedInquiry;\n\t\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'updated', {\n\t\t\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t\t\t\tqueuedAt: new Date(),\n\t\t\t\t\ttakenAt: undefined,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (servedBy) {\n\t\t\tawait LivechatRooms.removeAgentByRoomId(rid);\n\t\t\tawait this.removeAllRoomSubscriptions(room);\n\t\t\tawait dispatchAgentDelegated(rid);\n\t\t}\n\n\t\tawait dispatchInquiryQueued(inquiry);\n\n\t\treturn true;\n\t},\n\n\tasync takeInquiry(inquiry, agent, options = { clientAction: false }, room) {\n\t\tcheck(\n\t\t\tagent,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: String,\n\t\t\t}),\n\t\t);\n\n\t\tcheck(\n\t\t\tinquiry,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\trid: String,\n\t\t\t\tstatus: String,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`Attempting to take Inquiry ${inquiry._id} [Agent ${agent.agentId}] `);\n\n\t\tconst { _id, rid } = inquiry;\n\t\tif (!room?.open) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Room is closed`);\n\t\t\treturn room;\n\t\t}\n\n\t\tif (room.servedBy && room.servedBy._id === agent.agentId) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Already taken by agent ${room.servedBy._id}`);\n\t\t\treturn room;\n\t\t}\n\n\t\ttry {\n\t\t\tawait callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n\t\t\t\tagent,\n\t\t\t\tinquiry,\n\t\t\t\toptions,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tif (options.clientAction && !options.forwardingToDepartment) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\tagent = null;\n\t\t}\n\n\t\tif (!agent) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Precondition failed for agent`);\n\t\t\tconst cbRoom = await callbacks.run<'livechat.onAgentAssignmentFailed'>('livechat.onAgentAssignmentFailed', room, {\n\t\t\t\tinquiry,\n\t\t\t\toptions,\n\t\t\t});\n\t\t\treturn cbRoom;\n\t\t}\n\n\t\tawait LivechatInquiry.takeInquiry(_id);\n\n\t\tlogger.info(`Inquiry ${inquiry._id} taken by agent ${agent.agentId}`);\n\n\t\t// assignAgent changes the room data to add the agent serving the conversation. afterTakeInquiry expects room object to be updated\n\t\tconst inq = await this.assignAgent(inquiry as InquiryWithAgentInfo, room, agent);\n\t\tconst roomAfterUpdate = await LivechatRooms.findOneById(rid);\n\n\t\tif (!roomAfterUpdate) {\n\t\t\t// This should never happen\n\t\t\tthrow new Error('error-room-not-found');\n\t\t}\n\n\t\tcallbacks.runAsync(\n\t\t\t'livechat.afterTakeInquiry',\n\t\t\t{\n\t\t\t\tinquiry: inq,\n\t\t\t\troom: roomAfterUpdate,\n\t\t\t},\n\t\t\tagent,\n\t\t);\n\n\t\tvoid notifyOnLivechatInquiryChangedById(inquiry._id, 'updated', {\n\t\t\tstatus: LivechatInquiryStatus.TAKEN,\n\t\t\ttakenAt: new Date(),\n\t\t\tdefaultAgent: undefined,\n\t\t\testimatedInactivityCloseTimeAt: undefined,\n\t\t\tqueuedAt: undefined,\n\t\t});\n\n\t\treturn roomAfterUpdate;\n\t},\n\n\tasync transferRoom(room, guest, transferData) {\n\t\tlogger.debug(`Transfering room ${room._id} by ${transferData.transferredBy._id}`);\n\t\tif (transferData.departmentId) {\n\t\t\tlogger.debug(`Transfering room ${room._id} to department ${transferData.departmentId}`);\n\t\t\treturn forwardRoomToDepartment(room, guest, transferData);\n\t\t}\n\n\t\tif (transferData.userId) {\n\t\t\tlogger.debug(`Transfering room ${room._id} to user ${transferData.userId}`);\n\t\t\treturn forwardRoomToAgent(room, transferData);\n\t\t}\n\n\t\tlogger.debug(`Unable to transfer room ${room._id}: No target provided`);\n\t\treturn false;\n\t},\n\n\tasync delegateAgent(agent, inquiry) {\n\t\tconst defaultAgent = await callbacks.run('livechat.beforeDelegateAgent', agent, {\n\t\t\tdepartment: inquiry?.department,\n\t\t});\n\n\t\tif (defaultAgent) {\n\t\t\tlogger.debug(`Delegating Inquiry ${inquiry._id} to agent ${defaultAgent.username}`);\n\t\t\tawait LivechatInquiry.setDefaultAgentById(inquiry._id, defaultAgent);\n\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'updated', { defaultAgent });\n\t\t}\n\n\t\tlogger.debug(`Queueing inquiry ${inquiry._id}`);\n\t\tawait dispatchInquiryQueued(inquiry, defaultAgent);\n\t\treturn defaultAgent;\n\t},\n\n\tasync removeAllRoomSubscriptions(room, ignoreUser) {\n\t\tconst { _id: roomId } = room;\n\n\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId).toArray();\n\t\tsubscriptions?.forEach(({ u }) => {\n\t\t\tif (ignoreUser && ignoreUser._id === u._id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid removeAgentFromSubscription(roomId, u);\n\t\t});\n\t},\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      RoutingManager: () => RoutingManager\n    });\n    let Apps, AppEvents;\n    module.link(\"@rocket.chat/apps\", {\n      Apps(v) {\n        Apps = v;\n      },\n      AppEvents(v) {\n        AppEvents = v;\n      }\n    }, 0);\n    let Message, Omnichannel;\n    module.link(\"@rocket.chat/core-services\", {\n      Message(v) {\n        Message = v;\n      },\n      Omnichannel(v) {\n        Omnichannel = v;\n      }\n    }, 1);\n    let LivechatInquiryStatus;\n    module.link(\"@rocket.chat/core-typings\", {\n      LivechatInquiryStatus(v) {\n        LivechatInquiryStatus = v;\n      }\n    }, 2);\n    let License;\n    module.link(\"@rocket.chat/license\", {\n      License(v) {\n        License = v;\n      }\n    }, 3);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 4);\n    let LivechatInquiry, LivechatRooms, Subscriptions, Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 5);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 6);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 7);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 8);\n    let notifyOnLivechatInquiryChangedById, notifyOnLivechatInquiryChanged;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnLivechatInquiryChangedById(v) {\n        notifyOnLivechatInquiryChangedById = v;\n      },\n      notifyOnLivechatInquiryChanged(v) {\n        notifyOnLivechatInquiryChanged = v;\n      }\n    }, 9);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 10);\n    let createLivechatSubscription, dispatchAgentDelegated, dispatchInquiryQueued, forwardRoomToAgent, forwardRoomToDepartment, removeAgentFromSubscription, updateChatDepartment, allowAgentSkipQueue;\n    module.link(\"./Helper\", {\n      createLivechatSubscription(v) {\n        createLivechatSubscription = v;\n      },\n      dispatchAgentDelegated(v) {\n        dispatchAgentDelegated = v;\n      },\n      dispatchInquiryQueued(v) {\n        dispatchInquiryQueued = v;\n      },\n      forwardRoomToAgent(v) {\n        forwardRoomToAgent = v;\n      },\n      forwardRoomToDepartment(v) {\n        forwardRoomToDepartment = v;\n      },\n      removeAgentFromSubscription(v) {\n        removeAgentFromSubscription = v;\n      },\n      updateChatDepartment(v) {\n        updateChatDepartment = v;\n      },\n      allowAgentSkipQueue(v) {\n        allowAgentSkipQueue = v;\n      }\n    }, 11);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const logger = new Logger('RoutingManager');\n    const RoutingManager = {\n      methods: {},\n      async startQueue() {\n        const shouldPreventQueueStart = await License.shouldPreventAction('monthlyActiveContacts');\n        if (shouldPreventQueueStart) {\n          logger.error('Monthly Active Contacts limit reached. Queue will not start');\n          return;\n        }\n        console.log('Should start queue');\n        await (await Omnichannel.getQueueWorker()).shouldStart();\n      },\n      isMethodSet() {\n        return settings.get('Livechat_Routing_Method') !== '';\n      },\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      registerMethod(name, Method) {\n        this.methods[name] = new Method();\n      },\n      getMethod() {\n        const setting = settings.get('Livechat_Routing_Method');\n        if (!this.methods[setting]) {\n          throw new Meteor.Error('error-routing-method-not-available');\n        }\n        return this.methods[setting];\n      },\n      getConfig() {\n        return this.getMethod().config;\n      },\n      async getNextAgent(department, ignoreAgentId) {\n        logger.debug(\"Getting next available agent with method \".concat(settings.get('Livechat_Routing_Method')));\n        return this.getMethod().getNextAgent(department, ignoreAgentId);\n      },\n      async delegateInquiry(inquiry, agent) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let room = arguments.length > 3 ? arguments[3] : undefined;\n        const {\n          department,\n          rid\n        } = inquiry;\n        logger.debug(\"Attempting to delegate inquiry \".concat(inquiry._id));\n        if (!agent || agent.username && !(await Users.findOneOnlineAgentByUserList(agent.username)) && !(await allowAgentSkipQueue(agent))) {\n          var _agent;\n          logger.debug(\"Agent offline or invalid. Using routing method to get next agent for inquiry \".concat(inquiry._id));\n          agent = await this.getNextAgent(department);\n          logger.debug(\"Routing method returned agent \".concat((_agent = agent) === null || _agent === void 0 ? void 0 : _agent.agentId, \" for inquiry \").concat(inquiry._id));\n        }\n        if (!agent) {\n          logger.debug(\"No agents available. Unable to delegate inquiry \".concat(inquiry._id));\n          // When an inqury reaches here on CE, it will stay here as 'ready' since on CE there's no mechanism to re queue it.\n          // When reaching this point, managers have to manually transfer the inquiry to another room. This is expected.\n          return LivechatRooms.findOneById(rid);\n        }\n        if (!room) {\n          throw new Meteor.Error('error-invalid-room');\n        }\n        logger.debug(\"Inquiry \".concat(inquiry._id, \" will be taken by agent \").concat(agent.agentId));\n        return this.takeInquiry(inquiry, agent, options, room);\n      },\n      async assignAgent(inquiry, room, agent) {\n        var _Apps$self, _Apps$self$getBridges;\n        check(agent, Match.ObjectIncluding({\n          agentId: String,\n          username: String\n        }));\n        logger.debug(\"Assigning agent \".concat(agent.agentId, \" to inquiry \").concat(inquiry._id));\n        const {\n          rid,\n          name,\n          v,\n          department\n        } = inquiry;\n        if (!(await createLivechatSubscription(rid, name, v, agent, department))) {\n          logger.debug(\"Cannot assign agent to inquiry \".concat(inquiry._id, \": Cannot create subscription\"));\n          throw new Meteor.Error('error-creating-subscription', 'Error creating subscription');\n        }\n        await LivechatRooms.changeAgentByRoomId(rid, agent);\n        await Rooms.incUsersCountById(rid, 1);\n        const user = await Users.findOneById(agent.agentId);\n        if (user) {\n          await Promise.all([Message.saveSystemMessage('command', rid, 'connected', user), Message.saveSystemMessage('uj', rid, '', user)]);\n        }\n        await dispatchAgentDelegated(rid, agent.agentId);\n        logger.debug(\"Agent \".concat(agent.agentId, \" assigned to inquiry \").concat(inquiry._id, \". Instances notified\"));\n        void ((_Apps$self = Apps.self) === null || _Apps$self === void 0 ? void 0 : (_Apps$self$getBridges = _Apps$self.getBridges()) === null || _Apps$self$getBridges === void 0 ? void 0 : _Apps$self$getBridges.getListenerBridge().livechatEvent(AppEvents.IPostLivechatAgentAssigned, {\n          room,\n          user\n        }));\n        return inquiry;\n      },\n      async unassignAgent(inquiry, departmentId) {\n        let shouldQueue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        const {\n          rid,\n          department\n        } = inquiry;\n        const room = await LivechatRooms.findOneById(rid);\n        logger.debug(\"Removing assignations of inquiry \".concat(inquiry._id));\n        if (!(room !== null && room !== void 0 && room.open)) {\n          logger.debug(\"Cannot unassign agent from inquiry \".concat(inquiry._id, \": Room already closed\"));\n          return false;\n        }\n        if (departmentId && departmentId !== department) {\n          logger.debug(\"Switching department for inquiry \".concat(inquiry._id, \" [Current: \").concat(department, \" | Next: \").concat(departmentId, \"]\"));\n          await updateChatDepartment({\n            rid,\n            newDepartmentId: departmentId,\n            oldDepartmentId: department\n          });\n          // Fake the department to delegate the inquiry;\n          inquiry.department = departmentId;\n        }\n        const {\n          servedBy\n        } = room;\n        if (shouldQueue) {\n          const queuedInquiry = await LivechatInquiry.queueInquiry(inquiry._id);\n          if (queuedInquiry) {\n            inquiry = queuedInquiry;\n            void notifyOnLivechatInquiryChanged(inquiry, 'updated', {\n              status: LivechatInquiryStatus.QUEUED,\n              queuedAt: new Date(),\n              takenAt: undefined\n            });\n          }\n        }\n        if (servedBy) {\n          await LivechatRooms.removeAgentByRoomId(rid);\n          await this.removeAllRoomSubscriptions(room);\n          await dispatchAgentDelegated(rid);\n        }\n        await dispatchInquiryQueued(inquiry);\n        return true;\n      },\n      async takeInquiry(inquiry, agent) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          clientAction: false\n        };\n        let room = arguments.length > 3 ? arguments[3] : undefined;\n        check(agent, Match.ObjectIncluding({\n          agentId: String,\n          username: String\n        }));\n        check(inquiry, Match.ObjectIncluding({\n          _id: String,\n          rid: String,\n          status: String\n        }));\n        logger.debug(\"Attempting to take Inquiry \".concat(inquiry._id, \" [Agent \").concat(agent.agentId, \"] \"));\n        const {\n          _id,\n          rid\n        } = inquiry;\n        if (!(room !== null && room !== void 0 && room.open)) {\n          logger.debug(\"Cannot take Inquiry \".concat(inquiry._id, \": Room is closed\"));\n          return room;\n        }\n        if (room.servedBy && room.servedBy._id === agent.agentId) {\n          logger.debug(\"Cannot take Inquiry \".concat(inquiry._id, \": Already taken by agent \").concat(room.servedBy._id));\n          return room;\n        }\n        try {\n          await callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n            agent,\n            inquiry,\n            options\n          });\n        } catch (e) {\n          if (options.clientAction && !options.forwardingToDepartment) {\n            throw e;\n          }\n          agent = null;\n        }\n        if (!agent) {\n          logger.debug(\"Cannot take Inquiry \".concat(inquiry._id, \": Precondition failed for agent\"));\n          const cbRoom = await callbacks.run('livechat.onAgentAssignmentFailed', room, {\n            inquiry,\n            options\n          });\n          return cbRoom;\n        }\n        await LivechatInquiry.takeInquiry(_id);\n        logger.info(\"Inquiry \".concat(inquiry._id, \" taken by agent \").concat(agent.agentId));\n        // assignAgent changes the room data to add the agent serving the conversation. afterTakeInquiry expects room object to be updated\n        const inq = await this.assignAgent(inquiry, room, agent);\n        const roomAfterUpdate = await LivechatRooms.findOneById(rid);\n        if (!roomAfterUpdate) {\n          // This should never happen\n          throw new Error('error-room-not-found');\n        }\n        callbacks.runAsync('livechat.afterTakeInquiry', {\n          inquiry: inq,\n          room: roomAfterUpdate\n        }, agent);\n        void notifyOnLivechatInquiryChangedById(inquiry._id, 'updated', {\n          status: LivechatInquiryStatus.TAKEN,\n          takenAt: new Date(),\n          defaultAgent: undefined,\n          estimatedInactivityCloseTimeAt: undefined,\n          queuedAt: undefined\n        });\n        return roomAfterUpdate;\n      },\n      async transferRoom(room, guest, transferData) {\n        logger.debug(\"Transfering room \".concat(room._id, \" by \").concat(transferData.transferredBy._id));\n        if (transferData.departmentId) {\n          logger.debug(\"Transfering room \".concat(room._id, \" to department \").concat(transferData.departmentId));\n          return forwardRoomToDepartment(room, guest, transferData);\n        }\n        if (transferData.userId) {\n          logger.debug(\"Transfering room \".concat(room._id, \" to user \").concat(transferData.userId));\n          return forwardRoomToAgent(room, transferData);\n        }\n        logger.debug(\"Unable to transfer room \".concat(room._id, \": No target provided\"));\n        return false;\n      },\n      async delegateAgent(agent, inquiry) {\n        const defaultAgent = await callbacks.run('livechat.beforeDelegateAgent', agent, {\n          department: inquiry === null || inquiry === void 0 ? void 0 : inquiry.department\n        });\n        if (defaultAgent) {\n          logger.debug(\"Delegating Inquiry \".concat(inquiry._id, \" to agent \").concat(defaultAgent.username));\n          await LivechatInquiry.setDefaultAgentById(inquiry._id, defaultAgent);\n          void notifyOnLivechatInquiryChanged(inquiry, 'updated', {\n            defaultAgent\n          });\n        }\n        logger.debug(\"Queueing inquiry \".concat(inquiry._id));\n        await dispatchInquiryQueued(inquiry, defaultAgent);\n        return defaultAgent;\n      },\n      async removeAllRoomSubscriptions(room, ignoreUser) {\n        const {\n          _id: roomId\n        } = room;\n        const subscriptions = await Subscriptions.findByRoomId(roomId).toArray();\n        subscriptions === null || subscriptions === void 0 ? void 0 : subscriptions.forEach(_ref => {\n          let {\n            u\n          } = _ref;\n          if (ignoreUser && ignoreUser._id === u._id) {\n            return;\n          }\n          void removeAgentFromSubscription(roomId, u);\n        });\n      }\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","RoutingManager","Apps","AppEvents","link","v","Message","Omnichannel","LivechatInquiryStatus","License","Logger","LivechatInquiry","LivechatRooms","Subscriptions","Rooms","Users","Match","check","Meteor","callbacks","notifyOnLivechatInquiryChangedById","notifyOnLivechatInquiryChanged","settings","createLivechatSubscription","dispatchAgentDelegated","dispatchInquiryQueued","forwardRoomToAgent","forwardRoomToDepartment","removeAgentFromSubscription","updateChatDepartment","allowAgentSkipQueue","__reifyWaitForDeps__","logger","methods","startQueue","shouldPreventQueueStart","shouldPreventAction","error","console","log","getQueueWorker","shouldStart","isMethodSet","get","registerMethod","name","Method","getMethod","setting","Error","getConfig","config","getNextAgent","department","ignoreAgentId","debug","concat","delegateInquiry","inquiry","agent","options","arguments","length","undefined","room","rid","_id","username","findOneOnlineAgentByUserList","_agent","agentId","findOneById","takeInquiry","assignAgent","_Apps$self","_Apps$self$getBridges","ObjectIncluding","String","changeAgentByRoomId","incUsersCountById","user","Promise","all","saveSystemMessage","self","getBridges","getListenerBridge","livechatEvent","IPostLivechatAgentAssigned","unassignAgent","departmentId","shouldQueue","open","newDepartmentId","oldDepartmentId","servedBy","queuedInquiry","queueInquiry","status","QUEUED","queuedAt","Date","takenAt","removeAgentByRoomId","removeAllRoomSubscriptions","clientAction","run","e","forwardingToDepartment","cbRoom","info","inq","roomAfterUpdate","runAsync","TAKEN","defaultAgent","estimatedInactivityCloseTimeAt","transferRoom","guest","transferData","transferredBy","userId","delegateAgent","setDefaultAgentById","ignoreUser","roomId","subscriptions","findByRoomId","toArray","forEach","_ref","u","__reify_async_result__","_reifyError","async"],"sources":["app/livechat/server/lib/RoutingManager.ts"],"sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Message, Omnichannel } from '@rocket.chat/core-services';\nimport type {\n\tILivechatInquiryRecord,\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tIRoutingMethod,\n\tIRoutingMethodConstructor,\n\tRoutingMethodConfig,\n\tSelectedAgent,\n\tInquiryWithAgentInfo,\n\tTransferData,\n} from '@rocket.chat/core-typings';\nimport { LivechatInquiryStatus } from '@rocket.chat/core-typings';\nimport { License } from '@rocket.chat/license';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatInquiry, LivechatRooms, Subscriptions, Rooms, Users } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { notifyOnLivechatInquiryChangedById, notifyOnLivechatInquiryChanged } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport {\n\tcreateLivechatSubscription,\n\tdispatchAgentDelegated,\n\tdispatchInquiryQueued,\n\tforwardRoomToAgent,\n\tforwardRoomToDepartment,\n\tremoveAgentFromSubscription,\n\tupdateChatDepartment,\n\tallowAgentSkipQueue,\n} from './Helper';\n\nconst logger = new Logger('RoutingManager');\n\ntype Routing = {\n\tmethods: Record<string, IRoutingMethod>;\n\tstartQueue(): Promise<void>;\n\tisMethodSet(): boolean;\n\tregisterMethod(name: string, Method: IRoutingMethodConstructor): void;\n\tgetMethod(): IRoutingMethod;\n\tgetConfig(): RoutingMethodConfig | undefined;\n\tgetNextAgent(department?: string, ignoreAgentId?: string): Promise<SelectedAgent | null | undefined>;\n\tdelegateInquiry(\n\t\tinquiry: InquiryWithAgentInfo,\n\t\tagent?: SelectedAgent | null,\n\t\toptions?: { clientAction?: boolean; forwardingToDepartment?: { oldDepartmentId?: string; transferData?: any } },\n\t\troom?: IOmnichannelRoom,\n\t): Promise<(IOmnichannelRoom & { chatQueued?: boolean }) | null | void>;\n\tunassignAgent(inquiry: ILivechatInquiryRecord, departmentId?: string, shouldQueue?: boolean): Promise<boolean>;\n\ttakeInquiry(\n\t\tinquiry: Omit<\n\t\t\tILivechatInquiryRecord,\n\t\t\t'estimatedInactivityCloseTimeAt' | 'message' | 't' | 'source' | 'estimatedWaitingTimeQueue' | 'priorityWeight' | '_updatedAt'\n\t\t>,\n\t\tagent: SelectedAgent | null,\n\t\toptions: { clientAction?: boolean; forwardingToDepartment?: { oldDepartmentId?: string; transferData?: any } },\n\t\troom: IOmnichannelRoom,\n\t): Promise<IOmnichannelRoom | null | void>;\n\ttransferRoom(room: IOmnichannelRoom, guest: ILivechatVisitor, transferData: TransferData): Promise<boolean>;\n\tdelegateAgent(agent: SelectedAgent | undefined, inquiry: ILivechatInquiryRecord): Promise<SelectedAgent | null | undefined>;\n\tremoveAllRoomSubscriptions(room: Pick<IOmnichannelRoom, '_id'>, ignoreUser?: { _id: string }): Promise<void>;\n\n\tassignAgent(inquiry: InquiryWithAgentInfo, room: IOmnichannelRoom, agent: SelectedAgent): Promise<InquiryWithAgentInfo>;\n};\n\nexport const RoutingManager: Routing = {\n\tmethods: {},\n\n\tasync startQueue() {\n\t\tconst shouldPreventQueueStart = await License.shouldPreventAction('monthlyActiveContacts');\n\n\t\tif (shouldPreventQueueStart) {\n\t\t\tlogger.error('Monthly Active Contacts limit reached. Queue will not start');\n\t\t\treturn;\n\t\t}\n\t\tconsole.log('Should start queue');\n\t\tawait (await Omnichannel.getQueueWorker()).shouldStart();\n\t},\n\n\tisMethodSet() {\n\t\treturn settings.get<string>('Livechat_Routing_Method') !== '';\n\t},\n\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tregisterMethod(name, Method) {\n\t\tthis.methods[name] = new Method();\n\t},\n\n\tgetMethod() {\n\t\tconst setting = settings.get<string>('Livechat_Routing_Method');\n\t\tif (!this.methods[setting]) {\n\t\t\tthrow new Meteor.Error('error-routing-method-not-available');\n\t\t}\n\t\treturn this.methods[setting];\n\t},\n\n\tgetConfig() {\n\t\treturn this.getMethod().config;\n\t},\n\n\tasync getNextAgent(department, ignoreAgentId) {\n\t\tlogger.debug(`Getting next available agent with method ${settings.get('Livechat_Routing_Method')}`);\n\t\treturn this.getMethod().getNextAgent(department, ignoreAgentId);\n\t},\n\n\tasync delegateInquiry(inquiry, agent, options = {}, room) {\n\t\tconst { department, rid } = inquiry;\n\t\tlogger.debug(`Attempting to delegate inquiry ${inquiry._id}`);\n\t\tif (!agent || (agent.username && !(await Users.findOneOnlineAgentByUserList(agent.username)) && !(await allowAgentSkipQueue(agent)))) {\n\t\t\tlogger.debug(`Agent offline or invalid. Using routing method to get next agent for inquiry ${inquiry._id}`);\n\t\t\tagent = await this.getNextAgent(department);\n\t\t\tlogger.debug(`Routing method returned agent ${agent?.agentId} for inquiry ${inquiry._id}`);\n\t\t}\n\n\t\tif (!agent) {\n\t\t\tlogger.debug(`No agents available. Unable to delegate inquiry ${inquiry._id}`);\n\t\t\t// When an inqury reaches here on CE, it will stay here as 'ready' since on CE there's no mechanism to re queue it.\n\t\t\t// When reaching this point, managers have to manually transfer the inquiry to another room. This is expected.\n\t\t\treturn LivechatRooms.findOneById(rid);\n\t\t}\n\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('error-invalid-room');\n\t\t}\n\n\t\tlogger.debug(`Inquiry ${inquiry._id} will be taken by agent ${agent.agentId}`);\n\t\treturn this.takeInquiry(inquiry, agent, options, room);\n\t},\n\n\tasync assignAgent(inquiry: InquiryWithAgentInfo, room: IOmnichannelRoom, agent: SelectedAgent): Promise<InquiryWithAgentInfo> {\n\t\tcheck(\n\t\t\tagent,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: String,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`Assigning agent ${agent.agentId} to inquiry ${inquiry._id}`);\n\n\t\tconst { rid, name, v, department } = inquiry;\n\t\tif (!(await createLivechatSubscription(rid, name, v, agent, department))) {\n\t\t\tlogger.debug(`Cannot assign agent to inquiry ${inquiry._id}: Cannot create subscription`);\n\t\t\tthrow new Meteor.Error('error-creating-subscription', 'Error creating subscription');\n\t\t}\n\n\t\tawait LivechatRooms.changeAgentByRoomId(rid, agent);\n\t\tawait Rooms.incUsersCountById(rid, 1);\n\n\t\tconst user = await Users.findOneById(agent.agentId);\n\n\t\tif (user) {\n\t\t\tawait Promise.all([Message.saveSystemMessage('command', rid, 'connected', user), Message.saveSystemMessage('uj', rid, '', user)]);\n\t\t}\n\n\t\tawait dispatchAgentDelegated(rid, agent.agentId);\n\n\t\tlogger.debug(`Agent ${agent.agentId} assigned to inquiry ${inquiry._id}. Instances notified`);\n\n\t\tvoid Apps.self?.getBridges()?.getListenerBridge().livechatEvent(AppEvents.IPostLivechatAgentAssigned, { room, user });\n\t\treturn inquiry;\n\t},\n\n\tasync unassignAgent(inquiry, departmentId, shouldQueue = false) {\n\t\tconst { rid, department } = inquiry;\n\t\tconst room = await LivechatRooms.findOneById(rid);\n\n\t\tlogger.debug(`Removing assignations of inquiry ${inquiry._id}`);\n\t\tif (!room?.open) {\n\t\t\tlogger.debug(`Cannot unassign agent from inquiry ${inquiry._id}: Room already closed`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (departmentId && departmentId !== department) {\n\t\t\tlogger.debug(`Switching department for inquiry ${inquiry._id} [Current: ${department} | Next: ${departmentId}]`);\n\t\t\tawait updateChatDepartment({\n\t\t\t\trid,\n\t\t\t\tnewDepartmentId: departmentId,\n\t\t\t\toldDepartmentId: department,\n\t\t\t});\n\t\t\t// Fake the department to delegate the inquiry;\n\t\t\tinquiry.department = departmentId;\n\t\t}\n\n\t\tconst { servedBy } = room;\n\n\t\tif (shouldQueue) {\n\t\t\tconst queuedInquiry = await LivechatInquiry.queueInquiry(inquiry._id);\n\t\t\tif (queuedInquiry) {\n\t\t\t\tinquiry = queuedInquiry;\n\t\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'updated', {\n\t\t\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t\t\t\tqueuedAt: new Date(),\n\t\t\t\t\ttakenAt: undefined,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (servedBy) {\n\t\t\tawait LivechatRooms.removeAgentByRoomId(rid);\n\t\t\tawait this.removeAllRoomSubscriptions(room);\n\t\t\tawait dispatchAgentDelegated(rid);\n\t\t}\n\n\t\tawait dispatchInquiryQueued(inquiry);\n\n\t\treturn true;\n\t},\n\n\tasync takeInquiry(inquiry, agent, options = { clientAction: false }, room) {\n\t\tcheck(\n\t\t\tagent,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: String,\n\t\t\t}),\n\t\t);\n\n\t\tcheck(\n\t\t\tinquiry,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\trid: String,\n\t\t\t\tstatus: String,\n\t\t\t}),\n\t\t);\n\n\t\tlogger.debug(`Attempting to take Inquiry ${inquiry._id} [Agent ${agent.agentId}] `);\n\n\t\tconst { _id, rid } = inquiry;\n\t\tif (!room?.open) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Room is closed`);\n\t\t\treturn room;\n\t\t}\n\n\t\tif (room.servedBy && room.servedBy._id === agent.agentId) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Already taken by agent ${room.servedBy._id}`);\n\t\t\treturn room;\n\t\t}\n\n\t\ttry {\n\t\t\tawait callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n\t\t\t\tagent,\n\t\t\t\tinquiry,\n\t\t\t\toptions,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tif (options.clientAction && !options.forwardingToDepartment) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\tagent = null;\n\t\t}\n\n\t\tif (!agent) {\n\t\t\tlogger.debug(`Cannot take Inquiry ${inquiry._id}: Precondition failed for agent`);\n\t\t\tconst cbRoom = await callbacks.run<'livechat.onAgentAssignmentFailed'>('livechat.onAgentAssignmentFailed', room, {\n\t\t\t\tinquiry,\n\t\t\t\toptions,\n\t\t\t});\n\t\t\treturn cbRoom;\n\t\t}\n\n\t\tawait LivechatInquiry.takeInquiry(_id);\n\n\t\tlogger.info(`Inquiry ${inquiry._id} taken by agent ${agent.agentId}`);\n\n\t\t// assignAgent changes the room data to add the agent serving the conversation. afterTakeInquiry expects room object to be updated\n\t\tconst inq = await this.assignAgent(inquiry as InquiryWithAgentInfo, room, agent);\n\t\tconst roomAfterUpdate = await LivechatRooms.findOneById(rid);\n\n\t\tif (!roomAfterUpdate) {\n\t\t\t// This should never happen\n\t\t\tthrow new Error('error-room-not-found');\n\t\t}\n\n\t\tcallbacks.runAsync(\n\t\t\t'livechat.afterTakeInquiry',\n\t\t\t{\n\t\t\t\tinquiry: inq,\n\t\t\t\troom: roomAfterUpdate,\n\t\t\t},\n\t\t\tagent,\n\t\t);\n\n\t\tvoid notifyOnLivechatInquiryChangedById(inquiry._id, 'updated', {\n\t\t\tstatus: LivechatInquiryStatus.TAKEN,\n\t\t\ttakenAt: new Date(),\n\t\t\tdefaultAgent: undefined,\n\t\t\testimatedInactivityCloseTimeAt: undefined,\n\t\t\tqueuedAt: undefined,\n\t\t});\n\n\t\treturn roomAfterUpdate;\n\t},\n\n\tasync transferRoom(room, guest, transferData) {\n\t\tlogger.debug(`Transfering room ${room._id} by ${transferData.transferredBy._id}`);\n\t\tif (transferData.departmentId) {\n\t\t\tlogger.debug(`Transfering room ${room._id} to department ${transferData.departmentId}`);\n\t\t\treturn forwardRoomToDepartment(room, guest, transferData);\n\t\t}\n\n\t\tif (transferData.userId) {\n\t\t\tlogger.debug(`Transfering room ${room._id} to user ${transferData.userId}`);\n\t\t\treturn forwardRoomToAgent(room, transferData);\n\t\t}\n\n\t\tlogger.debug(`Unable to transfer room ${room._id}: No target provided`);\n\t\treturn false;\n\t},\n\n\tasync delegateAgent(agent, inquiry) {\n\t\tconst defaultAgent = await callbacks.run('livechat.beforeDelegateAgent', agent, {\n\t\t\tdepartment: inquiry?.department,\n\t\t});\n\n\t\tif (defaultAgent) {\n\t\t\tlogger.debug(`Delegating Inquiry ${inquiry._id} to agent ${defaultAgent.username}`);\n\t\t\tawait LivechatInquiry.setDefaultAgentById(inquiry._id, defaultAgent);\n\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'updated', { defaultAgent });\n\t\t}\n\n\t\tlogger.debug(`Queueing inquiry ${inquiry._id}`);\n\t\tawait dispatchInquiryQueued(inquiry, defaultAgent);\n\t\treturn defaultAgent;\n\t},\n\n\tasync removeAllRoomSubscriptions(room, ignoreUser) {\n\t\tconst { _id: roomId } = room;\n\n\t\tconst subscriptions = await Subscriptions.findByRoomId(roomId).toArray();\n\t\tsubscriptions?.forEach(({ u }) => {\n\t\t\tif (ignoreUser && ignoreUser._id === u._id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid removeAgentFromSubscription(roomId, u);\n\t\t});\n\t},\n};\n"],"mappings":";;;IAAAA,MAAA,CAAOC,MAAM;MAAEC,cAAW,EAAAA,CAAA,KAAMA;IAAA;IAAmB,IAACC,IAAA,EAAAC,SAAA;IAAAJ,MAAA,CAAAK,IAAA;MAAAF,KAAAG,CAAA;QAAAH,IAAA,GAAAG,CAAA;MAAA;MAAAF,UAAAE,CAAA;QAAAF,SAAA,GAAAE,CAAA;MAAA;IAAA;IAAA,IAAAC,OAAA,EAAAC,WAAA;IAAAR,MAAA,CAAAK,IAAA;MAAAE,QAAAD,CAAA;QAAAC,OAAA,GAAAD,CAAA;MAAA;MAAAE,YAAAF,CAAA;QAAAE,WAAA,GAAAF,CAAA;MAAA;IAAA;IAAA,IAAAG,qBAAA;IAAAT,MAAA,CAAAK,IAAA;MAAAI,sBAAAH,CAAA;QAAAG,qBAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,OAAA;IAAAV,MAAA,CAAAK,IAAA;MAAAK,QAAAJ,CAAA;QAAAI,OAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,MAAA;IAAAX,MAAA,CAAAK,IAAA;MAAAM,OAAAL,CAAA;QAAAK,MAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,eAAA,EAAAC,aAAA,EAAAC,aAAA,EAAAC,KAAA,EAAAC,KAAA;IAAAhB,MAAA,CAAAK,IAAA;MAAAO,gBAAAN,CAAA;QAAAM,eAAA,GAAAN,CAAA;MAAA;MAAAO,cAAAP,CAAA;QAAAO,aAAA,GAAAP,CAAA;MAAA;MAAAQ,cAAAR,CAAA;QAAAQ,aAAA,GAAAR,CAAA;MAAA;MAAAS,MAAAT,CAAA;QAAAS,KAAA,GAAAT,CAAA;MAAA;MAAAU,MAAAV,CAAA;QAAAU,KAAA,GAAAV,CAAA;MAAA;IAAA;IAAA,IAAAW,KAAA,EAAAC,KAAA;IAAAlB,MAAA,CAAAK,IAAA;MAAAY,MAAAX,CAAA;QAAAW,KAAA,GAAAX,CAAA;MAAA;MAAAY,MAAAZ,CAAA;QAAAY,KAAA,GAAAZ,CAAA;MAAA;IAAA;IAAA,IAAAa,MAAA;IAAAnB,MAAA,CAAAK,IAAA;MAAAc,OAAAb,CAAA;QAAAa,MAAA,GAAAb,CAAA;MAAA;IAAA;IAAA,IAAAc,SAAA;IAAApB,MAAA,CAAAK,IAAA;MAAAe,UAAAd,CAAA;QAAAc,SAAA,GAAAd,CAAA;MAAA;IAAA;IAAA,IAAAe,kCAAA,EAAAC,8BAAA;IAAAtB,MAAA,CAAAK,IAAA;MAAAgB,mCAAAf,CAAA;QAAAe,kCAAA,GAAAf,CAAA;MAAA;MAAAgB,+BAAAhB,CAAA;QAAAgB,8BAAA,GAAAhB,CAAA;MAAA;IAAA;IAAA,IAAAiB,QAAA;IAAAvB,MAAA,CAAAK,IAAA;MAAAkB,SAAAjB,CAAA;QAAAiB,QAAA,GAAAjB,CAAA;MAAA;IAAA;IAAA,IAAAkB,0BAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,uBAAA,EAAAC,2BAAA,EAAAC,oBAAA,EAAAC,mBAAA;IAAA/B,MAAA,CAAAK,IAAA;MAAAmB,2BAAAlB,CAAA;QAAAkB,0BAAA,GAAAlB,CAAA;MAAA;MAAAmB,uBAAAnB,CAAA;QAAAmB,sBAAA,GAAAnB,CAAA;MAAA;MAAAoB,sBAAApB,CAAA;QAAAoB,qBAAA,GAAApB,CAAA;MAAA;MAAAqB,mBAAArB,CAAA;QAAAqB,kBAAA,GAAArB,CAAA;MAAA;MAAAsB,wBAAAtB,CAAA;QAAAsB,uBAAA,GAAAtB,CAAA;MAAA;MAAAuB,4BAAAvB,CAAA;QAAAuB,2BAAA,GAAAvB,CAAA;MAAA;MAAAwB,qBAAAxB,CAAA;QAAAwB,oBAAA,GAAAxB,CAAA;MAAA;MAAAyB,oBAAAzB,CAAA;QAAAyB,mBAAA,GAAAzB,CAAA;MAAA;IAAA;IAAA,IAAA0B,oBAAA,WAAAA,oBAAA;IAkCpD,MAAMC,MAAM,GAAG,IAAItB,MAAM,CAAC,gBAAgB,CAAC;IAiCpC,MAAMT,cAAc,GAAY;MACtCgC,OAAO,EAAE,EAAE;MAEX,MAAMC,UAAUA,CAAA;QACf,MAAMC,uBAAuB,GAAG,MAAM1B,OAAO,CAAC2B,mBAAmB,CAAC,uBAAuB,CAAC;QAE1F,IAAID,uBAAuB,EAAE;UAC5BH,MAAM,CAACK,KAAK,CAAC,6DAA6D,CAAC;UAC3E;QACD;QACAC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACjC,MAAM,CAAC,MAAMhC,WAAW,CAACiC,cAAc,EAAE,EAAEC,WAAW,EAAE;MACzD,CAAC;MAEDC,WAAWA,CAAA;QACV,OAAOpB,QAAQ,CAACqB,GAAG,CAAS,yBAAyB,CAAC,KAAK,EAAE;MAC9D,CAAC;MAED;MACAC,cAAcA,CAACC,IAAI,EAAEC,MAAM;QAC1B,IAAI,CAACb,OAAO,CAACY,IAAI,CAAC,GAAG,IAAIC,MAAM,EAAE;MAClC,CAAC;MAEDC,SAASA,CAAA;QACR,MAAMC,OAAO,GAAG1B,QAAQ,CAACqB,GAAG,CAAS,yBAAyB,CAAC;QAC/D,IAAI,CAAC,IAAI,CAACV,OAAO,CAACe,OAAO,CAAC,EAAE;UAC3B,MAAM,IAAI9B,MAAM,CAAC+B,KAAK,CAAC,oCAAoC,CAAC;QAC7D;QACA,OAAO,IAAI,CAAChB,OAAO,CAACe,OAAO,CAAC;MAC7B,CAAC;MAEDE,SAASA,CAAA;QACR,OAAO,IAAI,CAACH,SAAS,EAAE,CAACI,MAAM;MAC/B,CAAC;MAED,MAAMC,YAAYA,CAACC,UAAU,EAAEC,aAAa;QAC3CtB,MAAM,CAACuB,KAAK,6CAAAC,MAAA,CAA6ClC,QAAQ,CAACqB,GAAG,CAAC,yBAAyB,CAAC,CAAE,CAAC;QACnG,OAAO,IAAI,CAACI,SAAS,EAAE,CAACK,YAAY,CAACC,UAAU,EAAEC,aAAa,CAAC;MAChE,CAAC;MAED,MAAMG,eAAeA,CAACC,OAAO,EAAEC,KAAK,EAAoB;QAAA,IAAlBC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;QAAA,IAAEG,IAAI,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;QACvD,MAAM;UAAEV,UAAU;UAAEY;QAAG,CAAE,GAAGP,OAAO;QACnC1B,MAAM,CAACuB,KAAK,mCAAAC,MAAA,CAAmCE,OAAO,CAACQ,GAAG,CAAE,CAAC;QAC7D,IAAI,CAACP,KAAK,IAAKA,KAAK,CAACQ,QAAQ,IAAI,EAAE,MAAMpD,KAAK,CAACqD,4BAA4B,CAACT,KAAK,CAACQ,QAAQ,CAAC,CAAC,IAAI,EAAE,MAAMrC,mBAAmB,CAAC6B,KAAK,CAAC,CAAE,EAAE;UAAA,IAAAU,MAAA;UACrIrC,MAAM,CAACuB,KAAK,iFAAAC,MAAA,CAAiFE,OAAO,CAACQ,GAAG,CAAE,CAAC;UAC3GP,KAAK,GAAG,MAAM,IAAI,CAACP,YAAY,CAACC,UAAU,CAAC;UAC3CrB,MAAM,CAACuB,KAAK,kCAAAC,MAAA,EAAAa,MAAA,GAAkCV,KAAK,cAAAU,MAAA,uBAALA,MAAA,CAAOC,OAAO,mBAAAd,MAAA,CAAgBE,OAAO,CAACQ,GAAG,CAAE,CAAC;QAC3F;QAEA,IAAI,CAACP,KAAK,EAAE;UACX3B,MAAM,CAACuB,KAAK,oDAAAC,MAAA,CAAoDE,OAAO,CAACQ,GAAG,CAAE,CAAC;UAC9E;UACA;UACA,OAAOtD,aAAa,CAAC2D,WAAW,CAACN,GAAG,CAAC;QACtC;QAEA,IAAI,CAACD,IAAI,EAAE;UACV,MAAM,IAAI9C,MAAM,CAAC+B,KAAK,CAAC,oBAAoB,CAAC;QAC7C;QAEAjB,MAAM,CAACuB,KAAK,YAAAC,MAAA,CAAYE,OAAO,CAACQ,GAAG,8BAAAV,MAAA,CAA2BG,KAAK,CAACW,OAAO,CAAE,CAAC;QAC9E,OAAO,IAAI,CAACE,WAAW,CAACd,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAEI,IAAI,CAAC;MACvD,CAAC;MAED,MAAMS,WAAWA,CAACf,OAA6B,EAAEM,IAAsB,EAAEL,KAAoB;QAAA,IAAAe,UAAA,EAAAC,qBAAA;QAC5F1D,KAAK,CACJ0C,KAAK,EACL3C,KAAK,CAAC4D,eAAe,CAAC;UACrBN,OAAO,EAAEO,MAAM;UACfV,QAAQ,EAAEU;SACV,CAAC,CACF;QAED7C,MAAM,CAACuB,KAAK,oBAAAC,MAAA,CAAoBG,KAAK,CAACW,OAAO,kBAAAd,MAAA,CAAeE,OAAO,CAACQ,GAAG,CAAE,CAAC;QAE1E,MAAM;UAAED,GAAG;UAAEpB,IAAI;UAAExC,CAAC;UAAEgD;QAAU,CAAE,GAAGK,OAAO;QAC5C,IAAI,EAAE,MAAMnC,0BAA0B,CAAC0C,GAAG,EAAEpB,IAAI,EAAExC,CAAC,EAAEsD,KAAK,EAAEN,UAAU,CAAC,CAAC,EAAE;UACzErB,MAAM,CAACuB,KAAK,mCAAAC,MAAA,CAAmCE,OAAO,CAACQ,GAAG,iCAA8B,CAAC;UACzF,MAAM,IAAIhD,MAAM,CAAC+B,KAAK,CAAC,6BAA6B,EAAE,6BAA6B,CAAC;QACrF;QAEA,MAAMrC,aAAa,CAACkE,mBAAmB,CAACb,GAAG,EAAEN,KAAK,CAAC;QACnD,MAAM7C,KAAK,CAACiE,iBAAiB,CAACd,GAAG,EAAE,CAAC,CAAC;QAErC,MAAMe,IAAI,GAAG,MAAMjE,KAAK,CAACwD,WAAW,CAACZ,KAAK,CAACW,OAAO,CAAC;QAEnD,IAAIU,IAAI,EAAE;UACT,MAAMC,OAAO,CAACC,GAAG,CAAC,CAAC5E,OAAO,CAAC6E,iBAAiB,CAAC,SAAS,EAAElB,GAAG,EAAE,WAAW,EAAEe,IAAI,CAAC,EAAE1E,OAAO,CAAC6E,iBAAiB,CAAC,IAAI,EAAElB,GAAG,EAAE,EAAE,EAAEe,IAAI,CAAC,CAAC,CAAC;QAClI;QAEA,MAAMxD,sBAAsB,CAACyC,GAAG,EAAEN,KAAK,CAACW,OAAO,CAAC;QAEhDtC,MAAM,CAACuB,KAAK,UAAAC,MAAA,CAAUG,KAAK,CAACW,OAAO,2BAAAd,MAAA,CAAwBE,OAAO,CAACQ,GAAG,yBAAsB,CAAC;QAE7F,OAAAQ,UAAA,GAAKxE,IAAI,CAACkF,IAAI,cAAAV,UAAA,wBAAAC,qBAAA,GAATD,UAAA,CAAWW,UAAU,EAAE,cAAAV,qBAAA,uBAAvBA,qBAAA,CAAyBW,iBAAiB,EAAE,CAACC,aAAa,CAACpF,SAAS,CAACqF,0BAA0B,EAAE;UAAExB,IAAI;UAAEgB;QAAI,CAAE,CAAC;QACrH,OAAOtB,OAAO;MACf,CAAC;MAED,MAAM+B,aAAaA,CAAC/B,OAAO,EAAEgC,YAAY,EAAqB;QAAA,IAAnBC,WAAW,GAAA9B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;QAC7D,MAAM;UAAEI,GAAG;UAAEZ;QAAU,CAAE,GAAGK,OAAO;QACnC,MAAMM,IAAI,GAAG,MAAMpD,aAAa,CAAC2D,WAAW,CAACN,GAAG,CAAC;QAEjDjC,MAAM,CAACuB,KAAK,qCAAAC,MAAA,CAAqCE,OAAO,CAACQ,GAAG,CAAE,CAAC;QAC/D,IAAI,EAACF,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAE4B,IAAI,GAAE;UAChB5D,MAAM,CAACuB,KAAK,uCAAAC,MAAA,CAAuCE,OAAO,CAACQ,GAAG,0BAAuB,CAAC;UACtF,OAAO,KAAK;QACb;QAEA,IAAIwB,YAAY,IAAIA,YAAY,KAAKrC,UAAU,EAAE;UAChDrB,MAAM,CAACuB,KAAK,qCAAAC,MAAA,CAAqCE,OAAO,CAACQ,GAAG,iBAAAV,MAAA,CAAcH,UAAU,eAAAG,MAAA,CAAYkC,YAAY,MAAG,CAAC;UAChH,MAAM7D,oBAAoB,CAAC;YAC1BoC,GAAG;YACH4B,eAAe,EAAEH,YAAY;YAC7BI,eAAe,EAAEzC;WACjB,CAAC;UACF;UACAK,OAAO,CAACL,UAAU,GAAGqC,YAAY;QAClC;QAEA,MAAM;UAAEK;QAAQ,CAAE,GAAG/B,IAAI;QAEzB,IAAI2B,WAAW,EAAE;UAChB,MAAMK,aAAa,GAAG,MAAMrF,eAAe,CAACsF,YAAY,CAACvC,OAAO,CAACQ,GAAG,CAAC;UACrE,IAAI8B,aAAa,EAAE;YAClBtC,OAAO,GAAGsC,aAAa;YACvB,KAAK3E,8BAA8B,CAACqC,OAAO,EAAE,SAAS,EAAE;cACvDwC,MAAM,EAAE1F,qBAAqB,CAAC2F,MAAM;cACpCC,QAAQ,EAAE,IAAIC,IAAI,EAAE;cACpBC,OAAO,EAAEvC;aACT,CAAC;UACH;QACD;QAEA,IAAIgC,QAAQ,EAAE;UACb,MAAMnF,aAAa,CAAC2F,mBAAmB,CAACtC,GAAG,CAAC;UAC5C,MAAM,IAAI,CAACuC,0BAA0B,CAACxC,IAAI,CAAC;UAC3C,MAAMxC,sBAAsB,CAACyC,GAAG,CAAC;QAClC;QAEA,MAAMxC,qBAAqB,CAACiC,OAAO,CAAC;QAEpC,OAAO,IAAI;MACZ,CAAC;MAED,MAAMc,WAAWA,CAACd,OAAO,EAAEC,KAAK,EAAyC;QAAA,IAAvCC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;UAAE4C,YAAY,EAAE;QAAK,CAAE;QAAA,IAAEzC,IAAI,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;QACxE9C,KAAK,CACJ0C,KAAK,EACL3C,KAAK,CAAC4D,eAAe,CAAC;UACrBN,OAAO,EAAEO,MAAM;UACfV,QAAQ,EAAEU;SACV,CAAC,CACF;QAED5D,KAAK,CACJyC,OAAO,EACP1C,KAAK,CAAC4D,eAAe,CAAC;UACrBV,GAAG,EAAEW,MAAM;UACXZ,GAAG,EAAEY,MAAM;UACXqB,MAAM,EAAErB;SACR,CAAC,CACF;QAED7C,MAAM,CAACuB,KAAK,+BAAAC,MAAA,CAA+BE,OAAO,CAACQ,GAAG,cAAAV,MAAA,CAAWG,KAAK,CAACW,OAAO,OAAI,CAAC;QAEnF,MAAM;UAAEJ,GAAG;UAAED;QAAG,CAAE,GAAGP,OAAO;QAC5B,IAAI,EAACM,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAE4B,IAAI,GAAE;UAChB5D,MAAM,CAACuB,KAAK,wBAAAC,MAAA,CAAwBE,OAAO,CAACQ,GAAG,qBAAkB,CAAC;UAClE,OAAOF,IAAI;QACZ;QAEA,IAAIA,IAAI,CAAC+B,QAAQ,IAAI/B,IAAI,CAAC+B,QAAQ,CAAC7B,GAAG,KAAKP,KAAK,CAACW,OAAO,EAAE;UACzDtC,MAAM,CAACuB,KAAK,wBAAAC,MAAA,CAAwBE,OAAO,CAACQ,GAAG,+BAAAV,MAAA,CAA4BQ,IAAI,CAAC+B,QAAQ,CAAC7B,GAAG,CAAE,CAAC;UAC/F,OAAOF,IAAI;QACZ;QAEA,IAAI;UACH,MAAM7C,SAAS,CAACuF,GAAG,CAAC,sCAAsC,EAAE;YAC3D/C,KAAK;YACLD,OAAO;YACPE;WACA,CAAC;QACH,CAAC,CAAC,OAAO+C,CAAC,EAAE;UACX,IAAI/C,OAAO,CAAC6C,YAAY,IAAI,CAAC7C,OAAO,CAACgD,sBAAsB,EAAE;YAC5D,MAAMD,CAAC;UACR;UACAhD,KAAK,GAAG,IAAI;QACb;QAEA,IAAI,CAACA,KAAK,EAAE;UACX3B,MAAM,CAACuB,KAAK,wBAAAC,MAAA,CAAwBE,OAAO,CAACQ,GAAG,oCAAiC,CAAC;UACjF,MAAM2C,MAAM,GAAG,MAAM1F,SAAS,CAACuF,GAAG,CAAqC,kCAAkC,EAAE1C,IAAI,EAAE;YAChHN,OAAO;YACPE;WACA,CAAC;UACF,OAAOiD,MAAM;QACd;QAEA,MAAMlG,eAAe,CAAC6D,WAAW,CAACN,GAAG,CAAC;QAEtClC,MAAM,CAAC8E,IAAI,YAAAtD,MAAA,CAAYE,OAAO,CAACQ,GAAG,sBAAAV,MAAA,CAAmBG,KAAK,CAACW,OAAO,CAAE,CAAC;QAErE;QACA,MAAMyC,GAAG,GAAG,MAAM,IAAI,CAACtC,WAAW,CAACf,OAA+B,EAAEM,IAAI,EAAEL,KAAK,CAAC;QAChF,MAAMqD,eAAe,GAAG,MAAMpG,aAAa,CAAC2D,WAAW,CAACN,GAAG,CAAC;QAE5D,IAAI,CAAC+C,eAAe,EAAE;UACrB;UACA,MAAM,IAAI/D,KAAK,CAAC,sBAAsB,CAAC;QACxC;QAEA9B,SAAS,CAAC8F,QAAQ,CACjB,2BAA2B,EAC3B;UACCvD,OAAO,EAAEqD,GAAG;UACZ/C,IAAI,EAAEgD;SACN,EACDrD,KAAK,CACL;QAED,KAAKvC,kCAAkC,CAACsC,OAAO,CAACQ,GAAG,EAAE,SAAS,EAAE;UAC/DgC,MAAM,EAAE1F,qBAAqB,CAAC0G,KAAK;UACnCZ,OAAO,EAAE,IAAID,IAAI,EAAE;UACnBc,YAAY,EAAEpD,SAAS;UACvBqD,8BAA8B,EAAErD,SAAS;UACzCqC,QAAQ,EAAErC;SACV,CAAC;QAEF,OAAOiD,eAAe;MACvB,CAAC;MAED,MAAMK,YAAYA,CAACrD,IAAI,EAAEsD,KAAK,EAAEC,YAAY;QAC3CvF,MAAM,CAACuB,KAAK,qBAAAC,MAAA,CAAqBQ,IAAI,CAACE,GAAG,UAAAV,MAAA,CAAO+D,YAAY,CAACC,aAAa,CAACtD,GAAG,CAAE,CAAC;QACjF,IAAIqD,YAAY,CAAC7B,YAAY,EAAE;UAC9B1D,MAAM,CAACuB,KAAK,qBAAAC,MAAA,CAAqBQ,IAAI,CAACE,GAAG,qBAAAV,MAAA,CAAkB+D,YAAY,CAAC7B,YAAY,CAAE,CAAC;UACvF,OAAO/D,uBAAuB,CAACqC,IAAI,EAAEsD,KAAK,EAAEC,YAAY,CAAC;QAC1D;QAEA,IAAIA,YAAY,CAACE,MAAM,EAAE;UACxBzF,MAAM,CAACuB,KAAK,qBAAAC,MAAA,CAAqBQ,IAAI,CAACE,GAAG,eAAAV,MAAA,CAAY+D,YAAY,CAACE,MAAM,CAAE,CAAC;UAC3E,OAAO/F,kBAAkB,CAACsC,IAAI,EAAEuD,YAAY,CAAC;QAC9C;QAEAvF,MAAM,CAACuB,KAAK,4BAAAC,MAAA,CAA4BQ,IAAI,CAACE,GAAG,yBAAsB,CAAC;QACvE,OAAO,KAAK;MACb,CAAC;MAED,MAAMwD,aAAaA,CAAC/D,KAAK,EAAED,OAAO;QACjC,MAAMyD,YAAY,GAAG,MAAMhG,SAAS,CAACuF,GAAG,CAAC,8BAA8B,EAAE/C,KAAK,EAAE;UAC/EN,UAAU,EAAEK,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEL;SACrB,CAAC;QAEF,IAAI8D,YAAY,EAAE;UACjBnF,MAAM,CAACuB,KAAK,uBAAAC,MAAA,CAAuBE,OAAO,CAACQ,GAAG,gBAAAV,MAAA,CAAa2D,YAAY,CAAChD,QAAQ,CAAE,CAAC;UACnF,MAAMxD,eAAe,CAACgH,mBAAmB,CAACjE,OAAO,CAACQ,GAAG,EAAEiD,YAAY,CAAC;UACpE,KAAK9F,8BAA8B,CAACqC,OAAO,EAAE,SAAS,EAAE;YAAEyD;UAAY,CAAE,CAAC;QAC1E;QAEAnF,MAAM,CAACuB,KAAK,qBAAAC,MAAA,CAAqBE,OAAO,CAACQ,GAAG,CAAE,CAAC;QAC/C,MAAMzC,qBAAqB,CAACiC,OAAO,EAAEyD,YAAY,CAAC;QAClD,OAAOA,YAAY;MACpB,CAAC;MAED,MAAMX,0BAA0BA,CAACxC,IAAI,EAAE4D,UAAU;QAChD,MAAM;UAAE1D,GAAG,EAAE2D;QAAM,CAAE,GAAG7D,IAAI;QAE5B,MAAM8D,aAAa,GAAG,MAAMjH,aAAa,CAACkH,YAAY,CAACF,MAAM,CAAC,CAACG,OAAO,EAAE;QACxEF,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEG,OAAO,CAACC,IAAA,IAAU;UAAA,IAAT;YAAEC;UAAC,CAAE,GAAAD,IAAA;UAC5B,IAAIN,UAAU,IAAIA,UAAU,CAAC1D,GAAG,KAAKiE,CAAC,CAACjE,GAAG,EAAE;YAC3C;UACD;UACA,KAAKtC,2BAA2B,CAACiG,MAAM,EAAEM,CAAC,CAAC;QAC5C,CAAC,CAAC;MACH;KACA;IAACC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAhD,IAAA;EAAAkD,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"415e955efec5327b46de528b00685ca30831b3a7"}
