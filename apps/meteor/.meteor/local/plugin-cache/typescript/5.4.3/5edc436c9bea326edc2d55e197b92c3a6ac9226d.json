{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/import/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/import/service.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/import/service.ts","inputSourceMap":{"version":3,"file":"server/services/import/service.ts","sourceRoot":"","sources":["server/services/import/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ServiceClassInternal } from '@rocket.chat/core-services';\nimport type { IImportService } from '@rocket.chat/core-services';\nimport type { IImportUser, IImport, ImportStatus } from '@rocket.chat/core-typings';\nimport { Imports, ImportData } from '@rocket.chat/models';\nimport { ObjectId } from 'mongodb';\n\nimport { Importers } from '../../../app/importer/server';\nimport { settings } from '../../../app/settings/server';\nimport { validateRoleList } from '../../lib/roles/validateRoleList';\nimport { getNewUserRoles } from '../user/lib/getNewUserRoles';\n\nexport class ImportService extends ServiceClassInternal implements IImportService {\n\tprotected name = 'import';\n\n\tpublic async clear(): Promise<void> {\n\t\tawait Imports.invalidateAllOperations();\n\t\tawait ImportData.col.deleteMany({});\n\t}\n\n\tpublic async newOperation(userId: string, name: string, key: string): Promise<IImport> {\n\t\t// Make sure there's no other operation running\n\t\tawait this.clear();\n\n\t\tconst importId = (\n\t\t\tawait Imports.insertOne({\n\t\t\t\ttype: name,\n\t\t\t\timporterKey: key,\n\t\t\t\tts: new Date(),\n\t\t\t\tstatus: 'importer_new',\n\t\t\t\tvalid: true,\n\t\t\t\tuser: userId,\n\t\t\t})\n\t\t).insertedId;\n\n\t\tconst operation = await Imports.findOneById(importId);\n\t\tif (!operation) {\n\t\t\tthrow new Error('failed to create import operation');\n\t\t}\n\n\t\treturn operation;\n\t}\n\n\tprivate getStateOfOperation(operation: IImport): 'none' | 'new' | 'loading' | 'ready' | 'importing' | 'done' | 'error' | 'canceled' {\n\t\tif (!operation.valid && operation.status !== 'importer_done') {\n\t\t\treturn 'error';\n\t\t}\n\n\t\tswitch (operation.status) {\n\t\t\tcase 'importer_new':\n\t\t\t\treturn 'new';\n\t\t\tcase 'importer_uploading':\n\t\t\tcase 'importer_downloading_file':\n\t\t\tcase 'importer_file_loaded':\n\t\t\tcase 'importer_preparing_started':\n\t\t\tcase 'importer_preparing_users':\n\t\t\tcase 'importer_preparing_channels':\n\t\t\tcase 'importer_preparing_messages':\n\t\t\t\treturn 'loading';\n\t\t\tcase 'importer_user_selection':\n\t\t\t\treturn 'ready';\n\t\t\tcase 'importer_importing_started':\n\t\t\tcase 'importer_importing_users':\n\t\t\tcase 'importer_importing_channels':\n\t\t\tcase 'importer_importing_messages':\n\t\t\tcase 'importer_importing_files':\n\t\t\tcase 'importer_finishing':\n\t\t\t\treturn 'importing';\n\t\t\tcase 'importer_done':\n\t\t\t\treturn 'done';\n\t\t\tcase 'importer_import_failed':\n\t\t\t\treturn 'error';\n\t\t\tcase 'importer_import_cancelled':\n\t\t\t\treturn 'canceled';\n\t\t}\n\t}\n\n\tpublic async status(): Promise<ImportStatus> {\n\t\tconst operation = await Imports.findLastImport();\n\n\t\tif (!operation) {\n\t\t\treturn {\n\t\t\t\tstate: 'none',\n\t\t\t};\n\t\t}\n\n\t\tconst state = this.getStateOfOperation(operation);\n\n\t\treturn {\n\t\t\tstate,\n\t\t\toperation,\n\t\t};\n\t}\n\n\tprivate assertsValidStateForNewData(operation: IImport | undefined): asserts operation is IImport {\n\t\tif (!operation?.valid) {\n\t\t\tthrow new Error('Import operation not initialized.');\n\t\t}\n\t\tconst state = this.getStateOfOperation(operation);\n\t\tswitch (state) {\n\t\t\tcase 'loading':\n\t\t\tcase 'importing':\n\t\t\t\tthrow new Error('The current import operation can not receive new data.');\n\t\t\tcase 'done':\n\t\t\tcase 'error':\n\t\t\tcase 'canceled':\n\t\t\t\tthrow new Error('The current import operation is already finished.');\n\t\t}\n\t}\n\n\tpublic async addUsers(users: Omit<IImportUser, '_id' | 'services' | 'customFields'>[]): Promise<void> {\n\t\tif (!users.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst operation = await Imports.findLastImport();\n\n\t\tthis.assertsValidStateForNewData(operation);\n\n\t\tconst defaultRoles = getNewUserRoles();\n\t\tconst userRoles = new Set<string>(defaultRoles);\n\t\tfor await (const user of users) {\n\t\t\tif (!user.emails?.some((value) => value) || !user.importIds?.some((value) => value)) {\n\t\t\t\tthrow new Error('Users are missing required data.');\n\t\t\t}\n\n\t\t\tif (user.roles?.length) {\n\t\t\t\tfor (const roleId of user.roles) {\n\t\t\t\t\tuserRoles.add(roleId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (userRoles.size > 0 && !(await validateRoleList([...userRoles]))) {\n\t\t\tthrow new Error('One or more of the users have been assigned invalid roles.');\n\t\t}\n\n\t\tawait ImportData.col.insertMany(\n\t\t\tusers.map((data) => ({\n\t\t\t\t_id: new ObjectId().toHexString(),\n\t\t\t\tdata: {\n\t\t\t\t\t...data,\n\t\t\t\t\troles: data.roles ? [...new Set(...data.roles, ...defaultRoles)] : defaultRoles,\n\t\t\t\t},\n\t\t\t\tdataType: 'user',\n\t\t\t})),\n\t\t);\n\n\t\tawait Imports.increaseTotalCount(operation._id, 'users', users.length);\n\t\tawait Imports.setOperationStatus(operation._id, 'importer_user_selection');\n\t}\n\n\tpublic async run(userId: string): Promise<void> {\n\t\tconst operation = await Imports.findLastImport();\n\t\tif (!operation?.valid) {\n\t\t\tthrow new Error('error-operation-not-found');\n\t\t}\n\n\t\tif (operation.status !== 'importer_user_selection') {\n\t\t\tthrow new Error('error-invalid-operation-status');\n\t\t}\n\n\t\tconst { importerKey } = operation;\n\t\tconst importer = Importers.get(importerKey);\n\t\tif (!importer) {\n\t\t\tthrow new Error('error-importer-not-defined');\n\t\t}\n\n\t\t// eslint-disable-next-line new-cap\n\t\tconst instance = new importer.importer(importer, operation, {\n\t\t\tskipUserCallbacks: true,\n\t\t\tskipDefaultChannels: true,\n\t\t\tenableEmail2fa: settings.get<boolean>('Accounts_TwoFactorAuthentication_By_Email_Auto_Opt_In'),\n\t\t\tquickUserInsertion: true,\n\t\t\tskipExistingUsers: true,\n\t\t});\n\n\t\tawait instance.startImport({ users: { all: true } }, userId);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/import/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/import/service.ts","inputSourceMap":{"version":3,"file":"server/services/import/service.ts","sourceRoot":"","sources":["server/services/import/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ServiceClassInternal } from '@rocket.chat/core-services';\nimport type { IImportService } from '@rocket.chat/core-services';\nimport type { IImportUser, IImport, ImportStatus } from '@rocket.chat/core-typings';\nimport { Imports, ImportData } from '@rocket.chat/models';\nimport { ObjectId } from 'mongodb';\n\nimport { Importers } from '../../../app/importer/server';\nimport { settings } from '../../../app/settings/server';\nimport { validateRoleList } from '../../lib/roles/validateRoleList';\nimport { getNewUserRoles } from '../user/lib/getNewUserRoles';\n\nexport class ImportService extends ServiceClassInternal implements IImportService {\n\tprotected name = 'import';\n\n\tpublic async clear(): Promise<void> {\n\t\tawait Imports.invalidateAllOperations();\n\t\tawait ImportData.col.deleteMany({});\n\t}\n\n\tpublic async newOperation(userId: string, name: string, key: string): Promise<IImport> {\n\t\t// Make sure there's no other operation running\n\t\tawait this.clear();\n\n\t\tconst importId = (\n\t\t\tawait Imports.insertOne({\n\t\t\t\ttype: name,\n\t\t\t\timporterKey: key,\n\t\t\t\tts: new Date(),\n\t\t\t\tstatus: 'importer_new',\n\t\t\t\tvalid: true,\n\t\t\t\tuser: userId,\n\t\t\t})\n\t\t).insertedId;\n\n\t\tconst operation = await Imports.findOneById(importId);\n\t\tif (!operation) {\n\t\t\tthrow new Error('failed to create import operation');\n\t\t}\n\n\t\treturn operation;\n\t}\n\n\tprivate getStateOfOperation(operation: IImport): 'none' | 'new' | 'loading' | 'ready' | 'importing' | 'done' | 'error' | 'canceled' {\n\t\tif (!operation.valid && operation.status !== 'importer_done') {\n\t\t\treturn 'error';\n\t\t}\n\n\t\tswitch (operation.status) {\n\t\t\tcase 'importer_new':\n\t\t\t\treturn 'new';\n\t\t\tcase 'importer_uploading':\n\t\t\tcase 'importer_downloading_file':\n\t\t\tcase 'importer_file_loaded':\n\t\t\tcase 'importer_preparing_started':\n\t\t\tcase 'importer_preparing_users':\n\t\t\tcase 'importer_preparing_channels':\n\t\t\tcase 'importer_preparing_messages':\n\t\t\t\treturn 'loading';\n\t\t\tcase 'importer_user_selection':\n\t\t\t\treturn 'ready';\n\t\t\tcase 'importer_importing_started':\n\t\t\tcase 'importer_importing_users':\n\t\t\tcase 'importer_importing_channels':\n\t\t\tcase 'importer_importing_messages':\n\t\t\tcase 'importer_importing_files':\n\t\t\tcase 'importer_finishing':\n\t\t\t\treturn 'importing';\n\t\t\tcase 'importer_done':\n\t\t\t\treturn 'done';\n\t\t\tcase 'importer_import_failed':\n\t\t\t\treturn 'error';\n\t\t\tcase 'importer_import_cancelled':\n\t\t\t\treturn 'canceled';\n\t\t}\n\t}\n\n\tpublic async status(): Promise<ImportStatus> {\n\t\tconst operation = await Imports.findLastImport();\n\n\t\tif (!operation) {\n\t\t\treturn {\n\t\t\t\tstate: 'none',\n\t\t\t};\n\t\t}\n\n\t\tconst state = this.getStateOfOperation(operation);\n\n\t\treturn {\n\t\t\tstate,\n\t\t\toperation,\n\t\t};\n\t}\n\n\tprivate assertsValidStateForNewData(operation: IImport | undefined): asserts operation is IImport {\n\t\tif (!operation?.valid) {\n\t\t\tthrow new Error('Import operation not initialized.');\n\t\t}\n\t\tconst state = this.getStateOfOperation(operation);\n\t\tswitch (state) {\n\t\t\tcase 'loading':\n\t\t\tcase 'importing':\n\t\t\t\tthrow new Error('The current import operation can not receive new data.');\n\t\t\tcase 'done':\n\t\t\tcase 'error':\n\t\t\tcase 'canceled':\n\t\t\t\tthrow new Error('The current import operation is already finished.');\n\t\t}\n\t}\n\n\tpublic async addUsers(users: Omit<IImportUser, '_id' | 'services' | 'customFields'>[]): Promise<void> {\n\t\tif (!users.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst operation = await Imports.findLastImport();\n\n\t\tthis.assertsValidStateForNewData(operation);\n\n\t\tconst defaultRoles = getNewUserRoles();\n\t\tconst userRoles = new Set<string>(defaultRoles);\n\t\tfor await (const user of users) {\n\t\t\tif (!user.emails?.some((value) => value) || !user.importIds?.some((value) => value)) {\n\t\t\t\tthrow new Error('Users are missing required data.');\n\t\t\t}\n\n\t\t\tif (user.roles?.length) {\n\t\t\t\tfor (const roleId of user.roles) {\n\t\t\t\t\tuserRoles.add(roleId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (userRoles.size > 0 && !(await validateRoleList([...userRoles]))) {\n\t\t\tthrow new Error('One or more of the users have been assigned invalid roles.');\n\t\t}\n\n\t\tawait ImportData.col.insertMany(\n\t\t\tusers.map((data) => ({\n\t\t\t\t_id: new ObjectId().toHexString(),\n\t\t\t\tdata: {\n\t\t\t\t\t...data,\n\t\t\t\t\troles: data.roles ? [...new Set(...data.roles, ...defaultRoles)] : defaultRoles,\n\t\t\t\t},\n\t\t\t\tdataType: 'user',\n\t\t\t})),\n\t\t);\n\n\t\tawait Imports.increaseTotalCount(operation._id, 'users', users.length);\n\t\tawait Imports.setOperationStatus(operation._id, 'importer_user_selection');\n\t}\n\n\tpublic async run(userId: string): Promise<void> {\n\t\tconst operation = await Imports.findLastImport();\n\t\tif (!operation?.valid) {\n\t\t\tthrow new Error('error-operation-not-found');\n\t\t}\n\n\t\tif (operation.status !== 'importer_user_selection') {\n\t\t\tthrow new Error('error-invalid-operation-status');\n\t\t}\n\n\t\tconst { importerKey } = operation;\n\t\tconst importer = Importers.get(importerKey);\n\t\tif (!importer) {\n\t\t\tthrow new Error('error-importer-not-defined');\n\t\t}\n\n\t\t// eslint-disable-next-line new-cap\n\t\tconst instance = new importer.importer(importer, operation, {\n\t\t\tskipUserCallbacks: true,\n\t\t\tskipDefaultChannels: true,\n\t\t\tenableEmail2fa: settings.get<boolean>('Accounts_TwoFactorAuthentication_By_Email_Auto_Opt_In'),\n\t\t\tquickUserInsertion: true,\n\t\t\tskipExistingUsers: true,\n\t\t});\n\n\t\tawait instance.startImport({ users: { all: true } }, userId);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      ImportService: () => ImportService\n    });\n    let ServiceClassInternal;\n    module.link(\"@rocket.chat/core-services\", {\n      ServiceClassInternal(v) {\n        ServiceClassInternal = v;\n      }\n    }, 0);\n    let Imports, ImportData;\n    module.link(\"@rocket.chat/models\", {\n      Imports(v) {\n        Imports = v;\n      },\n      ImportData(v) {\n        ImportData = v;\n      }\n    }, 1);\n    let ObjectId;\n    module.link(\"mongodb\", {\n      ObjectId(v) {\n        ObjectId = v;\n      }\n    }, 2);\n    let Importers;\n    module.link(\"../../../app/importer/server\", {\n      Importers(v) {\n        Importers = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    let validateRoleList;\n    module.link(\"../../lib/roles/validateRoleList\", {\n      validateRoleList(v) {\n        validateRoleList = v;\n      }\n    }, 5);\n    let getNewUserRoles;\n    module.link(\"../user/lib/getNewUserRoles\", {\n      getNewUserRoles(v) {\n        getNewUserRoles = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class ImportService extends ServiceClassInternal {\n      constructor() {\n        super(...arguments);\n        this.name = 'import';\n      }\n      async clear() {\n        await Imports.invalidateAllOperations();\n        await ImportData.col.deleteMany({});\n      }\n      async newOperation(userId, name, key) {\n        // Make sure there's no other operation running\n        await this.clear();\n        const importId = (await Imports.insertOne({\n          type: name,\n          importerKey: key,\n          ts: new Date(),\n          status: 'importer_new',\n          valid: true,\n          user: userId\n        })).insertedId;\n        const operation = await Imports.findOneById(importId);\n        if (!operation) {\n          throw new Error('failed to create import operation');\n        }\n        return operation;\n      }\n      getStateOfOperation(operation) {\n        if (!operation.valid && operation.status !== 'importer_done') {\n          return 'error';\n        }\n        switch (operation.status) {\n          case 'importer_new':\n            return 'new';\n          case 'importer_uploading':\n          case 'importer_downloading_file':\n          case 'importer_file_loaded':\n          case 'importer_preparing_started':\n          case 'importer_preparing_users':\n          case 'importer_preparing_channels':\n          case 'importer_preparing_messages':\n            return 'loading';\n          case 'importer_user_selection':\n            return 'ready';\n          case 'importer_importing_started':\n          case 'importer_importing_users':\n          case 'importer_importing_channels':\n          case 'importer_importing_messages':\n          case 'importer_importing_files':\n          case 'importer_finishing':\n            return 'importing';\n          case 'importer_done':\n            return 'done';\n          case 'importer_import_failed':\n            return 'error';\n          case 'importer_import_cancelled':\n            return 'canceled';\n        }\n      }\n      async status() {\n        const operation = await Imports.findLastImport();\n        if (!operation) {\n          return {\n            state: 'none'\n          };\n        }\n        const state = this.getStateOfOperation(operation);\n        return {\n          state,\n          operation\n        };\n      }\n      assertsValidStateForNewData(operation) {\n        if (!(operation !== null && operation !== void 0 && operation.valid)) {\n          throw new Error('Import operation not initialized.');\n        }\n        const state = this.getStateOfOperation(operation);\n        switch (state) {\n          case 'loading':\n          case 'importing':\n            throw new Error('The current import operation can not receive new data.');\n          case 'done':\n          case 'error':\n          case 'canceled':\n            throw new Error('The current import operation is already finished.');\n        }\n      }\n      async addUsers(users) {\n        if (!users.length) {\n          return;\n        }\n        const operation = await Imports.findLastImport();\n        this.assertsValidStateForNewData(operation);\n        const defaultRoles = getNewUserRoles();\n        const userRoles = new Set(defaultRoles);\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(users), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const user = _step.value;\n            {\n              var _user$emails, _user$importIds, _user$roles;\n              if (!((_user$emails = user.emails) !== null && _user$emails !== void 0 && _user$emails.some(value => value)) || !((_user$importIds = user.importIds) !== null && _user$importIds !== void 0 && _user$importIds.some(value => value))) {\n                throw new Error('Users are missing required data.');\n              }\n              if ((_user$roles = user.roles) !== null && _user$roles !== void 0 && _user$roles.length) {\n                for (const roleId of user.roles) {\n                  userRoles.add(roleId);\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        if (userRoles.size > 0 && !(await validateRoleList([...userRoles]))) {\n          throw new Error('One or more of the users have been assigned invalid roles.');\n        }\n        await ImportData.col.insertMany(users.map(data => ({\n          _id: new ObjectId().toHexString(),\n          data: _objectSpread(_objectSpread({}, data), {}, {\n            roles: data.roles ? [...new Set(...data.roles, ...defaultRoles)] : defaultRoles\n          }),\n          dataType: 'user'\n        })));\n        await Imports.increaseTotalCount(operation._id, 'users', users.length);\n        await Imports.setOperationStatus(operation._id, 'importer_user_selection');\n      }\n      async run(userId) {\n        const operation = await Imports.findLastImport();\n        if (!(operation !== null && operation !== void 0 && operation.valid)) {\n          throw new Error('error-operation-not-found');\n        }\n        if (operation.status !== 'importer_user_selection') {\n          throw new Error('error-invalid-operation-status');\n        }\n        const {\n          importerKey\n        } = operation;\n        const importer = Importers.get(importerKey);\n        if (!importer) {\n          throw new Error('error-importer-not-defined');\n        }\n        // eslint-disable-next-line new-cap\n        const instance = new importer.importer(importer, operation, {\n          skipUserCallbacks: true,\n          skipDefaultChannels: true,\n          enableEmail2fa: settings.get('Accounts_TwoFactorAuthentication_By_Email_Auto_Opt_In'),\n          quickUserInsertion: true,\n          skipExistingUsers: true\n        });\n        await instance.startImport({\n          users: {\n            all: true\n          }\n        }, userId);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","ImportService","ServiceClassInternal","Imports","ImportData","ObjectId","Importers","settings","validateRoleList","getNewUserRoles","__reifyWaitForDeps__","constructor","arguments","name","clear","invalidateAllOperations","col","deleteMany","newOperation","userId","key","importId","insertOne","type","importerKey","ts","Date","status","valid","user","insertedId","operation","findOneById","Error","getStateOfOperation","findLastImport","state","assertsValidStateForNewData","addUsers","users","length","defaultRoles","userRoles","Set","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","_user$emails","_user$importIds","_user$roles","emails","some","importIds","roles","roleId","add","err","return","size","insertMany","map","data","_id","toHexString","dataType","increaseTotalCount","setOperationStatus","run","importer","get","instance","skipUserCallbacks","skipDefaultChannels","enableEmail2fa","quickUserInsertion","skipExistingUsers","startImport","all","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/import/service.ts"],"sourcesContent":["import { ServiceClassInternal } from '@rocket.chat/core-services';\nimport type { IImportService } from '@rocket.chat/core-services';\nimport type { IImportUser, IImport, ImportStatus } from '@rocket.chat/core-typings';\nimport { Imports, ImportData } from '@rocket.chat/models';\nimport { ObjectId } from 'mongodb';\n\nimport { Importers } from '../../../app/importer/server';\nimport { settings } from '../../../app/settings/server';\nimport { validateRoleList } from '../../lib/roles/validateRoleList';\nimport { getNewUserRoles } from '../user/lib/getNewUserRoles';\n\nexport class ImportService extends ServiceClassInternal implements IImportService {\n\tprotected name = 'import';\n\n\tpublic async clear(): Promise<void> {\n\t\tawait Imports.invalidateAllOperations();\n\t\tawait ImportData.col.deleteMany({});\n\t}\n\n\tpublic async newOperation(userId: string, name: string, key: string): Promise<IImport> {\n\t\t// Make sure there's no other operation running\n\t\tawait this.clear();\n\n\t\tconst importId = (\n\t\t\tawait Imports.insertOne({\n\t\t\t\ttype: name,\n\t\t\t\timporterKey: key,\n\t\t\t\tts: new Date(),\n\t\t\t\tstatus: 'importer_new',\n\t\t\t\tvalid: true,\n\t\t\t\tuser: userId,\n\t\t\t})\n\t\t).insertedId;\n\n\t\tconst operation = await Imports.findOneById(importId);\n\t\tif (!operation) {\n\t\t\tthrow new Error('failed to create import operation');\n\t\t}\n\n\t\treturn operation;\n\t}\n\n\tprivate getStateOfOperation(operation: IImport): 'none' | 'new' | 'loading' | 'ready' | 'importing' | 'done' | 'error' | 'canceled' {\n\t\tif (!operation.valid && operation.status !== 'importer_done') {\n\t\t\treturn 'error';\n\t\t}\n\n\t\tswitch (operation.status) {\n\t\t\tcase 'importer_new':\n\t\t\t\treturn 'new';\n\t\t\tcase 'importer_uploading':\n\t\t\tcase 'importer_downloading_file':\n\t\t\tcase 'importer_file_loaded':\n\t\t\tcase 'importer_preparing_started':\n\t\t\tcase 'importer_preparing_users':\n\t\t\tcase 'importer_preparing_channels':\n\t\t\tcase 'importer_preparing_messages':\n\t\t\t\treturn 'loading';\n\t\t\tcase 'importer_user_selection':\n\t\t\t\treturn 'ready';\n\t\t\tcase 'importer_importing_started':\n\t\t\tcase 'importer_importing_users':\n\t\t\tcase 'importer_importing_channels':\n\t\t\tcase 'importer_importing_messages':\n\t\t\tcase 'importer_importing_files':\n\t\t\tcase 'importer_finishing':\n\t\t\t\treturn 'importing';\n\t\t\tcase 'importer_done':\n\t\t\t\treturn 'done';\n\t\t\tcase 'importer_import_failed':\n\t\t\t\treturn 'error';\n\t\t\tcase 'importer_import_cancelled':\n\t\t\t\treturn 'canceled';\n\t\t}\n\t}\n\n\tpublic async status(): Promise<ImportStatus> {\n\t\tconst operation = await Imports.findLastImport();\n\n\t\tif (!operation) {\n\t\t\treturn {\n\t\t\t\tstate: 'none',\n\t\t\t};\n\t\t}\n\n\t\tconst state = this.getStateOfOperation(operation);\n\n\t\treturn {\n\t\t\tstate,\n\t\t\toperation,\n\t\t};\n\t}\n\n\tprivate assertsValidStateForNewData(operation: IImport | undefined): asserts operation is IImport {\n\t\tif (!operation?.valid) {\n\t\t\tthrow new Error('Import operation not initialized.');\n\t\t}\n\t\tconst state = this.getStateOfOperation(operation);\n\t\tswitch (state) {\n\t\t\tcase 'loading':\n\t\t\tcase 'importing':\n\t\t\t\tthrow new Error('The current import operation can not receive new data.');\n\t\t\tcase 'done':\n\t\t\tcase 'error':\n\t\t\tcase 'canceled':\n\t\t\t\tthrow new Error('The current import operation is already finished.');\n\t\t}\n\t}\n\n\tpublic async addUsers(users: Omit<IImportUser, '_id' | 'services' | 'customFields'>[]): Promise<void> {\n\t\tif (!users.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst operation = await Imports.findLastImport();\n\n\t\tthis.assertsValidStateForNewData(operation);\n\n\t\tconst defaultRoles = getNewUserRoles();\n\t\tconst userRoles = new Set<string>(defaultRoles);\n\t\tfor await (const user of users) {\n\t\t\tif (!user.emails?.some((value) => value) || !user.importIds?.some((value) => value)) {\n\t\t\t\tthrow new Error('Users are missing required data.');\n\t\t\t}\n\n\t\t\tif (user.roles?.length) {\n\t\t\t\tfor (const roleId of user.roles) {\n\t\t\t\t\tuserRoles.add(roleId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (userRoles.size > 0 && !(await validateRoleList([...userRoles]))) {\n\t\t\tthrow new Error('One or more of the users have been assigned invalid roles.');\n\t\t}\n\n\t\tawait ImportData.col.insertMany(\n\t\t\tusers.map((data) => ({\n\t\t\t\t_id: new ObjectId().toHexString(),\n\t\t\t\tdata: {\n\t\t\t\t\t...data,\n\t\t\t\t\troles: data.roles ? [...new Set(...data.roles, ...defaultRoles)] : defaultRoles,\n\t\t\t\t},\n\t\t\t\tdataType: 'user',\n\t\t\t})),\n\t\t);\n\n\t\tawait Imports.increaseTotalCount(operation._id, 'users', users.length);\n\t\tawait Imports.setOperationStatus(operation._id, 'importer_user_selection');\n\t}\n\n\tpublic async run(userId: string): Promise<void> {\n\t\tconst operation = await Imports.findLastImport();\n\t\tif (!operation?.valid) {\n\t\t\tthrow new Error('error-operation-not-found');\n\t\t}\n\n\t\tif (operation.status !== 'importer_user_selection') {\n\t\t\tthrow new Error('error-invalid-operation-status');\n\t\t}\n\n\t\tconst { importerKey } = operation;\n\t\tconst importer = Importers.get(importerKey);\n\t\tif (!importer) {\n\t\t\tthrow new Error('error-importer-not-defined');\n\t\t}\n\n\t\t// eslint-disable-next-line new-cap\n\t\tconst instance = new importer.importer(importer, operation, {\n\t\t\tskipUserCallbacks: true,\n\t\t\tskipDefaultChannels: true,\n\t\t\tenableEmail2fa: settings.get<boolean>('Accounts_TwoFactorAuthentication_By_Email_Auto_Opt_In'),\n\t\t\tquickUserInsertion: true,\n\t\t\tskipExistingUsers: true,\n\t\t});\n\n\t\tawait instance.startImport({ users: { all: true } }, userId);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"5edc436c9bea326edc2d55e197b92c3a6ac9226d"}
