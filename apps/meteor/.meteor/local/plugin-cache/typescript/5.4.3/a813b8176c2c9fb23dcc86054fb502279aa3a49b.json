{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/rooms.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/rooms.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/rooms.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/rooms.ts","sourceRoot":"","sources":["app/api/server/v1/rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import { Media, Team } from '@rocket.chat/core-services';\nimport type { IRoom, IUpload } from '@rocket.chat/core-typings';\nimport { Messages, Rooms, Users, Uploads, Subscriptions } from '@rocket.chat/models';\nimport type { Notifications } from '@rocket.chat/rest-typings';\nimport {\n\tisGETRoomsNameExists,\n\tisRoomsImagesProps,\n\tisRoomsMuteUnmuteUserProps,\n\tisRoomsExportProps,\n\tisRoomsIsMemberProps,\n\tisRoomsCleanHistoryProps,\n} from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isTruthy } from '../../../../lib/isTruthy';\nimport { omit } from '../../../../lib/utils/omit';\nimport * as dataExport from '../../../../server/lib/dataExport';\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { muteUserInRoom } from '../../../../server/methods/muteUserInRoom';\nimport { unmuteUserInRoom } from '../../../../server/methods/unmuteUserInRoom';\nimport { canAccessRoomAsync, canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { createDiscussion } from '../../../discussion/server/methods/createDiscussion';\nimport { FileUpload } from '../../../file-upload/server';\nimport { sendFileMessage } from '../../../file-upload/server/methods/sendFileMessage';\nimport { leaveRoomMethod } from '../../../lib/server/methods/leaveRoom';\nimport { applyAirGappedRestrictionsValidation } from '../../../license/server/airGappedRestrictionsWrapper';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams } from '../helpers/getUserFromParams';\nimport { getUploadFormData } from '../lib/getUploadFormData';\nimport {\n\tfindAdminRoom,\n\tfindAdminRooms,\n\tfindAdminRoomsAutocomplete,\n\tfindChannelAndPrivateAutocomplete,\n\tfindChannelAndPrivateAutocompleteWithPagination,\n\tfindRoomsAvailableForTeams,\n} from '../lib/rooms';\n\nexport async function findRoomByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n}: {\n\tparams:\n\t\t| {\n\t\t\t\troomId?: string;\n\t\t  }\n\t\t| {\n\t\t\t\troomName?: string;\n\t\t  };\n\tcheckedArchived?: boolean;\n}): Promise<IRoom> {\n\tif (\n\t\t(!('roomId' in params) && !('roomName' in params)) ||\n\t\t('roomId' in params && !(params as { roomId?: string }).roomId && 'roomName' in params && !(params as { roomName?: string }).roomName)\n\t) {\n\t\tthrow new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t}\n\n\tconst projection = { ...API.v1.defaultFieldsToExclude };\n\n\tlet room;\n\tif ('roomId' in params) {\n\t\troom = await Rooms.findOneById(params.roomId || '', { projection });\n\t} else if ('roomName' in params) {\n\t\troom = await Rooms.findOneByName(params.roomName || '', { projection });\n\t}\n\n\tif (!room) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n\t}\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The channel, ${room.name}, is archived`);\n\t}\n\n\treturn room;\n}\n\nAPI.v1.addRoute(\n\t'rooms.nameExists',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isGETRoomsNameExists,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomName } = this.queryParams;\n\n\t\t\tconst room = await Rooms.findOneByName(roomName, { projection: { _id: 1 } });\n\n\t\t\treturn API.v1.success({ exists: !!room });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.delete',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure(\"The 'roomId' param is required\");\n\t\t\t}\n\n\t\t\tawait eraseRoom(roomId, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.get',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { updatedSince } = this.queryParams;\n\n\t\t\tlet updatedSinceDate;\n\t\t\tif (updatedSince) {\n\t\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t\t} else {\n\t\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet result: { update: IRoom[]; remove: IRoom[] } = await Meteor.callAsync('rooms/get', updatedSinceDate);\n\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\tresult = {\n\t\t\t\t\tupdate: result,\n\t\t\t\t\tremove: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tupdate: await Promise.all(result.update.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\tremove: await Promise.all(result.remove.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.upload/:rid',\n\t{\n\t\tauthRequired: true,\n\t\tdeprecation: {\n\t\t\tversion: '8.0.0',\n\t\t\talternatives: ['rooms.media'],\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tif (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst file = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'file', sizeLimit: settings.get<number>('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-field');\n\t\t\t}\n\n\t\t\tconst { fields } = file;\n\t\t\tlet { fileBuffer } = file;\n\n\t\t\tconst details = {\n\t\t\t\tname: file.filename,\n\t\t\t\tsize: fileBuffer.length,\n\t\t\t\ttype: file.mimetype,\n\t\t\t\trid: this.urlParams.rid,\n\t\t\t\tuserId: this.userId,\n\t\t\t};\n\n\t\t\tconst stripExif = settings.get('Message_Attachments_Strip_Exif');\n\t\t\tif (stripExif) {\n\t\t\t\t// No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n\t\t\t\tfileBuffer = await Media.stripExifFromBuffer(fileBuffer);\n\t\t\t}\n\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tconst uploadedFile = await fileStore.insert(details, fileBuffer);\n\n\t\t\tuploadedFile.description = fields.description;\n\n\t\t\tdelete fields.description;\n\n\t\t\tawait applyAirGappedRestrictionsValidation(() =>\n\t\t\t\tsendFileMessage(this.userId, { roomId: this.urlParams.rid, file: uploadedFile, msgData: fields }),\n\t\t\t);\n\n\t\t\tconst message = await Messages.getMessageByFileIdAndUsername(uploadedFile._id, this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.media/:rid',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst file = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'file', sizeLimit: settings.get<number>('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-field');\n\t\t\t}\n\n\t\t\tlet { fileBuffer } = file;\n\n\t\t\tconst expiresAt = new Date();\n\t\t\texpiresAt.setHours(expiresAt.getHours() + 24);\n\n\t\t\tconst { fields } = file;\n\n\t\t\tlet content;\n\n\t\t\tif (fields.content) {\n\t\t\t\ttry {\n\t\t\t\t\tcontent = JSON.parse(fields.content);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tthrow new Meteor.Error('invalid-field-content');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst details = {\n\t\t\t\tname: file.filename,\n\t\t\t\tsize: fileBuffer.length,\n\t\t\t\ttype: file.mimetype,\n\t\t\t\trid: this.urlParams.rid,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcontent,\n\t\t\t\texpiresAt,\n\t\t\t};\n\n\t\t\tconst stripExif = settings.get('Message_Attachments_Strip_Exif');\n\t\t\tif (stripExif) {\n\t\t\t\t// No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n\t\t\t\tfileBuffer = await Media.stripExifFromBuffer(fileBuffer);\n\t\t\t}\n\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tconst uploadedFile = await fileStore.insert(details, fileBuffer);\n\n\t\t\tuploadedFile.path = FileUpload.getPath(`${uploadedFile._id}/${encodeURI(uploadedFile.name || '')}`);\n\n\t\t\tawait Uploads.updateFileComplete(uploadedFile._id, this.userId, omit(uploadedFile, '_id'));\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfile: {\n\t\t\t\t\t_id: uploadedFile._id,\n\t\t\t\t\turl: uploadedFile.path,\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.mediaConfirm/:rid/:fileId',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst file = await Uploads.findOneById(this.urlParams.fileId);\n\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-file');\n\t\t\t}\n\n\t\t\tfile.description = this.bodyParams.description;\n\t\t\tdelete this.bodyParams.description;\n\n\t\t\tawait applyAirGappedRestrictionsValidation(() =>\n\t\t\t\tsendFileMessage(this.userId, { roomId: this.urlParams.rid, file, msgData: this.bodyParams }, { parseAttachmentsForE2EE: false }),\n\t\t\t);\n\n\t\t\tawait Uploads.confirmTemporaryFile(this.urlParams.fileId, this.userId);\n\n\t\t\tconst message = await Messages.getMessageByFileIdAndUsername(file._id, this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.saveNotification',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId, notifications } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure(\"The 'roomId' param is required\");\n\t\t\t}\n\n\t\t\tif (!notifications || Object.keys(notifications).length === 0) {\n\t\t\t\treturn API.v1.failure(\"The 'notifications' param is required\");\n\t\t\t}\n\n\t\t\tawait Promise.all(\n\t\t\t\tObject.keys(notifications as Notifications).map(async (notificationKey) =>\n\t\t\t\t\tMeteor.callAsync('saveNotificationSettings', roomId, notificationKey, notifications[notificationKey as keyof Notifications]),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.favorite',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { favorite } = this.bodyParams;\n\n\t\t\tif (!this.bodyParams.hasOwnProperty('favorite')) {\n\t\t\t\treturn API.v1.failure(\"The 'favorite' param is required\");\n\t\t\t}\n\n\t\t\tconst room = await findRoomByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait Meteor.callAsync('toggleFavorite', room._id, favorite);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.cleanHistory',\n\t{ authRequired: true, validateParams: isRoomsCleanHistoryProps },\n\t{\n\t\tasync post() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.bodyParams });\n\t\t\tconst { _id } = room;\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.failure('User does not have access to the room [error-not-allowed]', 'error-not-allowed');\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tlatest,\n\t\t\t\toldest,\n\t\t\t\tinclusive = false,\n\t\t\t\tlimit,\n\t\t\t\texcludePinned,\n\t\t\t\tfilesOnly,\n\t\t\t\tignoreThreads,\n\t\t\t\tignoreDiscussion,\n\t\t\t\tusers,\n\t\t\t} = this.bodyParams;\n\n\t\t\tif (!latest) {\n\t\t\t\treturn API.v1.failure('Body parameter \"latest\" is required.');\n\t\t\t}\n\n\t\t\tif (!oldest) {\n\t\t\t\treturn API.v1.failure('Body parameter \"oldest\" is required.');\n\t\t\t}\n\n\t\t\tconst count = await Meteor.callAsync('cleanRoomHistory', {\n\t\t\t\troomId: _id,\n\t\t\t\tlatest: new Date(latest),\n\t\t\t\toldest: new Date(oldest),\n\t\t\t\tinclusive,\n\t\t\t\tlimit,\n\t\t\t\texcludePinned: [true, 'true', 1, '1'].includes(excludePinned ?? false),\n\t\t\t\tfilesOnly: [true, 'true', 1, '1'].includes(filesOnly ?? false),\n\t\t\t\tignoreThreads: [true, 'true', 1, '1'].includes(ignoreThreads ?? false),\n\t\t\t\tignoreDiscussion: [true, 'true', 1, '1'].includes(ignoreDiscussion ?? false),\n\t\t\t\tfromUsers: users,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ _id, count });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.info',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.queryParams });\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst discussionParent =\n\t\t\t\troom.prid &&\n\t\t\t\t(await Rooms.findOneById<Pick<IRoom, 'name' | 'fname' | 't' | 'prid' | 'u'>>(room.prid, {\n\t\t\t\t\tprojection: { name: 1, fname: 1, t: 1, prid: 1, u: 1, sidepanel: 1 },\n\t\t\t\t}));\n\t\t\tconst { team, parentRoom } = await Team.getRoomInfo(room);\n\t\t\tconst parent = discussionParent || parentRoom;\n\n\t\t\treturn API.v1.success({\n\t\t\t\troom: (await Rooms.findOneByIdOrName(room._id, { projection: fields })) ?? undefined,\n\t\t\t\t...(team && { team }),\n\t\t\t\t...(parent && { parent }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.leave',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.bodyParams });\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\t\t\tawait leaveRoomMethod(user, room._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.createDiscussion',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t\tconst { prid, pmid, reply, t_name, users, encrypted, topic } = this.bodyParams;\n\t\t\tif (!prid) {\n\t\t\t\treturn API.v1.failure('Body parameter \"prid\" is required.');\n\t\t\t}\n\t\t\tif (!t_name) {\n\t\t\t\treturn API.v1.failure('Body parameter \"t_name\" is required.');\n\t\t\t}\n\t\t\tif (users && !Array.isArray(users)) {\n\t\t\t\treturn API.v1.failure('Body parameter \"users\" must be an array.');\n\t\t\t}\n\n\t\t\tif (encrypted !== undefined && typeof encrypted !== 'boolean') {\n\t\t\t\treturn API.v1.failure('Body parameter \"encrypted\" must be a boolean when included.');\n\t\t\t}\n\n\t\t\tconst discussion = await applyAirGappedRestrictionsValidation(() =>\n\t\t\t\tcreateDiscussion(this.userId, {\n\t\t\t\t\tprid,\n\t\t\t\t\tpmid,\n\t\t\t\t\tt_name,\n\t\t\t\t\treply,\n\t\t\t\t\tusers: users?.filter(isTruthy) || [],\n\t\t\t\t\tencrypted,\n\t\t\t\t\ttopic,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({ discussion });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.getDiscussions',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.queryParams });\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst ourQuery = Object.assign(query, { prid: room._id });\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { fname: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [discussions, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdiscussions,\n\t\t\t\tcount: discussions.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.images',\n\t{ authRequired: true, validateParams: isRoomsImagesProps },\n\t{\n\t\tasync get() {\n\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 't' | 'teamId' | 'prid'>>(this.queryParams.roomId, {\n\t\t\t\tprojection: { t: 1, teamId: 1, prid: 1 },\n\t\t\t});\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tlet initialImage: IUpload | null = null;\n\t\t\tif (this.queryParams.startingFromId) {\n\t\t\t\tinitialImage = await Uploads.findOneById(this.queryParams.startingFromId);\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { cursor, totalCount } = Uploads.findImagesByRoomId(room._id, initialImage?.uploadedAt, {\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\t// If the initial image was not returned in the query, insert it as the first element of the list\n\t\t\tif (initialImage && !files.find(({ _id }) => _id === (initialImage as IUpload)._id)) {\n\t\t\t\tfiles.splice(0, 0, initialImage);\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles,\n\t\t\t\tcount,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.adminRooms',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { types, filter } = this.queryParams;\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findAdminRooms({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tfilter: filter || '',\n\t\t\t\t\ttypes: (types && !Array.isArray(types) ? [types] : types) ?? [],\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.adminRooms',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findAdminRoomsAutocomplete({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.adminRooms.getRoom',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid } = this.queryParams;\n\t\t\tconst room = await findAdminRoom({\n\t\t\t\tuid: this.userId,\n\t\t\t\trid: rid || '',\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\treturn API.v1.success(room);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.channelAndPrivate',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findChannelAndPrivateAutocomplete({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.channelAndPrivate.withPagination',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findChannelAndPrivateAutocompleteWithPagination({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.availableForTeams',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { name } = this.queryParams;\n\n\t\t\tif (name && typeof name !== 'string') {\n\t\t\t\treturn API.v1.failure(\"The 'name' param is invalid\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findRoomsAvailableForTeams({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tname: name || '',\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.saveRoomSettings',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, ...params } = this.bodyParams;\n\n\t\t\tconst result = await saveRoomSettings(this.userId, rid, params);\n\n\t\t\treturn API.v1.success({ rid: result.rid });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.changeArchivationState',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, action } = this.bodyParams;\n\n\t\t\tlet result;\n\t\t\tif (action === 'archive') {\n\t\t\t\tresult = await Meteor.callAsync('archiveRoom', rid);\n\t\t\t} else {\n\t\t\t\tresult = await Meteor.callAsync('unarchiveRoom', rid);\n\t\t\t}\n\n\t\t\treturn API.v1.success({ result });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.export',\n\t{ authRequired: true, validateParams: isRoomsExportProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, type } = this.bodyParams;\n\n\t\t\tif (!(await hasPermissionAsync(this.userId, 'mail-messages', rid))) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Mailing is not allowed');\n\t\t\t}\n\n\t\t\tconst room = await Rooms.findOneById(rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId);\n\n\t\t\tif (!user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tif (type === 'file') {\n\t\t\t\tconst { dateFrom, dateTo } = this.bodyParams;\n\t\t\t\tconst { format } = this.bodyParams;\n\n\t\t\t\tconst convertedDateFrom = dateFrom ? new Date(dateFrom) : new Date(0);\n\t\t\t\tconst convertedDateTo = dateTo ? new Date(dateTo) : new Date();\n\t\t\t\tconvertedDateTo.setDate(convertedDateTo.getDate() + 1);\n\n\t\t\t\tif (convertedDateFrom > convertedDateTo) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-dates', 'From date cannot be after To date');\n\t\t\t\t}\n\n\t\t\t\tvoid dataExport.sendFile(\n\t\t\t\t\t{\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tformat: format as 'html' | 'json',\n\t\t\t\t\t\tdateFrom: convertedDateFrom,\n\t\t\t\t\t\tdateTo: convertedDateTo,\n\t\t\t\t\t},\n\t\t\t\t\tuser,\n\t\t\t\t);\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tif (type === 'email') {\n\t\t\t\tconst { toUsers, toEmails, subject, messages } = this.bodyParams;\n\n\t\t\t\tif ((!toUsers || toUsers.length === 0) && (!toEmails || toEmails.length === 0)) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-recipient');\n\t\t\t\t}\n\n\t\t\t\tconst result = await dataExport.sendViaEmail(\n\t\t\t\t\t{\n\t\t\t\t\t\trid,\n\t\t\t\t\t\ttoUsers: (toUsers as string[]) || [],\n\t\t\t\t\t\ttoEmails: toEmails || [],\n\t\t\t\t\t\tsubject: subject || '',\n\t\t\t\t\t\tmessages: messages || [],\n\t\t\t\t\t\tlanguage: user.language || 'en',\n\t\t\t\t\t},\n\t\t\t\t\tuser,\n\t\t\t\t);\n\n\t\t\t\treturn API.v1.success(result);\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.isMember',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isRoomsIsMemberProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, userId, username } = this.queryParams;\n\t\t\tconst [room, user] = await Promise.all([\n\t\t\t\tfindRoomByIdOrName({\n\t\t\t\t\tparams: { roomId },\n\t\t\t\t}) as Promise<IRoom>,\n\t\t\t\tUsers.findOneByIdOrUsername(userId || username),\n\t\t\t]);\n\n\t\t\tif (!user?._id) {\n\t\t\t\treturn API.v1.failure('error-user-not-found');\n\t\t\t}\n\n\t\t\tif (await canAccessRoomAsync(room, { _id: this.user._id })) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tisMember: (await Subscriptions.countByRoomIdAndUserId(room._id, user._id)) > 0,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn API.v1.forbidden();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.muteUser',\n\t{ authRequired: true, validateParams: isRoomsMuteUnmuteUserProps },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tif (!user.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait muteUserInRoom(this.userId, { rid: this.bodyParams.roomId, username: user.username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.unmuteUser',\n\t{ authRequired: true, validateParams: isRoomsMuteUnmuteUserProps },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tif (!user.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait unmuteUserInRoom(this.userId, { rid: this.bodyParams.roomId, username: user.username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/rooms.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/rooms.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/rooms.ts","sourceRoot":"","sources":["app/api/server/v1/rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import { Media, Team } from '@rocket.chat/core-services';\nimport type { IRoom, IUpload } from '@rocket.chat/core-typings';\nimport { Messages, Rooms, Users, Uploads, Subscriptions } from '@rocket.chat/models';\nimport type { Notifications } from '@rocket.chat/rest-typings';\nimport {\n\tisGETRoomsNameExists,\n\tisRoomsImagesProps,\n\tisRoomsMuteUnmuteUserProps,\n\tisRoomsExportProps,\n\tisRoomsIsMemberProps,\n\tisRoomsCleanHistoryProps,\n} from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isTruthy } from '../../../../lib/isTruthy';\nimport { omit } from '../../../../lib/utils/omit';\nimport * as dataExport from '../../../../server/lib/dataExport';\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { muteUserInRoom } from '../../../../server/methods/muteUserInRoom';\nimport { unmuteUserInRoom } from '../../../../server/methods/unmuteUserInRoom';\nimport { canAccessRoomAsync, canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { createDiscussion } from '../../../discussion/server/methods/createDiscussion';\nimport { FileUpload } from '../../../file-upload/server';\nimport { sendFileMessage } from '../../../file-upload/server/methods/sendFileMessage';\nimport { leaveRoomMethod } from '../../../lib/server/methods/leaveRoom';\nimport { applyAirGappedRestrictionsValidation } from '../../../license/server/airGappedRestrictionsWrapper';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams } from '../helpers/getUserFromParams';\nimport { getUploadFormData } from '../lib/getUploadFormData';\nimport {\n\tfindAdminRoom,\n\tfindAdminRooms,\n\tfindAdminRoomsAutocomplete,\n\tfindChannelAndPrivateAutocomplete,\n\tfindChannelAndPrivateAutocompleteWithPagination,\n\tfindRoomsAvailableForTeams,\n} from '../lib/rooms';\n\nexport async function findRoomByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n}: {\n\tparams:\n\t\t| {\n\t\t\t\troomId?: string;\n\t\t  }\n\t\t| {\n\t\t\t\troomName?: string;\n\t\t  };\n\tcheckedArchived?: boolean;\n}): Promise<IRoom> {\n\tif (\n\t\t(!('roomId' in params) && !('roomName' in params)) ||\n\t\t('roomId' in params && !(params as { roomId?: string }).roomId && 'roomName' in params && !(params as { roomName?: string }).roomName)\n\t) {\n\t\tthrow new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t}\n\n\tconst projection = { ...API.v1.defaultFieldsToExclude };\n\n\tlet room;\n\tif ('roomId' in params) {\n\t\troom = await Rooms.findOneById(params.roomId || '', { projection });\n\t} else if ('roomName' in params) {\n\t\troom = await Rooms.findOneByName(params.roomName || '', { projection });\n\t}\n\n\tif (!room) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n\t}\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The channel, ${room.name}, is archived`);\n\t}\n\n\treturn room;\n}\n\nAPI.v1.addRoute(\n\t'rooms.nameExists',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isGETRoomsNameExists,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomName } = this.queryParams;\n\n\t\t\tconst room = await Rooms.findOneByName(roomName, { projection: { _id: 1 } });\n\n\t\t\treturn API.v1.success({ exists: !!room });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.delete',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure(\"The 'roomId' param is required\");\n\t\t\t}\n\n\t\t\tawait eraseRoom(roomId, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.get',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { updatedSince } = this.queryParams;\n\n\t\t\tlet updatedSinceDate;\n\t\t\tif (updatedSince) {\n\t\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t\t} else {\n\t\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet result: { update: IRoom[]; remove: IRoom[] } = await Meteor.callAsync('rooms/get', updatedSinceDate);\n\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\tresult = {\n\t\t\t\t\tupdate: result,\n\t\t\t\t\tremove: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tupdate: await Promise.all(result.update.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\tremove: await Promise.all(result.remove.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.upload/:rid',\n\t{\n\t\tauthRequired: true,\n\t\tdeprecation: {\n\t\t\tversion: '8.0.0',\n\t\t\talternatives: ['rooms.media'],\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tif (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst file = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'file', sizeLimit: settings.get<number>('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-field');\n\t\t\t}\n\n\t\t\tconst { fields } = file;\n\t\t\tlet { fileBuffer } = file;\n\n\t\t\tconst details = {\n\t\t\t\tname: file.filename,\n\t\t\t\tsize: fileBuffer.length,\n\t\t\t\ttype: file.mimetype,\n\t\t\t\trid: this.urlParams.rid,\n\t\t\t\tuserId: this.userId,\n\t\t\t};\n\n\t\t\tconst stripExif = settings.get('Message_Attachments_Strip_Exif');\n\t\t\tif (stripExif) {\n\t\t\t\t// No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n\t\t\t\tfileBuffer = await Media.stripExifFromBuffer(fileBuffer);\n\t\t\t}\n\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tconst uploadedFile = await fileStore.insert(details, fileBuffer);\n\n\t\t\tuploadedFile.description = fields.description;\n\n\t\t\tdelete fields.description;\n\n\t\t\tawait applyAirGappedRestrictionsValidation(() =>\n\t\t\t\tsendFileMessage(this.userId, { roomId: this.urlParams.rid, file: uploadedFile, msgData: fields }),\n\t\t\t);\n\n\t\t\tconst message = await Messages.getMessageByFileIdAndUsername(uploadedFile._id, this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.media/:rid',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst file = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'file', sizeLimit: settings.get<number>('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-field');\n\t\t\t}\n\n\t\t\tlet { fileBuffer } = file;\n\n\t\t\tconst expiresAt = new Date();\n\t\t\texpiresAt.setHours(expiresAt.getHours() + 24);\n\n\t\t\tconst { fields } = file;\n\n\t\t\tlet content;\n\n\t\t\tif (fields.content) {\n\t\t\t\ttry {\n\t\t\t\t\tcontent = JSON.parse(fields.content);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tthrow new Meteor.Error('invalid-field-content');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst details = {\n\t\t\t\tname: file.filename,\n\t\t\t\tsize: fileBuffer.length,\n\t\t\t\ttype: file.mimetype,\n\t\t\t\trid: this.urlParams.rid,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcontent,\n\t\t\t\texpiresAt,\n\t\t\t};\n\n\t\t\tconst stripExif = settings.get('Message_Attachments_Strip_Exif');\n\t\t\tif (stripExif) {\n\t\t\t\t// No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n\t\t\t\tfileBuffer = await Media.stripExifFromBuffer(fileBuffer);\n\t\t\t}\n\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tconst uploadedFile = await fileStore.insert(details, fileBuffer);\n\n\t\t\tuploadedFile.path = FileUpload.getPath(`${uploadedFile._id}/${encodeURI(uploadedFile.name || '')}`);\n\n\t\t\tawait Uploads.updateFileComplete(uploadedFile._id, this.userId, omit(uploadedFile, '_id'));\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfile: {\n\t\t\t\t\t_id: uploadedFile._id,\n\t\t\t\t\turl: uploadedFile.path,\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.mediaConfirm/:rid/:fileId',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst file = await Uploads.findOneById(this.urlParams.fileId);\n\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-file');\n\t\t\t}\n\n\t\t\tfile.description = this.bodyParams.description;\n\t\t\tdelete this.bodyParams.description;\n\n\t\t\tawait applyAirGappedRestrictionsValidation(() =>\n\t\t\t\tsendFileMessage(this.userId, { roomId: this.urlParams.rid, file, msgData: this.bodyParams }, { parseAttachmentsForE2EE: false }),\n\t\t\t);\n\n\t\t\tawait Uploads.confirmTemporaryFile(this.urlParams.fileId, this.userId);\n\n\t\t\tconst message = await Messages.getMessageByFileIdAndUsername(file._id, this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.saveNotification',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId, notifications } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure(\"The 'roomId' param is required\");\n\t\t\t}\n\n\t\t\tif (!notifications || Object.keys(notifications).length === 0) {\n\t\t\t\treturn API.v1.failure(\"The 'notifications' param is required\");\n\t\t\t}\n\n\t\t\tawait Promise.all(\n\t\t\t\tObject.keys(notifications as Notifications).map(async (notificationKey) =>\n\t\t\t\t\tMeteor.callAsync('saveNotificationSettings', roomId, notificationKey, notifications[notificationKey as keyof Notifications]),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.favorite',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { favorite } = this.bodyParams;\n\n\t\t\tif (!this.bodyParams.hasOwnProperty('favorite')) {\n\t\t\t\treturn API.v1.failure(\"The 'favorite' param is required\");\n\t\t\t}\n\n\t\t\tconst room = await findRoomByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait Meteor.callAsync('toggleFavorite', room._id, favorite);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.cleanHistory',\n\t{ authRequired: true, validateParams: isRoomsCleanHistoryProps },\n\t{\n\t\tasync post() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.bodyParams });\n\t\t\tconst { _id } = room;\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.failure('User does not have access to the room [error-not-allowed]', 'error-not-allowed');\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tlatest,\n\t\t\t\toldest,\n\t\t\t\tinclusive = false,\n\t\t\t\tlimit,\n\t\t\t\texcludePinned,\n\t\t\t\tfilesOnly,\n\t\t\t\tignoreThreads,\n\t\t\t\tignoreDiscussion,\n\t\t\t\tusers,\n\t\t\t} = this.bodyParams;\n\n\t\t\tif (!latest) {\n\t\t\t\treturn API.v1.failure('Body parameter \"latest\" is required.');\n\t\t\t}\n\n\t\t\tif (!oldest) {\n\t\t\t\treturn API.v1.failure('Body parameter \"oldest\" is required.');\n\t\t\t}\n\n\t\t\tconst count = await Meteor.callAsync('cleanRoomHistory', {\n\t\t\t\troomId: _id,\n\t\t\t\tlatest: new Date(latest),\n\t\t\t\toldest: new Date(oldest),\n\t\t\t\tinclusive,\n\t\t\t\tlimit,\n\t\t\t\texcludePinned: [true, 'true', 1, '1'].includes(excludePinned ?? false),\n\t\t\t\tfilesOnly: [true, 'true', 1, '1'].includes(filesOnly ?? false),\n\t\t\t\tignoreThreads: [true, 'true', 1, '1'].includes(ignoreThreads ?? false),\n\t\t\t\tignoreDiscussion: [true, 'true', 1, '1'].includes(ignoreDiscussion ?? false),\n\t\t\t\tfromUsers: users,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ _id, count });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.info',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.queryParams });\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst discussionParent =\n\t\t\t\troom.prid &&\n\t\t\t\t(await Rooms.findOneById<Pick<IRoom, 'name' | 'fname' | 't' | 'prid' | 'u'>>(room.prid, {\n\t\t\t\t\tprojection: { name: 1, fname: 1, t: 1, prid: 1, u: 1, sidepanel: 1 },\n\t\t\t\t}));\n\t\t\tconst { team, parentRoom } = await Team.getRoomInfo(room);\n\t\t\tconst parent = discussionParent || parentRoom;\n\n\t\t\treturn API.v1.success({\n\t\t\t\troom: (await Rooms.findOneByIdOrName(room._id, { projection: fields })) ?? undefined,\n\t\t\t\t...(team && { team }),\n\t\t\t\t...(parent && { parent }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.leave',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.bodyParams });\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\t\t\tawait leaveRoomMethod(user, room._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.createDiscussion',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t\tconst { prid, pmid, reply, t_name, users, encrypted, topic } = this.bodyParams;\n\t\t\tif (!prid) {\n\t\t\t\treturn API.v1.failure('Body parameter \"prid\" is required.');\n\t\t\t}\n\t\t\tif (!t_name) {\n\t\t\t\treturn API.v1.failure('Body parameter \"t_name\" is required.');\n\t\t\t}\n\t\t\tif (users && !Array.isArray(users)) {\n\t\t\t\treturn API.v1.failure('Body parameter \"users\" must be an array.');\n\t\t\t}\n\n\t\t\tif (encrypted !== undefined && typeof encrypted !== 'boolean') {\n\t\t\t\treturn API.v1.failure('Body parameter \"encrypted\" must be a boolean when included.');\n\t\t\t}\n\n\t\t\tconst discussion = await applyAirGappedRestrictionsValidation(() =>\n\t\t\t\tcreateDiscussion(this.userId, {\n\t\t\t\t\tprid,\n\t\t\t\t\tpmid,\n\t\t\t\t\tt_name,\n\t\t\t\t\treply,\n\t\t\t\t\tusers: users?.filter(isTruthy) || [],\n\t\t\t\t\tencrypted,\n\t\t\t\t\ttopic,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({ discussion });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.getDiscussions',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.queryParams });\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst ourQuery = Object.assign(query, { prid: room._id });\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { fname: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [discussions, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdiscussions,\n\t\t\t\tcount: discussions.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.images',\n\t{ authRequired: true, validateParams: isRoomsImagesProps },\n\t{\n\t\tasync get() {\n\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 't' | 'teamId' | 'prid'>>(this.queryParams.roomId, {\n\t\t\t\tprojection: { t: 1, teamId: 1, prid: 1 },\n\t\t\t});\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tlet initialImage: IUpload | null = null;\n\t\t\tif (this.queryParams.startingFromId) {\n\t\t\t\tinitialImage = await Uploads.findOneById(this.queryParams.startingFromId);\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { cursor, totalCount } = Uploads.findImagesByRoomId(room._id, initialImage?.uploadedAt, {\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\t// If the initial image was not returned in the query, insert it as the first element of the list\n\t\t\tif (initialImage && !files.find(({ _id }) => _id === (initialImage as IUpload)._id)) {\n\t\t\t\tfiles.splice(0, 0, initialImage);\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles,\n\t\t\t\tcount,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.adminRooms',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { types, filter } = this.queryParams;\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findAdminRooms({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tfilter: filter || '',\n\t\t\t\t\ttypes: (types && !Array.isArray(types) ? [types] : types) ?? [],\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.adminRooms',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findAdminRoomsAutocomplete({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.adminRooms.getRoom',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid } = this.queryParams;\n\t\t\tconst room = await findAdminRoom({\n\t\t\t\tuid: this.userId,\n\t\t\t\trid: rid || '',\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\treturn API.v1.success(room);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.channelAndPrivate',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findChannelAndPrivateAutocomplete({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.channelAndPrivate.withPagination',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findChannelAndPrivateAutocompleteWithPagination({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.availableForTeams',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { name } = this.queryParams;\n\n\t\t\tif (name && typeof name !== 'string') {\n\t\t\t\treturn API.v1.failure(\"The 'name' param is invalid\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findRoomsAvailableForTeams({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tname: name || '',\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.saveRoomSettings',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, ...params } = this.bodyParams;\n\n\t\t\tconst result = await saveRoomSettings(this.userId, rid, params);\n\n\t\t\treturn API.v1.success({ rid: result.rid });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.changeArchivationState',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, action } = this.bodyParams;\n\n\t\t\tlet result;\n\t\t\tif (action === 'archive') {\n\t\t\t\tresult = await Meteor.callAsync('archiveRoom', rid);\n\t\t\t} else {\n\t\t\t\tresult = await Meteor.callAsync('unarchiveRoom', rid);\n\t\t\t}\n\n\t\t\treturn API.v1.success({ result });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.export',\n\t{ authRequired: true, validateParams: isRoomsExportProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, type } = this.bodyParams;\n\n\t\t\tif (!(await hasPermissionAsync(this.userId, 'mail-messages', rid))) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Mailing is not allowed');\n\t\t\t}\n\n\t\t\tconst room = await Rooms.findOneById(rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId);\n\n\t\t\tif (!user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tif (type === 'file') {\n\t\t\t\tconst { dateFrom, dateTo } = this.bodyParams;\n\t\t\t\tconst { format } = this.bodyParams;\n\n\t\t\t\tconst convertedDateFrom = dateFrom ? new Date(dateFrom) : new Date(0);\n\t\t\t\tconst convertedDateTo = dateTo ? new Date(dateTo) : new Date();\n\t\t\t\tconvertedDateTo.setDate(convertedDateTo.getDate() + 1);\n\n\t\t\t\tif (convertedDateFrom > convertedDateTo) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-dates', 'From date cannot be after To date');\n\t\t\t\t}\n\n\t\t\t\tvoid dataExport.sendFile(\n\t\t\t\t\t{\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tformat: format as 'html' | 'json',\n\t\t\t\t\t\tdateFrom: convertedDateFrom,\n\t\t\t\t\t\tdateTo: convertedDateTo,\n\t\t\t\t\t},\n\t\t\t\t\tuser,\n\t\t\t\t);\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tif (type === 'email') {\n\t\t\t\tconst { toUsers, toEmails, subject, messages } = this.bodyParams;\n\n\t\t\t\tif ((!toUsers || toUsers.length === 0) && (!toEmails || toEmails.length === 0)) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-recipient');\n\t\t\t\t}\n\n\t\t\t\tconst result = await dataExport.sendViaEmail(\n\t\t\t\t\t{\n\t\t\t\t\t\trid,\n\t\t\t\t\t\ttoUsers: (toUsers as string[]) || [],\n\t\t\t\t\t\ttoEmails: toEmails || [],\n\t\t\t\t\t\tsubject: subject || '',\n\t\t\t\t\t\tmessages: messages || [],\n\t\t\t\t\t\tlanguage: user.language || 'en',\n\t\t\t\t\t},\n\t\t\t\t\tuser,\n\t\t\t\t);\n\n\t\t\t\treturn API.v1.success(result);\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.isMember',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isRoomsIsMemberProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, userId, username } = this.queryParams;\n\t\t\tconst [room, user] = await Promise.all([\n\t\t\t\tfindRoomByIdOrName({\n\t\t\t\t\tparams: { roomId },\n\t\t\t\t}) as Promise<IRoom>,\n\t\t\t\tUsers.findOneByIdOrUsername(userId || username),\n\t\t\t]);\n\n\t\t\tif (!user?._id) {\n\t\t\t\treturn API.v1.failure('error-user-not-found');\n\t\t\t}\n\n\t\t\tif (await canAccessRoomAsync(room, { _id: this.user._id })) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tisMember: (await Subscriptions.countByRoomIdAndUserId(room._id, user._id)) > 0,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn API.v1.forbidden();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.muteUser',\n\t{ authRequired: true, validateParams: isRoomsMuteUnmuteUserProps },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tif (!user.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait muteUserInRoom(this.userId, { rid: this.bodyParams.roomId, username: user.username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.unmuteUser',\n\t{ authRequired: true, validateParams: isRoomsMuteUnmuteUserProps },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tif (!user.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait unmuteUserInRoom(this.userId, { rid: this.bodyParams.roomId, username: user.username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 1);\n    const _excluded = [\"rid\"];\n    module.export({\n      findRoomByIdOrName: () => findRoomByIdOrName\n    });\n    let Media, Team;\n    module.link(\"@rocket.chat/core-services\", {\n      Media(v) {\n        Media = v;\n      },\n      Team(v) {\n        Team = v;\n      }\n    }, 0);\n    let Messages, Rooms, Users, Uploads, Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      Uploads(v) {\n        Uploads = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 1);\n    let isGETRoomsNameExists, isRoomsImagesProps, isRoomsMuteUnmuteUserProps, isRoomsExportProps, isRoomsIsMemberProps, isRoomsCleanHistoryProps;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isGETRoomsNameExists(v) {\n        isGETRoomsNameExists = v;\n      },\n      isRoomsImagesProps(v) {\n        isRoomsImagesProps = v;\n      },\n      isRoomsMuteUnmuteUserProps(v) {\n        isRoomsMuteUnmuteUserProps = v;\n      },\n      isRoomsExportProps(v) {\n        isRoomsExportProps = v;\n      },\n      isRoomsIsMemberProps(v) {\n        isRoomsIsMemberProps = v;\n      },\n      isRoomsCleanHistoryProps(v) {\n        isRoomsCleanHistoryProps = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let isTruthy;\n    module.link(\"../../../../lib/isTruthy\", {\n      isTruthy(v) {\n        isTruthy = v;\n      }\n    }, 4);\n    let omit;\n    module.link(\"../../../../lib/utils/omit\", {\n      omit(v) {\n        omit = v;\n      }\n    }, 5);\n    let dataExport;\n    module.link(\"../../../../server/lib/dataExport\", {\n      \"*\"(v) {\n        dataExport = v;\n      }\n    }, 6);\n    let eraseRoom;\n    module.link(\"../../../../server/lib/eraseRoom\", {\n      eraseRoom(v) {\n        eraseRoom = v;\n      }\n    }, 7);\n    let muteUserInRoom;\n    module.link(\"../../../../server/methods/muteUserInRoom\", {\n      muteUserInRoom(v) {\n        muteUserInRoom = v;\n      }\n    }, 8);\n    let unmuteUserInRoom;\n    module.link(\"../../../../server/methods/unmuteUserInRoom\", {\n      unmuteUserInRoom(v) {\n        unmuteUserInRoom = v;\n      }\n    }, 9);\n    let canAccessRoomAsync, canAccessRoomIdAsync;\n    module.link(\"../../../authorization/server/functions/canAccessRoom\", {\n      canAccessRoomAsync(v) {\n        canAccessRoomAsync = v;\n      },\n      canAccessRoomIdAsync(v) {\n        canAccessRoomIdAsync = v;\n      }\n    }, 10);\n    let hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 11);\n    let saveRoomSettings;\n    module.link(\"../../../channel-settings/server/methods/saveRoomSettings\", {\n      saveRoomSettings(v) {\n        saveRoomSettings = v;\n      }\n    }, 12);\n    let createDiscussion;\n    module.link(\"../../../discussion/server/methods/createDiscussion\", {\n      createDiscussion(v) {\n        createDiscussion = v;\n      }\n    }, 13);\n    let FileUpload;\n    module.link(\"../../../file-upload/server\", {\n      FileUpload(v) {\n        FileUpload = v;\n      }\n    }, 14);\n    let sendFileMessage;\n    module.link(\"../../../file-upload/server/methods/sendFileMessage\", {\n      sendFileMessage(v) {\n        sendFileMessage = v;\n      }\n    }, 15);\n    let leaveRoomMethod;\n    module.link(\"../../../lib/server/methods/leaveRoom\", {\n      leaveRoomMethod(v) {\n        leaveRoomMethod = v;\n      }\n    }, 16);\n    let applyAirGappedRestrictionsValidation;\n    module.link(\"../../../license/server/airGappedRestrictionsWrapper\", {\n      applyAirGappedRestrictionsValidation(v) {\n        applyAirGappedRestrictionsValidation = v;\n      }\n    }, 17);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 18);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 19);\n    let composeRoomWithLastMessage;\n    module.link(\"../helpers/composeRoomWithLastMessage\", {\n      composeRoomWithLastMessage(v) {\n        composeRoomWithLastMessage = v;\n      }\n    }, 20);\n    let getPaginationItems;\n    module.link(\"../helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 21);\n    let getUserFromParams;\n    module.link(\"../helpers/getUserFromParams\", {\n      getUserFromParams(v) {\n        getUserFromParams = v;\n      }\n    }, 22);\n    let getUploadFormData;\n    module.link(\"../lib/getUploadFormData\", {\n      getUploadFormData(v) {\n        getUploadFormData = v;\n      }\n    }, 23);\n    let findAdminRoom, findAdminRooms, findAdminRoomsAutocomplete, findChannelAndPrivateAutocomplete, findChannelAndPrivateAutocompleteWithPagination, findRoomsAvailableForTeams;\n    module.link(\"../lib/rooms\", {\n      findAdminRoom(v) {\n        findAdminRoom = v;\n      },\n      findAdminRooms(v) {\n        findAdminRooms = v;\n      },\n      findAdminRoomsAutocomplete(v) {\n        findAdminRoomsAutocomplete = v;\n      },\n      findChannelAndPrivateAutocomplete(v) {\n        findChannelAndPrivateAutocomplete = v;\n      },\n      findChannelAndPrivateAutocompleteWithPagination(v) {\n        findChannelAndPrivateAutocompleteWithPagination = v;\n      },\n      findRoomsAvailableForTeams(v) {\n        findRoomsAvailableForTeams = v;\n      }\n    }, 24);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function findRoomByIdOrName(_ref) {\n      let {\n        params,\n        checkedArchived = true\n      } = _ref;\n      if (!('roomId' in params) && !('roomName' in params) || 'roomId' in params && !params.roomId && 'roomName' in params && !params.roomName) {\n        throw new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n      }\n      const projection = _objectSpread({}, API.v1.defaultFieldsToExclude);\n      let room;\n      if ('roomId' in params) {\n        room = await Rooms.findOneById(params.roomId || '', {\n          projection\n        });\n      } else if ('roomName' in params) {\n        room = await Rooms.findOneByName(params.roomName || '', {\n          projection\n        });\n      }\n      if (!room) {\n        throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n      }\n      if (checkedArchived && room.archived) {\n        throw new Meteor.Error('error-room-archived', \"The channel, \".concat(room.name, \", is archived\"));\n      }\n      return room;\n    }\n    API.v1.addRoute('rooms.nameExists', {\n      authRequired: true,\n      validateParams: isGETRoomsNameExists\n    }, {\n      async get() {\n        const {\n          roomName\n        } = this.queryParams;\n        const room = await Rooms.findOneByName(roomName, {\n          projection: {\n            _id: 1\n          }\n        });\n        return API.v1.success({\n          exists: !!room\n        });\n      }\n    });\n    API.v1.addRoute('rooms.delete', {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          roomId\n        } = this.bodyParams;\n        if (!roomId) {\n          return API.v1.failure(\"The 'roomId' param is required\");\n        }\n        await eraseRoom(roomId, this.userId);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('rooms.get', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          updatedSince\n        } = this.queryParams;\n        let updatedSinceDate;\n        if (updatedSince) {\n          if (isNaN(Date.parse(updatedSince))) {\n            throw new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n          } else {\n            updatedSinceDate = new Date(updatedSince);\n          }\n        }\n        let result = await Meteor.callAsync('rooms/get', updatedSinceDate);\n        if (Array.isArray(result)) {\n          result = {\n            update: result,\n            remove: []\n          };\n        }\n        return API.v1.success({\n          update: await Promise.all(result.update.map(room => composeRoomWithLastMessage(room, this.userId))),\n          remove: await Promise.all(result.remove.map(room => composeRoomWithLastMessage(room, this.userId)))\n        });\n      }\n    });\n    API.v1.addRoute('rooms.upload/:rid', {\n      authRequired: true,\n      deprecation: {\n        version: '8.0.0',\n        alternatives: ['rooms.media']\n      }\n    }, {\n      async post() {\n        if (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n          return API.v1.forbidden();\n        }\n        const file = await getUploadFormData({\n          request: this.request\n        }, {\n          field: 'file',\n          sizeLimit: settings.get('FileUpload_MaxFileSize')\n        });\n        if (!file) {\n          throw new Meteor.Error('invalid-field');\n        }\n        const {\n          fields\n        } = file;\n        let {\n          fileBuffer\n        } = file;\n        const details = {\n          name: file.filename,\n          size: fileBuffer.length,\n          type: file.mimetype,\n          rid: this.urlParams.rid,\n          userId: this.userId\n        };\n        const stripExif = settings.get('Message_Attachments_Strip_Exif');\n        if (stripExif) {\n          // No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n          fileBuffer = await Media.stripExifFromBuffer(fileBuffer);\n        }\n        const fileStore = FileUpload.getStore('Uploads');\n        const uploadedFile = await fileStore.insert(details, fileBuffer);\n        uploadedFile.description = fields.description;\n        delete fields.description;\n        await applyAirGappedRestrictionsValidation(() => sendFileMessage(this.userId, {\n          roomId: this.urlParams.rid,\n          file: uploadedFile,\n          msgData: fields\n        }));\n        const message = await Messages.getMessageByFileIdAndUsername(uploadedFile._id, this.userId);\n        return API.v1.success({\n          message\n        });\n      }\n    });\n    API.v1.addRoute('rooms.media/:rid', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n          return API.v1.forbidden();\n        }\n        const file = await getUploadFormData({\n          request: this.request\n        }, {\n          field: 'file',\n          sizeLimit: settings.get('FileUpload_MaxFileSize')\n        });\n        if (!file) {\n          throw new Meteor.Error('invalid-field');\n        }\n        let {\n          fileBuffer\n        } = file;\n        const expiresAt = new Date();\n        expiresAt.setHours(expiresAt.getHours() + 24);\n        const {\n          fields\n        } = file;\n        let content;\n        if (fields.content) {\n          try {\n            content = JSON.parse(fields.content);\n          } catch (e) {\n            console.error(e);\n            throw new Meteor.Error('invalid-field-content');\n          }\n        }\n        const details = {\n          name: file.filename,\n          size: fileBuffer.length,\n          type: file.mimetype,\n          rid: this.urlParams.rid,\n          userId: this.userId,\n          content,\n          expiresAt\n        };\n        const stripExif = settings.get('Message_Attachments_Strip_Exif');\n        if (stripExif) {\n          // No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n          fileBuffer = await Media.stripExifFromBuffer(fileBuffer);\n        }\n        const fileStore = FileUpload.getStore('Uploads');\n        const uploadedFile = await fileStore.insert(details, fileBuffer);\n        uploadedFile.path = FileUpload.getPath(\"\".concat(uploadedFile._id, \"/\").concat(encodeURI(uploadedFile.name || '')));\n        await Uploads.updateFileComplete(uploadedFile._id, this.userId, omit(uploadedFile, '_id'));\n        return API.v1.success({\n          file: {\n            _id: uploadedFile._id,\n            url: uploadedFile.path\n          }\n        });\n      }\n    });\n    API.v1.addRoute('rooms.mediaConfirm/:rid/:fileId', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n          return API.v1.forbidden();\n        }\n        const file = await Uploads.findOneById(this.urlParams.fileId);\n        if (!file) {\n          throw new Meteor.Error('invalid-file');\n        }\n        file.description = this.bodyParams.description;\n        delete this.bodyParams.description;\n        await applyAirGappedRestrictionsValidation(() => sendFileMessage(this.userId, {\n          roomId: this.urlParams.rid,\n          file,\n          msgData: this.bodyParams\n        }, {\n          parseAttachmentsForE2EE: false\n        }));\n        await Uploads.confirmTemporaryFile(this.urlParams.fileId, this.userId);\n        const message = await Messages.getMessageByFileIdAndUsername(file._id, this.userId);\n        return API.v1.success({\n          message\n        });\n      }\n    });\n    API.v1.addRoute('rooms.saveNotification', {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          roomId,\n          notifications\n        } = this.bodyParams;\n        if (!roomId) {\n          return API.v1.failure(\"The 'roomId' param is required\");\n        }\n        if (!notifications || Object.keys(notifications).length === 0) {\n          return API.v1.failure(\"The 'notifications' param is required\");\n        }\n        await Promise.all(Object.keys(notifications).map(async notificationKey => Meteor.callAsync('saveNotificationSettings', roomId, notificationKey, notifications[notificationKey])));\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('rooms.favorite', {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          favorite\n        } = this.bodyParams;\n        if (!this.bodyParams.hasOwnProperty('favorite')) {\n          return API.v1.failure(\"The 'favorite' param is required\");\n        }\n        const room = await findRoomByIdOrName({\n          params: this.bodyParams\n        });\n        await Meteor.callAsync('toggleFavorite', room._id, favorite);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('rooms.cleanHistory', {\n      authRequired: true,\n      validateParams: isRoomsCleanHistoryProps\n    }, {\n      async post() {\n        const room = await findRoomByIdOrName({\n          params: this.bodyParams\n        });\n        const {\n          _id\n        } = room;\n        if (!room || !(await canAccessRoomAsync(room, {\n          _id: this.userId\n        }))) {\n          return API.v1.failure('User does not have access to the room [error-not-allowed]', 'error-not-allowed');\n        }\n        const {\n          latest,\n          oldest,\n          inclusive = false,\n          limit,\n          excludePinned,\n          filesOnly,\n          ignoreThreads,\n          ignoreDiscussion,\n          users\n        } = this.bodyParams;\n        if (!latest) {\n          return API.v1.failure('Body parameter \"latest\" is required.');\n        }\n        if (!oldest) {\n          return API.v1.failure('Body parameter \"oldest\" is required.');\n        }\n        const count = await Meteor.callAsync('cleanRoomHistory', {\n          roomId: _id,\n          latest: new Date(latest),\n          oldest: new Date(oldest),\n          inclusive,\n          limit,\n          excludePinned: [true, 'true', 1, '1'].includes(excludePinned !== null && excludePinned !== void 0 ? excludePinned : false),\n          filesOnly: [true, 'true', 1, '1'].includes(filesOnly !== null && filesOnly !== void 0 ? filesOnly : false),\n          ignoreThreads: [true, 'true', 1, '1'].includes(ignoreThreads !== null && ignoreThreads !== void 0 ? ignoreThreads : false),\n          ignoreDiscussion: [true, 'true', 1, '1'].includes(ignoreDiscussion !== null && ignoreDiscussion !== void 0 ? ignoreDiscussion : false),\n          fromUsers: users\n        });\n        return API.v1.success({\n          _id,\n          count\n        });\n      }\n    });\n    API.v1.addRoute('rooms.info', {\n      authRequired: true\n    }, {\n      async get() {\n        var _await$Rooms$findOneB;\n        const room = await findRoomByIdOrName({\n          params: this.queryParams\n        });\n        const {\n          fields\n        } = await this.parseJsonQuery();\n        if (!room || !(await canAccessRoomAsync(room, {\n          _id: this.userId\n        }))) {\n          return API.v1.failure('not-allowed', 'Not Allowed');\n        }\n        const discussionParent = room.prid && (await Rooms.findOneById(room.prid, {\n          projection: {\n            name: 1,\n            fname: 1,\n            t: 1,\n            prid: 1,\n            u: 1,\n            sidepanel: 1\n          }\n        }));\n        const {\n          team,\n          parentRoom\n        } = await Team.getRoomInfo(room);\n        const parent = discussionParent || parentRoom;\n        return API.v1.success(_objectSpread(_objectSpread({\n          room: (_await$Rooms$findOneB = await Rooms.findOneByIdOrName(room._id, {\n            projection: fields\n          })) !== null && _await$Rooms$findOneB !== void 0 ? _await$Rooms$findOneB : undefined\n        }, team && {\n          team\n        }), parent && {\n          parent\n        }));\n      }\n    });\n    API.v1.addRoute('rooms.leave', {\n      authRequired: true\n    }, {\n      async post() {\n        const room = await findRoomByIdOrName({\n          params: this.bodyParams\n        });\n        const user = await Users.findOneById(this.userId);\n        if (!user) {\n          return API.v1.failure('Invalid user');\n        }\n        await leaveRoomMethod(user, room._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('rooms.createDiscussion', {\n      authRequired: true\n    }, {\n      async post() {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        const {\n          prid,\n          pmid,\n          reply,\n          t_name,\n          users,\n          encrypted,\n          topic\n        } = this.bodyParams;\n        if (!prid) {\n          return API.v1.failure('Body parameter \"prid\" is required.');\n        }\n        if (!t_name) {\n          return API.v1.failure('Body parameter \"t_name\" is required.');\n        }\n        if (users && !Array.isArray(users)) {\n          return API.v1.failure('Body parameter \"users\" must be an array.');\n        }\n        if (encrypted !== undefined && typeof encrypted !== 'boolean') {\n          return API.v1.failure('Body parameter \"encrypted\" must be a boolean when included.');\n        }\n        const discussion = await applyAirGappedRestrictionsValidation(() => createDiscussion(this.userId, {\n          prid,\n          pmid,\n          t_name,\n          reply,\n          users: (users === null || users === void 0 ? void 0 : users.filter(isTruthy)) || [],\n          encrypted,\n          topic\n        }));\n        return API.v1.success({\n          discussion\n        });\n      }\n    });\n    API.v1.addRoute('rooms.getDiscussions', {\n      authRequired: true\n    }, {\n      async get() {\n        const room = await findRoomByIdOrName({\n          params: this.queryParams\n        });\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        if (!room || !(await canAccessRoomAsync(room, {\n          _id: this.userId\n        }))) {\n          return API.v1.failure('not-allowed', 'Not Allowed');\n        }\n        const ourQuery = Object.assign(query, {\n          prid: room._id\n        });\n        const {\n          cursor,\n          totalCount\n        } = await Rooms.findPaginated(ourQuery, {\n          sort: sort || {\n            fname: 1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [discussions, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          discussions,\n          count: discussions.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('rooms.images', {\n      authRequired: true,\n      validateParams: isRoomsImagesProps\n    }, {\n      async get() {\n        var _initialImage;\n        const room = await Rooms.findOneById(this.queryParams.roomId, {\n          projection: {\n            t: 1,\n            teamId: 1,\n            prid: 1\n          }\n        });\n        if (!room || !(await canAccessRoomAsync(room, {\n          _id: this.userId\n        }))) {\n          return API.v1.forbidden();\n        }\n        let initialImage = null;\n        if (this.queryParams.startingFromId) {\n          initialImage = await Uploads.findOneById(this.queryParams.startingFromId);\n        }\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          cursor,\n          totalCount\n        } = Uploads.findImagesByRoomId(room._id, (_initialImage = initialImage) === null || _initialImage === void 0 ? void 0 : _initialImage.uploadedAt, {\n          skip: offset,\n          limit: count\n        });\n        const [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n        // If the initial image was not returned in the query, insert it as the first element of the list\n        if (initialImage && !files.find(_ref2 => {\n          let {\n            _id\n          } = _ref2;\n          return _id === initialImage._id;\n        })) {\n          files.splice(0, 0, initialImage);\n        }\n        return API.v1.success({\n          files,\n          count,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('rooms.adminRooms', {\n      authRequired: true\n    }, {\n      async get() {\n        var _ref3;\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          types,\n          filter\n        } = this.queryParams;\n        return API.v1.success(await findAdminRooms({\n          uid: this.userId,\n          filter: filter || '',\n          types: (_ref3 = types && !Array.isArray(types) ? [types] : types) !== null && _ref3 !== void 0 ? _ref3 : [],\n          pagination: {\n            offset,\n            count,\n            sort\n          }\n        }));\n      }\n    });\n    API.v1.addRoute('rooms.autocomplete.adminRooms', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          selector\n        } = this.queryParams;\n        if (!selector) {\n          return API.v1.failure(\"The 'selector' param is required\");\n        }\n        return API.v1.success(await findAdminRoomsAutocomplete({\n          uid: this.userId,\n          selector: JSON.parse(selector)\n        }));\n      }\n    });\n    API.v1.addRoute('rooms.adminRooms.getRoom', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          rid\n        } = this.queryParams;\n        const room = await findAdminRoom({\n          uid: this.userId,\n          rid: rid || ''\n        });\n        if (!room) {\n          return API.v1.failure('not-allowed', 'Not Allowed');\n        }\n        return API.v1.success(room);\n      }\n    });\n    API.v1.addRoute('rooms.autocomplete.channelAndPrivate', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          selector\n        } = this.queryParams;\n        if (!selector) {\n          return API.v1.failure(\"The 'selector' param is required\");\n        }\n        return API.v1.success(await findChannelAndPrivateAutocomplete({\n          uid: this.userId,\n          selector: JSON.parse(selector)\n        }));\n      }\n    });\n    API.v1.addRoute('rooms.autocomplete.channelAndPrivate.withPagination', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          selector\n        } = this.queryParams;\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        if (!selector) {\n          return API.v1.failure(\"The 'selector' param is required\");\n        }\n        return API.v1.success(await findChannelAndPrivateAutocompleteWithPagination({\n          uid: this.userId,\n          selector: JSON.parse(selector),\n          pagination: {\n            offset,\n            count,\n            sort\n          }\n        }));\n      }\n    });\n    API.v1.addRoute('rooms.autocomplete.availableForTeams', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          name\n        } = this.queryParams;\n        if (name && typeof name !== 'string') {\n          return API.v1.failure(\"The 'name' param is invalid\");\n        }\n        return API.v1.success(await findRoomsAvailableForTeams({\n          uid: this.userId,\n          name: name || ''\n        }));\n      }\n    });\n    API.v1.addRoute('rooms.saveRoomSettings', {\n      authRequired: true\n    }, {\n      async post() {\n        const _this$bodyParams = this.bodyParams,\n          {\n            rid\n          } = _this$bodyParams,\n          params = _objectWithoutProperties(_this$bodyParams, _excluded);\n        const result = await saveRoomSettings(this.userId, rid, params);\n        return API.v1.success({\n          rid: result.rid\n        });\n      }\n    });\n    API.v1.addRoute('rooms.changeArchivationState', {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          rid,\n          action\n        } = this.bodyParams;\n        let result;\n        if (action === 'archive') {\n          result = await Meteor.callAsync('archiveRoom', rid);\n        } else {\n          result = await Meteor.callAsync('unarchiveRoom', rid);\n        }\n        return API.v1.success({\n          result\n        });\n      }\n    });\n    API.v1.addRoute('rooms.export', {\n      authRequired: true,\n      validateParams: isRoomsExportProps\n    }, {\n      async post() {\n        const {\n          rid,\n          type\n        } = this.bodyParams;\n        if (!(await hasPermissionAsync(this.userId, 'mail-messages', rid))) {\n          throw new Meteor.Error('error-action-not-allowed', 'Mailing is not allowed');\n        }\n        const room = await Rooms.findOneById(rid);\n        if (!room) {\n          throw new Meteor.Error('error-invalid-room');\n        }\n        const user = await Users.findOneById(this.userId);\n        if (!user || !(await canAccessRoomAsync(room, user))) {\n          throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n        }\n        if (type === 'file') {\n          const {\n            dateFrom,\n            dateTo\n          } = this.bodyParams;\n          const {\n            format\n          } = this.bodyParams;\n          const convertedDateFrom = dateFrom ? new Date(dateFrom) : new Date(0);\n          const convertedDateTo = dateTo ? new Date(dateTo) : new Date();\n          convertedDateTo.setDate(convertedDateTo.getDate() + 1);\n          if (convertedDateFrom > convertedDateTo) {\n            throw new Meteor.Error('error-invalid-dates', 'From date cannot be after To date');\n          }\n          void dataExport.sendFile({\n            rid,\n            format: format,\n            dateFrom: convertedDateFrom,\n            dateTo: convertedDateTo\n          }, user);\n          return API.v1.success();\n        }\n        if (type === 'email') {\n          const {\n            toUsers,\n            toEmails,\n            subject,\n            messages\n          } = this.bodyParams;\n          if ((!toUsers || toUsers.length === 0) && (!toEmails || toEmails.length === 0)) {\n            throw new Meteor.Error('error-invalid-recipient');\n          }\n          const result = await dataExport.sendViaEmail({\n            rid,\n            toUsers: toUsers || [],\n            toEmails: toEmails || [],\n            subject: subject || '',\n            messages: messages || [],\n            language: user.language || 'en'\n          }, user);\n          return API.v1.success(result);\n        }\n        return API.v1.failure();\n      }\n    });\n    API.v1.addRoute('rooms.isMember', {\n      authRequired: true,\n      validateParams: isRoomsIsMemberProps\n    }, {\n      async get() {\n        const {\n          roomId,\n          userId,\n          username\n        } = this.queryParams;\n        const [room, user] = await Promise.all([findRoomByIdOrName({\n          params: {\n            roomId\n          }\n        }), Users.findOneByIdOrUsername(userId || username)]);\n        if (!(user !== null && user !== void 0 && user._id)) {\n          return API.v1.failure('error-user-not-found');\n        }\n        if (await canAccessRoomAsync(room, {\n          _id: this.user._id\n        })) {\n          return API.v1.success({\n            isMember: (await Subscriptions.countByRoomIdAndUserId(room._id, user._id)) > 0\n          });\n        }\n        return API.v1.forbidden();\n      }\n    });\n    API.v1.addRoute('rooms.muteUser', {\n      authRequired: true,\n      validateParams: isRoomsMuteUnmuteUserProps\n    }, {\n      async post() {\n        const user = await getUserFromParams(this.bodyParams);\n        if (!user.username) {\n          return API.v1.failure('Invalid user');\n        }\n        await muteUserInRoom(this.userId, {\n          rid: this.bodyParams.roomId,\n          username: user.username\n        });\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('rooms.unmuteUser', {\n      authRequired: true,\n      validateParams: isRoomsMuteUnmuteUserProps\n    }, {\n      async post() {\n        const user = await getUserFromParams(this.bodyParams);\n        if (!user.username) {\n          return API.v1.failure('Invalid user');\n        }\n        await unmuteUserInRoom(this.userId, {\n          rid: this.bodyParams.roomId,\n          username: user.username\n        });\n        return API.v1.success();\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_excluded","export","findRoomByIdOrName","Media","Team","Messages","Rooms","Users","Uploads","Subscriptions","isGETRoomsNameExists","isRoomsImagesProps","isRoomsMuteUnmuteUserProps","isRoomsExportProps","isRoomsIsMemberProps","isRoomsCleanHistoryProps","Meteor","isTruthy","omit","dataExport","*","eraseRoom","muteUserInRoom","unmuteUserInRoom","canAccessRoomAsync","canAccessRoomIdAsync","hasPermissionAsync","saveRoomSettings","createDiscussion","FileUpload","sendFileMessage","leaveRoomMethod","applyAirGappedRestrictionsValidation","settings","API","composeRoomWithLastMessage","getPaginationItems","getUserFromParams","getUploadFormData","findAdminRoom","findAdminRooms","findAdminRoomsAutocomplete","findChannelAndPrivateAutocomplete","findChannelAndPrivateAutocompleteWithPagination","findRoomsAvailableForTeams","__reifyWaitForDeps__","_ref","params","checkedArchived","roomId","roomName","Error","projection","v1","defaultFieldsToExclude","room","findOneById","findOneByName","archived","concat","name","addRoute","authRequired","validateParams","get","queryParams","_id","success","exists","post","bodyParams","failure","userId","updatedSince","updatedSinceDate","isNaN","Date","parse","result","callAsync","Array","isArray","update","remove","Promise","all","map","deprecation","version","alternatives","urlParams","rid","forbidden","file","request","field","sizeLimit","fields","fileBuffer","details","filename","size","length","type","mimetype","stripExif","stripExifFromBuffer","fileStore","getStore","uploadedFile","insert","description","msgData","message","getMessageByFileIdAndUsername","expiresAt","setHours","getHours","content","JSON","e","console","error","path","getPath","encodeURI","updateFileComplete","url","fileId","parseAttachmentsForE2EE","confirmTemporaryFile","notifications","Object","keys","notificationKey","favorite","hasOwnProperty","latest","oldest","inclusive","limit","excludePinned","filesOnly","ignoreThreads","ignoreDiscussion","users","count","includes","fromUsers","_await$Rooms$findOneB","parseJsonQuery","discussionParent","prid","fname","t","u","sidepanel","team","parentRoom","getRoomInfo","parent","findOneByIdOrName","undefined","user","pmid","reply","t_name","encrypted","topic","discussion","filter","offset","sort","query","ourQuery","assign","cursor","totalCount","findPaginated","skip","discussions","total","toArray","_initialImage","teamId","initialImage","startingFromId","findImagesByRoomId","uploadedAt","files","find","_ref2","splice","_ref3","types","uid","pagination","selector","_this$bodyParams","action","dateFrom","dateTo","format","convertedDateFrom","convertedDateTo","setDate","getDate","sendFile","toUsers","toEmails","subject","messages","sendViaEmail","language","username","findOneByIdOrUsername","isMember","countByRoomIdAndUserId","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/rooms.ts"],"sourcesContent":["import { Media, Team } from '@rocket.chat/core-services';\nimport type { IRoom, IUpload } from '@rocket.chat/core-typings';\nimport { Messages, Rooms, Users, Uploads, Subscriptions } from '@rocket.chat/models';\nimport type { Notifications } from '@rocket.chat/rest-typings';\nimport {\n\tisGETRoomsNameExists,\n\tisRoomsImagesProps,\n\tisRoomsMuteUnmuteUserProps,\n\tisRoomsExportProps,\n\tisRoomsIsMemberProps,\n\tisRoomsCleanHistoryProps,\n} from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isTruthy } from '../../../../lib/isTruthy';\nimport { omit } from '../../../../lib/utils/omit';\nimport * as dataExport from '../../../../server/lib/dataExport';\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { muteUserInRoom } from '../../../../server/methods/muteUserInRoom';\nimport { unmuteUserInRoom } from '../../../../server/methods/unmuteUserInRoom';\nimport { canAccessRoomAsync, canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { createDiscussion } from '../../../discussion/server/methods/createDiscussion';\nimport { FileUpload } from '../../../file-upload/server';\nimport { sendFileMessage } from '../../../file-upload/server/methods/sendFileMessage';\nimport { leaveRoomMethod } from '../../../lib/server/methods/leaveRoom';\nimport { applyAirGappedRestrictionsValidation } from '../../../license/server/airGappedRestrictionsWrapper';\nimport { settings } from '../../../settings/server';\nimport { API } from '../api';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams } from '../helpers/getUserFromParams';\nimport { getUploadFormData } from '../lib/getUploadFormData';\nimport {\n\tfindAdminRoom,\n\tfindAdminRooms,\n\tfindAdminRoomsAutocomplete,\n\tfindChannelAndPrivateAutocomplete,\n\tfindChannelAndPrivateAutocompleteWithPagination,\n\tfindRoomsAvailableForTeams,\n} from '../lib/rooms';\n\nexport async function findRoomByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n}: {\n\tparams:\n\t\t| {\n\t\t\t\troomId?: string;\n\t\t  }\n\t\t| {\n\t\t\t\troomName?: string;\n\t\t  };\n\tcheckedArchived?: boolean;\n}): Promise<IRoom> {\n\tif (\n\t\t(!('roomId' in params) && !('roomName' in params)) ||\n\t\t('roomId' in params && !(params as { roomId?: string }).roomId && 'roomName' in params && !(params as { roomName?: string }).roomName)\n\t) {\n\t\tthrow new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t}\n\n\tconst projection = { ...API.v1.defaultFieldsToExclude };\n\n\tlet room;\n\tif ('roomId' in params) {\n\t\troom = await Rooms.findOneById(params.roomId || '', { projection });\n\t} else if ('roomName' in params) {\n\t\troom = await Rooms.findOneByName(params.roomName || '', { projection });\n\t}\n\n\tif (!room) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n\t}\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The channel, ${room.name}, is archived`);\n\t}\n\n\treturn room;\n}\n\nAPI.v1.addRoute(\n\t'rooms.nameExists',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isGETRoomsNameExists,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomName } = this.queryParams;\n\n\t\t\tconst room = await Rooms.findOneByName(roomName, { projection: { _id: 1 } });\n\n\t\t\treturn API.v1.success({ exists: !!room });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.delete',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure(\"The 'roomId' param is required\");\n\t\t\t}\n\n\t\t\tawait eraseRoom(roomId, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.get',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { updatedSince } = this.queryParams;\n\n\t\t\tlet updatedSinceDate;\n\t\t\tif (updatedSince) {\n\t\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t\t} else {\n\t\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet result: { update: IRoom[]; remove: IRoom[] } = await Meteor.callAsync('rooms/get', updatedSinceDate);\n\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\tresult = {\n\t\t\t\t\tupdate: result,\n\t\t\t\t\tremove: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tupdate: await Promise.all(result.update.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\tremove: await Promise.all(result.remove.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.upload/:rid',\n\t{\n\t\tauthRequired: true,\n\t\tdeprecation: {\n\t\t\tversion: '8.0.0',\n\t\t\talternatives: ['rooms.media'],\n\t\t},\n\t},\n\t{\n\t\tasync post() {\n\t\t\tif (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst file = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'file', sizeLimit: settings.get<number>('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-field');\n\t\t\t}\n\n\t\t\tconst { fields } = file;\n\t\t\tlet { fileBuffer } = file;\n\n\t\t\tconst details = {\n\t\t\t\tname: file.filename,\n\t\t\t\tsize: fileBuffer.length,\n\t\t\t\ttype: file.mimetype,\n\t\t\t\trid: this.urlParams.rid,\n\t\t\t\tuserId: this.userId,\n\t\t\t};\n\n\t\t\tconst stripExif = settings.get('Message_Attachments_Strip_Exif');\n\t\t\tif (stripExif) {\n\t\t\t\t// No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n\t\t\t\tfileBuffer = await Media.stripExifFromBuffer(fileBuffer);\n\t\t\t}\n\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tconst uploadedFile = await fileStore.insert(details, fileBuffer);\n\n\t\t\tuploadedFile.description = fields.description;\n\n\t\t\tdelete fields.description;\n\n\t\t\tawait applyAirGappedRestrictionsValidation(() =>\n\t\t\t\tsendFileMessage(this.userId, { roomId: this.urlParams.rid, file: uploadedFile, msgData: fields }),\n\t\t\t);\n\n\t\t\tconst message = await Messages.getMessageByFileIdAndUsername(uploadedFile._id, this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.media/:rid',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst file = await getUploadFormData(\n\t\t\t\t{\n\t\t\t\t\trequest: this.request,\n\t\t\t\t},\n\t\t\t\t{ field: 'file', sizeLimit: settings.get<number>('FileUpload_MaxFileSize') },\n\t\t\t);\n\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-field');\n\t\t\t}\n\n\t\t\tlet { fileBuffer } = file;\n\n\t\t\tconst expiresAt = new Date();\n\t\t\texpiresAt.setHours(expiresAt.getHours() + 24);\n\n\t\t\tconst { fields } = file;\n\n\t\t\tlet content;\n\n\t\t\tif (fields.content) {\n\t\t\t\ttry {\n\t\t\t\t\tcontent = JSON.parse(fields.content);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tthrow new Meteor.Error('invalid-field-content');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst details = {\n\t\t\t\tname: file.filename,\n\t\t\t\tsize: fileBuffer.length,\n\t\t\t\ttype: file.mimetype,\n\t\t\t\trid: this.urlParams.rid,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcontent,\n\t\t\t\texpiresAt,\n\t\t\t};\n\n\t\t\tconst stripExif = settings.get('Message_Attachments_Strip_Exif');\n\t\t\tif (stripExif) {\n\t\t\t\t// No need to check mime. Library will ignore any files without exif/xmp tags (like BMP, ico, PDF, etc)\n\t\t\t\tfileBuffer = await Media.stripExifFromBuffer(fileBuffer);\n\t\t\t}\n\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\t\t\tconst uploadedFile = await fileStore.insert(details, fileBuffer);\n\n\t\t\tuploadedFile.path = FileUpload.getPath(`${uploadedFile._id}/${encodeURI(uploadedFile.name || '')}`);\n\n\t\t\tawait Uploads.updateFileComplete(uploadedFile._id, this.userId, omit(uploadedFile, '_id'));\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfile: {\n\t\t\t\t\t_id: uploadedFile._id,\n\t\t\t\t\turl: uploadedFile.path,\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.mediaConfirm/:rid/:fileId',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!(await canAccessRoomIdAsync(this.urlParams.rid, this.userId))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst file = await Uploads.findOneById(this.urlParams.fileId);\n\n\t\t\tif (!file) {\n\t\t\t\tthrow new Meteor.Error('invalid-file');\n\t\t\t}\n\n\t\t\tfile.description = this.bodyParams.description;\n\t\t\tdelete this.bodyParams.description;\n\n\t\t\tawait applyAirGappedRestrictionsValidation(() =>\n\t\t\t\tsendFileMessage(this.userId, { roomId: this.urlParams.rid, file, msgData: this.bodyParams }, { parseAttachmentsForE2EE: false }),\n\t\t\t);\n\n\t\t\tawait Uploads.confirmTemporaryFile(this.urlParams.fileId, this.userId);\n\n\t\t\tconst message = await Messages.getMessageByFileIdAndUsername(file._id, this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.saveNotification',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId, notifications } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure(\"The 'roomId' param is required\");\n\t\t\t}\n\n\t\t\tif (!notifications || Object.keys(notifications).length === 0) {\n\t\t\t\treturn API.v1.failure(\"The 'notifications' param is required\");\n\t\t\t}\n\n\t\t\tawait Promise.all(\n\t\t\t\tObject.keys(notifications as Notifications).map(async (notificationKey) =>\n\t\t\t\t\tMeteor.callAsync('saveNotificationSettings', roomId, notificationKey, notifications[notificationKey as keyof Notifications]),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.favorite',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { favorite } = this.bodyParams;\n\n\t\t\tif (!this.bodyParams.hasOwnProperty('favorite')) {\n\t\t\t\treturn API.v1.failure(\"The 'favorite' param is required\");\n\t\t\t}\n\n\t\t\tconst room = await findRoomByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait Meteor.callAsync('toggleFavorite', room._id, favorite);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.cleanHistory',\n\t{ authRequired: true, validateParams: isRoomsCleanHistoryProps },\n\t{\n\t\tasync post() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.bodyParams });\n\t\t\tconst { _id } = room;\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.failure('User does not have access to the room [error-not-allowed]', 'error-not-allowed');\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tlatest,\n\t\t\t\toldest,\n\t\t\t\tinclusive = false,\n\t\t\t\tlimit,\n\t\t\t\texcludePinned,\n\t\t\t\tfilesOnly,\n\t\t\t\tignoreThreads,\n\t\t\t\tignoreDiscussion,\n\t\t\t\tusers,\n\t\t\t} = this.bodyParams;\n\n\t\t\tif (!latest) {\n\t\t\t\treturn API.v1.failure('Body parameter \"latest\" is required.');\n\t\t\t}\n\n\t\t\tif (!oldest) {\n\t\t\t\treturn API.v1.failure('Body parameter \"oldest\" is required.');\n\t\t\t}\n\n\t\t\tconst count = await Meteor.callAsync('cleanRoomHistory', {\n\t\t\t\troomId: _id,\n\t\t\t\tlatest: new Date(latest),\n\t\t\t\toldest: new Date(oldest),\n\t\t\t\tinclusive,\n\t\t\t\tlimit,\n\t\t\t\texcludePinned: [true, 'true', 1, '1'].includes(excludePinned ?? false),\n\t\t\t\tfilesOnly: [true, 'true', 1, '1'].includes(filesOnly ?? false),\n\t\t\t\tignoreThreads: [true, 'true', 1, '1'].includes(ignoreThreads ?? false),\n\t\t\t\tignoreDiscussion: [true, 'true', 1, '1'].includes(ignoreDiscussion ?? false),\n\t\t\t\tfromUsers: users,\n\t\t\t});\n\n\t\t\treturn API.v1.success({ _id, count });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.info',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.queryParams });\n\t\t\tconst { fields } = await this.parseJsonQuery();\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst discussionParent =\n\t\t\t\troom.prid &&\n\t\t\t\t(await Rooms.findOneById<Pick<IRoom, 'name' | 'fname' | 't' | 'prid' | 'u'>>(room.prid, {\n\t\t\t\t\tprojection: { name: 1, fname: 1, t: 1, prid: 1, u: 1, sidepanel: 1 },\n\t\t\t\t}));\n\t\t\tconst { team, parentRoom } = await Team.getRoomInfo(room);\n\t\t\tconst parent = discussionParent || parentRoom;\n\n\t\t\treturn API.v1.success({\n\t\t\t\troom: (await Rooms.findOneByIdOrName(room._id, { projection: fields })) ?? undefined,\n\t\t\t\t...(team && { team }),\n\t\t\t\t...(parent && { parent }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.leave',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.bodyParams });\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\t\t\tawait leaveRoomMethod(user, room._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.createDiscussion',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t\tconst { prid, pmid, reply, t_name, users, encrypted, topic } = this.bodyParams;\n\t\t\tif (!prid) {\n\t\t\t\treturn API.v1.failure('Body parameter \"prid\" is required.');\n\t\t\t}\n\t\t\tif (!t_name) {\n\t\t\t\treturn API.v1.failure('Body parameter \"t_name\" is required.');\n\t\t\t}\n\t\t\tif (users && !Array.isArray(users)) {\n\t\t\t\treturn API.v1.failure('Body parameter \"users\" must be an array.');\n\t\t\t}\n\n\t\t\tif (encrypted !== undefined && typeof encrypted !== 'boolean') {\n\t\t\t\treturn API.v1.failure('Body parameter \"encrypted\" must be a boolean when included.');\n\t\t\t}\n\n\t\t\tconst discussion = await applyAirGappedRestrictionsValidation(() =>\n\t\t\t\tcreateDiscussion(this.userId, {\n\t\t\t\t\tprid,\n\t\t\t\t\tpmid,\n\t\t\t\t\tt_name,\n\t\t\t\t\treply,\n\t\t\t\t\tusers: users?.filter(isTruthy) || [],\n\t\t\t\t\tencrypted,\n\t\t\t\t\ttopic,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({ discussion });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.getDiscussions',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst room = await findRoomByIdOrName({ params: this.queryParams });\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst ourQuery = Object.assign(query, { prid: room._id });\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { fname: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [discussions, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdiscussions,\n\t\t\t\tcount: discussions.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.images',\n\t{ authRequired: true, validateParams: isRoomsImagesProps },\n\t{\n\t\tasync get() {\n\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 't' | 'teamId' | 'prid'>>(this.queryParams.roomId, {\n\t\t\t\tprojection: { t: 1, teamId: 1, prid: 1 },\n\t\t\t});\n\n\t\t\tif (!room || !(await canAccessRoomAsync(room, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tlet initialImage: IUpload | null = null;\n\t\t\tif (this.queryParams.startingFromId) {\n\t\t\t\tinitialImage = await Uploads.findOneById(this.queryParams.startingFromId);\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { cursor, totalCount } = Uploads.findImagesByRoomId(room._id, initialImage?.uploadedAt, {\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\t// If the initial image was not returned in the query, insert it as the first element of the list\n\t\t\tif (initialImage && !files.find(({ _id }) => _id === (initialImage as IUpload)._id)) {\n\t\t\t\tfiles.splice(0, 0, initialImage);\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles,\n\t\t\t\tcount,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.adminRooms',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { types, filter } = this.queryParams;\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findAdminRooms({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tfilter: filter || '',\n\t\t\t\t\ttypes: (types && !Array.isArray(types) ? [types] : types) ?? [],\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.adminRooms',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findAdminRoomsAutocomplete({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.adminRooms.getRoom',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid } = this.queryParams;\n\t\t\tconst room = await findAdminRoom({\n\t\t\t\tuid: this.userId,\n\t\t\t\trid: rid || '',\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\treturn API.v1.success(room);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.channelAndPrivate',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findChannelAndPrivateAutocomplete({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.channelAndPrivate.withPagination',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { selector } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tif (!selector) {\n\t\t\t\treturn API.v1.failure(\"The 'selector' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findChannelAndPrivateAutocompleteWithPagination({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tselector: JSON.parse(selector),\n\t\t\t\t\tpagination: {\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tsort,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.autocomplete.availableForTeams',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { name } = this.queryParams;\n\n\t\t\tif (name && typeof name !== 'string') {\n\t\t\t\treturn API.v1.failure(\"The 'name' param is invalid\");\n\t\t\t}\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait findRoomsAvailableForTeams({\n\t\t\t\t\tuid: this.userId,\n\t\t\t\t\tname: name || '',\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.saveRoomSettings',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, ...params } = this.bodyParams;\n\n\t\t\tconst result = await saveRoomSettings(this.userId, rid, params);\n\n\t\t\treturn API.v1.success({ rid: result.rid });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.changeArchivationState',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, action } = this.bodyParams;\n\n\t\t\tlet result;\n\t\t\tif (action === 'archive') {\n\t\t\t\tresult = await Meteor.callAsync('archiveRoom', rid);\n\t\t\t} else {\n\t\t\t\tresult = await Meteor.callAsync('unarchiveRoom', rid);\n\t\t\t}\n\n\t\t\treturn API.v1.success({ result });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.export',\n\t{ authRequired: true, validateParams: isRoomsExportProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, type } = this.bodyParams;\n\n\t\t\tif (!(await hasPermissionAsync(this.userId, 'mail-messages', rid))) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Mailing is not allowed');\n\t\t\t}\n\n\t\t\tconst room = await Rooms.findOneById(rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tconst user = await Users.findOneById(this.userId);\n\n\t\t\tif (!user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tif (type === 'file') {\n\t\t\t\tconst { dateFrom, dateTo } = this.bodyParams;\n\t\t\t\tconst { format } = this.bodyParams;\n\n\t\t\t\tconst convertedDateFrom = dateFrom ? new Date(dateFrom) : new Date(0);\n\t\t\t\tconst convertedDateTo = dateTo ? new Date(dateTo) : new Date();\n\t\t\t\tconvertedDateTo.setDate(convertedDateTo.getDate() + 1);\n\n\t\t\t\tif (convertedDateFrom > convertedDateTo) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-dates', 'From date cannot be after To date');\n\t\t\t\t}\n\n\t\t\t\tvoid dataExport.sendFile(\n\t\t\t\t\t{\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tformat: format as 'html' | 'json',\n\t\t\t\t\t\tdateFrom: convertedDateFrom,\n\t\t\t\t\t\tdateTo: convertedDateTo,\n\t\t\t\t\t},\n\t\t\t\t\tuser,\n\t\t\t\t);\n\t\t\t\treturn API.v1.success();\n\t\t\t}\n\n\t\t\tif (type === 'email') {\n\t\t\t\tconst { toUsers, toEmails, subject, messages } = this.bodyParams;\n\n\t\t\t\tif ((!toUsers || toUsers.length === 0) && (!toEmails || toEmails.length === 0)) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-recipient');\n\t\t\t\t}\n\n\t\t\t\tconst result = await dataExport.sendViaEmail(\n\t\t\t\t\t{\n\t\t\t\t\t\trid,\n\t\t\t\t\t\ttoUsers: (toUsers as string[]) || [],\n\t\t\t\t\t\ttoEmails: toEmails || [],\n\t\t\t\t\t\tsubject: subject || '',\n\t\t\t\t\t\tmessages: messages || [],\n\t\t\t\t\t\tlanguage: user.language || 'en',\n\t\t\t\t\t},\n\t\t\t\t\tuser,\n\t\t\t\t);\n\n\t\t\t\treturn API.v1.success(result);\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.isMember',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isRoomsIsMemberProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, userId, username } = this.queryParams;\n\t\t\tconst [room, user] = await Promise.all([\n\t\t\t\tfindRoomByIdOrName({\n\t\t\t\t\tparams: { roomId },\n\t\t\t\t}) as Promise<IRoom>,\n\t\t\t\tUsers.findOneByIdOrUsername(userId || username),\n\t\t\t]);\n\n\t\t\tif (!user?._id) {\n\t\t\t\treturn API.v1.failure('error-user-not-found');\n\t\t\t}\n\n\t\t\tif (await canAccessRoomAsync(room, { _id: this.user._id })) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tisMember: (await Subscriptions.countByRoomIdAndUserId(room._id, user._id)) > 0,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn API.v1.forbidden();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.muteUser',\n\t{ authRequired: true, validateParams: isRoomsMuteUnmuteUserProps },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tif (!user.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait muteUserInRoom(this.userId, { rid: this.bodyParams.roomId, username: user.username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'rooms.unmuteUser',\n\t{ authRequired: true, validateParams: isRoomsMuteUnmuteUserProps },\n\t{\n\t\tasync post() {\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tif (!user.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait unmuteUserInRoom(this.userId, { rid: this.bodyParams.roomId, username: user.username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"a813b8176c2c9fb23dcc86054fb502279aa3a49b"}
