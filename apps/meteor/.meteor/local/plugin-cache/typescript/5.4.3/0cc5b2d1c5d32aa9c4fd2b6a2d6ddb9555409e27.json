{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/2fa/server/code/EmailCheck.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/2fa/server/code/EmailCheck.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/2fa/server/code/EmailCheck.ts","inputSourceMap":{"version":3,"file":"app/2fa/server/code/EmailCheck.ts","sourceRoot":"","sources":["app/2fa/server/code/EmailCheck.ts"],"names":[],"mappings":"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","sourcesContent":["import { isOAuthUser, type IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport bcrypt from 'bcrypt';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport * as Mailer from '../../../mailer/server/api';\nimport { settings } from '../../../settings/server';\nimport type { ICodeCheck, IProcessInvalidCodeResult } from './ICodeCheck';\n\nexport class EmailCheck implements ICodeCheck {\n\tpublic readonly name = 'email';\n\n\tprivate getUserVerifiedEmails(user: IUser): string[] {\n\t\tif (!Array.isArray(user.emails)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn user.emails.filter(({ verified }) => verified).map((e) => e.address);\n\t}\n\n\tpublic isEnabled(user: IUser): boolean {\n\t\tif (!settings.get('Accounts_TwoFactorAuthentication_By_Email_Enabled')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!settings.get('Accounts_twoFactorAuthentication_email_available_for_OAuth_users') && isOAuthUser(user)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!user.services?.email2fa?.enabled) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.getUserVerifiedEmails(user).length > 0;\n\t}\n\n\tprivate async send2FAEmail(address: string, random: string, user: IUser): Promise<void> {\n\t\tconst language = user.language || settings.get('Language') || 'en';\n\n\t\tconst t = i18n.getFixedT(language);\n\n\t\tawait Mailer.send({\n\t\t\tto: address,\n\t\t\tfrom: settings.get('From_Email'),\n\t\t\tsubject: 'Authentication code',\n\t\t\treplyTo: undefined,\n\t\t\tdata: {\n\t\t\t\tcode: random.replace(/^(\\d{3})/, '$1-'),\n\t\t\t},\n\t\t\theaders: undefined,\n\t\t\ttext: `\n${t('Here_is_your_authentication_code')}\n\n__code__\n\n${t('Do_not_provide_this_code_to_anyone')}\n${t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email')}\n`,\n\t\t\thtml: `\n\t\t\t\t<p>${t('Here_is_your_authentication_code')}</p>\n\t\t\t\t<p style=\"font-size: 30px;\">\n\t\t\t\t\t<b>__code__</b>\n\t\t\t\t</p>\n\t\t\t\t<p>${t('Do_not_provide_this_code_to_anyone')}</p>\n\t\t\t\t<p>${t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email')}</p>\n\t\t\t`,\n\t\t});\n\t}\n\n\tpublic async verify(user: IUser, codeFromEmail: string): Promise<boolean> {\n\t\tif (!this.isEnabled(user)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!user.services?.emailCode) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove non digits\n\t\tcodeFromEmail = codeFromEmail.replace(/([^\\d])/g, '');\n\n\t\tconst { code, expire } = user.services.emailCode;\n\n\t\tif (expire < new Date()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (await bcrypt.compare(codeFromEmail, code)) {\n\t\t\tawait Users.removeEmailCodeOfUserId(user._id);\n\t\t\treturn true;\n\t\t}\n\n\t\tawait Users.incrementInvalidEmailCodeAttempt(user._id);\n\n\t\treturn false;\n\t}\n\n\tpublic async sendEmailCode(user: IUser): Promise<void> {\n\t\tconst emails = this.getUserVerifiedEmails(user);\n\t\tconst random = Random._randomString(6, '0123456789');\n\t\tconst encryptedRandom = await bcrypt.hash(random, Accounts._bcryptRounds());\n\t\tconst expire = new Date();\n\t\tconst expirationInSeconds = parseInt(settings.get('Accounts_TwoFactorAuthentication_By_Email_Code_Expiration') as string, 10);\n\n\t\texpire.setSeconds(expire.getSeconds() + expirationInSeconds);\n\n\t\tawait Users.addEmailCodeByUserId(user._id, encryptedRandom, expire);\n\n\t\tfor await (const address of emails) {\n\t\t\tawait this.send2FAEmail(address, random, user);\n\t\t}\n\t}\n\n\tpublic async processInvalidCode(user: IUser): Promise<IProcessInvalidCodeResult> {\n\t\tawait Users.removeExpiredEmailCodeOfUserId(user._id);\n\n\t\t// Generate new code if the there isn't any code with more than 5 minutes to expire\n\t\tconst expireWithDelta = new Date();\n\t\texpireWithDelta.setMinutes(expireWithDelta.getMinutes() - 5);\n\n\t\tconst emails = this.getUserVerifiedEmails(user);\n\n\t\tconst emailOrUsername = user.username || emails[0];\n\n\t\tconst hasValidCode =\n\t\t\tuser.services?.emailCode?.expire &&\n\t\t\tuser.services?.emailCode?.expire > expireWithDelta &&\n\t\t\t!(await this.maxFaildedAttemtpsReached(user));\n\t\tif (hasValidCode) {\n\t\t\treturn {\n\t\t\t\temailOrUsername,\n\t\t\t\tcodeGenerated: false,\n\t\t\t\tcodeExpires: user.services?.emailCode?.expire,\n\t\t\t};\n\t\t}\n\n\t\tawait this.sendEmailCode(user);\n\n\t\treturn {\n\t\t\tcodeGenerated: true,\n\t\t\temailOrUsername,\n\t\t};\n\t}\n\n\tpublic async maxFaildedAttemtpsReached(user: IUser) {\n\t\tconst maxAttempts = settings.get<number>('Accounts_TwoFactorAuthentication_Max_Invalid_Email_Code_Attempts');\n\t\treturn (await Users.maxInvalidEmailCodeAttemptsReached(user._id, maxAttempts)) as boolean;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/2fa/server/code/EmailCheck.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/2fa/server/code/EmailCheck.ts","inputSourceMap":{"version":3,"file":"app/2fa/server/code/EmailCheck.ts","sourceRoot":"","sources":["app/2fa/server/code/EmailCheck.ts"],"names":[],"mappings":"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","sourcesContent":["import { isOAuthUser, type IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport bcrypt from 'bcrypt';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport * as Mailer from '../../../mailer/server/api';\nimport { settings } from '../../../settings/server';\nimport type { ICodeCheck, IProcessInvalidCodeResult } from './ICodeCheck';\n\nexport class EmailCheck implements ICodeCheck {\n\tpublic readonly name = 'email';\n\n\tprivate getUserVerifiedEmails(user: IUser): string[] {\n\t\tif (!Array.isArray(user.emails)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn user.emails.filter(({ verified }) => verified).map((e) => e.address);\n\t}\n\n\tpublic isEnabled(user: IUser): boolean {\n\t\tif (!settings.get('Accounts_TwoFactorAuthentication_By_Email_Enabled')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!settings.get('Accounts_twoFactorAuthentication_email_available_for_OAuth_users') && isOAuthUser(user)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!user.services?.email2fa?.enabled) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.getUserVerifiedEmails(user).length > 0;\n\t}\n\n\tprivate async send2FAEmail(address: string, random: string, user: IUser): Promise<void> {\n\t\tconst language = user.language || settings.get('Language') || 'en';\n\n\t\tconst t = i18n.getFixedT(language);\n\n\t\tawait Mailer.send({\n\t\t\tto: address,\n\t\t\tfrom: settings.get('From_Email'),\n\t\t\tsubject: 'Authentication code',\n\t\t\treplyTo: undefined,\n\t\t\tdata: {\n\t\t\t\tcode: random.replace(/^(\\d{3})/, '$1-'),\n\t\t\t},\n\t\t\theaders: undefined,\n\t\t\ttext: `\n${t('Here_is_your_authentication_code')}\n\n__code__\n\n${t('Do_not_provide_this_code_to_anyone')}\n${t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email')}\n`,\n\t\t\thtml: `\n\t\t\t\t<p>${t('Here_is_your_authentication_code')}</p>\n\t\t\t\t<p style=\"font-size: 30px;\">\n\t\t\t\t\t<b>__code__</b>\n\t\t\t\t</p>\n\t\t\t\t<p>${t('Do_not_provide_this_code_to_anyone')}</p>\n\t\t\t\t<p>${t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email')}</p>\n\t\t\t`,\n\t\t});\n\t}\n\n\tpublic async verify(user: IUser, codeFromEmail: string): Promise<boolean> {\n\t\tif (!this.isEnabled(user)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!user.services?.emailCode) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove non digits\n\t\tcodeFromEmail = codeFromEmail.replace(/([^\\d])/g, '');\n\n\t\tconst { code, expire } = user.services.emailCode;\n\n\t\tif (expire < new Date()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (await bcrypt.compare(codeFromEmail, code)) {\n\t\t\tawait Users.removeEmailCodeOfUserId(user._id);\n\t\t\treturn true;\n\t\t}\n\n\t\tawait Users.incrementInvalidEmailCodeAttempt(user._id);\n\n\t\treturn false;\n\t}\n\n\tpublic async sendEmailCode(user: IUser): Promise<void> {\n\t\tconst emails = this.getUserVerifiedEmails(user);\n\t\tconst random = Random._randomString(6, '0123456789');\n\t\tconst encryptedRandom = await bcrypt.hash(random, Accounts._bcryptRounds());\n\t\tconst expire = new Date();\n\t\tconst expirationInSeconds = parseInt(settings.get('Accounts_TwoFactorAuthentication_By_Email_Code_Expiration') as string, 10);\n\n\t\texpire.setSeconds(expire.getSeconds() + expirationInSeconds);\n\n\t\tawait Users.addEmailCodeByUserId(user._id, encryptedRandom, expire);\n\n\t\tfor await (const address of emails) {\n\t\t\tawait this.send2FAEmail(address, random, user);\n\t\t}\n\t}\n\n\tpublic async processInvalidCode(user: IUser): Promise<IProcessInvalidCodeResult> {\n\t\tawait Users.removeExpiredEmailCodeOfUserId(user._id);\n\n\t\t// Generate new code if the there isn't any code with more than 5 minutes to expire\n\t\tconst expireWithDelta = new Date();\n\t\texpireWithDelta.setMinutes(expireWithDelta.getMinutes() - 5);\n\n\t\tconst emails = this.getUserVerifiedEmails(user);\n\n\t\tconst emailOrUsername = user.username || emails[0];\n\n\t\tconst hasValidCode =\n\t\t\tuser.services?.emailCode?.expire &&\n\t\t\tuser.services?.emailCode?.expire > expireWithDelta &&\n\t\t\t!(await this.maxFaildedAttemtpsReached(user));\n\t\tif (hasValidCode) {\n\t\t\treturn {\n\t\t\t\temailOrUsername,\n\t\t\t\tcodeGenerated: false,\n\t\t\t\tcodeExpires: user.services?.emailCode?.expire,\n\t\t\t};\n\t\t}\n\n\t\tawait this.sendEmailCode(user);\n\n\t\treturn {\n\t\t\tcodeGenerated: true,\n\t\t\temailOrUsername,\n\t\t};\n\t}\n\n\tpublic async maxFaildedAttemtpsReached(user: IUser) {\n\t\tconst maxAttempts = settings.get<number>('Accounts_TwoFactorAuthentication_Max_Invalid_Email_Code_Attempts');\n\t\treturn (await Users.maxInvalidEmailCodeAttemptsReached(user._id, maxAttempts)) as boolean;\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      EmailCheck: () => EmailCheck\n    });\n    let isOAuthUser;\n    module.link(\"@rocket.chat/core-typings\", {\n      isOAuthUser(v) {\n        isOAuthUser = v;\n      }\n    }, 0);\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 2);\n    let bcrypt;\n    module.link(\"bcrypt\", {\n      default(v) {\n        bcrypt = v;\n      }\n    }, 3);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 4);\n    let i18n;\n    module.link(\"../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 5);\n    let Mailer;\n    module.link(\"../../../mailer/server/api\", {\n      \"*\"(v) {\n        Mailer = v;\n      }\n    }, 6);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class EmailCheck {\n      constructor() {\n        this.name = 'email';\n      }\n      getUserVerifiedEmails(user) {\n        if (!Array.isArray(user.emails)) {\n          return [];\n        }\n        return user.emails.filter(_ref => {\n          let {\n            verified\n          } = _ref;\n          return verified;\n        }).map(e => e.address);\n      }\n      isEnabled(user) {\n        var _user$services, _user$services$email;\n        if (!settings.get('Accounts_TwoFactorAuthentication_By_Email_Enabled')) {\n          return false;\n        }\n        if (!settings.get('Accounts_twoFactorAuthentication_email_available_for_OAuth_users') && isOAuthUser(user)) {\n          return false;\n        }\n        if (!((_user$services = user.services) !== null && _user$services !== void 0 && (_user$services$email = _user$services.email2fa) !== null && _user$services$email !== void 0 && _user$services$email.enabled)) {\n          return false;\n        }\n        return this.getUserVerifiedEmails(user).length > 0;\n      }\n      async send2FAEmail(address, random, user) {\n        const language = user.language || settings.get('Language') || 'en';\n        const t = i18n.getFixedT(language);\n        await Mailer.send({\n          to: address,\n          from: settings.get('From_Email'),\n          subject: 'Authentication code',\n          replyTo: undefined,\n          data: {\n            code: random.replace(/^(\\d{3})/, '$1-')\n          },\n          headers: undefined,\n          text: \"\\n\".concat(t('Here_is_your_authentication_code'), \"\\n\\n__code__\\n\\n\").concat(t('Do_not_provide_this_code_to_anyone'), \"\\n\").concat(t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email'), \"\\n\"),\n          html: \"\\n\\t\\t\\t\\t<p>\".concat(t('Here_is_your_authentication_code'), \"</p>\\n\\t\\t\\t\\t<p style=\\\"font-size: 30px;\\\">\\n\\t\\t\\t\\t\\t<b>__code__</b>\\n\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t<p>\").concat(t('Do_not_provide_this_code_to_anyone'), \"</p>\\n\\t\\t\\t\\t<p>\").concat(t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email'), \"</p>\\n\\t\\t\\t\")\n        });\n      }\n      async verify(user, codeFromEmail) {\n        var _user$services2;\n        if (!this.isEnabled(user)) {\n          return false;\n        }\n        if (!((_user$services2 = user.services) !== null && _user$services2 !== void 0 && _user$services2.emailCode)) {\n          return false;\n        }\n        // Remove non digits\n        codeFromEmail = codeFromEmail.replace(/([^\\d])/g, '');\n        const {\n          code,\n          expire\n        } = user.services.emailCode;\n        if (expire < new Date()) {\n          return false;\n        }\n        if (await bcrypt.compare(codeFromEmail, code)) {\n          await Users.removeEmailCodeOfUserId(user._id);\n          return true;\n        }\n        await Users.incrementInvalidEmailCodeAttempt(user._id);\n        return false;\n      }\n      async sendEmailCode(user) {\n        const emails = this.getUserVerifiedEmails(user);\n        const random = Random._randomString(6, '0123456789');\n        const encryptedRandom = await bcrypt.hash(random, Accounts._bcryptRounds());\n        const expire = new Date();\n        const expirationInSeconds = parseInt(settings.get('Accounts_TwoFactorAuthentication_By_Email_Code_Expiration'), 10);\n        expire.setSeconds(expire.getSeconds() + expirationInSeconds);\n        await Users.addEmailCodeByUserId(user._id, encryptedRandom, expire);\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(emails), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const address = _step.value;\n            {\n              await this.send2FAEmail(address, random, user);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      async processInvalidCode(user) {\n        var _user$services3, _user$services3$email, _user$services4, _user$services4$email;\n        await Users.removeExpiredEmailCodeOfUserId(user._id);\n        // Generate new code if the there isn't any code with more than 5 minutes to expire\n        const expireWithDelta = new Date();\n        expireWithDelta.setMinutes(expireWithDelta.getMinutes() - 5);\n        const emails = this.getUserVerifiedEmails(user);\n        const emailOrUsername = user.username || emails[0];\n        const hasValidCode = ((_user$services3 = user.services) === null || _user$services3 === void 0 ? void 0 : (_user$services3$email = _user$services3.emailCode) === null || _user$services3$email === void 0 ? void 0 : _user$services3$email.expire) && ((_user$services4 = user.services) === null || _user$services4 === void 0 ? void 0 : (_user$services4$email = _user$services4.emailCode) === null || _user$services4$email === void 0 ? void 0 : _user$services4$email.expire) > expireWithDelta && !(await this.maxFaildedAttemtpsReached(user));\n        if (hasValidCode) {\n          var _user$services5, _user$services5$email;\n          return {\n            emailOrUsername,\n            codeGenerated: false,\n            codeExpires: (_user$services5 = user.services) === null || _user$services5 === void 0 ? void 0 : (_user$services5$email = _user$services5.emailCode) === null || _user$services5$email === void 0 ? void 0 : _user$services5$email.expire\n          };\n        }\n        await this.sendEmailCode(user);\n        return {\n          codeGenerated: true,\n          emailOrUsername\n        };\n      }\n      async maxFaildedAttemtpsReached(user) {\n        const maxAttempts = settings.get('Accounts_TwoFactorAuthentication_Max_Invalid_Email_Code_Attempts');\n        return await Users.maxInvalidEmailCodeAttemptsReached(user._id, maxAttempts);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","EmailCheck","isOAuthUser","Users","Random","bcrypt","Accounts","i18n","Mailer","*","settings","__reifyWaitForDeps__","constructor","name","getUserVerifiedEmails","user","Array","isArray","emails","filter","_ref","verified","map","e","address","isEnabled","_user$services","_user$services$email","get","services","email2fa","enabled","length","send2FAEmail","random","language","t","getFixedT","send","to","from","subject","replyTo","undefined","data","code","replace","headers","text","concat","html","verify","codeFromEmail","_user$services2","emailCode","expire","Date","compare","removeEmailCodeOfUserId","_id","incrementInvalidEmailCodeAttempt","sendEmailCode","_randomString","encryptedRandom","hash","_bcryptRounds","expirationInSeconds","parseInt","setSeconds","getSeconds","addEmailCodeByUserId","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","err","return","processInvalidCode","_user$services3","_user$services3$email","_user$services4","_user$services4$email","removeExpiredEmailCodeOfUserId","expireWithDelta","setMinutes","getMinutes","emailOrUsername","username","hasValidCode","maxFaildedAttemtpsReached","_user$services5","_user$services5$email","codeGenerated","codeExpires","maxAttempts","maxInvalidEmailCodeAttemptsReached","__reify_async_result__","_reifyError","self","async"],"sources":["app/2fa/server/code/EmailCheck.ts"],"sourcesContent":["import { isOAuthUser, type IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport bcrypt from 'bcrypt';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport * as Mailer from '../../../mailer/server/api';\nimport { settings } from '../../../settings/server';\nimport type { ICodeCheck, IProcessInvalidCodeResult } from './ICodeCheck';\n\nexport class EmailCheck implements ICodeCheck {\n\tpublic readonly name = 'email';\n\n\tprivate getUserVerifiedEmails(user: IUser): string[] {\n\t\tif (!Array.isArray(user.emails)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn user.emails.filter(({ verified }) => verified).map((e) => e.address);\n\t}\n\n\tpublic isEnabled(user: IUser): boolean {\n\t\tif (!settings.get('Accounts_TwoFactorAuthentication_By_Email_Enabled')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!settings.get('Accounts_twoFactorAuthentication_email_available_for_OAuth_users') && isOAuthUser(user)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!user.services?.email2fa?.enabled) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.getUserVerifiedEmails(user).length > 0;\n\t}\n\n\tprivate async send2FAEmail(address: string, random: string, user: IUser): Promise<void> {\n\t\tconst language = user.language || settings.get('Language') || 'en';\n\n\t\tconst t = i18n.getFixedT(language);\n\n\t\tawait Mailer.send({\n\t\t\tto: address,\n\t\t\tfrom: settings.get('From_Email'),\n\t\t\tsubject: 'Authentication code',\n\t\t\treplyTo: undefined,\n\t\t\tdata: {\n\t\t\t\tcode: random.replace(/^(\\d{3})/, '$1-'),\n\t\t\t},\n\t\t\theaders: undefined,\n\t\t\ttext: `\n${t('Here_is_your_authentication_code')}\n\n__code__\n\n${t('Do_not_provide_this_code_to_anyone')}\n${t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email')}\n`,\n\t\t\thtml: `\n\t\t\t\t<p>${t('Here_is_your_authentication_code')}</p>\n\t\t\t\t<p style=\"font-size: 30px;\">\n\t\t\t\t\t<b>__code__</b>\n\t\t\t\t</p>\n\t\t\t\t<p>${t('Do_not_provide_this_code_to_anyone')}</p>\n\t\t\t\t<p>${t('If_you_didnt_try_to_login_in_your_account_please_ignore_this_email')}</p>\n\t\t\t`,\n\t\t});\n\t}\n\n\tpublic async verify(user: IUser, codeFromEmail: string): Promise<boolean> {\n\t\tif (!this.isEnabled(user)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!user.services?.emailCode) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove non digits\n\t\tcodeFromEmail = codeFromEmail.replace(/([^\\d])/g, '');\n\n\t\tconst { code, expire } = user.services.emailCode;\n\n\t\tif (expire < new Date()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (await bcrypt.compare(codeFromEmail, code)) {\n\t\t\tawait Users.removeEmailCodeOfUserId(user._id);\n\t\t\treturn true;\n\t\t}\n\n\t\tawait Users.incrementInvalidEmailCodeAttempt(user._id);\n\n\t\treturn false;\n\t}\n\n\tpublic async sendEmailCode(user: IUser): Promise<void> {\n\t\tconst emails = this.getUserVerifiedEmails(user);\n\t\tconst random = Random._randomString(6, '0123456789');\n\t\tconst encryptedRandom = await bcrypt.hash(random, Accounts._bcryptRounds());\n\t\tconst expire = new Date();\n\t\tconst expirationInSeconds = parseInt(settings.get('Accounts_TwoFactorAuthentication_By_Email_Code_Expiration') as string, 10);\n\n\t\texpire.setSeconds(expire.getSeconds() + expirationInSeconds);\n\n\t\tawait Users.addEmailCodeByUserId(user._id, encryptedRandom, expire);\n\n\t\tfor await (const address of emails) {\n\t\t\tawait this.send2FAEmail(address, random, user);\n\t\t}\n\t}\n\n\tpublic async processInvalidCode(user: IUser): Promise<IProcessInvalidCodeResult> {\n\t\tawait Users.removeExpiredEmailCodeOfUserId(user._id);\n\n\t\t// Generate new code if the there isn't any code with more than 5 minutes to expire\n\t\tconst expireWithDelta = new Date();\n\t\texpireWithDelta.setMinutes(expireWithDelta.getMinutes() - 5);\n\n\t\tconst emails = this.getUserVerifiedEmails(user);\n\n\t\tconst emailOrUsername = user.username || emails[0];\n\n\t\tconst hasValidCode =\n\t\t\tuser.services?.emailCode?.expire &&\n\t\t\tuser.services?.emailCode?.expire > expireWithDelta &&\n\t\t\t!(await this.maxFaildedAttemtpsReached(user));\n\t\tif (hasValidCode) {\n\t\t\treturn {\n\t\t\t\temailOrUsername,\n\t\t\t\tcodeGenerated: false,\n\t\t\t\tcodeExpires: user.services?.emailCode?.expire,\n\t\t\t};\n\t\t}\n\n\t\tawait this.sendEmailCode(user);\n\n\t\treturn {\n\t\t\tcodeGenerated: true,\n\t\t\temailOrUsername,\n\t\t};\n\t}\n\n\tpublic async maxFaildedAttemtpsReached(user: IUser) {\n\t\tconst maxAttempts = settings.get<number>('Accounts_TwoFactorAuthentication_Max_Invalid_Email_Code_Attempts');\n\t\treturn (await Users.maxInvalidEmailCodeAttemptsReached(user._id, maxAttempts)) as boolean;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"0cc5b2d1c5d32aa9c4fd2b6a2d6ddb9555409e27"}
