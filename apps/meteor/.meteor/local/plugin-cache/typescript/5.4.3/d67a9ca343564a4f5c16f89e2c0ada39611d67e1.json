{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/voip/modal/DialPad/hooks/useDialPad.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/voip/modal/DialPad/hooks/useDialPad.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/voip/modal/DialPad/hooks/useDialPad.ts","inputSourceMap":{"version":3,"file":"client/voip/modal/DialPad/hooks/useDialPad.ts","sourceRoot":"","sources":["client/voip/modal/DialPad/hooks/useDialPad.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ChangeEvent, RefCallback } from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\n\nimport { useDialModal } from '../../../../hooks/useDialModal';\nimport { useOutboundDialer } from '../../../../hooks/useOutboundDialer';\nimport type { PadDigit } from '../Pad';\n\ntype DialPadStateHandlers = {\n\tinputName: string;\n\tinputRef: RefCallback<HTMLInputElement>;\n\tinputError: string | undefined;\n\tisButtonDisabled: boolean;\n\thandleOnChange: (e: ChangeEvent<HTMLInputElement>) => void;\n\thandleBackspaceClick: () => void;\n\thandlePadButtonClick: (digit: PadDigit[0]) => void;\n\thandlePadButtonLongPressed: (digit: PadDigit[1]) => void;\n\thandleCallButtonClick: () => void;\n};\n\ntype DialPadProps = {\n\tinitialValue?: string;\n\tinitialErrorMessage?: string;\n};\n\nexport const useDialPad = ({ initialValue, initialErrorMessage }: DialPadProps): DialPadStateHandlers => {\n\tconst { t } = useTranslation();\n\tconst outboundClient = useOutboundDialer();\n\tconst { closeDialModal } = useDialModal();\n\n\tconst {\n\t\tsetFocus,\n\t\tregister,\n\t\tsetValue,\n\t\tsetError,\n\t\tclearErrors,\n\t\twatch,\n\t\tformState: { errors, isDirty },\n\t} = useForm<{ PhoneInput: string }>({\n\t\tdefaultValues: {\n\t\t\tPhoneInput: initialValue || '',\n\t\t},\n\t});\n\n\tconst { ref, onChange } = register('PhoneInput');\n\n\tconst value = watch('PhoneInput');\n\n\tconst [disabled, setDisabled] = useState(true);\n\n\tconst handleBackspaceClick = useCallback((): void => {\n\t\tclearErrors();\n\t\tsetValue('PhoneInput', value.slice(0, -1), { shouldDirty: true });\n\t}, [clearErrors, setValue, value]);\n\n\tconst handlePadButtonClick = useCallback(\n\t\t(digit: PadDigit[0]): void => {\n\t\t\tclearErrors();\n\n\t\t\tsetValue('PhoneInput', value + digit, { shouldDirty: true });\n\t\t},\n\t\t[clearErrors, setValue, value],\n\t);\n\n\tconst handlePadButtonLongPressed = useCallback(\n\t\t(digit: PadDigit[1]): void => {\n\t\t\tif (digit !== '+') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetValue('PhoneInput', value + digit);\n\t\t},\n\t\t[setValue, value],\n\t);\n\n\tconst handleCallButtonClick = useCallback((): void => {\n\t\tif (!outboundClient) {\n\t\t\treturn setError('PhoneInput', { message: t('Something_went_wrong_try_again_later') });\n\t\t}\n\n\t\toutboundClient.makeCall(value);\n\t\tcloseDialModal();\n\t}, [outboundClient, setError, t, value, closeDialModal]);\n\n\tconst handleOnChange = useCallback((e) => onChange(e), [onChange]);\n\n\tuseEffect(() => {\n\t\tsetDisabled(!value);\n\t}, [value]);\n\n\tuseEffect(() => {\n\t\tsetFocus('PhoneInput');\n\t}, [setFocus]);\n\n\treturn {\n\t\tinputName: 'PhoneInput',\n\t\tinputRef: ref,\n\t\tinputError: isDirty ? errors.PhoneInput?.message : initialErrorMessage,\n\t\tisButtonDisabled: disabled,\n\t\thandleOnChange,\n\t\thandleBackspaceClick,\n\t\thandlePadButtonClick,\n\t\thandlePadButtonLongPressed,\n\t\thandleCallButtonClick,\n\t};\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/voip/modal/DialPad/hooks/useDialPad.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/voip/modal/DialPad/hooks/useDialPad.ts","inputSourceMap":{"version":3,"file":"client/voip/modal/DialPad/hooks/useDialPad.ts","sourceRoot":"","sources":["client/voip/modal/DialPad/hooks/useDialPad.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ChangeEvent, RefCallback } from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\n\nimport { useDialModal } from '../../../../hooks/useDialModal';\nimport { useOutboundDialer } from '../../../../hooks/useOutboundDialer';\nimport type { PadDigit } from '../Pad';\n\ntype DialPadStateHandlers = {\n\tinputName: string;\n\tinputRef: RefCallback<HTMLInputElement>;\n\tinputError: string | undefined;\n\tisButtonDisabled: boolean;\n\thandleOnChange: (e: ChangeEvent<HTMLInputElement>) => void;\n\thandleBackspaceClick: () => void;\n\thandlePadButtonClick: (digit: PadDigit[0]) => void;\n\thandlePadButtonLongPressed: (digit: PadDigit[1]) => void;\n\thandleCallButtonClick: () => void;\n};\n\ntype DialPadProps = {\n\tinitialValue?: string;\n\tinitialErrorMessage?: string;\n};\n\nexport const useDialPad = ({ initialValue, initialErrorMessage }: DialPadProps): DialPadStateHandlers => {\n\tconst { t } = useTranslation();\n\tconst outboundClient = useOutboundDialer();\n\tconst { closeDialModal } = useDialModal();\n\n\tconst {\n\t\tsetFocus,\n\t\tregister,\n\t\tsetValue,\n\t\tsetError,\n\t\tclearErrors,\n\t\twatch,\n\t\tformState: { errors, isDirty },\n\t} = useForm<{ PhoneInput: string }>({\n\t\tdefaultValues: {\n\t\t\tPhoneInput: initialValue || '',\n\t\t},\n\t});\n\n\tconst { ref, onChange } = register('PhoneInput');\n\n\tconst value = watch('PhoneInput');\n\n\tconst [disabled, setDisabled] = useState(true);\n\n\tconst handleBackspaceClick = useCallback((): void => {\n\t\tclearErrors();\n\t\tsetValue('PhoneInput', value.slice(0, -1), { shouldDirty: true });\n\t}, [clearErrors, setValue, value]);\n\n\tconst handlePadButtonClick = useCallback(\n\t\t(digit: PadDigit[0]): void => {\n\t\t\tclearErrors();\n\n\t\t\tsetValue('PhoneInput', value + digit, { shouldDirty: true });\n\t\t},\n\t\t[clearErrors, setValue, value],\n\t);\n\n\tconst handlePadButtonLongPressed = useCallback(\n\t\t(digit: PadDigit[1]): void => {\n\t\t\tif (digit !== '+') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetValue('PhoneInput', value + digit);\n\t\t},\n\t\t[setValue, value],\n\t);\n\n\tconst handleCallButtonClick = useCallback((): void => {\n\t\tif (!outboundClient) {\n\t\t\treturn setError('PhoneInput', { message: t('Something_went_wrong_try_again_later') });\n\t\t}\n\n\t\toutboundClient.makeCall(value);\n\t\tcloseDialModal();\n\t}, [outboundClient, setError, t, value, closeDialModal]);\n\n\tconst handleOnChange = useCallback((e) => onChange(e), [onChange]);\n\n\tuseEffect(() => {\n\t\tsetDisabled(!value);\n\t}, [value]);\n\n\tuseEffect(() => {\n\t\tsetFocus('PhoneInput');\n\t}, [setFocus]);\n\n\treturn {\n\t\tinputName: 'PhoneInput',\n\t\tinputRef: ref,\n\t\tinputError: isDirty ? errors.PhoneInput?.message : initialErrorMessage,\n\t\tisButtonDisabled: disabled,\n\t\thandleOnChange,\n\t\thandleBackspaceClick,\n\t\thandlePadButtonClick,\n\t\thandlePadButtonLongPressed,\n\t\thandleCallButtonClick,\n\t};\n};\n"]}}},"code":"module.export({\n  useDialPad: () => useDialPad\n});\nlet useCallback, useEffect, useState;\nmodule.link(\"react\", {\n  useCallback(v) {\n    useCallback = v;\n  },\n  useEffect(v) {\n    useEffect = v;\n  },\n  useState(v) {\n    useState = v;\n  }\n}, 0);\nlet useForm;\nmodule.link(\"react-hook-form\", {\n  useForm(v) {\n    useForm = v;\n  }\n}, 1);\nlet useTranslation;\nmodule.link(\"react-i18next\", {\n  useTranslation(v) {\n    useTranslation = v;\n  }\n}, 2);\nlet useDialModal;\nmodule.link(\"../../../../hooks/useDialModal\", {\n  useDialModal(v) {\n    useDialModal = v;\n  }\n}, 3);\nlet useOutboundDialer;\nmodule.link(\"../../../../hooks/useOutboundDialer\", {\n  useOutboundDialer(v) {\n    useOutboundDialer = v;\n  }\n}, 4);\nconst useDialPad = _ref => {\n  var _errors$PhoneInput;\n  let {\n    initialValue,\n    initialErrorMessage\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const outboundClient = useOutboundDialer();\n  const {\n    closeDialModal\n  } = useDialModal();\n  const {\n    setFocus,\n    register,\n    setValue,\n    setError,\n    clearErrors,\n    watch,\n    formState: {\n      errors,\n      isDirty\n    }\n  } = useForm({\n    defaultValues: {\n      PhoneInput: initialValue || ''\n    }\n  });\n  const {\n    ref,\n    onChange\n  } = register('PhoneInput');\n  const value = watch('PhoneInput');\n  const [disabled, setDisabled] = useState(true);\n  const handleBackspaceClick = useCallback(() => {\n    clearErrors();\n    setValue('PhoneInput', value.slice(0, -1), {\n      shouldDirty: true\n    });\n  }, [clearErrors, setValue, value]);\n  const handlePadButtonClick = useCallback(digit => {\n    clearErrors();\n    setValue('PhoneInput', value + digit, {\n      shouldDirty: true\n    });\n  }, [clearErrors, setValue, value]);\n  const handlePadButtonLongPressed = useCallback(digit => {\n    if (digit !== '+') {\n      return;\n    }\n    setValue('PhoneInput', value + digit);\n  }, [setValue, value]);\n  const handleCallButtonClick = useCallback(() => {\n    if (!outboundClient) {\n      return setError('PhoneInput', {\n        message: t('Something_went_wrong_try_again_later')\n      });\n    }\n    outboundClient.makeCall(value);\n    closeDialModal();\n  }, [outboundClient, setError, t, value, closeDialModal]);\n  const handleOnChange = useCallback(e => onChange(e), [onChange]);\n  useEffect(() => {\n    setDisabled(!value);\n  }, [value]);\n  useEffect(() => {\n    setFocus('PhoneInput');\n  }, [setFocus]);\n  return {\n    inputName: 'PhoneInput',\n    inputRef: ref,\n    inputError: isDirty ? (_errors$PhoneInput = errors.PhoneInput) === null || _errors$PhoneInput === void 0 ? void 0 : _errors$PhoneInput.message : initialErrorMessage,\n    isButtonDisabled: disabled,\n    handleOnChange,\n    handleBackspaceClick,\n    handlePadButtonClick,\n    handlePadButtonLongPressed,\n    handleCallButtonClick\n  };\n};","map":{"version":3,"names":["module","export","useDialPad","useCallback","useEffect","useState","link","v","useForm","useTranslation","useDialModal","useOutboundDialer","_ref","_errors$PhoneInput","initialValue","initialErrorMessage","t","outboundClient","closeDialModal","setFocus","register","setValue","setError","clearErrors","watch","formState","errors","isDirty","defaultValues","PhoneInput","ref","onChange","value","disabled","setDisabled","handleBackspaceClick","slice","shouldDirty","handlePadButtonClick","digit","handlePadButtonLongPressed","handleCallButtonClick","message","makeCall","handleOnChange","e","inputName","inputRef","inputError","isButtonDisabled"],"sources":["client/voip/modal/DialPad/hooks/useDialPad.ts"],"sourcesContent":["import type { ChangeEvent, RefCallback } from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\n\nimport { useDialModal } from '../../../../hooks/useDialModal';\nimport { useOutboundDialer } from '../../../../hooks/useOutboundDialer';\nimport type { PadDigit } from '../Pad';\n\ntype DialPadStateHandlers = {\n\tinputName: string;\n\tinputRef: RefCallback<HTMLInputElement>;\n\tinputError: string | undefined;\n\tisButtonDisabled: boolean;\n\thandleOnChange: (e: ChangeEvent<HTMLInputElement>) => void;\n\thandleBackspaceClick: () => void;\n\thandlePadButtonClick: (digit: PadDigit[0]) => void;\n\thandlePadButtonLongPressed: (digit: PadDigit[1]) => void;\n\thandleCallButtonClick: () => void;\n};\n\ntype DialPadProps = {\n\tinitialValue?: string;\n\tinitialErrorMessage?: string;\n};\n\nexport const useDialPad = ({ initialValue, initialErrorMessage }: DialPadProps): DialPadStateHandlers => {\n\tconst { t } = useTranslation();\n\tconst outboundClient = useOutboundDialer();\n\tconst { closeDialModal } = useDialModal();\n\n\tconst {\n\t\tsetFocus,\n\t\tregister,\n\t\tsetValue,\n\t\tsetError,\n\t\tclearErrors,\n\t\twatch,\n\t\tformState: { errors, isDirty },\n\t} = useForm<{ PhoneInput: string }>({\n\t\tdefaultValues: {\n\t\t\tPhoneInput: initialValue || '',\n\t\t},\n\t});\n\n\tconst { ref, onChange } = register('PhoneInput');\n\n\tconst value = watch('PhoneInput');\n\n\tconst [disabled, setDisabled] = useState(true);\n\n\tconst handleBackspaceClick = useCallback((): void => {\n\t\tclearErrors();\n\t\tsetValue('PhoneInput', value.slice(0, -1), { shouldDirty: true });\n\t}, [clearErrors, setValue, value]);\n\n\tconst handlePadButtonClick = useCallback(\n\t\t(digit: PadDigit[0]): void => {\n\t\t\tclearErrors();\n\n\t\t\tsetValue('PhoneInput', value + digit, { shouldDirty: true });\n\t\t},\n\t\t[clearErrors, setValue, value],\n\t);\n\n\tconst handlePadButtonLongPressed = useCallback(\n\t\t(digit: PadDigit[1]): void => {\n\t\t\tif (digit !== '+') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetValue('PhoneInput', value + digit);\n\t\t},\n\t\t[setValue, value],\n\t);\n\n\tconst handleCallButtonClick = useCallback((): void => {\n\t\tif (!outboundClient) {\n\t\t\treturn setError('PhoneInput', { message: t('Something_went_wrong_try_again_later') });\n\t\t}\n\n\t\toutboundClient.makeCall(value);\n\t\tcloseDialModal();\n\t}, [outboundClient, setError, t, value, closeDialModal]);\n\n\tconst handleOnChange = useCallback((e) => onChange(e), [onChange]);\n\n\tuseEffect(() => {\n\t\tsetDisabled(!value);\n\t}, [value]);\n\n\tuseEffect(() => {\n\t\tsetFocus('PhoneInput');\n\t}, [setFocus]);\n\n\treturn {\n\t\tinputName: 'PhoneInput',\n\t\tinputRef: ref,\n\t\tinputError: isDirty ? errors.PhoneInput?.message : initialErrorMessage,\n\t\tisButtonDisabled: disabled,\n\t\thandleOnChange,\n\t\thandleBackspaceClick,\n\t\thandlePadButtonClick,\n\t\thandlePadButtonLongPressed,\n\t\thandleCallButtonClick,\n\t};\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"d67a9ca343564a4f5c16f89e2c0ada39611d67e1"}
