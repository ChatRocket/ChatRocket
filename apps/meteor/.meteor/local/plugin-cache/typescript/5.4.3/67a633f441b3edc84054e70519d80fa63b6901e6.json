{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Subscriptions.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/Subscriptions.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Subscriptions.ts","inputSourceMap":{"version":3,"file":"server/models/raw/Subscriptions.ts","sourceRoot":"","sources":["server/models/raw/Subscriptions.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tAtLeast,\n\tIRole,\n\tIRoom,\n\tISubscription,\n\tIUser,\n\tRocketChatRecordDeleted,\n\tRoomType,\n\tSpotlightUser,\n} from '@rocket.chat/core-typings';\nimport type { ISubscriptionsModel } from '@rocket.chat/model-typings';\nimport { Rooms, Users } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { compact } from 'lodash';\nimport mem from 'mem';\nimport type {\n\tCollection,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tFindOptions,\n\tUpdateResult,\n\tDeleteResult,\n\tDocument,\n\tAggregateOptions,\n\tIndexDescription,\n\tUpdateFilter,\n\tInsertOneResult,\n\tInsertManyResult,\n\tAggregationCursor,\n\tCountDocumentsOptions,\n\tDeleteOptions,\n\tModifyResult,\n} from 'mongodb';\n\nimport { getDefaultSubscriptionPref } from '../../../app/utils/lib/getDefaultSubscriptionPref';\nimport { BaseRaw } from './BaseRaw';\n\nexport class SubscriptionsRaw extends BaseRaw<ISubscription> implements ISubscriptionsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISubscription>>) {\n\t\tsuper(db, 'subscription', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\t// Add all indexes from constructor to here\n\t\treturn [\n\t\t\t{ key: { E2EKey: 1 }, unique: true, sparse: true },\n\t\t\t{ key: { 'rid': 1, 'u._id': 1 }, unique: true },\n\t\t\t{ key: { 'rid': 1, 'u._id': 1, 'open': 1 } },\n\t\t\t{ key: { 'rid': 1, 'u.username': 1 } },\n\t\t\t{ key: { 'rid': 1, 'alert': 1, 'u._id': 1 } },\n\t\t\t{ key: { rid: 1, roles: 1 } },\n\t\t\t{ key: { 'u._id': 1, 'name': 1, 't': 1 } },\n\t\t\t{ key: { name: 1, t: 1 } },\n\t\t\t{ key: { open: 1 } },\n\t\t\t{ key: { alert: 1 } },\n\t\t\t{ key: { ts: 1 } },\n\t\t\t{ key: { ls: 1 } },\n\t\t\t{ key: { desktopNotifications: 1 }, sparse: true },\n\t\t\t{ key: { mobilePushNotifications: 1 }, sparse: true },\n\t\t\t{ key: { emailNotifications: 1 }, sparse: true },\n\t\t\t{ key: { autoTranslate: 1 }, sparse: true },\n\t\t\t{ key: { autoTranslateLanguage: 1 }, sparse: true },\n\t\t\t{ key: { 'userHighlights.0': 1 }, sparse: true },\n\t\t\t{ key: { prid: 1 } },\n\t\t\t{ key: { 'u._id': 1, 'open': 1, 'department': 1 } },\n\t\t\t{ key: { rid: 1, ls: 1 } },\n\t\t\t{ key: { 'u._id': 1, 'autotranslate': 1 } },\n\t\t];\n\t}\n\n\tasync getBadgeCount(uid: string): Promise<number> {\n\t\tconst [result] = await this.col\n\t\t\t.aggregate<{ total: number }>([\n\t\t\t\t{ $match: { 'u._id': uid, 'archived': { $ne: true } } },\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: 'total',\n\t\t\t\t\t\ttotal: { $sum: '$unread' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\n\t\treturn result?.total || 0;\n\t}\n\n\tfindOneByRoomIdAndUserId(rid: string, uid: string, options: FindOptions<ISubscription> = {}): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByUserIdAndRoomIds(userId: string, roomIds: Array<string>, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'rid': {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomId(roomId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUnarchivedByRoomId(roomId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'archived': { $ne: true },\n\t\t\t'u._id': { $exists: true },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdAndNotUserId(roomId: string, userId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdAndNotUserId(rid: string, uid: string): Promise<number> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': {\n\t\t\t\t$ne: uid,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindByLivechatRoomIdAndNotUserId(roomId: string, userId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'servedBy._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdAndUserId(rid: string, uid: string | undefined): Promise<number> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountUnarchivedByRoomId(rid: string): Promise<number> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'archived': { $ne: true },\n\t\t\t'u._id': { $exists: true },\n\t\t};\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync isUserInRole(uid: IUser['_id'], roleId: IRole['_id'], rid?: IRoom['_id']): Promise<boolean> {\n\t\tif (rid == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t\t'roles': roleId,\n\t\t};\n\n\t\treturn !!(await this.findOne(query, { projection: { _id: 1 } }));\n\t}\n\n\tsetAsReadByRoomIdAndUserId(\n\t\trid: string,\n\t\tuid: string,\n\t\treadThreads = false,\n\t\talert = false,\n\t\toptions: FindOptions<ISubscription> = {},\n\t): ReturnType<BaseRaw<ISubscription>['updateOne']> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t...(readThreads && {\n\t\t\t\t$unset: {\n\t\t\t\t\ttunread: 1,\n\t\t\t\t\ttunreadUser: 1,\n\t\t\t\t\ttunreadGroup: 1,\n\t\t\t\t} as const,\n\t\t\t}),\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t\talert,\n\t\t\t\tunread: 0,\n\t\t\t\tuserMentions: 0,\n\t\t\t\tgroupMentions: 0,\n\t\t\t\tls: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, options);\n\t}\n\n\tremoveRolesByUserId(uid: IUser['_id'], roles: IRole['_id'][], rid: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pullAll: {\n\t\t\t\troles,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindUsersInRoles(roles: IRole['_id'][], rid: string | undefined): Promise<FindCursor<IUser>>;\n\n\tfindUsersInRoles(roles: IRole['_id'][], rid: string | undefined, options: FindOptions<IUser>): Promise<FindCursor<IUser>>;\n\n\tfindUsersInRoles<P extends Document = IUser>(\n\t\troles: IRole['_id'][],\n\t\trid: string | undefined,\n\t\toptions: FindOptions<P extends IUser ? IUser : P>,\n\t): Promise<FindCursor<P>>;\n\n\tasync findUsersInRoles<P extends Document = IUser>(\n\t\troles: IRole['_id'][],\n\t\trid: IRoom['_id'] | undefined,\n\t\toptions?: FindOptions<P extends IUser ? IUser : P>,\n\t): Promise<FindCursor<P>> {\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t\t...(rid && { rid }),\n\t\t};\n\n\t\tconst subscriptions = await this.find(query, { projection: { 'u._id': 1 } }).toArray();\n\n\t\tconst users = compact(subscriptions.map((subscription) => subscription.u?._id).filter(Boolean));\n\n\t\t// TODO remove dependency to other models - this logic should be inside a function/service\n\t\treturn Users.find<P>({ _id: { $in: users } }, options || {});\n\t}\n\n\tasync countUsersInRoles(roles: IRole['_id'][], rid: IRoom['_id'] | undefined): Promise<number> {\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t\t...(rid && { rid }),\n\t\t};\n\n\t\t// Ideally, the count of subscriptions would be the same (or really similar) to the count in users\n\t\t// As sub/user/room is a 1:1 relation.\n\t\treturn this.countDocuments(query);\n\t}\n\n\taddRolesByUserId(uid: IUser['_id'], roles: IRole['_id'][], rid?: IRoom['_id']): Promise<UpdateResult> {\n\t\tif (!Array.isArray(roles)) {\n\t\t\troles = [roles];\n\t\t\tprocess.env.NODE_ENV === 'development' && console.warn('[WARN] Subscriptions.addRolesByUserId: roles should be an array');\n\t\t}\n\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\troles: { $each: roles },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync isUserInRoleScope(uid: IUser['_id'], rid?: IRoom['_id']): Promise<boolean> {\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tif (!rid) {\n\t\t\treturn false;\n\t\t}\n\t\tconst options = {\n\t\t\tprojection: { _id: 1 },\n\t\t};\n\n\t\tconst found = await this.findOne(query, options);\n\t\treturn !!found;\n\t}\n\n\tasync updateAllRoomTypesByRoomId(roomId: IRoom['_id'], roomType: RoomType): Promise<void> {\n\t\tawait this.updateMany({ rid: roomId }, { $set: { t: roomType } });\n\t}\n\n\tasync updateAllRoomNamesByRoomId(roomId: IRoom['_id'], name: string, fname: string): Promise<void> {\n\t\tawait this.updateMany({ rid: roomId }, { $set: { name, fname } });\n\t}\n\n\tfindByRolesAndRoomId({ roles, rid }: { roles: string; rid?: string }, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\troles,\n\t\t\t\t...(rid && { rid }),\n\t\t\t},\n\t\t\toptions || {},\n\t\t);\n\t}\n\n\tfindByUserIdAndTypes(userId: string, types: ISubscription['t'][], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t't': {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options || {});\n\t}\n\n\tfindByRoomIdAndNotAlertOrOpenExcludingUserIds(\n\t\t{\n\t\t\troomId,\n\t\t\tuidsExclude,\n\t\t\tuidsInclude,\n\t\t\tonlyRead,\n\t\t}: {\n\t\t\troomId: ISubscription['rid'];\n\t\t\tuidsExclude?: ISubscription['u']['_id'][];\n\t\t\tuidsInclude?: ISubscription['u']['_id'][];\n\t\t\tonlyRead: boolean;\n\t\t},\n\t\toptions?: FindOptions<ISubscription>,\n\t) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\t...(uidsExclude?.length && {\n\t\t\t\t'u._id': { $nin: uidsExclude },\n\t\t\t}),\n\t\t\t...(onlyRead && {\n\t\t\t\t$or: [...(uidsInclude?.length ? [{ 'u._id': { $in: uidsInclude } }] : []), { alert: { $ne: true } }, { open: { $ne: true } }],\n\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options || {});\n\t}\n\n\tasync removeByRoomId(\n\t\troomId: ISubscription['rid'],\n\t\toptions?: DeleteOptions & { onTrash: (doc: ISubscription) => void },\n\t): Promise<DeleteResult> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\tconst deleteResult = await this.deleteMany(query, options);\n\n\t\tif (deleteResult?.deletedCount) {\n\t\t\tawait Rooms.incUsersCountByIds([roomId], -deleteResult.deletedCount, { session: options?.session });\n\t\t}\n\n\t\tawait Users.removeRoomByRoomId(roomId, { session: options?.session });\n\n\t\treturn deleteResult;\n\t}\n\n\tfindByRoomIdExcludingUserIds(\n\t\troomId: ISubscription['rid'],\n\t\tuserIds: ISubscription['u']['_id'][],\n\t\toptions: FindOptions<ISubscription> = {},\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$nin: userIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findConnectedUsersExcept(\n\t\tuserId: string,\n\t\tsearchTerm: string,\n\t\texceptions: string[],\n\t\tsearchFields: string[],\n\t\textraConditions: Filter<IUser>,\n\t\tlimit: number,\n\t\troomType?: ISubscription['t'],\n\t\t{ startsWith = false, endsWith = false }: { startsWith?: string | false; endsWith?: string | false } = {},\n\t\toptions: AggregateOptions = {},\n\t): Promise<SpotlightUser[]> {\n\t\tconst termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i');\n\t\tconst orStatement = searchFields.reduce(\n\t\t\t(acc, el) => {\n\t\t\t\tacc.push({ [el.trim()]: termRegex });\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t[] as { [x: string]: RegExp }[],\n\t\t);\n\n\t\treturn this.col\n\t\t\t.aggregate<SpotlightUser>(\n\t\t\t\t[\n\t\t\t\t\t// Match all subscriptions of the requester\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t'u._id': userId,\n\t\t\t\t\t\t\t...(roomType ? { t: roomType } : {}),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Group by room id and drop all other subcription data\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: '$rid',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// find all subscriptions to the same rooms by other users\n\t\t\t\t\t{\n\t\t\t\t\t\t$lookup: {\n\t\t\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\t\t\tas: 'subscription',\n\t\t\t\t\t\t\tlet: {\n\t\t\t\t\t\t\t\trid: '$_id',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpipeline: [{ $match: { '$expr': { $eq: ['$rid', '$$rid'] }, 'u._id': { $ne: userId } } }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Unwind the subscription so we have a separate document for each\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: {\n\t\t\t\t\t\t\tpath: '$subscription',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Group the data by user id, keeping track of how many documents each user had\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: '$subscription.u._id',\n\t\t\t\t\t\t\tscore: {\n\t\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Load the data for the subscription's user, ignoring those who don't match the search terms\n\t\t\t\t\t{\n\t\t\t\t\t\t$lookup: {\n\t\t\t\t\t\t\tfrom: 'users',\n\t\t\t\t\t\t\tas: 'user',\n\t\t\t\t\t\t\tlet: { id: '$_id' },\n\t\t\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t\t\t$expr: { $eq: ['$_id', '$$id'] },\n\t\t\t\t\t\t\t\t\t\t...extraConditions,\n\t\t\t\t\t\t\t\t\t\tactive: true,\n\t\t\t\t\t\t\t\t\t\tusername: {\n\t\t\t\t\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t\t\t\t\t...(exceptions.length > 0 && { $nin: exceptions }),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t...(searchTerm && orStatement.length > 0 && { $or: orStatement }),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Discard documents that didn't load any user data in the previous step:\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: {\n\t\t\t\t\t\t\tpath: '$user',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Use group to organize the data at the same time that we pick what to project to the end result\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\tscore: {\n\t\t\t\t\t\t\t\t$sum: '$score',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tname: { $first: '$user.name' },\n\t\t\t\t\t\t\tusername: { $first: '$user.username' },\n\t\t\t\t\t\t\tnickname: { $first: '$user.nickname' },\n\t\t\t\t\t\t\tstatus: { $first: '$user.status' },\n\t\t\t\t\t\t\tstatusText: { $first: '$user.statusText' },\n\t\t\t\t\t\t\tavatarETag: { $first: '$user.avatarETag' },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Sort by score\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\tscore: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Limit the number of results\n\t\t\t\t\t{\n\t\t\t\t\t\t$limit: limit,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.toArray();\n\t}\n\n\tincUnreadForRoomIdExcludingUserIds(roomId: IRoom['_id'], userIds: IUser['_id'][], inc: number): Promise<UpdateResult | Document> {\n\t\tif (inc == null) {\n\t\t\tinc = 1;\n\t\t}\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$nin: userIds,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetAlertForRoomIdExcludingUserId(roomId: IRoom['_id'], userId: IUser['_id']): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t\t'alert': { $ne: true },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetOpenForRoomIdExcludingUserId(roomId: IRoom['_id'], userId: IUser['_id']): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t\t'open': { $ne: true },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateNameAndFnameByRoomId(roomId: string, name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync setGroupE2EKeyAndOldRoomKeys(_id: string, key: string, oldRoomKeys?: ISubscription['oldRoomKeys']): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\t\tconst update = { $set: { E2EKey: key, ...(oldRoomKeys && { oldRoomKeys }) } };\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync setGroupE2EKey(_id: string, key: string): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\t\tconst update = { $set: { E2EKey: key } };\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetGroupE2ESuggestedKey(uid: string, rid: string, key: string): Promise<ModifyResult<ISubscription>> {\n\t\tconst query = { rid, 'u._id': uid };\n\t\tconst update = { $set: { E2ESuggestedKey: key } };\n\t\treturn this.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t}\n\n\tsetE2EKeyByUserIdAndRoomId(userId: string, rid: string, key: string): Promise<ModifyResult<ISubscription>> {\n\t\tconst query = { rid, 'u._id': userId };\n\t\tconst update = { $set: { E2EKey: key } };\n\n\t\treturn this.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t}\n\n\tsetGroupE2ESuggestedKeyAndOldRoomKeys(\n\t\tuid: string,\n\t\trid: string,\n\t\tkey: string,\n\t\tsuggestedOldRoomKeys?: ISubscription['suggestedOldRoomKeys'],\n\t): Promise<ModifyResult<ISubscription>> {\n\t\tconst query = { rid, 'u._id': uid };\n\t\tconst update = { $set: { E2ESuggestedKey: key, ...(suggestedOldRoomKeys && { suggestedOldRoomKeys }) } };\n\t\treturn this.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t}\n\n\tunsetGroupE2ESuggestedKeyAndOldRoomKeys(_id: string): Promise<UpdateResult | Document> {\n\t\tconst query = { _id };\n\t\treturn this.updateOne(query, { $unset: { E2ESuggestedKey: 1, suggestedOldRoomKeys: 1 } });\n\t}\n\n\tsetOnHoldByRoomId(rid: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ rid }, { $set: { onHold: true } });\n\t}\n\n\tunsetOnHoldByRoomId(rid: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ rid }, { $unset: { onHold: 1 } });\n\t}\n\n\tfindByRoomIds(roomIds: ISubscription['u']['_id'][], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tremoveByVisitorToken(token: string): Promise<DeleteResult> {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t};\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tfindByToken(token: string, options?: FindOptions): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t};\n\n\t\treturn this.find<ISubscription>(query, options);\n\t}\n\n\tupdateAutoTranslateById(_id: string, autoTranslate: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tlet update: UpdateFilter<ISubscription>;\n\t\tif (autoTranslate) {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tautoTranslate,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$unset: {\n\t\t\t\t\tautoTranslate: 1,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateAllAutoTranslateLanguagesByUserId(userId: IUser['_id'], language: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'autoTranslate': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tautoTranslateLanguage: language,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindByAutoTranslateAndUserId(\n\t\tuserId: ISubscription['u']['_id'],\n\t\tautoTranslate: ISubscription['autoTranslate'] = true,\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\tautoTranslate,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tdisableAutoTranslateByRoomId(roomId: IRoom['_id']): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.updateMany(query, { $unset: { autoTranslate: 1 } });\n\t}\n\n\tupdateAutoTranslateLanguageById(_id: string, autoTranslateLanguage: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tautoTranslateLanguage,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetAutoTranslateLanguagesByRoomAndNotUser(rid: string, userId: string): Promise<(string | undefined)[]> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': { $ne: userId },\n\t\t\t'autoTranslate': true,\n\t\t};\n\t\treturn this.col.distinct('autoTranslateLanguage', query);\n\t}\n\n\t/**\n\t * @param {string} userId\n\t * @param {string} scope the value for the role scope (room id)\n\t */\n\troleBaseQuery(userId: string, scope?: string): Filter<ISubscription> | void {\n\t\tif (scope == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst query = { 'u._id': userId, ...(scope !== undefined && { rid: scope }) };\n\t\treturn query;\n\t}\n\n\tfindByRidWithoutE2EKey(rid: string, options: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tE2EKey: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUsersWithPublicE2EKeyByRids(\n\t\trids: IRoom['_id'][],\n\t\texcludeUserId: IUser['_id'],\n\t\tusersLimit = 50,\n\t): AggregationCursor<{ rid: IRoom['_id']; users: { _id: IUser['_id']; public_key: string }[] }> {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t'rid': {\n\t\t\t\t\t\t$in: rids,\n\t\t\t\t\t},\n\t\t\t\t\t'E2EKey': {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t\t'E2ESuggestedKey': { $exists: false },\n\t\t\t\t\t'u._id': {\n\t\t\t\t\t\t$ne: excludeUserId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'users',\n\t\t\t\t\tlocalField: 'u._id',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'user',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: '$user',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t'user.e2e.public_key': {\n\t\t\t\t\t\t$exists: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\trid: '$rid',\n\t\t\t\t\t},\n\t\t\t\t\tusers: { $push: { _id: '$user._id', public_key: '$user.e2e.public_key' } },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\trid: '$_id.rid',\n\t\t\t\t\tusers: { $slice: ['$users', usersLimit] },\n\t\t\t\t\t_id: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tupdateAudioNotificationValueById(_id: string, audioNotificationValue: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\taudioNotificationValue,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tclearAudioNotificationValueById(_id: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\taudioNotificationValue: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateNotificationsPrefById(\n\t\t_id: string,\n\t\tnotificationPref: { value: number; origin: string } | null,\n\t\tnotificationField: keyof ISubscription,\n\t\tnotificationPrefOrigin: keyof ISubscription,\n\t): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {};\n\n\t\tif (notificationPref === null) {\n\t\t\tupdate.$unset = {\n\t\t\t\t[notificationField]: 1,\n\t\t\t\t[notificationPrefOrigin]: 1,\n\t\t\t};\n\t\t} else {\n\t\t\t// @ts-expect-error TODO: fix this\n\t\t\tupdate.$set = {\n\t\t\t\t[notificationField]: notificationPref.value,\n\t\t\t\t[notificationPrefOrigin]: notificationPref.origin,\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateUnreadAlertById(_id: string, unreadAlert: ISubscription['unreadAlert']): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tunreadAlert,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateDisableNotificationsById(_id: string, disableNotifications: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tdisableNotifications,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateHideUnreadStatusById(_id: string, hideUnreadStatus: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t...(hideUnreadStatus === true ? { $set: { hideUnreadStatus } } : { $unset: { hideUnreadStatus: 1 } }),\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateHideMentionStatusById(_id: string, hideMentionStatus: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> =\n\t\t\thideMentionStatus === true\n\t\t\t\t? {\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\thideMentionStatus,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\thideMentionStatus: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateMuteGroupMentions(_id: string, muteGroupMentions: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tmuteGroupMentions,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tchangeDepartmentByRoomId(rid: string, department: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindAlwaysNotifyDesktopUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tdesktopNotifications: 'all',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindDontNotifyDesktopUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tdesktopNotifications: 'nothing',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindAlwaysNotifyMobileUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tmobilePushNotifications: 'all',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindDontNotifyMobileUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tmobilePushNotifications: 'nothing',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindWithSendEmailByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\temailNotifications: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, { projection: { emailNotifications: 1, u: 1 } });\n\t}\n\n\tresetUserE2EKey(userId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{ 'u._id': userId },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tE2EKey: '',\n\t\t\t\t\tE2ESuggestedKey: 1,\n\t\t\t\t\toldRoomKeys: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindByUserIdWithoutE2E(userId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'E2EKey': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneByRoomIdAndUsername(roomId: string, username: string, options: FindOptions<ISubscription>): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u.username': username,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByRoomNameAndUserId(roomName: string, userId: string): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\t'name': roomName,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\t// FIND\n\tfindByUserId(userId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcachedFindByUserId = mem(this.findByUserId.bind(this), { maxAge: 5000 });\n\n\tfindByUserIdExceptType(\n\t\tuserId: string,\n\t\ttypeException: ISubscription['t'],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t't': { $ne: typeException },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserIdAndType(userId: string, type: ISubscription['t'], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t't': type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t/**\n\t * @param {IUser['_id']} userId\n\t * @param {IRole['_id'][]} roles\n\t * @param {any} options\n\t */\n\tfindByUserIdAndRoles(userId: string, roles: string[], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'roles': { $in: roles },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserIdUpdatedAfter(userId: string, updatedAt: Date, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'_updatedAt': {\n\t\t\t\t$gt: updatedAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t/**\n\t * @param {string} roomId\n\t * @param {IRole['_id'][]} roles the list of roles\n\t * @param {any} options\n\t */\n\tfindByRoomIdAndRoles(roomId: string, roles: string[], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\troles = ([] as string[]).concat(roles);\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdAndRoles(roomId: string, roles: string[]): Promise<number> {\n\t\troles = ([] as string[]).concat(roles);\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountByUserId(userId: string): Promise<number> {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountByRoomId(roomId: string, options?: CountDocumentsOptions): Promise<number> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\tif (options) {\n\t\t\treturn this.col.countDocuments(query, options);\n\t\t}\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindByType(types: ISubscription['t'][], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeAndUserId(type: ISubscription['t'], userId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t't': type,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomWithUserHighlights(roomId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'userHighlights.0': { $exists: true },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync getLastSeen(options: FindOptions<ISubscription> = { projection: { _id: 0, ls: 1 } }): Promise<Date | undefined> {\n\t\toptions.sort = { ls: -1 };\n\t\toptions.limit = 1;\n\t\tconst [subscription] = await this.find({}, options).toArray();\n\t\treturn subscription?.ls;\n\t}\n\n\tfindByRoomIdAndUserIds(\n\t\troomId: ISubscription['rid'],\n\t\tuserIds: ISubscription['u']['_id'][],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$in: userIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdAndUserIdsOrAllMessages(roomId: string, userIds: string[]): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\t$or: [{ 'u._id': { $in: userIds } }, { emailNotifications: 'all' }],\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindByRoomIdWhenUserIdExists(rid: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = { rid, 'u._id': { $exists: true } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdWhenUsernameExists(rid: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = { rid, 'u.username': { $exists: true } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdWhenUsernameExists(rid: string): Promise<number> {\n\t\tconst query = { rid, 'u.username': { $exists: true } };\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindUnreadByUserId(userId: string): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'unread': {\n\t\t\t\t$gt: 0,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, { projection: { unread: 1 } });\n\t}\n\n\tgetMinimumLastSeenByRoomId(rid: string): Promise<ISubscription | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: {\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t\tprojection: {\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\t// UPDATE\n\tarchiveByRoomId(roomId: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: false,\n\t\t\t\tarchived: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tunarchiveByRoomId(roomId: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: true,\n\t\t\t\tarchived: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\thideByRoomIdAndUserId(roomId: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAsUnreadByRoomIdAndUserId(roomId: string, userId: string, firstMessageUnreadTimestamp: Date): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t\talert: true,\n\t\t\t\tls: new Date(firstMessageUnreadTimestamp.getTime() - 1), // make sure last seen is before the first unread message\n\t\t\t\tunread: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetCustomFieldsDirectMessagesByUserId(userId: string, fields: Record<string, any>): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t't': 'd',\n\t\t};\n\t\tconst update: UpdateFilter<ISubscription> = { $set: { customFields: fields } };\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindByUserIdAndRoomType(\n\t\tuserId: ISubscription['u']['_id'],\n\t\ttype: ISubscription['t'],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t't': type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameAndRoomType(\n\t\tfilter: Partial<Pick<ISubscription, 'name' | 't'>>,\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tif (!filter.name && !filter.t) {\n\t\t\tthrow new Error('invalid filter');\n\t\t}\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t...(filter.name && { name: filter.name }),\n\t\t\t...(filter.t && { t: filter.t }),\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tsetFavoriteByRoomIdAndUserId(roomId: string, userId: string, favorite?: boolean): Promise<UpdateResult> {\n\t\tif (favorite == null) {\n\t\t\tfavorite = true;\n\t\t}\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tf: favorite,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateNameAndAlertByRoomId(roomId: string, name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateDisplayNameByRoomId(roomId: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t\tname: fname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateFnameByRoomId(rid: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateNameAndFnameById(_id: string, name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetUserUsernameByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { 'u._id': userId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetNameForDirectRoomsWithOldName(oldName: string, name: string): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tname: oldName,\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateDirectNameAndFnameByName(name: string, newName?: string, newFname?: string): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tname,\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\t...(newName && { name: newName }),\n\t\t\t\t...(newFname && { fname: newFname }),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tincGroupMentionsAndUnreadForRoomIdExcludingUserId(\n\t\troomId: IRoom['_id'],\n\t\tuserId: IUser['_id'],\n\t\tincGroup = 1,\n\t\tincUnread = 1,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: incUnread,\n\t\t\t\tgroupMentions: incGroup,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tincUserMentionsAndUnreadForRoomIdAndUserIds(\n\t\troomId: IRoom['_id'],\n\t\tuserIds: IUser['_id'][],\n\t\tincUser = 1,\n\t\tincUnread = 1,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$in: userIds,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: incUnread,\n\t\t\t\tuserMentions: incUser,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tignoreUser({ _id, ignoredUser: ignored, ignore = true }: { _id: string; ignoredUser: string; ignore?: boolean }): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<ISubscription> = {};\n\t\tif (ignore) {\n\t\t\tupdate.$addToSet = { ignored };\n\t\t} else {\n\t\t\tupdate.$pull = { ignored };\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAlertForRoomIdAndUserIds(roomId: ISubscription['rid'], uids: ISubscription['u']['_id'][]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t\t'alert': { $ne: true },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetOpenForRoomIdAndUserIds(roomId: string, uids: string[]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t\t'open': { $ne: true },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetLastReplyForRoomIdAndUserIds(roomId: IRoom['_id'], uids: IUser['_id'][], lr: Date): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tlr,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync setBlockedByRoomId(rid: string, blocked: string, blocker: string): Promise<UpdateResult[]> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': blocked,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tblocked: true,\n\t\t\t},\n\t\t};\n\n\t\tconst query2 = {\n\t\t\trid,\n\t\t\t'u._id': blocker,\n\t\t};\n\n\t\tconst update2: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tblocker: true,\n\t\t\t},\n\t\t};\n\n\t\treturn Promise.all([this.updateOne(query, update), this.updateOne(query2, update2)]);\n\t}\n\n\tasync unsetBlockedByRoomId(rid: string, blocked: string, blocker: string): Promise<UpdateResult[]> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': blocked,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\tblocked: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst query2 = {\n\t\t\trid,\n\t\t\t'u._id': blocker,\n\t\t};\n\n\t\tconst update2: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\tblocker: 1,\n\t\t\t},\n\t\t};\n\t\treturn Promise.all([this.updateOne(query, update), this.updateOne(query2, update2)]);\n\t}\n\n\tupdateCustomFieldsByRoomId(rid: string, cfields: Record<string, any>): Promise<UpdateResult | Document> {\n\t\tconst query = { rid };\n\t\tconst customFields = cfields || {};\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tcustomFields,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateTypeByRoomId(roomId: string, type: ISubscription['t']): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tt: type,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\t/**\n\t * @param {string} _id the subscription id\n\t * @param {IRole['_id']} role the id of the role\n\t */\n\taddRoleById(_id: string, role: string): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$addToSet: {\n\t\t\t\troles: role,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\t/**\n\t * @param {string} _id the subscription id\n\t * @param {IRole['_id']} role the id of the role\n\t */\n\tremoveRoleById(_id: string, role: string): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$pull: {\n\t\t\t\troles: role,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetArchivedByUsername(username: string, archived: boolean): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tt: 'd',\n\t\t\tname: username,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tarchived,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tclearNotificationUserPreferences(\n\t\tuserId: string,\n\t\tnotificationField: string,\n\t\tnotificationOriginField: string,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t[notificationOriginField]: 'user',\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\t[notificationOriginField]: 1,\n\t\t\t\t[notificationField]: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateNotificationUserPreferences(\n\t\tuserId: string,\n\t\tuserPref: string | number | boolean,\n\t\tnotificationField: keyof ISubscription,\n\t\tnotificationOriginField: keyof ISubscription,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t[notificationOriginField]: {\n\t\t\t\t$ne: 'subscription',\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t// @ts-expect-error - :(\n\t\t\t$set: {\n\t\t\t\t[notificationField]: userPref,\n\t\t\t\t[notificationOriginField]: 'user',\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindByUserPreferences(\n\t\tuserId: string,\n\t\tnotificationOriginField: keyof ISubscription,\n\t\tnotificationOriginValue: 'user' | 'subscription',\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst value = notificationOriginValue === 'user' ? 'user' : { $ne: 'subscription' };\n\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t[notificationOriginField]: value,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tupdateUserHighlights(userId: string, userHighlights: any): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tuserHighlights,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateDirectFNameByName(name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tt: 'd' as const,\n\t\t\tname,\n\t\t};\n\n\t\tlet update: UpdateFilter<ISubscription>;\n\t\tif (fname) {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tfname,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$unset: {\n\t\t\t\t\tfname: true,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\t// INSERT\n\tasync createWithRoomAndUser(room: IRoom, user: IUser, extraData: Partial<ISubscription> = {}): Promise<InsertOneResult<ISubscription>> {\n\t\tconst subscription = {\n\t\t\topen: false,\n\t\t\talert: false,\n\t\t\tunread: 0,\n\t\t\tuserMentions: 0,\n\t\t\tgroupMentions: 0,\n\t\t\tts: room.ts,\n\t\t\trid: room._id,\n\t\t\tname: room.name,\n\t\t\tfname: room.fname,\n\t\t\t...(room.customFields && { customFields: room.customFields }),\n\t\t\tt: room.t,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\t...(room.prid && { prid: room.prid }),\n\t\t\t...getDefaultSubscriptionPref(user),\n\t\t\t...extraData,\n\t\t};\n\n\t\t// @ts-expect-error - types not good :(\n\t\tconst result = await this.insertOne(subscription);\n\n\t\tawait Rooms.incUsersCountById(room._id, 1);\n\n\t\tif (!['d', 'l'].includes(room.t)) {\n\t\t\tawait Users.addRoomByUserId(user._id, room._id);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync createWithRoomAndManyUsers(\n\t\troom: IRoom,\n\t\tusers: { user: AtLeast<IUser, '_id' | 'username' | 'name' | 'settings'>; extraData: Record<string, any> }[] = [],\n\t): Promise<InsertManyResult<ISubscription>> {\n\t\tconst subscriptions = users.map(({ user, extraData }) => ({\n\t\t\topen: false,\n\t\t\talert: false,\n\t\t\tunread: 0,\n\t\t\tuserMentions: 0,\n\t\t\tgroupMentions: 0,\n\t\t\tts: room.ts,\n\t\t\trid: room._id,\n\t\t\tname: room.name,\n\t\t\tfname: room.fname,\n\t\t\t...(room.customFields && { customFields: room.customFields }),\n\t\t\tt: room.t,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\t...(room.prid && { prid: room.prid }),\n\t\t\t...getDefaultSubscriptionPref(user),\n\t\t\t...extraData,\n\t\t}));\n\n\t\t// @ts-expect-error - types not good :(\n\t\treturn this.insertMany(subscriptions);\n\t}\n\n\t// REMOVE\n\tasync removeByUserId(userId: string): Promise<number> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst roomIds = (await this.findByUserId(userId).toArray()).map((s) => s.rid);\n\n\t\tconst result = (await this.deleteMany(query)).deletedCount;\n\n\t\tif (typeof result === 'number' && result > 0) {\n\t\t\tawait Rooms.incUsersCountNotDMsByIds(roomIds, -1);\n\t\t}\n\n\t\tawait Users.removeAllRoomsByUserId(userId);\n\n\t\treturn result;\n\t}\n\n\tasync removeByRoomIdAndUserId(roomId: string, userId: string): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst { value: doc } = await this.findOneAndDelete(query);\n\n\t\tif (doc) {\n\t\t\tawait Rooms.incUsersCountById(roomId, -1);\n\t\t}\n\n\t\tawait Users.removeRoomByUserId(userId, roomId);\n\n\t\treturn doc;\n\t}\n\n\tasync removeByRoomIds(rids: string[], options?: { onTrash: (doc: ISubscription) => void }): Promise<DeleteResult> {\n\t\tconst result = await this.deleteMany({ rid: { $in: rids } }, options);\n\n\t\tawait Users.removeRoomByRoomIds(rids);\n\n\t\treturn result;\n\t}\n\n\tasync removeByRoomIdsAndUserId(rids: string[], userId: string): Promise<number> {\n\t\tconst result = (await this.deleteMany({ 'rid': { $in: rids }, 'u._id': userId })).deletedCount;\n\n\t\tif (typeof result === 'number' && result > 0) {\n\t\t\tawait Rooms.incUsersCountByIds(rids, -1);\n\t\t}\n\n\t\tawait Users.removeRoomsByRoomIdsAndUserId(rids, userId);\n\n\t\treturn result;\n\t}\n\n\t// //////////////////////////////////////////////////////////////////\n\t// threads\n\n\tasync addUnreadThreadByRoomIdAndUserIds(\n\t\trid: string,\n\t\tusers: string[],\n\t\ttmid: string,\n\t\t{ groupMention = false, userMention = false }: { groupMention?: boolean; userMention?: boolean } = {},\n\t): Promise<UpdateResult | Document | void> {\n\t\tif (!users) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'u._id': { $in: users },\n\t\t\t\trid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$addToSet: {\n\t\t\t\t\ttunread: tmid,\n\t\t\t\t\t...(groupMention && { tunreadGroup: tmid }),\n\t\t\t\t\t...(userMention && { tunreadUser: tmid }),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveUnreadThreadByRoomIdAndUserId(rid: string, userId: string, tmid: string, clearAlert = false): Promise<UpdateResult> {\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$pull: {\n\t\t\t\ttunread: tmid,\n\t\t\t\ttunreadGroup: tmid,\n\t\t\t\ttunreadUser: tmid,\n\t\t\t},\n\t\t};\n\n\t\tif (clearAlert) {\n\t\t\tupdate.$set = { alert: false };\n\t\t}\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t'u._id': userId,\n\t\t\t\trid,\n\t\t\t},\n\t\t\tupdate,\n\t\t);\n\t}\n\n\tremoveUnreadThreadsByRoomId(rid: string, tunread: string[]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\ttunread: { $in: tunread },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$pullAll: {\n\t\t\t\ttunread,\n\t\t\t\ttunreadUser: tunread,\n\t\t\t\ttunreadGroup: tunread,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindUnreadThreadsByRoomId(\n\t\trid: ISubscription['rid'],\n\t\ttunread: ISubscription['tunread'],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\ttunread: { $in: tunread },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\topenByRoomIdAndUserId(roomId: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Subscriptions.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/Subscriptions.ts","inputSourceMap":{"version":3,"file":"server/models/raw/Subscriptions.ts","sourceRoot":"","sources":["server/models/raw/Subscriptions.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tAtLeast,\n\tIRole,\n\tIRoom,\n\tISubscription,\n\tIUser,\n\tRocketChatRecordDeleted,\n\tRoomType,\n\tSpotlightUser,\n} from '@rocket.chat/core-typings';\nimport type { ISubscriptionsModel } from '@rocket.chat/model-typings';\nimport { Rooms, Users } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { compact } from 'lodash';\nimport mem from 'mem';\nimport type {\n\tCollection,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tFindOptions,\n\tUpdateResult,\n\tDeleteResult,\n\tDocument,\n\tAggregateOptions,\n\tIndexDescription,\n\tUpdateFilter,\n\tInsertOneResult,\n\tInsertManyResult,\n\tAggregationCursor,\n\tCountDocumentsOptions,\n\tDeleteOptions,\n\tModifyResult,\n} from 'mongodb';\n\nimport { getDefaultSubscriptionPref } from '../../../app/utils/lib/getDefaultSubscriptionPref';\nimport { BaseRaw } from './BaseRaw';\n\nexport class SubscriptionsRaw extends BaseRaw<ISubscription> implements ISubscriptionsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISubscription>>) {\n\t\tsuper(db, 'subscription', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\t// Add all indexes from constructor to here\n\t\treturn [\n\t\t\t{ key: { E2EKey: 1 }, unique: true, sparse: true },\n\t\t\t{ key: { 'rid': 1, 'u._id': 1 }, unique: true },\n\t\t\t{ key: { 'rid': 1, 'u._id': 1, 'open': 1 } },\n\t\t\t{ key: { 'rid': 1, 'u.username': 1 } },\n\t\t\t{ key: { 'rid': 1, 'alert': 1, 'u._id': 1 } },\n\t\t\t{ key: { rid: 1, roles: 1 } },\n\t\t\t{ key: { 'u._id': 1, 'name': 1, 't': 1 } },\n\t\t\t{ key: { name: 1, t: 1 } },\n\t\t\t{ key: { open: 1 } },\n\t\t\t{ key: { alert: 1 } },\n\t\t\t{ key: { ts: 1 } },\n\t\t\t{ key: { ls: 1 } },\n\t\t\t{ key: { desktopNotifications: 1 }, sparse: true },\n\t\t\t{ key: { mobilePushNotifications: 1 }, sparse: true },\n\t\t\t{ key: { emailNotifications: 1 }, sparse: true },\n\t\t\t{ key: { autoTranslate: 1 }, sparse: true },\n\t\t\t{ key: { autoTranslateLanguage: 1 }, sparse: true },\n\t\t\t{ key: { 'userHighlights.0': 1 }, sparse: true },\n\t\t\t{ key: { prid: 1 } },\n\t\t\t{ key: { 'u._id': 1, 'open': 1, 'department': 1 } },\n\t\t\t{ key: { rid: 1, ls: 1 } },\n\t\t\t{ key: { 'u._id': 1, 'autotranslate': 1 } },\n\t\t];\n\t}\n\n\tasync getBadgeCount(uid: string): Promise<number> {\n\t\tconst [result] = await this.col\n\t\t\t.aggregate<{ total: number }>([\n\t\t\t\t{ $match: { 'u._id': uid, 'archived': { $ne: true } } },\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: 'total',\n\t\t\t\t\t\ttotal: { $sum: '$unread' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\n\t\treturn result?.total || 0;\n\t}\n\n\tfindOneByRoomIdAndUserId(rid: string, uid: string, options: FindOptions<ISubscription> = {}): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByUserIdAndRoomIds(userId: string, roomIds: Array<string>, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'rid': {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomId(roomId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUnarchivedByRoomId(roomId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'archived': { $ne: true },\n\t\t\t'u._id': { $exists: true },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdAndNotUserId(roomId: string, userId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdAndNotUserId(rid: string, uid: string): Promise<number> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': {\n\t\t\t\t$ne: uid,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindByLivechatRoomIdAndNotUserId(roomId: string, userId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'servedBy._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdAndUserId(rid: string, uid: string | undefined): Promise<number> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountUnarchivedByRoomId(rid: string): Promise<number> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'archived': { $ne: true },\n\t\t\t'u._id': { $exists: true },\n\t\t};\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync isUserInRole(uid: IUser['_id'], roleId: IRole['_id'], rid?: IRoom['_id']): Promise<boolean> {\n\t\tif (rid == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t\t'roles': roleId,\n\t\t};\n\n\t\treturn !!(await this.findOne(query, { projection: { _id: 1 } }));\n\t}\n\n\tsetAsReadByRoomIdAndUserId(\n\t\trid: string,\n\t\tuid: string,\n\t\treadThreads = false,\n\t\talert = false,\n\t\toptions: FindOptions<ISubscription> = {},\n\t): ReturnType<BaseRaw<ISubscription>['updateOne']> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t...(readThreads && {\n\t\t\t\t$unset: {\n\t\t\t\t\ttunread: 1,\n\t\t\t\t\ttunreadUser: 1,\n\t\t\t\t\ttunreadGroup: 1,\n\t\t\t\t} as const,\n\t\t\t}),\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t\talert,\n\t\t\t\tunread: 0,\n\t\t\t\tuserMentions: 0,\n\t\t\t\tgroupMentions: 0,\n\t\t\t\tls: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, options);\n\t}\n\n\tremoveRolesByUserId(uid: IUser['_id'], roles: IRole['_id'][], rid: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pullAll: {\n\t\t\t\troles,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindUsersInRoles(roles: IRole['_id'][], rid: string | undefined): Promise<FindCursor<IUser>>;\n\n\tfindUsersInRoles(roles: IRole['_id'][], rid: string | undefined, options: FindOptions<IUser>): Promise<FindCursor<IUser>>;\n\n\tfindUsersInRoles<P extends Document = IUser>(\n\t\troles: IRole['_id'][],\n\t\trid: string | undefined,\n\t\toptions: FindOptions<P extends IUser ? IUser : P>,\n\t): Promise<FindCursor<P>>;\n\n\tasync findUsersInRoles<P extends Document = IUser>(\n\t\troles: IRole['_id'][],\n\t\trid: IRoom['_id'] | undefined,\n\t\toptions?: FindOptions<P extends IUser ? IUser : P>,\n\t): Promise<FindCursor<P>> {\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t\t...(rid && { rid }),\n\t\t};\n\n\t\tconst subscriptions = await this.find(query, { projection: { 'u._id': 1 } }).toArray();\n\n\t\tconst users = compact(subscriptions.map((subscription) => subscription.u?._id).filter(Boolean));\n\n\t\t// TODO remove dependency to other models - this logic should be inside a function/service\n\t\treturn Users.find<P>({ _id: { $in: users } }, options || {});\n\t}\n\n\tasync countUsersInRoles(roles: IRole['_id'][], rid: IRoom['_id'] | undefined): Promise<number> {\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t\t...(rid && { rid }),\n\t\t};\n\n\t\t// Ideally, the count of subscriptions would be the same (or really similar) to the count in users\n\t\t// As sub/user/room is a 1:1 relation.\n\t\treturn this.countDocuments(query);\n\t}\n\n\taddRolesByUserId(uid: IUser['_id'], roles: IRole['_id'][], rid?: IRoom['_id']): Promise<UpdateResult> {\n\t\tif (!Array.isArray(roles)) {\n\t\t\troles = [roles];\n\t\t\tprocess.env.NODE_ENV === 'development' && console.warn('[WARN] Subscriptions.addRolesByUserId: roles should be an array');\n\t\t}\n\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\troles: { $each: roles },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync isUserInRoleScope(uid: IUser['_id'], rid?: IRoom['_id']): Promise<boolean> {\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tif (!rid) {\n\t\t\treturn false;\n\t\t}\n\t\tconst options = {\n\t\t\tprojection: { _id: 1 },\n\t\t};\n\n\t\tconst found = await this.findOne(query, options);\n\t\treturn !!found;\n\t}\n\n\tasync updateAllRoomTypesByRoomId(roomId: IRoom['_id'], roomType: RoomType): Promise<void> {\n\t\tawait this.updateMany({ rid: roomId }, { $set: { t: roomType } });\n\t}\n\n\tasync updateAllRoomNamesByRoomId(roomId: IRoom['_id'], name: string, fname: string): Promise<void> {\n\t\tawait this.updateMany({ rid: roomId }, { $set: { name, fname } });\n\t}\n\n\tfindByRolesAndRoomId({ roles, rid }: { roles: string; rid?: string }, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\troles,\n\t\t\t\t...(rid && { rid }),\n\t\t\t},\n\t\t\toptions || {},\n\t\t);\n\t}\n\n\tfindByUserIdAndTypes(userId: string, types: ISubscription['t'][], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t't': {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options || {});\n\t}\n\n\tfindByRoomIdAndNotAlertOrOpenExcludingUserIds(\n\t\t{\n\t\t\troomId,\n\t\t\tuidsExclude,\n\t\t\tuidsInclude,\n\t\t\tonlyRead,\n\t\t}: {\n\t\t\troomId: ISubscription['rid'];\n\t\t\tuidsExclude?: ISubscription['u']['_id'][];\n\t\t\tuidsInclude?: ISubscription['u']['_id'][];\n\t\t\tonlyRead: boolean;\n\t\t},\n\t\toptions?: FindOptions<ISubscription>,\n\t) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\t...(uidsExclude?.length && {\n\t\t\t\t'u._id': { $nin: uidsExclude },\n\t\t\t}),\n\t\t\t...(onlyRead && {\n\t\t\t\t$or: [...(uidsInclude?.length ? [{ 'u._id': { $in: uidsInclude } }] : []), { alert: { $ne: true } }, { open: { $ne: true } }],\n\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options || {});\n\t}\n\n\tasync removeByRoomId(\n\t\troomId: ISubscription['rid'],\n\t\toptions?: DeleteOptions & { onTrash: (doc: ISubscription) => void },\n\t): Promise<DeleteResult> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\tconst deleteResult = await this.deleteMany(query, options);\n\n\t\tif (deleteResult?.deletedCount) {\n\t\t\tawait Rooms.incUsersCountByIds([roomId], -deleteResult.deletedCount, { session: options?.session });\n\t\t}\n\n\t\tawait Users.removeRoomByRoomId(roomId, { session: options?.session });\n\n\t\treturn deleteResult;\n\t}\n\n\tfindByRoomIdExcludingUserIds(\n\t\troomId: ISubscription['rid'],\n\t\tuserIds: ISubscription['u']['_id'][],\n\t\toptions: FindOptions<ISubscription> = {},\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$nin: userIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findConnectedUsersExcept(\n\t\tuserId: string,\n\t\tsearchTerm: string,\n\t\texceptions: string[],\n\t\tsearchFields: string[],\n\t\textraConditions: Filter<IUser>,\n\t\tlimit: number,\n\t\troomType?: ISubscription['t'],\n\t\t{ startsWith = false, endsWith = false }: { startsWith?: string | false; endsWith?: string | false } = {},\n\t\toptions: AggregateOptions = {},\n\t): Promise<SpotlightUser[]> {\n\t\tconst termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i');\n\t\tconst orStatement = searchFields.reduce(\n\t\t\t(acc, el) => {\n\t\t\t\tacc.push({ [el.trim()]: termRegex });\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t[] as { [x: string]: RegExp }[],\n\t\t);\n\n\t\treturn this.col\n\t\t\t.aggregate<SpotlightUser>(\n\t\t\t\t[\n\t\t\t\t\t// Match all subscriptions of the requester\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t'u._id': userId,\n\t\t\t\t\t\t\t...(roomType ? { t: roomType } : {}),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Group by room id and drop all other subcription data\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: '$rid',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// find all subscriptions to the same rooms by other users\n\t\t\t\t\t{\n\t\t\t\t\t\t$lookup: {\n\t\t\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\t\t\tas: 'subscription',\n\t\t\t\t\t\t\tlet: {\n\t\t\t\t\t\t\t\trid: '$_id',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpipeline: [{ $match: { '$expr': { $eq: ['$rid', '$$rid'] }, 'u._id': { $ne: userId } } }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Unwind the subscription so we have a separate document for each\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: {\n\t\t\t\t\t\t\tpath: '$subscription',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Group the data by user id, keeping track of how many documents each user had\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: '$subscription.u._id',\n\t\t\t\t\t\t\tscore: {\n\t\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Load the data for the subscription's user, ignoring those who don't match the search terms\n\t\t\t\t\t{\n\t\t\t\t\t\t$lookup: {\n\t\t\t\t\t\t\tfrom: 'users',\n\t\t\t\t\t\t\tas: 'user',\n\t\t\t\t\t\t\tlet: { id: '$_id' },\n\t\t\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t\t\t$expr: { $eq: ['$_id', '$$id'] },\n\t\t\t\t\t\t\t\t\t\t...extraConditions,\n\t\t\t\t\t\t\t\t\t\tactive: true,\n\t\t\t\t\t\t\t\t\t\tusername: {\n\t\t\t\t\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t\t\t\t\t...(exceptions.length > 0 && { $nin: exceptions }),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t...(searchTerm && orStatement.length > 0 && { $or: orStatement }),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Discard documents that didn't load any user data in the previous step:\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: {\n\t\t\t\t\t\t\tpath: '$user',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Use group to organize the data at the same time that we pick what to project to the end result\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\tscore: {\n\t\t\t\t\t\t\t\t$sum: '$score',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tname: { $first: '$user.name' },\n\t\t\t\t\t\t\tusername: { $first: '$user.username' },\n\t\t\t\t\t\t\tnickname: { $first: '$user.nickname' },\n\t\t\t\t\t\t\tstatus: { $first: '$user.status' },\n\t\t\t\t\t\t\tstatusText: { $first: '$user.statusText' },\n\t\t\t\t\t\t\tavatarETag: { $first: '$user.avatarETag' },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Sort by score\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\tscore: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Limit the number of results\n\t\t\t\t\t{\n\t\t\t\t\t\t$limit: limit,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.toArray();\n\t}\n\n\tincUnreadForRoomIdExcludingUserIds(roomId: IRoom['_id'], userIds: IUser['_id'][], inc: number): Promise<UpdateResult | Document> {\n\t\tif (inc == null) {\n\t\t\tinc = 1;\n\t\t}\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$nin: userIds,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetAlertForRoomIdExcludingUserId(roomId: IRoom['_id'], userId: IUser['_id']): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t\t'alert': { $ne: true },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetOpenForRoomIdExcludingUserId(roomId: IRoom['_id'], userId: IUser['_id']): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t\t'open': { $ne: true },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateNameAndFnameByRoomId(roomId: string, name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync setGroupE2EKeyAndOldRoomKeys(_id: string, key: string, oldRoomKeys?: ISubscription['oldRoomKeys']): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\t\tconst update = { $set: { E2EKey: key, ...(oldRoomKeys && { oldRoomKeys }) } };\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync setGroupE2EKey(_id: string, key: string): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\t\tconst update = { $set: { E2EKey: key } };\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetGroupE2ESuggestedKey(uid: string, rid: string, key: string): Promise<ModifyResult<ISubscription>> {\n\t\tconst query = { rid, 'u._id': uid };\n\t\tconst update = { $set: { E2ESuggestedKey: key } };\n\t\treturn this.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t}\n\n\tsetE2EKeyByUserIdAndRoomId(userId: string, rid: string, key: string): Promise<ModifyResult<ISubscription>> {\n\t\tconst query = { rid, 'u._id': userId };\n\t\tconst update = { $set: { E2EKey: key } };\n\n\t\treturn this.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t}\n\n\tsetGroupE2ESuggestedKeyAndOldRoomKeys(\n\t\tuid: string,\n\t\trid: string,\n\t\tkey: string,\n\t\tsuggestedOldRoomKeys?: ISubscription['suggestedOldRoomKeys'],\n\t): Promise<ModifyResult<ISubscription>> {\n\t\tconst query = { rid, 'u._id': uid };\n\t\tconst update = { $set: { E2ESuggestedKey: key, ...(suggestedOldRoomKeys && { suggestedOldRoomKeys }) } };\n\t\treturn this.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t}\n\n\tunsetGroupE2ESuggestedKeyAndOldRoomKeys(_id: string): Promise<UpdateResult | Document> {\n\t\tconst query = { _id };\n\t\treturn this.updateOne(query, { $unset: { E2ESuggestedKey: 1, suggestedOldRoomKeys: 1 } });\n\t}\n\n\tsetOnHoldByRoomId(rid: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ rid }, { $set: { onHold: true } });\n\t}\n\n\tunsetOnHoldByRoomId(rid: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ rid }, { $unset: { onHold: 1 } });\n\t}\n\n\tfindByRoomIds(roomIds: ISubscription['u']['_id'][], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tremoveByVisitorToken(token: string): Promise<DeleteResult> {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t};\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tfindByToken(token: string, options?: FindOptions): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t};\n\n\t\treturn this.find<ISubscription>(query, options);\n\t}\n\n\tupdateAutoTranslateById(_id: string, autoTranslate: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tlet update: UpdateFilter<ISubscription>;\n\t\tif (autoTranslate) {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tautoTranslate,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$unset: {\n\t\t\t\t\tautoTranslate: 1,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateAllAutoTranslateLanguagesByUserId(userId: IUser['_id'], language: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'autoTranslate': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tautoTranslateLanguage: language,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindByAutoTranslateAndUserId(\n\t\tuserId: ISubscription['u']['_id'],\n\t\tautoTranslate: ISubscription['autoTranslate'] = true,\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\tautoTranslate,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tdisableAutoTranslateByRoomId(roomId: IRoom['_id']): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.updateMany(query, { $unset: { autoTranslate: 1 } });\n\t}\n\n\tupdateAutoTranslateLanguageById(_id: string, autoTranslateLanguage: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tautoTranslateLanguage,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetAutoTranslateLanguagesByRoomAndNotUser(rid: string, userId: string): Promise<(string | undefined)[]> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': { $ne: userId },\n\t\t\t'autoTranslate': true,\n\t\t};\n\t\treturn this.col.distinct('autoTranslateLanguage', query);\n\t}\n\n\t/**\n\t * @param {string} userId\n\t * @param {string} scope the value for the role scope (room id)\n\t */\n\troleBaseQuery(userId: string, scope?: string): Filter<ISubscription> | void {\n\t\tif (scope == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst query = { 'u._id': userId, ...(scope !== undefined && { rid: scope }) };\n\t\treturn query;\n\t}\n\n\tfindByRidWithoutE2EKey(rid: string, options: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tE2EKey: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUsersWithPublicE2EKeyByRids(\n\t\trids: IRoom['_id'][],\n\t\texcludeUserId: IUser['_id'],\n\t\tusersLimit = 50,\n\t): AggregationCursor<{ rid: IRoom['_id']; users: { _id: IUser['_id']; public_key: string }[] }> {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t'rid': {\n\t\t\t\t\t\t$in: rids,\n\t\t\t\t\t},\n\t\t\t\t\t'E2EKey': {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t\t'E2ESuggestedKey': { $exists: false },\n\t\t\t\t\t'u._id': {\n\t\t\t\t\t\t$ne: excludeUserId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'users',\n\t\t\t\t\tlocalField: 'u._id',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'user',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: '$user',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t'user.e2e.public_key': {\n\t\t\t\t\t\t$exists: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\trid: '$rid',\n\t\t\t\t\t},\n\t\t\t\t\tusers: { $push: { _id: '$user._id', public_key: '$user.e2e.public_key' } },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\trid: '$_id.rid',\n\t\t\t\t\tusers: { $slice: ['$users', usersLimit] },\n\t\t\t\t\t_id: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tupdateAudioNotificationValueById(_id: string, audioNotificationValue: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\taudioNotificationValue,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tclearAudioNotificationValueById(_id: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\taudioNotificationValue: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateNotificationsPrefById(\n\t\t_id: string,\n\t\tnotificationPref: { value: number; origin: string } | null,\n\t\tnotificationField: keyof ISubscription,\n\t\tnotificationPrefOrigin: keyof ISubscription,\n\t): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {};\n\n\t\tif (notificationPref === null) {\n\t\t\tupdate.$unset = {\n\t\t\t\t[notificationField]: 1,\n\t\t\t\t[notificationPrefOrigin]: 1,\n\t\t\t};\n\t\t} else {\n\t\t\t// @ts-expect-error TODO: fix this\n\t\t\tupdate.$set = {\n\t\t\t\t[notificationField]: notificationPref.value,\n\t\t\t\t[notificationPrefOrigin]: notificationPref.origin,\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateUnreadAlertById(_id: string, unreadAlert: ISubscription['unreadAlert']): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tunreadAlert,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateDisableNotificationsById(_id: string, disableNotifications: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tdisableNotifications,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateHideUnreadStatusById(_id: string, hideUnreadStatus: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t...(hideUnreadStatus === true ? { $set: { hideUnreadStatus } } : { $unset: { hideUnreadStatus: 1 } }),\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateHideMentionStatusById(_id: string, hideMentionStatus: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> =\n\t\t\thideMentionStatus === true\n\t\t\t\t? {\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\thideMentionStatus,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\thideMentionStatus: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateMuteGroupMentions(_id: string, muteGroupMentions: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tmuteGroupMentions,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tchangeDepartmentByRoomId(rid: string, department: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindAlwaysNotifyDesktopUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tdesktopNotifications: 'all',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindDontNotifyDesktopUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tdesktopNotifications: 'nothing',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindAlwaysNotifyMobileUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tmobilePushNotifications: 'all',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindDontNotifyMobileUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tmobilePushNotifications: 'nothing',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindWithSendEmailByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\temailNotifications: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, { projection: { emailNotifications: 1, u: 1 } });\n\t}\n\n\tresetUserE2EKey(userId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{ 'u._id': userId },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tE2EKey: '',\n\t\t\t\t\tE2ESuggestedKey: 1,\n\t\t\t\t\toldRoomKeys: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindByUserIdWithoutE2E(userId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'E2EKey': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneByRoomIdAndUsername(roomId: string, username: string, options: FindOptions<ISubscription>): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u.username': username,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByRoomNameAndUserId(roomName: string, userId: string): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\t'name': roomName,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\t// FIND\n\tfindByUserId(userId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcachedFindByUserId = mem(this.findByUserId.bind(this), { maxAge: 5000 });\n\n\tfindByUserIdExceptType(\n\t\tuserId: string,\n\t\ttypeException: ISubscription['t'],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t't': { $ne: typeException },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserIdAndType(userId: string, type: ISubscription['t'], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t't': type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t/**\n\t * @param {IUser['_id']} userId\n\t * @param {IRole['_id'][]} roles\n\t * @param {any} options\n\t */\n\tfindByUserIdAndRoles(userId: string, roles: string[], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'roles': { $in: roles },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserIdUpdatedAfter(userId: string, updatedAt: Date, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'_updatedAt': {\n\t\t\t\t$gt: updatedAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t/**\n\t * @param {string} roomId\n\t * @param {IRole['_id'][]} roles the list of roles\n\t * @param {any} options\n\t */\n\tfindByRoomIdAndRoles(roomId: string, roles: string[], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\troles = ([] as string[]).concat(roles);\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdAndRoles(roomId: string, roles: string[]): Promise<number> {\n\t\troles = ([] as string[]).concat(roles);\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountByUserId(userId: string): Promise<number> {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountByRoomId(roomId: string, options?: CountDocumentsOptions): Promise<number> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\tif (options) {\n\t\t\treturn this.col.countDocuments(query, options);\n\t\t}\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindByType(types: ISubscription['t'][], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeAndUserId(type: ISubscription['t'], userId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t't': type,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomWithUserHighlights(roomId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'userHighlights.0': { $exists: true },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync getLastSeen(options: FindOptions<ISubscription> = { projection: { _id: 0, ls: 1 } }): Promise<Date | undefined> {\n\t\toptions.sort = { ls: -1 };\n\t\toptions.limit = 1;\n\t\tconst [subscription] = await this.find({}, options).toArray();\n\t\treturn subscription?.ls;\n\t}\n\n\tfindByRoomIdAndUserIds(\n\t\troomId: ISubscription['rid'],\n\t\tuserIds: ISubscription['u']['_id'][],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$in: userIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdAndUserIdsOrAllMessages(roomId: string, userIds: string[]): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\t$or: [{ 'u._id': { $in: userIds } }, { emailNotifications: 'all' }],\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindByRoomIdWhenUserIdExists(rid: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = { rid, 'u._id': { $exists: true } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdWhenUsernameExists(rid: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = { rid, 'u.username': { $exists: true } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdWhenUsernameExists(rid: string): Promise<number> {\n\t\tconst query = { rid, 'u.username': { $exists: true } };\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindUnreadByUserId(userId: string): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'unread': {\n\t\t\t\t$gt: 0,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, { projection: { unread: 1 } });\n\t}\n\n\tgetMinimumLastSeenByRoomId(rid: string): Promise<ISubscription | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: {\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t\tprojection: {\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\t// UPDATE\n\tarchiveByRoomId(roomId: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: false,\n\t\t\t\tarchived: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tunarchiveByRoomId(roomId: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: true,\n\t\t\t\tarchived: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\thideByRoomIdAndUserId(roomId: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAsUnreadByRoomIdAndUserId(roomId: string, userId: string, firstMessageUnreadTimestamp: Date): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t\talert: true,\n\t\t\t\tls: new Date(firstMessageUnreadTimestamp.getTime() - 1), // make sure last seen is before the first unread message\n\t\t\t\tunread: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetCustomFieldsDirectMessagesByUserId(userId: string, fields: Record<string, any>): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t't': 'd',\n\t\t};\n\t\tconst update: UpdateFilter<ISubscription> = { $set: { customFields: fields } };\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindByUserIdAndRoomType(\n\t\tuserId: ISubscription['u']['_id'],\n\t\ttype: ISubscription['t'],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t't': type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameAndRoomType(\n\t\tfilter: Partial<Pick<ISubscription, 'name' | 't'>>,\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tif (!filter.name && !filter.t) {\n\t\t\tthrow new Error('invalid filter');\n\t\t}\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t...(filter.name && { name: filter.name }),\n\t\t\t...(filter.t && { t: filter.t }),\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tsetFavoriteByRoomIdAndUserId(roomId: string, userId: string, favorite?: boolean): Promise<UpdateResult> {\n\t\tif (favorite == null) {\n\t\t\tfavorite = true;\n\t\t}\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tf: favorite,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateNameAndAlertByRoomId(roomId: string, name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateDisplayNameByRoomId(roomId: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t\tname: fname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateFnameByRoomId(rid: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateNameAndFnameById(_id: string, name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetUserUsernameByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { 'u._id': userId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetNameForDirectRoomsWithOldName(oldName: string, name: string): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tname: oldName,\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateDirectNameAndFnameByName(name: string, newName?: string, newFname?: string): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tname,\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\t...(newName && { name: newName }),\n\t\t\t\t...(newFname && { fname: newFname }),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tincGroupMentionsAndUnreadForRoomIdExcludingUserId(\n\t\troomId: IRoom['_id'],\n\t\tuserId: IUser['_id'],\n\t\tincGroup = 1,\n\t\tincUnread = 1,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: incUnread,\n\t\t\t\tgroupMentions: incGroup,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tincUserMentionsAndUnreadForRoomIdAndUserIds(\n\t\troomId: IRoom['_id'],\n\t\tuserIds: IUser['_id'][],\n\t\tincUser = 1,\n\t\tincUnread = 1,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$in: userIds,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: incUnread,\n\t\t\t\tuserMentions: incUser,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tignoreUser({ _id, ignoredUser: ignored, ignore = true }: { _id: string; ignoredUser: string; ignore?: boolean }): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<ISubscription> = {};\n\t\tif (ignore) {\n\t\t\tupdate.$addToSet = { ignored };\n\t\t} else {\n\t\t\tupdate.$pull = { ignored };\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAlertForRoomIdAndUserIds(roomId: ISubscription['rid'], uids: ISubscription['u']['_id'][]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t\t'alert': { $ne: true },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetOpenForRoomIdAndUserIds(roomId: string, uids: string[]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t\t'open': { $ne: true },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetLastReplyForRoomIdAndUserIds(roomId: IRoom['_id'], uids: IUser['_id'][], lr: Date): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tlr,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync setBlockedByRoomId(rid: string, blocked: string, blocker: string): Promise<UpdateResult[]> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': blocked,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tblocked: true,\n\t\t\t},\n\t\t};\n\n\t\tconst query2 = {\n\t\t\trid,\n\t\t\t'u._id': blocker,\n\t\t};\n\n\t\tconst update2: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tblocker: true,\n\t\t\t},\n\t\t};\n\n\t\treturn Promise.all([this.updateOne(query, update), this.updateOne(query2, update2)]);\n\t}\n\n\tasync unsetBlockedByRoomId(rid: string, blocked: string, blocker: string): Promise<UpdateResult[]> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': blocked,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\tblocked: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst query2 = {\n\t\t\trid,\n\t\t\t'u._id': blocker,\n\t\t};\n\n\t\tconst update2: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\tblocker: 1,\n\t\t\t},\n\t\t};\n\t\treturn Promise.all([this.updateOne(query, update), this.updateOne(query2, update2)]);\n\t}\n\n\tupdateCustomFieldsByRoomId(rid: string, cfields: Record<string, any>): Promise<UpdateResult | Document> {\n\t\tconst query = { rid };\n\t\tconst customFields = cfields || {};\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tcustomFields,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateTypeByRoomId(roomId: string, type: ISubscription['t']): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tt: type,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\t/**\n\t * @param {string} _id the subscription id\n\t * @param {IRole['_id']} role the id of the role\n\t */\n\taddRoleById(_id: string, role: string): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$addToSet: {\n\t\t\t\troles: role,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\t/**\n\t * @param {string} _id the subscription id\n\t * @param {IRole['_id']} role the id of the role\n\t */\n\tremoveRoleById(_id: string, role: string): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$pull: {\n\t\t\t\troles: role,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetArchivedByUsername(username: string, archived: boolean): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tt: 'd',\n\t\t\tname: username,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tarchived,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tclearNotificationUserPreferences(\n\t\tuserId: string,\n\t\tnotificationField: string,\n\t\tnotificationOriginField: string,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t[notificationOriginField]: 'user',\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\t[notificationOriginField]: 1,\n\t\t\t\t[notificationField]: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateNotificationUserPreferences(\n\t\tuserId: string,\n\t\tuserPref: string | number | boolean,\n\t\tnotificationField: keyof ISubscription,\n\t\tnotificationOriginField: keyof ISubscription,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t[notificationOriginField]: {\n\t\t\t\t$ne: 'subscription',\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t// @ts-expect-error - :(\n\t\t\t$set: {\n\t\t\t\t[notificationField]: userPref,\n\t\t\t\t[notificationOriginField]: 'user',\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindByUserPreferences(\n\t\tuserId: string,\n\t\tnotificationOriginField: keyof ISubscription,\n\t\tnotificationOriginValue: 'user' | 'subscription',\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst value = notificationOriginValue === 'user' ? 'user' : { $ne: 'subscription' };\n\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t[notificationOriginField]: value,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tupdateUserHighlights(userId: string, userHighlights: any): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tuserHighlights,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateDirectFNameByName(name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tt: 'd' as const,\n\t\t\tname,\n\t\t};\n\n\t\tlet update: UpdateFilter<ISubscription>;\n\t\tif (fname) {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tfname,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$unset: {\n\t\t\t\t\tfname: true,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\t// INSERT\n\tasync createWithRoomAndUser(room: IRoom, user: IUser, extraData: Partial<ISubscription> = {}): Promise<InsertOneResult<ISubscription>> {\n\t\tconst subscription = {\n\t\t\topen: false,\n\t\t\talert: false,\n\t\t\tunread: 0,\n\t\t\tuserMentions: 0,\n\t\t\tgroupMentions: 0,\n\t\t\tts: room.ts,\n\t\t\trid: room._id,\n\t\t\tname: room.name,\n\t\t\tfname: room.fname,\n\t\t\t...(room.customFields && { customFields: room.customFields }),\n\t\t\tt: room.t,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\t...(room.prid && { prid: room.prid }),\n\t\t\t...getDefaultSubscriptionPref(user),\n\t\t\t...extraData,\n\t\t};\n\n\t\t// @ts-expect-error - types not good :(\n\t\tconst result = await this.insertOne(subscription);\n\n\t\tawait Rooms.incUsersCountById(room._id, 1);\n\n\t\tif (!['d', 'l'].includes(room.t)) {\n\t\t\tawait Users.addRoomByUserId(user._id, room._id);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync createWithRoomAndManyUsers(\n\t\troom: IRoom,\n\t\tusers: { user: AtLeast<IUser, '_id' | 'username' | 'name' | 'settings'>; extraData: Record<string, any> }[] = [],\n\t): Promise<InsertManyResult<ISubscription>> {\n\t\tconst subscriptions = users.map(({ user, extraData }) => ({\n\t\t\topen: false,\n\t\t\talert: false,\n\t\t\tunread: 0,\n\t\t\tuserMentions: 0,\n\t\t\tgroupMentions: 0,\n\t\t\tts: room.ts,\n\t\t\trid: room._id,\n\t\t\tname: room.name,\n\t\t\tfname: room.fname,\n\t\t\t...(room.customFields && { customFields: room.customFields }),\n\t\t\tt: room.t,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\t...(room.prid && { prid: room.prid }),\n\t\t\t...getDefaultSubscriptionPref(user),\n\t\t\t...extraData,\n\t\t}));\n\n\t\t// @ts-expect-error - types not good :(\n\t\treturn this.insertMany(subscriptions);\n\t}\n\n\t// REMOVE\n\tasync removeByUserId(userId: string): Promise<number> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst roomIds = (await this.findByUserId(userId).toArray()).map((s) => s.rid);\n\n\t\tconst result = (await this.deleteMany(query)).deletedCount;\n\n\t\tif (typeof result === 'number' && result > 0) {\n\t\t\tawait Rooms.incUsersCountNotDMsByIds(roomIds, -1);\n\t\t}\n\n\t\tawait Users.removeAllRoomsByUserId(userId);\n\n\t\treturn result;\n\t}\n\n\tasync removeByRoomIdAndUserId(roomId: string, userId: string): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst { value: doc } = await this.findOneAndDelete(query);\n\n\t\tif (doc) {\n\t\t\tawait Rooms.incUsersCountById(roomId, -1);\n\t\t}\n\n\t\tawait Users.removeRoomByUserId(userId, roomId);\n\n\t\treturn doc;\n\t}\n\n\tasync removeByRoomIds(rids: string[], options?: { onTrash: (doc: ISubscription) => void }): Promise<DeleteResult> {\n\t\tconst result = await this.deleteMany({ rid: { $in: rids } }, options);\n\n\t\tawait Users.removeRoomByRoomIds(rids);\n\n\t\treturn result;\n\t}\n\n\tasync removeByRoomIdsAndUserId(rids: string[], userId: string): Promise<number> {\n\t\tconst result = (await this.deleteMany({ 'rid': { $in: rids }, 'u._id': userId })).deletedCount;\n\n\t\tif (typeof result === 'number' && result > 0) {\n\t\t\tawait Rooms.incUsersCountByIds(rids, -1);\n\t\t}\n\n\t\tawait Users.removeRoomsByRoomIdsAndUserId(rids, userId);\n\n\t\treturn result;\n\t}\n\n\t// //////////////////////////////////////////////////////////////////\n\t// threads\n\n\tasync addUnreadThreadByRoomIdAndUserIds(\n\t\trid: string,\n\t\tusers: string[],\n\t\ttmid: string,\n\t\t{ groupMention = false, userMention = false }: { groupMention?: boolean; userMention?: boolean } = {},\n\t): Promise<UpdateResult | Document | void> {\n\t\tif (!users) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'u._id': { $in: users },\n\t\t\t\trid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$addToSet: {\n\t\t\t\t\ttunread: tmid,\n\t\t\t\t\t...(groupMention && { tunreadGroup: tmid }),\n\t\t\t\t\t...(userMention && { tunreadUser: tmid }),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveUnreadThreadByRoomIdAndUserId(rid: string, userId: string, tmid: string, clearAlert = false): Promise<UpdateResult> {\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$pull: {\n\t\t\t\ttunread: tmid,\n\t\t\t\ttunreadGroup: tmid,\n\t\t\t\ttunreadUser: tmid,\n\t\t\t},\n\t\t};\n\n\t\tif (clearAlert) {\n\t\t\tupdate.$set = { alert: false };\n\t\t}\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t'u._id': userId,\n\t\t\t\trid,\n\t\t\t},\n\t\t\tupdate,\n\t\t);\n\t}\n\n\tremoveUnreadThreadsByRoomId(rid: string, tunread: string[]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\ttunread: { $in: tunread },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$pullAll: {\n\t\t\t\ttunread,\n\t\t\t\ttunreadUser: tunread,\n\t\t\t\ttunreadGroup: tunread,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindUnreadThreadsByRoomId(\n\t\trid: ISubscription['rid'],\n\t\ttunread: ISubscription['tunread'],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\ttunread: { $in: tunread },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\topenByRoomIdAndUserId(roomId: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      SubscriptionsRaw: () => SubscriptionsRaw\n    });\n    let Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 1);\n    let compact;\n    module.link(\"lodash\", {\n      compact(v) {\n        compact = v;\n      }\n    }, 2);\n    let mem;\n    module.link(\"mem\", {\n      default(v) {\n        mem = v;\n      }\n    }, 3);\n    let getDefaultSubscriptionPref;\n    module.link(\"../../../app/utils/lib/getDefaultSubscriptionPref\", {\n      getDefaultSubscriptionPref(v) {\n        getDefaultSubscriptionPref = v;\n      }\n    }, 4);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class SubscriptionsRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'subscription', trash);\n        this.cachedFindByUserId = mem(this.findByUserId.bind(this), {\n          maxAge: 5000\n        });\n      }\n      modelIndexes() {\n        // Add all indexes from constructor to here\n        return [{\n          key: {\n            E2EKey: 1\n          },\n          unique: true,\n          sparse: true\n        }, {\n          key: {\n            'rid': 1,\n            'u._id': 1\n          },\n          unique: true\n        }, {\n          key: {\n            'rid': 1,\n            'u._id': 1,\n            'open': 1\n          }\n        }, {\n          key: {\n            'rid': 1,\n            'u.username': 1\n          }\n        }, {\n          key: {\n            'rid': 1,\n            'alert': 1,\n            'u._id': 1\n          }\n        }, {\n          key: {\n            rid: 1,\n            roles: 1\n          }\n        }, {\n          key: {\n            'u._id': 1,\n            'name': 1,\n            't': 1\n          }\n        }, {\n          key: {\n            name: 1,\n            t: 1\n          }\n        }, {\n          key: {\n            open: 1\n          }\n        }, {\n          key: {\n            alert: 1\n          }\n        }, {\n          key: {\n            ts: 1\n          }\n        }, {\n          key: {\n            ls: 1\n          }\n        }, {\n          key: {\n            desktopNotifications: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            mobilePushNotifications: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            emailNotifications: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            autoTranslate: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            autoTranslateLanguage: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'userHighlights.0': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            prid: 1\n          }\n        }, {\n          key: {\n            'u._id': 1,\n            'open': 1,\n            'department': 1\n          }\n        }, {\n          key: {\n            rid: 1,\n            ls: 1\n          }\n        }, {\n          key: {\n            'u._id': 1,\n            'autotranslate': 1\n          }\n        }];\n      }\n      async getBadgeCount(uid) {\n        const [result] = await this.col.aggregate([{\n          $match: {\n            'u._id': uid,\n            'archived': {\n              $ne: true\n            }\n          }\n        }, {\n          $group: {\n            _id: 'total',\n            total: {\n              $sum: '$unread'\n            }\n          }\n        }]).toArray();\n        return (result === null || result === void 0 ? void 0 : result.total) || 0;\n      }\n      findOneByRoomIdAndUserId(rid, uid) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          rid,\n          'u._id': uid\n        };\n        return this.findOne(query, options);\n      }\n      findByUserIdAndRoomIds(userId, roomIds) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          'u._id': userId,\n          'rid': {\n            $in: roomIds\n          }\n        };\n        return this.find(query, options);\n      }\n      findByRoomId(roomId) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          rid: roomId\n        };\n        return this.find(query, options);\n      }\n      findUnarchivedByRoomId(roomId) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          'rid': roomId,\n          'archived': {\n            $ne: true\n          },\n          'u._id': {\n            $exists: true\n          }\n        };\n        return this.find(query, options);\n      }\n      findByRoomIdAndNotUserId(roomId, userId) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          'rid': roomId,\n          'u._id': {\n            $ne: userId\n          }\n        };\n        return this.find(query, options);\n      }\n      countByRoomIdAndNotUserId(rid, uid) {\n        const query = {\n          rid,\n          'u._id': {\n            $ne: uid\n          }\n        };\n        return this.col.countDocuments(query);\n      }\n      findByLivechatRoomIdAndNotUserId(roomId, userId) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          'rid': roomId,\n          'servedBy._id': {\n            $ne: userId\n          }\n        };\n        return this.find(query, options);\n      }\n      countByRoomIdAndUserId(rid, uid) {\n        const query = {\n          rid,\n          'u._id': uid\n        };\n        return this.col.countDocuments(query);\n      }\n      countUnarchivedByRoomId(rid) {\n        const query = {\n          rid,\n          'archived': {\n            $ne: true\n          },\n          'u._id': {\n            $exists: true\n          }\n        };\n        return this.col.countDocuments(query);\n      }\n      async isUserInRole(uid, roleId, rid) {\n        if (rid == null) {\n          return false;\n        }\n        const query = {\n          'u._id': uid,\n          rid,\n          'roles': roleId\n        };\n        return !!(await this.findOne(query, {\n          projection: {\n            _id: 1\n          }\n        }));\n      }\n      setAsReadByRoomIdAndUserId(rid, uid) {\n        let readThreads = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        let alert = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        const query = {\n          rid,\n          'u._id': uid\n        };\n        const update = _objectSpread(_objectSpread({}, readThreads && {\n          $unset: {\n            tunread: 1,\n            tunreadUser: 1,\n            tunreadGroup: 1\n          }\n        }), {}, {\n          $set: {\n            open: true,\n            alert,\n            unread: 0,\n            userMentions: 0,\n            groupMentions: 0,\n            ls: new Date()\n          }\n        });\n        return this.updateOne(query, update, options);\n      }\n      removeRolesByUserId(uid, roles, rid) {\n        const query = {\n          'u._id': uid,\n          rid\n        };\n        const update = {\n          $pullAll: {\n            roles\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      async findUsersInRoles(roles, rid, options) {\n        const query = _objectSpread({\n          roles: {\n            $in: roles\n          }\n        }, rid && {\n          rid\n        });\n        const subscriptions = await this.find(query, {\n          projection: {\n            'u._id': 1\n          }\n        }).toArray();\n        const users = compact(subscriptions.map(subscription => {\n          var _subscription$u;\n          return (_subscription$u = subscription.u) === null || _subscription$u === void 0 ? void 0 : _subscription$u._id;\n        }).filter(Boolean));\n        // TODO remove dependency to other models - this logic should be inside a function/service\n        return Users.find({\n          _id: {\n            $in: users\n          }\n        }, options || {});\n      }\n      async countUsersInRoles(roles, rid) {\n        const query = _objectSpread({\n          roles: {\n            $in: roles\n          }\n        }, rid && {\n          rid\n        });\n        // Ideally, the count of subscriptions would be the same (or really similar) to the count in users\n        // As sub/user/room is a 1:1 relation.\n        return this.countDocuments(query);\n      }\n      addRolesByUserId(uid, roles, rid) {\n        if (!Array.isArray(roles)) {\n          roles = [roles];\n          process.env.NODE_ENV === 'development' && console.warn('[WARN] Subscriptions.addRolesByUserId: roles should be an array');\n        }\n        const query = {\n          'u._id': uid,\n          rid\n        };\n        const update = {\n          $addToSet: {\n            roles: {\n              $each: roles\n            }\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      async isUserInRoleScope(uid, rid) {\n        const query = {\n          'u._id': uid,\n          rid\n        };\n        if (!rid) {\n          return false;\n        }\n        const options = {\n          projection: {\n            _id: 1\n          }\n        };\n        const found = await this.findOne(query, options);\n        return !!found;\n      }\n      async updateAllRoomTypesByRoomId(roomId, roomType) {\n        await this.updateMany({\n          rid: roomId\n        }, {\n          $set: {\n            t: roomType\n          }\n        });\n      }\n      async updateAllRoomNamesByRoomId(roomId, name, fname) {\n        await this.updateMany({\n          rid: roomId\n        }, {\n          $set: {\n            name,\n            fname\n          }\n        });\n      }\n      findByRolesAndRoomId(_ref, options) {\n        let {\n          roles,\n          rid\n        } = _ref;\n        return this.find(_objectSpread({\n          roles\n        }, rid && {\n          rid\n        }), options || {});\n      }\n      findByUserIdAndTypes(userId, types, options) {\n        const query = {\n          'u._id': userId,\n          't': {\n            $in: types\n          }\n        };\n        return this.find(query, options || {});\n      }\n      findByRoomIdAndNotAlertOrOpenExcludingUserIds(_ref2, options) {\n        let {\n          roomId,\n          uidsExclude,\n          uidsInclude,\n          onlyRead\n        } = _ref2;\n        const query = _objectSpread(_objectSpread({\n          rid: roomId\n        }, (uidsExclude === null || uidsExclude === void 0 ? void 0 : uidsExclude.length) && {\n          'u._id': {\n            $nin: uidsExclude\n          }\n        }), onlyRead && {\n          $or: [...(uidsInclude !== null && uidsInclude !== void 0 && uidsInclude.length ? [{\n            'u._id': {\n              $in: uidsInclude\n            }\n          }] : []), {\n            alert: {\n              $ne: true\n            }\n          }, {\n            open: {\n              $ne: true\n            }\n          }]\n        });\n        return this.find(query, options || {});\n      }\n      async removeByRoomId(roomId, options) {\n        const query = {\n          rid: roomId\n        };\n        const deleteResult = await this.deleteMany(query, options);\n        if (deleteResult !== null && deleteResult !== void 0 && deleteResult.deletedCount) {\n          await Rooms.incUsersCountByIds([roomId], -deleteResult.deletedCount, {\n            session: options === null || options === void 0 ? void 0 : options.session\n          });\n        }\n        await Users.removeRoomByRoomId(roomId, {\n          session: options === null || options === void 0 ? void 0 : options.session\n        });\n        return deleteResult;\n      }\n      findByRoomIdExcludingUserIds(roomId, userIds) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          'rid': roomId,\n          'u._id': {\n            $nin: userIds\n          }\n        };\n        return this.find(query, options);\n      }\n      async findConnectedUsersExcept(userId, searchTerm, exceptions, searchFields, extraConditions, limit, roomType) {\n        let {\n          startsWith = false,\n          endsWith = false\n        } = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n        let options = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n        const termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i');\n        const orStatement = searchFields.reduce((acc, el) => {\n          acc.push({\n            [el.trim()]: termRegex\n          });\n          return acc;\n        }, []);\n        return this.col.aggregate([\n        // Match all subscriptions of the requester\n        {\n          $match: _objectSpread({\n            'u._id': userId\n          }, roomType ? {\n            t: roomType\n          } : {})\n        },\n        // Group by room id and drop all other subcription data\n        {\n          $group: {\n            _id: '$rid'\n          }\n        },\n        // find all subscriptions to the same rooms by other users\n        {\n          $lookup: {\n            from: 'rocketchat_subscription',\n            as: 'subscription',\n            let: {\n              rid: '$_id'\n            },\n            pipeline: [{\n              $match: {\n                '$expr': {\n                  $eq: ['$rid', '$$rid']\n                },\n                'u._id': {\n                  $ne: userId\n                }\n              }\n            }]\n          }\n        },\n        // Unwind the subscription so we have a separate document for each\n        {\n          $unwind: {\n            path: '$subscription'\n          }\n        },\n        // Group the data by user id, keeping track of how many documents each user had\n        {\n          $group: {\n            _id: '$subscription.u._id',\n            score: {\n              $sum: 1\n            }\n          }\n        },\n        // Load the data for the subscription's user, ignoring those who don't match the search terms\n        {\n          $lookup: {\n            from: 'users',\n            as: 'user',\n            let: {\n              id: '$_id'\n            },\n            pipeline: [{\n              $match: _objectSpread(_objectSpread({\n                $expr: {\n                  $eq: ['$_id', '$$id']\n                }\n              }, extraConditions), {}, {\n                active: true,\n                username: _objectSpread({\n                  $exists: true\n                }, exceptions.length > 0 && {\n                  $nin: exceptions\n                })\n              }, searchTerm && orStatement.length > 0 && {\n                $or: orStatement\n              })\n            }]\n          }\n        },\n        // Discard documents that didn't load any user data in the previous step:\n        {\n          $unwind: {\n            path: '$user'\n          }\n        },\n        // Use group to organize the data at the same time that we pick what to project to the end result\n        {\n          $group: {\n            _id: '$_id',\n            score: {\n              $sum: '$score'\n            },\n            name: {\n              $first: '$user.name'\n            },\n            username: {\n              $first: '$user.username'\n            },\n            nickname: {\n              $first: '$user.nickname'\n            },\n            status: {\n              $first: '$user.status'\n            },\n            statusText: {\n              $first: '$user.statusText'\n            },\n            avatarETag: {\n              $first: '$user.avatarETag'\n            }\n          }\n        },\n        // Sort by score\n        {\n          $sort: {\n            score: -1\n          }\n        },\n        // Limit the number of results\n        {\n          $limit: limit\n        }], options).toArray();\n      }\n      incUnreadForRoomIdExcludingUserIds(roomId, userIds, inc) {\n        if (inc == null) {\n          inc = 1;\n        }\n        const query = {\n          'rid': roomId,\n          'u._id': {\n            $nin: userIds\n          }\n        };\n        const update = {\n          $set: {\n            alert: true,\n            open: true\n          },\n          $inc: {\n            unread: inc\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      setAlertForRoomIdExcludingUserId(roomId, userId) {\n        const query = {\n          'rid': roomId,\n          'u._id': {\n            $ne: userId\n          },\n          'alert': {\n            $ne: true\n          }\n        };\n        const update = {\n          $set: {\n            alert: true\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      setOpenForRoomIdExcludingUserId(roomId, userId) {\n        const query = {\n          'rid': roomId,\n          'u._id': {\n            $ne: userId\n          },\n          'open': {\n            $ne: true\n          }\n        };\n        const update = {\n          $set: {\n            open: true\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateNameAndFnameByRoomId(roomId, name, fname) {\n        const query = {\n          rid: roomId\n        };\n        const update = {\n          $set: {\n            name,\n            fname\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      async setGroupE2EKeyAndOldRoomKeys(_id, key, oldRoomKeys) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: _objectSpread({\n            E2EKey: key\n          }, oldRoomKeys && {\n            oldRoomKeys\n          })\n        };\n        return this.updateOne(query, update);\n      }\n      async setGroupE2EKey(_id, key) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            E2EKey: key\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setGroupE2ESuggestedKey(uid, rid, key) {\n        const query = {\n          rid,\n          'u._id': uid\n        };\n        const update = {\n          $set: {\n            E2ESuggestedKey: key\n          }\n        };\n        return this.findOneAndUpdate(query, update, {\n          returnDocument: 'after'\n        });\n      }\n      setE2EKeyByUserIdAndRoomId(userId, rid, key) {\n        const query = {\n          rid,\n          'u._id': userId\n        };\n        const update = {\n          $set: {\n            E2EKey: key\n          }\n        };\n        return this.findOneAndUpdate(query, update, {\n          returnDocument: 'after'\n        });\n      }\n      setGroupE2ESuggestedKeyAndOldRoomKeys(uid, rid, key, suggestedOldRoomKeys) {\n        const query = {\n          rid,\n          'u._id': uid\n        };\n        const update = {\n          $set: _objectSpread({\n            E2ESuggestedKey: key\n          }, suggestedOldRoomKeys && {\n            suggestedOldRoomKeys\n          })\n        };\n        return this.findOneAndUpdate(query, update, {\n          returnDocument: 'after'\n        });\n      }\n      unsetGroupE2ESuggestedKeyAndOldRoomKeys(_id) {\n        const query = {\n          _id\n        };\n        return this.updateOne(query, {\n          $unset: {\n            E2ESuggestedKey: 1,\n            suggestedOldRoomKeys: 1\n          }\n        });\n      }\n      setOnHoldByRoomId(rid) {\n        return this.updateOne({\n          rid\n        }, {\n          $set: {\n            onHold: true\n          }\n        });\n      }\n      unsetOnHoldByRoomId(rid) {\n        return this.updateOne({\n          rid\n        }, {\n          $unset: {\n            onHold: 1\n          }\n        });\n      }\n      findByRoomIds(roomIds, options) {\n        const query = {\n          rid: {\n            $in: roomIds\n          }\n        };\n        return this.find(query, options);\n      }\n      removeByVisitorToken(token) {\n        const query = {\n          'v.token': token\n        };\n        return this.deleteMany(query);\n      }\n      findByToken(token, options) {\n        const query = {\n          'v.token': token\n        };\n        return this.find(query, options);\n      }\n      updateAutoTranslateById(_id, autoTranslate) {\n        const query = {\n          _id\n        };\n        let update;\n        if (autoTranslate) {\n          update = {\n            $set: {\n              autoTranslate\n            }\n          };\n        } else {\n          update = {\n            $unset: {\n              autoTranslate: 1\n            }\n          };\n        }\n        return this.updateOne(query, update);\n      }\n      updateAllAutoTranslateLanguagesByUserId(userId, language) {\n        const query = {\n          'u._id': userId,\n          'autoTranslate': true\n        };\n        const update = {\n          $set: {\n            autoTranslateLanguage: language\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      findByAutoTranslateAndUserId(userId) {\n        let autoTranslate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        let options = arguments.length > 2 ? arguments[2] : undefined;\n        const query = {\n          'u._id': userId,\n          autoTranslate\n        };\n        return this.find(query, options);\n      }\n      disableAutoTranslateByRoomId(roomId) {\n        const query = {\n          rid: roomId\n        };\n        return this.updateMany(query, {\n          $unset: {\n            autoTranslate: 1\n          }\n        });\n      }\n      updateAutoTranslateLanguageById(_id, autoTranslateLanguage) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            autoTranslateLanguage\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      getAutoTranslateLanguagesByRoomAndNotUser(rid, userId) {\n        const query = {\n          rid,\n          'u._id': {\n            $ne: userId\n          },\n          'autoTranslate': true\n        };\n        return this.col.distinct('autoTranslateLanguage', query);\n      }\n      /**\n       * @param {string} userId\n       * @param {string} scope the value for the role scope (room id)\n       */\n      roleBaseQuery(userId, scope) {\n        if (scope == null) {\n          return;\n        }\n        const query = _objectSpread({\n          'u._id': userId\n        }, scope !== undefined && {\n          rid: scope\n        });\n        return query;\n      }\n      findByRidWithoutE2EKey(rid, options) {\n        const query = {\n          rid,\n          E2EKey: {\n            $exists: false\n          }\n        };\n        return this.find(query, options);\n      }\n      findUsersWithPublicE2EKeyByRids(rids, excludeUserId) {\n        let usersLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n        return this.col.aggregate([{\n          $match: {\n            'rid': {\n              $in: rids\n            },\n            'E2EKey': {\n              $exists: false\n            },\n            'E2ESuggestedKey': {\n              $exists: false\n            },\n            'u._id': {\n              $ne: excludeUserId\n            }\n          }\n        }, {\n          $lookup: {\n            from: 'users',\n            localField: 'u._id',\n            foreignField: '_id',\n            as: 'user'\n          }\n        }, {\n          $unwind: '$user'\n        }, {\n          $match: {\n            'user.e2e.public_key': {\n              $exists: 1\n            }\n          }\n        }, {\n          $group: {\n            _id: {\n              rid: '$rid'\n            },\n            users: {\n              $push: {\n                _id: '$user._id',\n                public_key: '$user.e2e.public_key'\n              }\n            }\n          }\n        }, {\n          $project: {\n            rid: '$_id.rid',\n            users: {\n              $slice: ['$users', usersLimit]\n            },\n            _id: 0\n          }\n        }]);\n      }\n      updateAudioNotificationValueById(_id, audioNotificationValue) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            audioNotificationValue\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      clearAudioNotificationValueById(_id) {\n        const query = {\n          _id\n        };\n        const update = {\n          $unset: {\n            audioNotificationValue: 1\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      updateNotificationsPrefById(_id, notificationPref, notificationField, notificationPrefOrigin) {\n        const query = {\n          _id\n        };\n        const update = {};\n        if (notificationPref === null) {\n          update.$unset = {\n            [notificationField]: 1,\n            [notificationPrefOrigin]: 1\n          };\n        } else {\n          // @ts-expect-error TODO: fix this\n          update.$set = {\n            [notificationField]: notificationPref.value,\n            [notificationPrefOrigin]: notificationPref.origin\n          };\n        }\n        return this.updateOne(query, update);\n      }\n      updateUnreadAlertById(_id, unreadAlert) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            unreadAlert\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      updateDisableNotificationsById(_id, disableNotifications) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            disableNotifications\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      updateHideUnreadStatusById(_id, hideUnreadStatus) {\n        const query = {\n          _id\n        };\n        const update = _objectSpread({}, hideUnreadStatus === true ? {\n          $set: {\n            hideUnreadStatus\n          }\n        } : {\n          $unset: {\n            hideUnreadStatus: 1\n          }\n        });\n        return this.updateOne(query, update);\n      }\n      updateHideMentionStatusById(_id, hideMentionStatus) {\n        const query = {\n          _id\n        };\n        const update = hideMentionStatus === true ? {\n          $set: {\n            hideMentionStatus\n          }\n        } : {\n          $unset: {\n            hideMentionStatus: 1\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      updateMuteGroupMentions(_id, muteGroupMentions) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            muteGroupMentions\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      changeDepartmentByRoomId(rid, department) {\n        const query = {\n          rid\n        };\n        const update = {\n          $set: {\n            department\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      findAlwaysNotifyDesktopUsersByRoomId(roomId) {\n        const query = {\n          rid: roomId,\n          desktopNotifications: 'all'\n        };\n        return this.find(query);\n      }\n      findDontNotifyDesktopUsersByRoomId(roomId) {\n        const query = {\n          rid: roomId,\n          desktopNotifications: 'nothing'\n        };\n        return this.find(query);\n      }\n      findAlwaysNotifyMobileUsersByRoomId(roomId) {\n        const query = {\n          rid: roomId,\n          mobilePushNotifications: 'all'\n        };\n        return this.find(query);\n      }\n      findDontNotifyMobileUsersByRoomId(roomId) {\n        const query = {\n          rid: roomId,\n          mobilePushNotifications: 'nothing'\n        };\n        return this.find(query);\n      }\n      findWithSendEmailByRoomId(roomId) {\n        const query = {\n          rid: roomId,\n          emailNotifications: {\n            $exists: true\n          }\n        };\n        return this.find(query, {\n          projection: {\n            emailNotifications: 1,\n            u: 1\n          }\n        });\n      }\n      resetUserE2EKey(userId) {\n        return this.updateMany({\n          'u._id': userId\n        }, {\n          $unset: {\n            E2EKey: '',\n            E2ESuggestedKey: 1,\n            oldRoomKeys: 1\n          }\n        });\n      }\n      findByUserIdWithoutE2E(userId, options) {\n        const query = {\n          'u._id': userId,\n          'E2EKey': {\n            $exists: false\n          }\n        };\n        return this.find(query, options);\n      }\n      findOneByRoomIdAndUsername(roomId, username, options) {\n        const query = {\n          'rid': roomId,\n          'u.username': username\n        };\n        return this.findOne(query, options);\n      }\n      findOneByRoomNameAndUserId(roomName, userId) {\n        const query = {\n          'name': roomName,\n          'u._id': userId\n        };\n        return this.findOne(query);\n      }\n      // FIND\n      findByUserId(userId, options) {\n        const query = {\n          'u._id': userId\n        };\n        return this.find(query, options);\n      }\n      findByUserIdExceptType(userId, typeException, options) {\n        const query = {\n          'u._id': userId,\n          't': {\n            $ne: typeException\n          }\n        };\n        return this.find(query, options);\n      }\n      findByUserIdAndType(userId, type, options) {\n        const query = {\n          'u._id': userId,\n          't': type\n        };\n        return this.find(query, options);\n      }\n      /**\n       * @param {IUser['_id']} userId\n       * @param {IRole['_id'][]} roles\n       * @param {any} options\n       */\n      findByUserIdAndRoles(userId, roles, options) {\n        const query = {\n          'u._id': userId,\n          'roles': {\n            $in: roles\n          }\n        };\n        return this.find(query, options);\n      }\n      findByUserIdUpdatedAfter(userId, updatedAt, options) {\n        const query = {\n          'u._id': userId,\n          '_updatedAt': {\n            $gt: updatedAt\n          }\n        };\n        return this.find(query, options);\n      }\n      /**\n       * @param {string} roomId\n       * @param {IRole['_id'][]} roles the list of roles\n       * @param {any} options\n       */\n      findByRoomIdAndRoles(roomId, roles, options) {\n        roles = [].concat(roles);\n        const query = {\n          rid: roomId,\n          roles: {\n            $in: roles\n          }\n        };\n        return this.find(query, options);\n      }\n      countByRoomIdAndRoles(roomId, roles) {\n        roles = [].concat(roles);\n        const query = {\n          rid: roomId,\n          roles: {\n            $in: roles\n          }\n        };\n        return this.col.countDocuments(query);\n      }\n      countByUserId(userId) {\n        const query = {\n          'u._id': userId\n        };\n        return this.col.countDocuments(query);\n      }\n      countByRoomId(roomId, options) {\n        const query = {\n          rid: roomId\n        };\n        if (options) {\n          return this.col.countDocuments(query, options);\n        }\n        return this.col.countDocuments(query);\n      }\n      findByType(types, options) {\n        const query = {\n          t: {\n            $in: types\n          }\n        };\n        return this.find(query, options);\n      }\n      findByTypeAndUserId(type, userId, options) {\n        const query = {\n          't': type,\n          'u._id': userId\n        };\n        return this.find(query, options);\n      }\n      findByRoomWithUserHighlights(roomId, options) {\n        const query = {\n          'rid': roomId,\n          'userHighlights.0': {\n            $exists: true\n          }\n        };\n        return this.find(query, options);\n      }\n      async getLastSeen() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n          projection: {\n            _id: 0,\n            ls: 1\n          }\n        };\n        options.sort = {\n          ls: -1\n        };\n        options.limit = 1;\n        const [subscription] = await this.find({}, options).toArray();\n        return subscription === null || subscription === void 0 ? void 0 : subscription.ls;\n      }\n      findByRoomIdAndUserIds(roomId, userIds, options) {\n        const query = {\n          'rid': roomId,\n          'u._id': {\n            $in: userIds\n          }\n        };\n        return this.find(query, options);\n      }\n      findByRoomIdAndUserIdsOrAllMessages(roomId, userIds) {\n        const query = {\n          rid: roomId,\n          $or: [{\n            'u._id': {\n              $in: userIds\n            }\n          }, {\n            emailNotifications: 'all'\n          }]\n        };\n        return this.find(query);\n      }\n      findByRoomIdWhenUserIdExists(rid, options) {\n        const query = {\n          rid,\n          'u._id': {\n            $exists: true\n          }\n        };\n        return this.find(query, options);\n      }\n      findByRoomIdWhenUsernameExists(rid, options) {\n        const query = {\n          rid,\n          'u.username': {\n            $exists: true\n          }\n        };\n        return this.find(query, options);\n      }\n      countByRoomIdWhenUsernameExists(rid) {\n        const query = {\n          rid,\n          'u.username': {\n            $exists: true\n          }\n        };\n        return this.col.countDocuments(query);\n      }\n      findUnreadByUserId(userId) {\n        const query = {\n          'u._id': userId,\n          'unread': {\n            $gt: 0\n          }\n        };\n        return this.find(query, {\n          projection: {\n            unread: 1\n          }\n        });\n      }\n      getMinimumLastSeenByRoomId(rid) {\n        return this.findOne({\n          rid\n        }, {\n          sort: {\n            ls: 1\n          },\n          projection: {\n            ls: 1\n          }\n        });\n      }\n      // UPDATE\n      archiveByRoomId(roomId) {\n        const query = {\n          rid: roomId\n        };\n        const update = {\n          $set: {\n            alert: false,\n            open: false,\n            archived: true\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      unarchiveByRoomId(roomId) {\n        const query = {\n          rid: roomId\n        };\n        const update = {\n          $set: {\n            alert: false,\n            open: true,\n            archived: false\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      hideByRoomIdAndUserId(roomId, userId) {\n        const query = {\n          'rid': roomId,\n          'u._id': userId\n        };\n        const update = {\n          $set: {\n            alert: false,\n            open: false\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setAsUnreadByRoomIdAndUserId(roomId, userId, firstMessageUnreadTimestamp) {\n        const query = {\n          'rid': roomId,\n          'u._id': userId\n        };\n        const update = {\n          $set: {\n            open: true,\n            alert: true,\n            ls: new Date(firstMessageUnreadTimestamp.getTime() - 1),\n            // make sure last seen is before the first unread message\n            unread: 1\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setCustomFieldsDirectMessagesByUserId(userId, fields) {\n        const query = {\n          'u._id': userId,\n          't': 'd'\n        };\n        const update = {\n          $set: {\n            customFields: fields\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      findByUserIdAndRoomType(userId, type, options) {\n        const query = {\n          'u._id': userId,\n          't': type\n        };\n        return this.find(query, options);\n      }\n      findByNameAndRoomType(filter, options) {\n        if (!filter.name && !filter.t) {\n          throw new Error('invalid filter');\n        }\n        const query = _objectSpread(_objectSpread({}, filter.name && {\n          name: filter.name\n        }), filter.t && {\n          t: filter.t\n        });\n        return this.find(query, options);\n      }\n      setFavoriteByRoomIdAndUserId(roomId, userId, favorite) {\n        if (favorite == null) {\n          favorite = true;\n        }\n        const query = {\n          'rid': roomId,\n          'u._id': userId\n        };\n        const update = {\n          $set: {\n            f: favorite\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      updateNameAndAlertByRoomId(roomId, name, fname) {\n        const query = {\n          rid: roomId\n        };\n        const update = {\n          $set: {\n            name,\n            fname,\n            alert: true\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateDisplayNameByRoomId(roomId, fname) {\n        const query = {\n          rid: roomId\n        };\n        const update = {\n          $set: {\n            fname,\n            name: fname\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateFnameByRoomId(rid, fname) {\n        const query = {\n          rid\n        };\n        const update = {\n          $set: {\n            fname\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateNameAndFnameById(_id, name, fname) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            name,\n            fname\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      setUserUsernameByUserId(userId, username) {\n        const query = {\n          'u._id': userId\n        };\n        const update = {\n          $set: {\n            'u.username': username\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      setNameForDirectRoomsWithOldName(oldName, name) {\n        const query = {\n          name: oldName,\n          t: 'd'\n        };\n        const update = {\n          $set: {\n            name\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateDirectNameAndFnameByName(name, newName, newFname) {\n        const query = {\n          name,\n          t: 'd'\n        };\n        const update = {\n          $set: _objectSpread(_objectSpread({}, newName && {\n            name: newName\n          }), newFname && {\n            fname: newFname\n          })\n        };\n        return this.updateMany(query, update);\n      }\n      incGroupMentionsAndUnreadForRoomIdExcludingUserId(roomId, userId) {\n        let incGroup = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        let incUnread = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n        const query = {\n          'rid': roomId,\n          'u._id': {\n            $ne: userId\n          }\n        };\n        const update = {\n          $set: {\n            alert: true,\n            open: true\n          },\n          $inc: {\n            unread: incUnread,\n            groupMentions: incGroup\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      incUserMentionsAndUnreadForRoomIdAndUserIds(roomId, userIds) {\n        let incUser = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        let incUnread = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n        const query = {\n          'rid': roomId,\n          'u._id': {\n            $in: userIds\n          }\n        };\n        const update = {\n          $set: {\n            alert: true,\n            open: true\n          },\n          $inc: {\n            unread: incUnread,\n            userMentions: incUser\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      ignoreUser(_ref3) {\n        let {\n          _id,\n          ignoredUser: ignored,\n          ignore = true\n        } = _ref3;\n        const query = {\n          _id\n        };\n        const update = {};\n        if (ignore) {\n          update.$addToSet = {\n            ignored\n          };\n        } else {\n          update.$pull = {\n            ignored\n          };\n        }\n        return this.updateOne(query, update);\n      }\n      setAlertForRoomIdAndUserIds(roomId, uids) {\n        const query = {\n          'rid': roomId,\n          'u._id': {\n            $in: uids\n          },\n          'alert': {\n            $ne: true\n          }\n        };\n        const update = {\n          $set: {\n            alert: true\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      setOpenForRoomIdAndUserIds(roomId, uids) {\n        const query = {\n          'rid': roomId,\n          'u._id': {\n            $in: uids\n          },\n          'open': {\n            $ne: true\n          }\n        };\n        const update = {\n          $set: {\n            open: true\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      setLastReplyForRoomIdAndUserIds(roomId, uids, lr) {\n        const query = {\n          'rid': roomId,\n          'u._id': {\n            $in: uids\n          }\n        };\n        const update = {\n          $set: {\n            lr\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      async setBlockedByRoomId(rid, blocked, blocker) {\n        const query = {\n          rid,\n          'u._id': blocked\n        };\n        const update = {\n          $set: {\n            blocked: true\n          }\n        };\n        const query2 = {\n          rid,\n          'u._id': blocker\n        };\n        const update2 = {\n          $set: {\n            blocker: true\n          }\n        };\n        return Promise.all([this.updateOne(query, update), this.updateOne(query2, update2)]);\n      }\n      async unsetBlockedByRoomId(rid, blocked, blocker) {\n        const query = {\n          rid,\n          'u._id': blocked\n        };\n        const update = {\n          $unset: {\n            blocked: 1\n          }\n        };\n        const query2 = {\n          rid,\n          'u._id': blocker\n        };\n        const update2 = {\n          $unset: {\n            blocker: 1\n          }\n        };\n        return Promise.all([this.updateOne(query, update), this.updateOne(query2, update2)]);\n      }\n      updateCustomFieldsByRoomId(rid, cfields) {\n        const query = {\n          rid\n        };\n        const customFields = cfields || {};\n        const update = {\n          $set: {\n            customFields\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateTypeByRoomId(roomId, type) {\n        const query = {\n          rid: roomId\n        };\n        const update = {\n          $set: {\n            t: type\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      /**\n       * @param {string} _id the subscription id\n       * @param {IRole['_id']} role the id of the role\n       */\n      addRoleById(_id, role) {\n        const query = {\n          _id\n        };\n        const update = {\n          $addToSet: {\n            roles: role\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      /**\n       * @param {string} _id the subscription id\n       * @param {IRole['_id']} role the id of the role\n       */\n      removeRoleById(_id, role) {\n        const query = {\n          _id\n        };\n        const update = {\n          $pull: {\n            roles: role\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setArchivedByUsername(username, archived) {\n        const query = {\n          t: 'd',\n          name: username\n        };\n        const update = {\n          $set: {\n            archived\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      clearNotificationUserPreferences(userId, notificationField, notificationOriginField) {\n        const query = {\n          'u._id': userId,\n          [notificationOriginField]: 'user'\n        };\n        const update = {\n          $unset: {\n            [notificationOriginField]: 1,\n            [notificationField]: 1\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateNotificationUserPreferences(userId, userPref, notificationField, notificationOriginField) {\n        const query = {\n          'u._id': userId,\n          [notificationOriginField]: {\n            $ne: 'subscription'\n          }\n        };\n        const update = {\n          // @ts-expect-error - :(\n          $set: {\n            [notificationField]: userPref,\n            [notificationOriginField]: 'user'\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      findByUserPreferences(userId, notificationOriginField, notificationOriginValue, options) {\n        const value = notificationOriginValue === 'user' ? 'user' : {\n          $ne: 'subscription'\n        };\n        const query = {\n          'u._id': userId,\n          [notificationOriginField]: value\n        };\n        return this.find(query, options);\n      }\n      updateUserHighlights(userId, userHighlights) {\n        const query = {\n          'u._id': userId\n        };\n        const update = {\n          $set: {\n            userHighlights\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateDirectFNameByName(name, fname) {\n        const query = {\n          t: 'd',\n          name\n        };\n        let update;\n        if (fname) {\n          update = {\n            $set: {\n              fname\n            }\n          };\n        } else {\n          update = {\n            $unset: {\n              fname: true\n            }\n          };\n        }\n        return this.updateMany(query, update);\n      }\n      // INSERT\n      async createWithRoomAndUser(room, user) {\n        let extraData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const subscription = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n          open: false,\n          alert: false,\n          unread: 0,\n          userMentions: 0,\n          groupMentions: 0,\n          ts: room.ts,\n          rid: room._id,\n          name: room.name,\n          fname: room.fname\n        }, room.customFields && {\n          customFields: room.customFields\n        }), {}, {\n          t: room.t,\n          u: {\n            _id: user._id,\n            username: user.username,\n            name: user.name\n          }\n        }, room.prid && {\n          prid: room.prid\n        }), getDefaultSubscriptionPref(user)), extraData);\n        // @ts-expect-error - types not good :(\n        const result = await this.insertOne(subscription);\n        await Rooms.incUsersCountById(room._id, 1);\n        if (!['d', 'l'].includes(room.t)) {\n          await Users.addRoomByUserId(user._id, room._id);\n        }\n        return result;\n      }\n      async createWithRoomAndManyUsers(room) {\n        let users = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        const subscriptions = users.map(_ref4 => {\n          let {\n            user,\n            extraData\n          } = _ref4;\n          return _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n            open: false,\n            alert: false,\n            unread: 0,\n            userMentions: 0,\n            groupMentions: 0,\n            ts: room.ts,\n            rid: room._id,\n            name: room.name,\n            fname: room.fname\n          }, room.customFields && {\n            customFields: room.customFields\n          }), {}, {\n            t: room.t,\n            u: {\n              _id: user._id,\n              username: user.username,\n              name: user.name\n            }\n          }, room.prid && {\n            prid: room.prid\n          }), getDefaultSubscriptionPref(user)), extraData);\n        });\n        // @ts-expect-error - types not good :(\n        return this.insertMany(subscriptions);\n      }\n      // REMOVE\n      async removeByUserId(userId) {\n        const query = {\n          'u._id': userId\n        };\n        const roomIds = (await this.findByUserId(userId).toArray()).map(s => s.rid);\n        const result = (await this.deleteMany(query)).deletedCount;\n        if (typeof result === 'number' && result > 0) {\n          await Rooms.incUsersCountNotDMsByIds(roomIds, -1);\n        }\n        await Users.removeAllRoomsByUserId(userId);\n        return result;\n      }\n      async removeByRoomIdAndUserId(roomId, userId) {\n        const query = {\n          'rid': roomId,\n          'u._id': userId\n        };\n        const {\n          value: doc\n        } = await this.findOneAndDelete(query);\n        if (doc) {\n          await Rooms.incUsersCountById(roomId, -1);\n        }\n        await Users.removeRoomByUserId(userId, roomId);\n        return doc;\n      }\n      async removeByRoomIds(rids, options) {\n        const result = await this.deleteMany({\n          rid: {\n            $in: rids\n          }\n        }, options);\n        await Users.removeRoomByRoomIds(rids);\n        return result;\n      }\n      async removeByRoomIdsAndUserId(rids, userId) {\n        const result = (await this.deleteMany({\n          'rid': {\n            $in: rids\n          },\n          'u._id': userId\n        })).deletedCount;\n        if (typeof result === 'number' && result > 0) {\n          await Rooms.incUsersCountByIds(rids, -1);\n        }\n        await Users.removeRoomsByRoomIdsAndUserId(rids, userId);\n        return result;\n      }\n      // //////////////////////////////////////////////////////////////////\n      // threads\n      async addUnreadThreadByRoomIdAndUserIds(rid, users, tmid) {\n        let {\n          groupMention = false,\n          userMention = false\n        } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        if (!users) {\n          return;\n        }\n        return this.updateMany({\n          'u._id': {\n            $in: users\n          },\n          rid\n        }, {\n          $addToSet: _objectSpread(_objectSpread({\n            tunread: tmid\n          }, groupMention && {\n            tunreadGroup: tmid\n          }), userMention && {\n            tunreadUser: tmid\n          })\n        });\n      }\n      removeUnreadThreadByRoomIdAndUserId(rid, userId, tmid) {\n        let clearAlert = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        const update = {\n          $pull: {\n            tunread: tmid,\n            tunreadGroup: tmid,\n            tunreadUser: tmid\n          }\n        };\n        if (clearAlert) {\n          update.$set = {\n            alert: false\n          };\n        }\n        return this.updateOne({\n          'u._id': userId,\n          rid\n        }, update);\n      }\n      removeUnreadThreadsByRoomId(rid, tunread) {\n        const query = {\n          rid,\n          tunread: {\n            $in: tunread\n          }\n        };\n        const update = {\n          $pullAll: {\n            tunread,\n            tunreadUser: tunread,\n            tunreadGroup: tunread\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      findUnreadThreadsByRoomId(rid, tunread, options) {\n        const query = {\n          rid,\n          tunread: {\n            $in: tunread\n          }\n        };\n        return this.find(query, options);\n      }\n      openByRoomIdAndUserId(roomId, userId) {\n        const query = {\n          'rid': roomId,\n          'u._id': userId\n        };\n        const update = {\n          $set: {\n            open: true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","SubscriptionsRaw","Rooms","Users","escapeRegExp","compact","mem","getDefaultSubscriptionPref","BaseRaw","__reifyWaitForDeps__","constructor","db","trash","cachedFindByUserId","findByUserId","bind","maxAge","modelIndexes","key","E2EKey","unique","sparse","rid","roles","name","t","open","alert","ts","ls","desktopNotifications","mobilePushNotifications","emailNotifications","autoTranslate","autoTranslateLanguage","prid","getBadgeCount","uid","result","col","aggregate","$match","$ne","$group","_id","total","$sum","toArray","findOneByRoomIdAndUserId","options","arguments","length","undefined","query","findOne","findByUserIdAndRoomIds","userId","roomIds","$in","find","findByRoomId","roomId","findUnarchivedByRoomId","$exists","findByRoomIdAndNotUserId","countByRoomIdAndNotUserId","countDocuments","findByLivechatRoomIdAndNotUserId","countByRoomIdAndUserId","countUnarchivedByRoomId","isUserInRole","roleId","projection","setAsReadByRoomIdAndUserId","readThreads","update","$unset","tunread","tunreadUser","tunreadGroup","$set","unread","userMentions","groupMentions","Date","updateOne","removeRolesByUserId","$pullAll","findUsersInRoles","subscriptions","users","map","subscription","_subscription$u","u","filter","Boolean","countUsersInRoles","addRolesByUserId","Array","isArray","process","env","NODE_ENV","console","warn","$addToSet","$each","isUserInRoleScope","found","updateAllRoomTypesByRoomId","roomType","updateMany","updateAllRoomNamesByRoomId","fname","findByRolesAndRoomId","_ref","findByUserIdAndTypes","types","findByRoomIdAndNotAlertOrOpenExcludingUserIds","_ref2","uidsExclude","uidsInclude","onlyRead","$nin","$or","removeByRoomId","deleteResult","deleteMany","deletedCount","incUsersCountByIds","session","removeRoomByRoomId","findByRoomIdExcludingUserIds","userIds","findConnectedUsersExcept","searchTerm","exceptions","searchFields","extraConditions","limit","startsWith","endsWith","termRegex","RegExp","orStatement","reduce","acc","el","push","trim","$lookup","from","as","let","pipeline","$eq","$unwind","path","score","id","$expr","active","username","$first","nickname","status","statusText","avatarETag","$sort","$limit","incUnreadForRoomIdExcludingUserIds","inc","$inc","setAlertForRoomIdExcludingUserId","setOpenForRoomIdExcludingUserId","updateNameAndFnameByRoomId","setGroupE2EKeyAndOldRoomKeys","oldRoomKeys","setGroupE2EKey","setGroupE2ESuggestedKey","E2ESuggestedKey","findOneAndUpdate","returnDocument","setE2EKeyByUserIdAndRoomId","setGroupE2ESuggestedKeyAndOldRoomKeys","suggestedOldRoomKeys","unsetGroupE2ESuggestedKeyAndOldRoomKeys","setOnHoldByRoomId","onHold","unsetOnHoldByRoomId","findByRoomIds","removeByVisitorToken","token","findByToken","updateAutoTranslateById","updateAllAutoTranslateLanguagesByUserId","language","findByAutoTranslateAndUserId","disableAutoTranslateByRoomId","updateAutoTranslateLanguageById","getAutoTranslateLanguagesByRoomAndNotUser","distinct","roleBaseQuery","scope","findByRidWithoutE2EKey","findUsersWithPublicE2EKeyByRids","rids","excludeUserId","usersLimit","localField","foreignField","$push","public_key","$project","$slice","updateAudioNotificationValueById","audioNotificationValue","clearAudioNotificationValueById","updateNotificationsPrefById","notificationPref","notificationField","notificationPrefOrigin","value","origin","updateUnreadAlertById","unreadAlert","updateDisableNotificationsById","disableNotifications","updateHideUnreadStatusById","hideUnreadStatus","updateHideMentionStatusById","hideMentionStatus","updateMuteGroupMentions","muteGroupMentions","changeDepartmentByRoomId","department","findAlwaysNotifyDesktopUsersByRoomId","findDontNotifyDesktopUsersByRoomId","findAlwaysNotifyMobileUsersByRoomId","findDontNotifyMobileUsersByRoomId","findWithSendEmailByRoomId","resetUserE2EKey","findByUserIdWithoutE2E","findOneByRoomIdAndUsername","findOneByRoomNameAndUserId","roomName","findByUserIdExceptType","typeException","findByUserIdAndType","type","findByUserIdAndRoles","findByUserIdUpdatedAfter","updatedAt","$gt","findByRoomIdAndRoles","concat","countByRoomIdAndRoles","countByUserId","countByRoomId","findByType","findByTypeAndUserId","findByRoomWithUserHighlights","getLastSeen","sort","findByRoomIdAndUserIds","findByRoomIdAndUserIdsOrAllMessages","findByRoomIdWhenUserIdExists","findByRoomIdWhenUsernameExists","countByRoomIdWhenUsernameExists","findUnreadByUserId","getMinimumLastSeenByRoomId","archiveByRoomId","archived","unarchiveByRoomId","hideByRoomIdAndUserId","setAsUnreadByRoomIdAndUserId","firstMessageUnreadTimestamp","getTime","setCustomFieldsDirectMessagesByUserId","fields","customFields","findByUserIdAndRoomType","findByNameAndRoomType","Error","setFavoriteByRoomIdAndUserId","favorite","f","updateNameAndAlertByRoomId","updateDisplayNameByRoomId","updateFnameByRoomId","updateNameAndFnameById","setUserUsernameByUserId","setNameForDirectRoomsWithOldName","oldName","updateDirectNameAndFnameByName","newName","newFname","incGroupMentionsAndUnreadForRoomIdExcludingUserId","incGroup","incUnread","incUserMentionsAndUnreadForRoomIdAndUserIds","incUser","ignoreUser","_ref3","ignoredUser","ignored","ignore","$pull","setAlertForRoomIdAndUserIds","uids","setOpenForRoomIdAndUserIds","setLastReplyForRoomIdAndUserIds","lr","setBlockedByRoomId","blocked","blocker","query2","update2","Promise","all","unsetBlockedByRoomId","updateCustomFieldsByRoomId","cfields","updateTypeByRoomId","addRoleById","role","removeRoleById","setArchivedByUsername","clearNotificationUserPreferences","notificationOriginField","updateNotificationUserPreferences","userPref","findByUserPreferences","notificationOriginValue","updateUserHighlights","userHighlights","updateDirectFNameByName","createWithRoomAndUser","room","user","extraData","insertOne","incUsersCountById","includes","addRoomByUserId","createWithRoomAndManyUsers","_ref4","insertMany","removeByUserId","s","incUsersCountNotDMsByIds","removeAllRoomsByUserId","removeByRoomIdAndUserId","doc","findOneAndDelete","removeRoomByUserId","removeByRoomIds","removeRoomByRoomIds","removeByRoomIdsAndUserId","removeRoomsByRoomIdsAndUserId","addUnreadThreadByRoomIdAndUserIds","tmid","groupMention","userMention","removeUnreadThreadByRoomIdAndUserId","clearAlert","removeUnreadThreadsByRoomId","findUnreadThreadsByRoomId","openByRoomIdAndUserId","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/Subscriptions.ts"],"sourcesContent":["import type {\n\tAtLeast,\n\tIRole,\n\tIRoom,\n\tISubscription,\n\tIUser,\n\tRocketChatRecordDeleted,\n\tRoomType,\n\tSpotlightUser,\n} from '@rocket.chat/core-typings';\nimport type { ISubscriptionsModel } from '@rocket.chat/model-typings';\nimport { Rooms, Users } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { compact } from 'lodash';\nimport mem from 'mem';\nimport type {\n\tCollection,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tFindOptions,\n\tUpdateResult,\n\tDeleteResult,\n\tDocument,\n\tAggregateOptions,\n\tIndexDescription,\n\tUpdateFilter,\n\tInsertOneResult,\n\tInsertManyResult,\n\tAggregationCursor,\n\tCountDocumentsOptions,\n\tDeleteOptions,\n\tModifyResult,\n} from 'mongodb';\n\nimport { getDefaultSubscriptionPref } from '../../../app/utils/lib/getDefaultSubscriptionPref';\nimport { BaseRaw } from './BaseRaw';\n\nexport class SubscriptionsRaw extends BaseRaw<ISubscription> implements ISubscriptionsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISubscription>>) {\n\t\tsuper(db, 'subscription', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\t// Add all indexes from constructor to here\n\t\treturn [\n\t\t\t{ key: { E2EKey: 1 }, unique: true, sparse: true },\n\t\t\t{ key: { 'rid': 1, 'u._id': 1 }, unique: true },\n\t\t\t{ key: { 'rid': 1, 'u._id': 1, 'open': 1 } },\n\t\t\t{ key: { 'rid': 1, 'u.username': 1 } },\n\t\t\t{ key: { 'rid': 1, 'alert': 1, 'u._id': 1 } },\n\t\t\t{ key: { rid: 1, roles: 1 } },\n\t\t\t{ key: { 'u._id': 1, 'name': 1, 't': 1 } },\n\t\t\t{ key: { name: 1, t: 1 } },\n\t\t\t{ key: { open: 1 } },\n\t\t\t{ key: { alert: 1 } },\n\t\t\t{ key: { ts: 1 } },\n\t\t\t{ key: { ls: 1 } },\n\t\t\t{ key: { desktopNotifications: 1 }, sparse: true },\n\t\t\t{ key: { mobilePushNotifications: 1 }, sparse: true },\n\t\t\t{ key: { emailNotifications: 1 }, sparse: true },\n\t\t\t{ key: { autoTranslate: 1 }, sparse: true },\n\t\t\t{ key: { autoTranslateLanguage: 1 }, sparse: true },\n\t\t\t{ key: { 'userHighlights.0': 1 }, sparse: true },\n\t\t\t{ key: { prid: 1 } },\n\t\t\t{ key: { 'u._id': 1, 'open': 1, 'department': 1 } },\n\t\t\t{ key: { rid: 1, ls: 1 } },\n\t\t\t{ key: { 'u._id': 1, 'autotranslate': 1 } },\n\t\t];\n\t}\n\n\tasync getBadgeCount(uid: string): Promise<number> {\n\t\tconst [result] = await this.col\n\t\t\t.aggregate<{ total: number }>([\n\t\t\t\t{ $match: { 'u._id': uid, 'archived': { $ne: true } } },\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: 'total',\n\t\t\t\t\t\ttotal: { $sum: '$unread' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\n\t\treturn result?.total || 0;\n\t}\n\n\tfindOneByRoomIdAndUserId(rid: string, uid: string, options: FindOptions<ISubscription> = {}): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByUserIdAndRoomIds(userId: string, roomIds: Array<string>, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'rid': {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomId(roomId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUnarchivedByRoomId(roomId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'archived': { $ne: true },\n\t\t\t'u._id': { $exists: true },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdAndNotUserId(roomId: string, userId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdAndNotUserId(rid: string, uid: string): Promise<number> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': {\n\t\t\t\t$ne: uid,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindByLivechatRoomIdAndNotUserId(roomId: string, userId: string, options: FindOptions<ISubscription> = {}): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'servedBy._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdAndUserId(rid: string, uid: string | undefined): Promise<number> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountUnarchivedByRoomId(rid: string): Promise<number> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'archived': { $ne: true },\n\t\t\t'u._id': { $exists: true },\n\t\t};\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync isUserInRole(uid: IUser['_id'], roleId: IRole['_id'], rid?: IRoom['_id']): Promise<boolean> {\n\t\tif (rid == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t\t'roles': roleId,\n\t\t};\n\n\t\treturn !!(await this.findOne(query, { projection: { _id: 1 } }));\n\t}\n\n\tsetAsReadByRoomIdAndUserId(\n\t\trid: string,\n\t\tuid: string,\n\t\treadThreads = false,\n\t\talert = false,\n\t\toptions: FindOptions<ISubscription> = {},\n\t): ReturnType<BaseRaw<ISubscription>['updateOne']> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t...(readThreads && {\n\t\t\t\t$unset: {\n\t\t\t\t\ttunread: 1,\n\t\t\t\t\ttunreadUser: 1,\n\t\t\t\t\ttunreadGroup: 1,\n\t\t\t\t} as const,\n\t\t\t}),\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t\talert,\n\t\t\t\tunread: 0,\n\t\t\t\tuserMentions: 0,\n\t\t\t\tgroupMentions: 0,\n\t\t\t\tls: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, options);\n\t}\n\n\tremoveRolesByUserId(uid: IUser['_id'], roles: IRole['_id'][], rid: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pullAll: {\n\t\t\t\troles,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindUsersInRoles(roles: IRole['_id'][], rid: string | undefined): Promise<FindCursor<IUser>>;\n\n\tfindUsersInRoles(roles: IRole['_id'][], rid: string | undefined, options: FindOptions<IUser>): Promise<FindCursor<IUser>>;\n\n\tfindUsersInRoles<P extends Document = IUser>(\n\t\troles: IRole['_id'][],\n\t\trid: string | undefined,\n\t\toptions: FindOptions<P extends IUser ? IUser : P>,\n\t): Promise<FindCursor<P>>;\n\n\tasync findUsersInRoles<P extends Document = IUser>(\n\t\troles: IRole['_id'][],\n\t\trid: IRoom['_id'] | undefined,\n\t\toptions?: FindOptions<P extends IUser ? IUser : P>,\n\t): Promise<FindCursor<P>> {\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t\t...(rid && { rid }),\n\t\t};\n\n\t\tconst subscriptions = await this.find(query, { projection: { 'u._id': 1 } }).toArray();\n\n\t\tconst users = compact(subscriptions.map((subscription) => subscription.u?._id).filter(Boolean));\n\n\t\t// TODO remove dependency to other models - this logic should be inside a function/service\n\t\treturn Users.find<P>({ _id: { $in: users } }, options || {});\n\t}\n\n\tasync countUsersInRoles(roles: IRole['_id'][], rid: IRoom['_id'] | undefined): Promise<number> {\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t\t...(rid && { rid }),\n\t\t};\n\n\t\t// Ideally, the count of subscriptions would be the same (or really similar) to the count in users\n\t\t// As sub/user/room is a 1:1 relation.\n\t\treturn this.countDocuments(query);\n\t}\n\n\taddRolesByUserId(uid: IUser['_id'], roles: IRole['_id'][], rid?: IRoom['_id']): Promise<UpdateResult> {\n\t\tif (!Array.isArray(roles)) {\n\t\t\troles = [roles];\n\t\t\tprocess.env.NODE_ENV === 'development' && console.warn('[WARN] Subscriptions.addRolesByUserId: roles should be an array');\n\t\t}\n\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\troles: { $each: roles },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync isUserInRoleScope(uid: IUser['_id'], rid?: IRoom['_id']): Promise<boolean> {\n\t\tconst query = {\n\t\t\t'u._id': uid,\n\t\t\trid,\n\t\t};\n\n\t\tif (!rid) {\n\t\t\treturn false;\n\t\t}\n\t\tconst options = {\n\t\t\tprojection: { _id: 1 },\n\t\t};\n\n\t\tconst found = await this.findOne(query, options);\n\t\treturn !!found;\n\t}\n\n\tasync updateAllRoomTypesByRoomId(roomId: IRoom['_id'], roomType: RoomType): Promise<void> {\n\t\tawait this.updateMany({ rid: roomId }, { $set: { t: roomType } });\n\t}\n\n\tasync updateAllRoomNamesByRoomId(roomId: IRoom['_id'], name: string, fname: string): Promise<void> {\n\t\tawait this.updateMany({ rid: roomId }, { $set: { name, fname } });\n\t}\n\n\tfindByRolesAndRoomId({ roles, rid }: { roles: string; rid?: string }, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\troles,\n\t\t\t\t...(rid && { rid }),\n\t\t\t},\n\t\t\toptions || {},\n\t\t);\n\t}\n\n\tfindByUserIdAndTypes(userId: string, types: ISubscription['t'][], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t't': {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options || {});\n\t}\n\n\tfindByRoomIdAndNotAlertOrOpenExcludingUserIds(\n\t\t{\n\t\t\troomId,\n\t\t\tuidsExclude,\n\t\t\tuidsInclude,\n\t\t\tonlyRead,\n\t\t}: {\n\t\t\troomId: ISubscription['rid'];\n\t\t\tuidsExclude?: ISubscription['u']['_id'][];\n\t\t\tuidsInclude?: ISubscription['u']['_id'][];\n\t\t\tonlyRead: boolean;\n\t\t},\n\t\toptions?: FindOptions<ISubscription>,\n\t) {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\t...(uidsExclude?.length && {\n\t\t\t\t'u._id': { $nin: uidsExclude },\n\t\t\t}),\n\t\t\t...(onlyRead && {\n\t\t\t\t$or: [...(uidsInclude?.length ? [{ 'u._id': { $in: uidsInclude } }] : []), { alert: { $ne: true } }, { open: { $ne: true } }],\n\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options || {});\n\t}\n\n\tasync removeByRoomId(\n\t\troomId: ISubscription['rid'],\n\t\toptions?: DeleteOptions & { onTrash: (doc: ISubscription) => void },\n\t): Promise<DeleteResult> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\tconst deleteResult = await this.deleteMany(query, options);\n\n\t\tif (deleteResult?.deletedCount) {\n\t\t\tawait Rooms.incUsersCountByIds([roomId], -deleteResult.deletedCount, { session: options?.session });\n\t\t}\n\n\t\tawait Users.removeRoomByRoomId(roomId, { session: options?.session });\n\n\t\treturn deleteResult;\n\t}\n\n\tfindByRoomIdExcludingUserIds(\n\t\troomId: ISubscription['rid'],\n\t\tuserIds: ISubscription['u']['_id'][],\n\t\toptions: FindOptions<ISubscription> = {},\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$nin: userIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findConnectedUsersExcept(\n\t\tuserId: string,\n\t\tsearchTerm: string,\n\t\texceptions: string[],\n\t\tsearchFields: string[],\n\t\textraConditions: Filter<IUser>,\n\t\tlimit: number,\n\t\troomType?: ISubscription['t'],\n\t\t{ startsWith = false, endsWith = false }: { startsWith?: string | false; endsWith?: string | false } = {},\n\t\toptions: AggregateOptions = {},\n\t): Promise<SpotlightUser[]> {\n\t\tconst termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i');\n\t\tconst orStatement = searchFields.reduce(\n\t\t\t(acc, el) => {\n\t\t\t\tacc.push({ [el.trim()]: termRegex });\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t[] as { [x: string]: RegExp }[],\n\t\t);\n\n\t\treturn this.col\n\t\t\t.aggregate<SpotlightUser>(\n\t\t\t\t[\n\t\t\t\t\t// Match all subscriptions of the requester\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t'u._id': userId,\n\t\t\t\t\t\t\t...(roomType ? { t: roomType } : {}),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Group by room id and drop all other subcription data\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: '$rid',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// find all subscriptions to the same rooms by other users\n\t\t\t\t\t{\n\t\t\t\t\t\t$lookup: {\n\t\t\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\t\t\tas: 'subscription',\n\t\t\t\t\t\t\tlet: {\n\t\t\t\t\t\t\t\trid: '$_id',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpipeline: [{ $match: { '$expr': { $eq: ['$rid', '$$rid'] }, 'u._id': { $ne: userId } } }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Unwind the subscription so we have a separate document for each\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: {\n\t\t\t\t\t\t\tpath: '$subscription',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Group the data by user id, keeping track of how many documents each user had\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: '$subscription.u._id',\n\t\t\t\t\t\t\tscore: {\n\t\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Load the data for the subscription's user, ignoring those who don't match the search terms\n\t\t\t\t\t{\n\t\t\t\t\t\t$lookup: {\n\t\t\t\t\t\t\tfrom: 'users',\n\t\t\t\t\t\t\tas: 'user',\n\t\t\t\t\t\t\tlet: { id: '$_id' },\n\t\t\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t\t\t$expr: { $eq: ['$_id', '$$id'] },\n\t\t\t\t\t\t\t\t\t\t...extraConditions,\n\t\t\t\t\t\t\t\t\t\tactive: true,\n\t\t\t\t\t\t\t\t\t\tusername: {\n\t\t\t\t\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t\t\t\t\t...(exceptions.length > 0 && { $nin: exceptions }),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t...(searchTerm && orStatement.length > 0 && { $or: orStatement }),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Discard documents that didn't load any user data in the previous step:\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: {\n\t\t\t\t\t\t\tpath: '$user',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Use group to organize the data at the same time that we pick what to project to the end result\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\tscore: {\n\t\t\t\t\t\t\t\t$sum: '$score',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tname: { $first: '$user.name' },\n\t\t\t\t\t\t\tusername: { $first: '$user.username' },\n\t\t\t\t\t\t\tnickname: { $first: '$user.nickname' },\n\t\t\t\t\t\t\tstatus: { $first: '$user.status' },\n\t\t\t\t\t\t\tstatusText: { $first: '$user.statusText' },\n\t\t\t\t\t\t\tavatarETag: { $first: '$user.avatarETag' },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Sort by score\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\tscore: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t// Limit the number of results\n\t\t\t\t\t{\n\t\t\t\t\t\t$limit: limit,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.toArray();\n\t}\n\n\tincUnreadForRoomIdExcludingUserIds(roomId: IRoom['_id'], userIds: IUser['_id'][], inc: number): Promise<UpdateResult | Document> {\n\t\tif (inc == null) {\n\t\t\tinc = 1;\n\t\t}\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$nin: userIds,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetAlertForRoomIdExcludingUserId(roomId: IRoom['_id'], userId: IUser['_id']): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t\t'alert': { $ne: true },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetOpenForRoomIdExcludingUserId(roomId: IRoom['_id'], userId: IUser['_id']): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t\t'open': { $ne: true },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateNameAndFnameByRoomId(roomId: string, name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync setGroupE2EKeyAndOldRoomKeys(_id: string, key: string, oldRoomKeys?: ISubscription['oldRoomKeys']): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\t\tconst update = { $set: { E2EKey: key, ...(oldRoomKeys && { oldRoomKeys }) } };\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync setGroupE2EKey(_id: string, key: string): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\t\tconst update = { $set: { E2EKey: key } };\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetGroupE2ESuggestedKey(uid: string, rid: string, key: string): Promise<ModifyResult<ISubscription>> {\n\t\tconst query = { rid, 'u._id': uid };\n\t\tconst update = { $set: { E2ESuggestedKey: key } };\n\t\treturn this.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t}\n\n\tsetE2EKeyByUserIdAndRoomId(userId: string, rid: string, key: string): Promise<ModifyResult<ISubscription>> {\n\t\tconst query = { rid, 'u._id': userId };\n\t\tconst update = { $set: { E2EKey: key } };\n\n\t\treturn this.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t}\n\n\tsetGroupE2ESuggestedKeyAndOldRoomKeys(\n\t\tuid: string,\n\t\trid: string,\n\t\tkey: string,\n\t\tsuggestedOldRoomKeys?: ISubscription['suggestedOldRoomKeys'],\n\t): Promise<ModifyResult<ISubscription>> {\n\t\tconst query = { rid, 'u._id': uid };\n\t\tconst update = { $set: { E2ESuggestedKey: key, ...(suggestedOldRoomKeys && { suggestedOldRoomKeys }) } };\n\t\treturn this.findOneAndUpdate(query, update, { returnDocument: 'after' });\n\t}\n\n\tunsetGroupE2ESuggestedKeyAndOldRoomKeys(_id: string): Promise<UpdateResult | Document> {\n\t\tconst query = { _id };\n\t\treturn this.updateOne(query, { $unset: { E2ESuggestedKey: 1, suggestedOldRoomKeys: 1 } });\n\t}\n\n\tsetOnHoldByRoomId(rid: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ rid }, { $set: { onHold: true } });\n\t}\n\n\tunsetOnHoldByRoomId(rid: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ rid }, { $unset: { onHold: 1 } });\n\t}\n\n\tfindByRoomIds(roomIds: ISubscription['u']['_id'][], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tremoveByVisitorToken(token: string): Promise<DeleteResult> {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t};\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tfindByToken(token: string, options?: FindOptions): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t};\n\n\t\treturn this.find<ISubscription>(query, options);\n\t}\n\n\tupdateAutoTranslateById(_id: string, autoTranslate: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tlet update: UpdateFilter<ISubscription>;\n\t\tif (autoTranslate) {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tautoTranslate,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$unset: {\n\t\t\t\t\tautoTranslate: 1,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateAllAutoTranslateLanguagesByUserId(userId: IUser['_id'], language: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'autoTranslate': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tautoTranslateLanguage: language,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindByAutoTranslateAndUserId(\n\t\tuserId: ISubscription['u']['_id'],\n\t\tautoTranslate: ISubscription['autoTranslate'] = true,\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\tautoTranslate,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tdisableAutoTranslateByRoomId(roomId: IRoom['_id']): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.updateMany(query, { $unset: { autoTranslate: 1 } });\n\t}\n\n\tupdateAutoTranslateLanguageById(_id: string, autoTranslateLanguage: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tautoTranslateLanguage,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetAutoTranslateLanguagesByRoomAndNotUser(rid: string, userId: string): Promise<(string | undefined)[]> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': { $ne: userId },\n\t\t\t'autoTranslate': true,\n\t\t};\n\t\treturn this.col.distinct('autoTranslateLanguage', query);\n\t}\n\n\t/**\n\t * @param {string} userId\n\t * @param {string} scope the value for the role scope (room id)\n\t */\n\troleBaseQuery(userId: string, scope?: string): Filter<ISubscription> | void {\n\t\tif (scope == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst query = { 'u._id': userId, ...(scope !== undefined && { rid: scope }) };\n\t\treturn query;\n\t}\n\n\tfindByRidWithoutE2EKey(rid: string, options: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tE2EKey: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUsersWithPublicE2EKeyByRids(\n\t\trids: IRoom['_id'][],\n\t\texcludeUserId: IUser['_id'],\n\t\tusersLimit = 50,\n\t): AggregationCursor<{ rid: IRoom['_id']; users: { _id: IUser['_id']; public_key: string }[] }> {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t'rid': {\n\t\t\t\t\t\t$in: rids,\n\t\t\t\t\t},\n\t\t\t\t\t'E2EKey': {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t\t'E2ESuggestedKey': { $exists: false },\n\t\t\t\t\t'u._id': {\n\t\t\t\t\t\t$ne: excludeUserId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'users',\n\t\t\t\t\tlocalField: 'u._id',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'user',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: '$user',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t'user.e2e.public_key': {\n\t\t\t\t\t\t$exists: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\trid: '$rid',\n\t\t\t\t\t},\n\t\t\t\t\tusers: { $push: { _id: '$user._id', public_key: '$user.e2e.public_key' } },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\trid: '$_id.rid',\n\t\t\t\t\tusers: { $slice: ['$users', usersLimit] },\n\t\t\t\t\t_id: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tupdateAudioNotificationValueById(_id: string, audioNotificationValue: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\taudioNotificationValue,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tclearAudioNotificationValueById(_id: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\taudioNotificationValue: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateNotificationsPrefById(\n\t\t_id: string,\n\t\tnotificationPref: { value: number; origin: string } | null,\n\t\tnotificationField: keyof ISubscription,\n\t\tnotificationPrefOrigin: keyof ISubscription,\n\t): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {};\n\n\t\tif (notificationPref === null) {\n\t\t\tupdate.$unset = {\n\t\t\t\t[notificationField]: 1,\n\t\t\t\t[notificationPrefOrigin]: 1,\n\t\t\t};\n\t\t} else {\n\t\t\t// @ts-expect-error TODO: fix this\n\t\t\tupdate.$set = {\n\t\t\t\t[notificationField]: notificationPref.value,\n\t\t\t\t[notificationPrefOrigin]: notificationPref.origin,\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateUnreadAlertById(_id: string, unreadAlert: ISubscription['unreadAlert']): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tunreadAlert,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateDisableNotificationsById(_id: string, disableNotifications: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tdisableNotifications,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateHideUnreadStatusById(_id: string, hideUnreadStatus: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t...(hideUnreadStatus === true ? { $set: { hideUnreadStatus } } : { $unset: { hideUnreadStatus: 1 } }),\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateHideMentionStatusById(_id: string, hideMentionStatus: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> =\n\t\t\thideMentionStatus === true\n\t\t\t\t? {\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\thideMentionStatus,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\thideMentionStatus: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateMuteGroupMentions(_id: string, muteGroupMentions: boolean): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tmuteGroupMentions,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tchangeDepartmentByRoomId(rid: string, department: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindAlwaysNotifyDesktopUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tdesktopNotifications: 'all',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindDontNotifyDesktopUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tdesktopNotifications: 'nothing',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindAlwaysNotifyMobileUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tmobilePushNotifications: 'all',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindDontNotifyMobileUsersByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\trid: roomId,\n\t\t\tmobilePushNotifications: 'nothing',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindWithSendEmailByRoomId(roomId: string): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\temailNotifications: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, { projection: { emailNotifications: 1, u: 1 } });\n\t}\n\n\tresetUserE2EKey(userId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{ 'u._id': userId },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tE2EKey: '',\n\t\t\t\t\tE2ESuggestedKey: 1,\n\t\t\t\t\toldRoomKeys: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindByUserIdWithoutE2E(userId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'E2EKey': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneByRoomIdAndUsername(roomId: string, username: string, options: FindOptions<ISubscription>): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u.username': username,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByRoomNameAndUserId(roomName: string, userId: string): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\t'name': roomName,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\t// FIND\n\tfindByUserId(userId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcachedFindByUserId = mem(this.findByUserId.bind(this), { maxAge: 5000 });\n\n\tfindByUserIdExceptType(\n\t\tuserId: string,\n\t\ttypeException: ISubscription['t'],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t't': { $ne: typeException },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserIdAndType(userId: string, type: ISubscription['t'], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t't': type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t/**\n\t * @param {IUser['_id']} userId\n\t * @param {IRole['_id'][]} roles\n\t * @param {any} options\n\t */\n\tfindByUserIdAndRoles(userId: string, roles: string[], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'roles': { $in: roles },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUserIdUpdatedAfter(userId: string, updatedAt: Date, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'_updatedAt': {\n\t\t\t\t$gt: updatedAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t/**\n\t * @param {string} roomId\n\t * @param {IRole['_id'][]} roles the list of roles\n\t * @param {any} options\n\t */\n\tfindByRoomIdAndRoles(roomId: string, roles: string[], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\troles = ([] as string[]).concat(roles);\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdAndRoles(roomId: string, roles: string[]): Promise<number> {\n\t\troles = ([] as string[]).concat(roles);\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountByUserId(userId: string): Promise<number> {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountByRoomId(roomId: string, options?: CountDocumentsOptions): Promise<number> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t};\n\n\t\tif (options) {\n\t\t\treturn this.col.countDocuments(query, options);\n\t\t}\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindByType(types: ISubscription['t'][], options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeAndUserId(type: ISubscription['t'], userId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t't': type,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomWithUserHighlights(roomId: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'userHighlights.0': { $exists: true },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync getLastSeen(options: FindOptions<ISubscription> = { projection: { _id: 0, ls: 1 } }): Promise<Date | undefined> {\n\t\toptions.sort = { ls: -1 };\n\t\toptions.limit = 1;\n\t\tconst [subscription] = await this.find({}, options).toArray();\n\t\treturn subscription?.ls;\n\t}\n\n\tfindByRoomIdAndUserIds(\n\t\troomId: ISubscription['rid'],\n\t\tuserIds: ISubscription['u']['_id'][],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$in: userIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdAndUserIdsOrAllMessages(roomId: string, userIds: string[]): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\t$or: [{ 'u._id': { $in: userIds } }, { emailNotifications: 'all' }],\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindByRoomIdWhenUserIdExists(rid: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = { rid, 'u._id': { $exists: true } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByRoomIdWhenUsernameExists(rid: string, options?: FindOptions<ISubscription>): FindCursor<ISubscription> {\n\t\tconst query = { rid, 'u.username': { $exists: true } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountByRoomIdWhenUsernameExists(rid: string): Promise<number> {\n\t\tconst query = { rid, 'u.username': { $exists: true } };\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindUnreadByUserId(userId: string): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'unread': {\n\t\t\t\t$gt: 0,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, { projection: { unread: 1 } });\n\t}\n\n\tgetMinimumLastSeenByRoomId(rid: string): Promise<ISubscription | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: {\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t\tprojection: {\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\t// UPDATE\n\tarchiveByRoomId(roomId: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: false,\n\t\t\t\tarchived: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tunarchiveByRoomId(roomId: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: true,\n\t\t\t\tarchived: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\thideByRoomIdAndUserId(roomId: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: false,\n\t\t\t\topen: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAsUnreadByRoomIdAndUserId(roomId: string, userId: string, firstMessageUnreadTimestamp: Date): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t\talert: true,\n\t\t\t\tls: new Date(firstMessageUnreadTimestamp.getTime() - 1), // make sure last seen is before the first unread message\n\t\t\t\tunread: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetCustomFieldsDirectMessagesByUserId(userId: string, fields: Record<string, any>): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t't': 'd',\n\t\t};\n\t\tconst update: UpdateFilter<ISubscription> = { $set: { customFields: fields } };\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindByUserIdAndRoomType(\n\t\tuserId: ISubscription['u']['_id'],\n\t\ttype: ISubscription['t'],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t't': type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameAndRoomType(\n\t\tfilter: Partial<Pick<ISubscription, 'name' | 't'>>,\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tif (!filter.name && !filter.t) {\n\t\t\tthrow new Error('invalid filter');\n\t\t}\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t...(filter.name && { name: filter.name }),\n\t\t\t...(filter.t && { t: filter.t }),\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tsetFavoriteByRoomIdAndUserId(roomId: string, userId: string, favorite?: boolean): Promise<UpdateResult> {\n\t\tif (favorite == null) {\n\t\t\tfavorite = true;\n\t\t}\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tf: favorite,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateNameAndAlertByRoomId(roomId: string, name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateDisplayNameByRoomId(roomId: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t\tname: fname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateFnameByRoomId(rid: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { rid };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateNameAndFnameById(_id: string, name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetUserUsernameByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { 'u._id': userId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetNameForDirectRoomsWithOldName(oldName: string, name: string): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tname: oldName,\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateDirectNameAndFnameByName(name: string, newName?: string, newFname?: string): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tname,\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\t...(newName && { name: newName }),\n\t\t\t\t...(newFname && { fname: newFname }),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tincGroupMentionsAndUnreadForRoomIdExcludingUserId(\n\t\troomId: IRoom['_id'],\n\t\tuserId: IUser['_id'],\n\t\tincGroup = 1,\n\t\tincUnread = 1,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$ne: userId,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: incUnread,\n\t\t\t\tgroupMentions: incGroup,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tincUserMentionsAndUnreadForRoomIdAndUserIds(\n\t\troomId: IRoom['_id'],\n\t\tuserIds: IUser['_id'][],\n\t\tincUser = 1,\n\t\tincUnread = 1,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': {\n\t\t\t\t$in: userIds,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\tunread: incUnread,\n\t\t\t\tuserMentions: incUser,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tignoreUser({ _id, ignoredUser: ignored, ignore = true }: { _id: string; ignoredUser: string; ignore?: boolean }): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<ISubscription> = {};\n\t\tif (ignore) {\n\t\t\tupdate.$addToSet = { ignored };\n\t\t} else {\n\t\t\tupdate.$pull = { ignored };\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAlertForRoomIdAndUserIds(roomId: ISubscription['rid'], uids: ISubscription['u']['_id'][]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t\t'alert': { $ne: true },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\talert: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetOpenForRoomIdAndUserIds(roomId: string, uids: string[]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t\t'open': { $ne: true },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetLastReplyForRoomIdAndUserIds(roomId: IRoom['_id'], uids: IUser['_id'][], lr: Date): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': { $in: uids },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tlr,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync setBlockedByRoomId(rid: string, blocked: string, blocker: string): Promise<UpdateResult[]> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': blocked,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tblocked: true,\n\t\t\t},\n\t\t};\n\n\t\tconst query2 = {\n\t\t\trid,\n\t\t\t'u._id': blocker,\n\t\t};\n\n\t\tconst update2: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tblocker: true,\n\t\t\t},\n\t\t};\n\n\t\treturn Promise.all([this.updateOne(query, update), this.updateOne(query2, update2)]);\n\t}\n\n\tasync unsetBlockedByRoomId(rid: string, blocked: string, blocker: string): Promise<UpdateResult[]> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t'u._id': blocked,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\tblocked: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst query2 = {\n\t\t\trid,\n\t\t\t'u._id': blocker,\n\t\t};\n\n\t\tconst update2: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\tblocker: 1,\n\t\t\t},\n\t\t};\n\t\treturn Promise.all([this.updateOne(query, update), this.updateOne(query2, update2)]);\n\t}\n\n\tupdateCustomFieldsByRoomId(rid: string, cfields: Record<string, any>): Promise<UpdateResult | Document> {\n\t\tconst query = { rid };\n\t\tconst customFields = cfields || {};\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tcustomFields,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateTypeByRoomId(roomId: string, type: ISubscription['t']): Promise<UpdateResult | Document> {\n\t\tconst query = { rid: roomId };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tt: type,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\t/**\n\t * @param {string} _id the subscription id\n\t * @param {IRole['_id']} role the id of the role\n\t */\n\taddRoleById(_id: string, role: string): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$addToSet: {\n\t\t\t\troles: role,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\t/**\n\t * @param {string} _id the subscription id\n\t * @param {IRole['_id']} role the id of the role\n\t */\n\tremoveRoleById(_id: string, role: string): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$pull: {\n\t\t\t\troles: role,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetArchivedByUsername(username: string, archived: boolean): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tt: 'd',\n\t\t\tname: username,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tarchived,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tclearNotificationUserPreferences(\n\t\tuserId: string,\n\t\tnotificationField: string,\n\t\tnotificationOriginField: string,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t[notificationOriginField]: 'user',\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$unset: {\n\t\t\t\t[notificationOriginField]: 1,\n\t\t\t\t[notificationField]: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateNotificationUserPreferences(\n\t\tuserId: string,\n\t\tuserPref: string | number | boolean,\n\t\tnotificationField: keyof ISubscription,\n\t\tnotificationOriginField: keyof ISubscription,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t[notificationOriginField]: {\n\t\t\t\t$ne: 'subscription',\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t// @ts-expect-error - :(\n\t\t\t$set: {\n\t\t\t\t[notificationField]: userPref,\n\t\t\t\t[notificationOriginField]: 'user',\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindByUserPreferences(\n\t\tuserId: string,\n\t\tnotificationOriginField: keyof ISubscription,\n\t\tnotificationOriginValue: 'user' | 'subscription',\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst value = notificationOriginValue === 'user' ? 'user' : { $ne: 'subscription' };\n\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t\t[notificationOriginField]: value,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tupdateUserHighlights(userId: string, userHighlights: any): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\tuserHighlights,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateDirectFNameByName(name: string, fname: string): Promise<UpdateResult | Document> {\n\t\tconst query: Filter<ISubscription> = {\n\t\t\tt: 'd' as const,\n\t\t\tname,\n\t\t};\n\n\t\tlet update: UpdateFilter<ISubscription>;\n\t\tif (fname) {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tfname,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$unset: {\n\t\t\t\t\tfname: true,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\t// INSERT\n\tasync createWithRoomAndUser(room: IRoom, user: IUser, extraData: Partial<ISubscription> = {}): Promise<InsertOneResult<ISubscription>> {\n\t\tconst subscription = {\n\t\t\topen: false,\n\t\t\talert: false,\n\t\t\tunread: 0,\n\t\t\tuserMentions: 0,\n\t\t\tgroupMentions: 0,\n\t\t\tts: room.ts,\n\t\t\trid: room._id,\n\t\t\tname: room.name,\n\t\t\tfname: room.fname,\n\t\t\t...(room.customFields && { customFields: room.customFields }),\n\t\t\tt: room.t,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\t...(room.prid && { prid: room.prid }),\n\t\t\t...getDefaultSubscriptionPref(user),\n\t\t\t...extraData,\n\t\t};\n\n\t\t// @ts-expect-error - types not good :(\n\t\tconst result = await this.insertOne(subscription);\n\n\t\tawait Rooms.incUsersCountById(room._id, 1);\n\n\t\tif (!['d', 'l'].includes(room.t)) {\n\t\t\tawait Users.addRoomByUserId(user._id, room._id);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync createWithRoomAndManyUsers(\n\t\troom: IRoom,\n\t\tusers: { user: AtLeast<IUser, '_id' | 'username' | 'name' | 'settings'>; extraData: Record<string, any> }[] = [],\n\t): Promise<InsertManyResult<ISubscription>> {\n\t\tconst subscriptions = users.map(({ user, extraData }) => ({\n\t\t\topen: false,\n\t\t\talert: false,\n\t\t\tunread: 0,\n\t\t\tuserMentions: 0,\n\t\t\tgroupMentions: 0,\n\t\t\tts: room.ts,\n\t\t\trid: room._id,\n\t\t\tname: room.name,\n\t\t\tfname: room.fname,\n\t\t\t...(room.customFields && { customFields: room.customFields }),\n\t\t\tt: room.t,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\t...(room.prid && { prid: room.prid }),\n\t\t\t...getDefaultSubscriptionPref(user),\n\t\t\t...extraData,\n\t\t}));\n\n\t\t// @ts-expect-error - types not good :(\n\t\treturn this.insertMany(subscriptions);\n\t}\n\n\t// REMOVE\n\tasync removeByUserId(userId: string): Promise<number> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst roomIds = (await this.findByUserId(userId).toArray()).map((s) => s.rid);\n\n\t\tconst result = (await this.deleteMany(query)).deletedCount;\n\n\t\tif (typeof result === 'number' && result > 0) {\n\t\t\tawait Rooms.incUsersCountNotDMsByIds(roomIds, -1);\n\t\t}\n\n\t\tawait Users.removeAllRoomsByUserId(userId);\n\n\t\treturn result;\n\t}\n\n\tasync removeByRoomIdAndUserId(roomId: string, userId: string): Promise<ISubscription | null> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst { value: doc } = await this.findOneAndDelete(query);\n\n\t\tif (doc) {\n\t\t\tawait Rooms.incUsersCountById(roomId, -1);\n\t\t}\n\n\t\tawait Users.removeRoomByUserId(userId, roomId);\n\n\t\treturn doc;\n\t}\n\n\tasync removeByRoomIds(rids: string[], options?: { onTrash: (doc: ISubscription) => void }): Promise<DeleteResult> {\n\t\tconst result = await this.deleteMany({ rid: { $in: rids } }, options);\n\n\t\tawait Users.removeRoomByRoomIds(rids);\n\n\t\treturn result;\n\t}\n\n\tasync removeByRoomIdsAndUserId(rids: string[], userId: string): Promise<number> {\n\t\tconst result = (await this.deleteMany({ 'rid': { $in: rids }, 'u._id': userId })).deletedCount;\n\n\t\tif (typeof result === 'number' && result > 0) {\n\t\t\tawait Rooms.incUsersCountByIds(rids, -1);\n\t\t}\n\n\t\tawait Users.removeRoomsByRoomIdsAndUserId(rids, userId);\n\n\t\treturn result;\n\t}\n\n\t// //////////////////////////////////////////////////////////////////\n\t// threads\n\n\tasync addUnreadThreadByRoomIdAndUserIds(\n\t\trid: string,\n\t\tusers: string[],\n\t\ttmid: string,\n\t\t{ groupMention = false, userMention = false }: { groupMention?: boolean; userMention?: boolean } = {},\n\t): Promise<UpdateResult | Document | void> {\n\t\tif (!users) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'u._id': { $in: users },\n\t\t\t\trid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$addToSet: {\n\t\t\t\t\ttunread: tmid,\n\t\t\t\t\t...(groupMention && { tunreadGroup: tmid }),\n\t\t\t\t\t...(userMention && { tunreadUser: tmid }),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveUnreadThreadByRoomIdAndUserId(rid: string, userId: string, tmid: string, clearAlert = false): Promise<UpdateResult> {\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$pull: {\n\t\t\t\ttunread: tmid,\n\t\t\t\ttunreadGroup: tmid,\n\t\t\t\ttunreadUser: tmid,\n\t\t\t},\n\t\t};\n\n\t\tif (clearAlert) {\n\t\t\tupdate.$set = { alert: false };\n\t\t}\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t'u._id': userId,\n\t\t\t\trid,\n\t\t\t},\n\t\t\tupdate,\n\t\t);\n\t}\n\n\tremoveUnreadThreadsByRoomId(rid: string, tunread: string[]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\ttunread: { $in: tunread },\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$pullAll: {\n\t\t\t\ttunread,\n\t\t\t\ttunreadUser: tunread,\n\t\t\t\ttunreadGroup: tunread,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindUnreadThreadsByRoomId(\n\t\trid: ISubscription['rid'],\n\t\ttunread: ISubscription['tunread'],\n\t\toptions?: FindOptions<ISubscription>,\n\t): FindCursor<ISubscription> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\ttunread: { $in: tunread },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\topenByRoomIdAndUserId(roomId: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t'rid': roomId,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update: UpdateFilter<ISubscription> = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"67a633f441b3edc84054e70519d80fa63b6901e6"}
