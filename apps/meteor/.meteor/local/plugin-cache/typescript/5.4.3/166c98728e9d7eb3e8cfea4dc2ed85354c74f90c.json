{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/methods/saveUserPreferences.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/methods/saveUserPreferences.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/methods/saveUserPreferences.ts","inputSourceMap":{"version":3,"file":"server/methods/saveUserPreferences.ts","sourceRoot":"","sources":["server/methods/saveUserPreferences.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISubscription, ThemePreference } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Subscriptions, Users } from '@rocket.chat/models';\nimport type { FontSize } from '@rocket.chat/rest-typings';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport {\n\tnotifyOnSubscriptionChangedByAutoTranslateAndUserId,\n\tnotifyOnSubscriptionChangedByUserId,\n\tnotifyOnSubscriptionChangedByUserPreferences,\n\tnotifyOnUserChange,\n} from '../../app/lib/server/lib/notifyListener';\nimport { settings as rcSettings } from '../../app/settings/server';\n\ntype UserPreferences = {\n\tlanguage: string;\n\tnewRoomNotification: string;\n\tnewMessageNotification: string;\n\tclockMode: number;\n\tuseEmojis: boolean;\n\tconvertAsciiEmoji: boolean;\n\tsaveMobileBandwidth: boolean;\n\tcollapseMediaByDefault: boolean;\n\tautoImageLoad: boolean;\n\temailNotificationMode: string;\n\tunreadAlert: boolean;\n\tnotificationsSoundVolume: number;\n\tdesktopNotifications: string;\n\tpushNotifications: string;\n\tenableAutoAway: boolean;\n\thighlights: string[];\n\thideUsernames: boolean;\n\thideRoles: boolean;\n\tdisplayAvatars: boolean;\n\thideFlexTab: boolean;\n\tsendOnEnter: string;\n\tidleTimeLimit: number;\n\tsidebarShowFavorites: boolean;\n\tsidebarShowUnread: boolean;\n\tsidebarSortby: string;\n\tsidebarViewMode: string;\n\tsidebarDisplayAvatar: boolean;\n\tsidebarGroupByType: boolean;\n\tmuteFocusedConversations: boolean;\n\tdontAskAgainList: { action: string; label: string }[];\n\tthemeAppearence: ThemePreference;\n\tfontSize?: FontSize;\n\treceiveLoginDetectionEmail: boolean;\n\tnotifyCalendarEvents: boolean;\n\tenableMobileRinging: boolean;\n\tmentionsWithSymbol?: boolean;\n};\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tsaveUserPreferences(preferences: Partial<UserPreferences>): boolean;\n\t}\n}\n\nasync function updateNotificationPreferences(\n\tuserId: ISubscription['u']['_id'],\n\tsetting: keyof ISubscription,\n\tnewValue: string,\n\toldValue: string,\n\tpreferenceType: keyof ISubscription,\n) {\n\tif (newValue === oldValue) {\n\t\treturn;\n\t}\n\n\tif (newValue === 'default') {\n\t\tconst clearNotificationResponse = await Subscriptions.clearNotificationUserPreferences(userId, setting, preferenceType);\n\t\tif (clearNotificationResponse.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByUserPreferences(userId, preferenceType, 'user');\n\t\t}\n\t\treturn;\n\t}\n\n\tconst updateNotificationResponse = await Subscriptions.updateNotificationUserPreferences(userId, newValue, setting, preferenceType);\n\tif (updateNotificationResponse.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByUserPreferences(userId, preferenceType, 'subscription');\n\t}\n}\n\nexport const saveUserPreferences = async (settings: Partial<UserPreferences>, userId: string): Promise<void> => {\n\tconst keys = {\n\t\tlanguage: Match.Optional(String),\n\t\tnewRoomNotification: Match.Optional(String),\n\t\tnewMessageNotification: Match.Optional(String),\n\t\tclockMode: Match.Optional(Number),\n\t\tuseEmojis: Match.Optional(Boolean),\n\t\tconvertAsciiEmoji: Match.Optional(Boolean),\n\t\tsaveMobileBandwidth: Match.Optional(Boolean),\n\t\tcollapseMediaByDefault: Match.Optional(Boolean),\n\t\tautoImageLoad: Match.Optional(Boolean),\n\t\temailNotificationMode: Match.Optional(String),\n\t\tunreadAlert: Match.Optional(Boolean),\n\t\tnotificationsSoundVolume: Match.Optional(Number),\n\t\tdesktopNotifications: Match.Optional(String),\n\t\tpushNotifications: Match.Optional(String),\n\t\tenableAutoAway: Match.Optional(Boolean),\n\t\thighlights: Match.Optional([String]),\n\t\thideUsernames: Match.Optional(Boolean),\n\t\thideRoles: Match.Optional(Boolean),\n\t\tdisplayAvatars: Match.Optional(Boolean),\n\t\thideFlexTab: Match.Optional(Boolean),\n\t\tsendOnEnter: Match.Optional(String),\n\t\tidleTimeLimit: Match.Optional(Number),\n\t\tsidebarShowFavorites: Match.Optional(Boolean),\n\t\tsidebarShowUnread: Match.Optional(Boolean),\n\t\tsidebarSortby: Match.Optional(String),\n\t\tsidebarViewMode: Match.Optional(String),\n\t\tsidebarDisplayAvatar: Match.Optional(Boolean),\n\t\tsidebarGroupByType: Match.Optional(Boolean),\n\t\tmuteFocusedConversations: Match.Optional(Boolean),\n\t\tthemeAppearence: Match.Optional(String),\n\t\tfontSize: Match.Optional(String),\n\t\tomnichannelTranscriptEmail: Match.Optional(Boolean),\n\t\tomnichannelTranscriptPDF: Match.Optional(Boolean),\n\t\tomnichannelHideConversationAfterClosing: Match.Optional(Boolean),\n\t\tnotifyCalendarEvents: Match.Optional(Boolean),\n\t\tenableMobileRinging: Match.Optional(Boolean),\n\t\tmentionsWithSymbol: Match.Optional(Boolean),\n\t};\n\tcheck(settings, Match.ObjectIncluding(keys));\n\n\tconst user = await Users.findOneById(userId);\n\tif (!user) {\n\t\treturn;\n\t}\n\n\tconst {\n\t\tdesktopNotifications: oldDesktopNotifications,\n\t\tpushNotifications: oldMobileNotifications,\n\t\temailNotificationMode: oldEmailNotifications,\n\t\tlanguage: oldLanguage,\n\t} = user.settings?.preferences || {};\n\n\tif (user.settings == null) {\n\t\tawait Users.clearSettings(user._id);\n\t}\n\n\tif (settings.language != null) {\n\t\tawait Users.setLanguage(user._id, settings.language);\n\t}\n\n\t// Keep compatibility with old values\n\tif (settings.emailNotificationMode === 'all') {\n\t\tsettings.emailNotificationMode = 'mentions';\n\t} else if (settings.emailNotificationMode === 'disabled') {\n\t\tsettings.emailNotificationMode = 'nothing';\n\t}\n\n\tif (settings.idleTimeLimit != null && settings.idleTimeLimit < 60) {\n\t\tthrow new Meteor.Error('invalid-idle-time-limit-value', 'Invalid idleTimeLimit');\n\t}\n\n\tawait Users.setPreferences(user._id, settings);\n\n\tconst diff = (Object.keys(settings) as (keyof UserPreferences)[]).reduce<Record<string, any>>((data, key) => {\n\t\tdata[`settings.preferences.${key}`] = settings[key];\n\n\t\treturn data;\n\t}, {});\n\n\tvoid notifyOnUserChange({\n\t\tid: user._id,\n\t\tclientAction: 'updated',\n\t\tdiff: {\n\t\t\t...diff,\n\t\t\t...(settings.language != null && { language: settings.language }),\n\t\t},\n\t});\n\n\t// propagate changed notification preferences\n\tsetImmediate(async () => {\n\t\tconst { desktopNotifications, pushNotifications, emailNotificationMode, highlights, language } = settings;\n\t\tconst promises = [];\n\n\t\tif (desktopNotifications) {\n\t\t\tpromises.push(\n\t\t\t\tupdateNotificationPreferences(user._id, 'desktopNotifications', desktopNotifications, oldDesktopNotifications, 'desktopPrefOrigin'),\n\t\t\t);\n\t\t}\n\n\t\tif (pushNotifications) {\n\t\t\tpromises.push(\n\t\t\t\tupdateNotificationPreferences(user._id, 'mobilePushNotifications', pushNotifications, oldMobileNotifications, 'mobilePrefOrigin'),\n\t\t\t);\n\t\t}\n\n\t\tif (emailNotificationMode) {\n\t\t\tpromises.push(\n\t\t\t\tupdateNotificationPreferences(user._id, 'emailNotifications', emailNotificationMode, oldEmailNotifications, 'emailPrefOrigin'),\n\t\t\t);\n\t\t}\n\n\t\tawait Promise.allSettled(promises);\n\n\t\tif (Array.isArray(highlights)) {\n\t\t\tconst response = await Subscriptions.updateUserHighlights(user._id, highlights);\n\t\t\tif (response.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByUserId(user._id);\n\t\t\t}\n\t\t}\n\n\t\tif (language && oldLanguage !== language && rcSettings.get('AutoTranslate_AutoEnableOnJoinRoom')) {\n\t\t\tconst response = await Subscriptions.updateAllAutoTranslateLanguagesByUserId(user._id, language);\n\t\t\tif (response.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByAutoTranslateAndUserId(user._id);\n\t\t\t}\n\t\t}\n\t});\n};\n\nMeteor.methods<ServerMethods>({\n\tasync saveUserPreferences(settings) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'saveUserPreferences' });\n\t\t}\n\n\t\tawait saveUserPreferences(settings, userId);\n\n\t\treturn true;\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/methods/saveUserPreferences.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/methods/saveUserPreferences.ts","inputSourceMap":{"version":3,"file":"server/methods/saveUserPreferences.ts","sourceRoot":"","sources":["server/methods/saveUserPreferences.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAE3D,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EACN,mDAAmD,EACnD,mCAAmC,EACnC,4CAA4C,EAC5C,kBAAkB,GAClB,MAAM,yCAAyC,CAAC;AACjD,OAAO,EAAE,QAAQ,IAAI,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAgDnE,KAAK,UAAU,6BAA6B,CAC3C,MAAiC,EACjC,OAA4B,EAC5B,QAAgB,EAChB,QAAgB,EAChB,cAAmC;IAEnC,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;QAC3B,OAAO;IACR,CAAC;IAED,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;QAC5B,MAAM,yBAAyB,GAAG,MAAM,aAAa,CAAC,gCAAgC,CAAC,MAAM,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;QACxH,IAAI,yBAAyB,CAAC,aAAa,EAAE,CAAC;YAC7C,KAAK,4CAA4C,CAAC,MAAM,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;QACnF,CAAC;QACD,OAAO;IACR,CAAC;IAED,MAAM,0BAA0B,GAAG,MAAM,aAAa,CAAC,iCAAiC,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;IACpI,IAAI,0BAA0B,CAAC,aAAa,EAAE,CAAC;QAC9C,KAAK,4CAA4C,CAAC,MAAM,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;IAC3F,CAAC;AACF,CAAC;AAED,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,QAAkC,EAAE,MAAc,EAAiB,EAAE;IAC9G,MAAM,IAAI,GAAG;QACZ,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QAChC,mBAAmB,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC3C,sBAAsB,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC9C,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QACjC,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAClC,iBAAiB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC1C,mBAAmB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC5C,sBAAsB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC/C,aAAa,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QACtC,qBAAqB,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC7C,WAAW,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QACpC,wBAAwB,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QAChD,oBAAoB,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC5C,iBAAiB,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QACzC,cAAc,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QACvC,UAAU,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;QACpC,aAAa,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QACtC,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAClC,cAAc,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QACvC,WAAW,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QACpC,WAAW,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QACnC,aAAa,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QACrC,oBAAoB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC7C,iBAAiB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC1C,aAAa,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QACrC,eAAe,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QACvC,oBAAoB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC7C,kBAAkB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC3C,wBAAwB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QACjD,eAAe,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QACvC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QAChC,0BAA0B,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QACnD,wBAAwB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QACjD,uCAAuC,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAChE,oBAAoB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC7C,mBAAmB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC5C,kBAAkB,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;KAC3C,CAAC;IACF,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IAE7C,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAC7C,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO;IACR,CAAC;IAED,MAAM,EACL,oBAAoB,EAAE,uBAAuB,EAC7C,iBAAiB,EAAE,sBAAsB,EACzC,qBAAqB,EAAE,qBAAqB,EAC5C,QAAQ,EAAE,WAAW,GACrB,GAAG,IAAI,CAAC,QAAQ,EAAE,WAAW,IAAI,EAAE,CAAC;IAErC,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE,CAAC;QAC3B,MAAM,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IAED,IAAI,QAAQ,CAAC,QAAQ,IAAI,IAAI,EAAE,CAAC;QAC/B,MAAM,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACtD,CAAC;IAED,qCAAqC;IACrC,IAAI,QAAQ,CAAC,qBAAqB,KAAK,KAAK,EAAE,CAAC;QAC9C,QAAQ,CAAC,qBAAqB,GAAG,UAAU,CAAC;IAC7C,CAAC;SAAM,IAAI,QAAQ,CAAC,qBAAqB,KAAK,UAAU,EAAE,CAAC;QAC1D,QAAQ,CAAC,qBAAqB,GAAG,SAAS,CAAC;IAC5C,CAAC;IAED,IAAI,QAAQ,CAAC,aAAa,IAAI,IAAI,IAAI,QAAQ,CAAC,aAAa,GAAG,EAAE,EAAE,CAAC;QACnE,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,uBAAuB,CAAC,CAAC;IAClF,CAAC;IAED,MAAM,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAE/C,MAAM,IAAI,GAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAA+B,CAAC,MAAM,CAAsB,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;QAC3G,IAAI,CAAC,wBAAwB,GAAG,EAAE,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAEpD,OAAO,IAAI,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,KAAK,kBAAkB,CAAC;QACvB,EAAE,EAAE,IAAI,CAAC,GAAG;QACZ,YAAY,EAAE,SAAS;QACvB,IAAI,EAAE;YACL,GAAG,IAAI;YACP,GAAG,CAAC,QAAQ,CAAC,QAAQ,IAAI,IAAI,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC;SACjE;KACD,CAAC,CAAC;IAEH,6CAA6C;IAC7C,YAAY,CAAC,KAAK,IAAI,EAAE;QACvB,MAAM,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,QAAQ,CAAC;QAC1G,MAAM,QAAQ,GAAG,EAAE,CAAC;QAEpB,IAAI,oBAAoB,EAAE,CAAC;YAC1B,QAAQ,CAAC,IAAI,CACZ,6BAA6B,CAAC,IAAI,CAAC,GAAG,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,uBAAuB,EAAE,mBAAmB,CAAC,CACnI,CAAC;QACH,CAAC;QAED,IAAI,iBAAiB,EAAE,CAAC;YACvB,QAAQ,CAAC,IAAI,CACZ,6BAA6B,CAAC,IAAI,CAAC,GAAG,EAAE,yBAAyB,EAAE,iBAAiB,EAAE,sBAAsB,EAAE,kBAAkB,CAAC,CACjI,CAAC;QACH,CAAC;QAED,IAAI,qBAAqB,EAAE,CAAC;YAC3B,QAAQ,CAAC,IAAI,CACZ,6BAA6B,CAAC,IAAI,CAAC,GAAG,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,qBAAqB,EAAE,iBAAiB,CAAC,CAC9H,CAAC;QACH,CAAC;QAED,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAEnC,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC;YAC/B,MAAM,QAAQ,GAAG,MAAM,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;YAChF,IAAI,QAAQ,CAAC,aAAa,EAAE,CAAC;gBAC5B,KAAK,mCAAmC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACpD,CAAC;QACF,CAAC;QAED,IAAI,QAAQ,IAAI,WAAW,KAAK,QAAQ,IAAI,UAAU,CAAC,GAAG,CAAC,oCAAoC,CAAC,EAAE,CAAC;YAClG,MAAM,QAAQ,GAAG,MAAM,aAAa,CAAC,uCAAuC,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YACjG,IAAI,QAAQ,CAAC,aAAa,EAAE,CAAC;gBAC5B,KAAK,mDAAmD,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACpE,CAAC;QACF,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO,CAAgB;IAC7B,KAAK,CAAC,mBAAmB,CAAC,QAAQ;QACjC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,EAAE,CAAC;YACb,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,qBAAqB,EAAE,CAAC,CAAC;QACjG,CAAC;QAED,MAAM,mBAAmB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAE5C,OAAO,IAAI,CAAC;IACb,CAAC;CACD,CAAC,CAAC","sourcesContent":["import type { ISubscription, ThemePreference } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Subscriptions, Users } from '@rocket.chat/models';\nimport type { FontSize } from '@rocket.chat/rest-typings';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport {\n\tnotifyOnSubscriptionChangedByAutoTranslateAndUserId,\n\tnotifyOnSubscriptionChangedByUserId,\n\tnotifyOnSubscriptionChangedByUserPreferences,\n\tnotifyOnUserChange,\n} from '../../app/lib/server/lib/notifyListener';\nimport { settings as rcSettings } from '../../app/settings/server';\n\ntype UserPreferences = {\n\tlanguage: string;\n\tnewRoomNotification: string;\n\tnewMessageNotification: string;\n\tclockMode: number;\n\tuseEmojis: boolean;\n\tconvertAsciiEmoji: boolean;\n\tsaveMobileBandwidth: boolean;\n\tcollapseMediaByDefault: boolean;\n\tautoImageLoad: boolean;\n\temailNotificationMode: string;\n\tunreadAlert: boolean;\n\tnotificationsSoundVolume: number;\n\tdesktopNotifications: string;\n\tpushNotifications: string;\n\tenableAutoAway: boolean;\n\thighlights: string[];\n\thideUsernames: boolean;\n\thideRoles: boolean;\n\tdisplayAvatars: boolean;\n\thideFlexTab: boolean;\n\tsendOnEnter: string;\n\tidleTimeLimit: number;\n\tsidebarShowFavorites: boolean;\n\tsidebarShowUnread: boolean;\n\tsidebarSortby: string;\n\tsidebarViewMode: string;\n\tsidebarDisplayAvatar: boolean;\n\tsidebarGroupByType: boolean;\n\tmuteFocusedConversations: boolean;\n\tdontAskAgainList: { action: string; label: string }[];\n\tthemeAppearence: ThemePreference;\n\tfontSize?: FontSize;\n\treceiveLoginDetectionEmail: boolean;\n\tnotifyCalendarEvents: boolean;\n\tenableMobileRinging: boolean;\n\tmentionsWithSymbol?: boolean;\n};\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tsaveUserPreferences(preferences: Partial<UserPreferences>): boolean;\n\t}\n}\n\nasync function updateNotificationPreferences(\n\tuserId: ISubscription['u']['_id'],\n\tsetting: keyof ISubscription,\n\tnewValue: string,\n\toldValue: string,\n\tpreferenceType: keyof ISubscription,\n) {\n\tif (newValue === oldValue) {\n\t\treturn;\n\t}\n\n\tif (newValue === 'default') {\n\t\tconst clearNotificationResponse = await Subscriptions.clearNotificationUserPreferences(userId, setting, preferenceType);\n\t\tif (clearNotificationResponse.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByUserPreferences(userId, preferenceType, 'user');\n\t\t}\n\t\treturn;\n\t}\n\n\tconst updateNotificationResponse = await Subscriptions.updateNotificationUserPreferences(userId, newValue, setting, preferenceType);\n\tif (updateNotificationResponse.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByUserPreferences(userId, preferenceType, 'subscription');\n\t}\n}\n\nexport const saveUserPreferences = async (settings: Partial<UserPreferences>, userId: string): Promise<void> => {\n\tconst keys = {\n\t\tlanguage: Match.Optional(String),\n\t\tnewRoomNotification: Match.Optional(String),\n\t\tnewMessageNotification: Match.Optional(String),\n\t\tclockMode: Match.Optional(Number),\n\t\tuseEmojis: Match.Optional(Boolean),\n\t\tconvertAsciiEmoji: Match.Optional(Boolean),\n\t\tsaveMobileBandwidth: Match.Optional(Boolean),\n\t\tcollapseMediaByDefault: Match.Optional(Boolean),\n\t\tautoImageLoad: Match.Optional(Boolean),\n\t\temailNotificationMode: Match.Optional(String),\n\t\tunreadAlert: Match.Optional(Boolean),\n\t\tnotificationsSoundVolume: Match.Optional(Number),\n\t\tdesktopNotifications: Match.Optional(String),\n\t\tpushNotifications: Match.Optional(String),\n\t\tenableAutoAway: Match.Optional(Boolean),\n\t\thighlights: Match.Optional([String]),\n\t\thideUsernames: Match.Optional(Boolean),\n\t\thideRoles: Match.Optional(Boolean),\n\t\tdisplayAvatars: Match.Optional(Boolean),\n\t\thideFlexTab: Match.Optional(Boolean),\n\t\tsendOnEnter: Match.Optional(String),\n\t\tidleTimeLimit: Match.Optional(Number),\n\t\tsidebarShowFavorites: Match.Optional(Boolean),\n\t\tsidebarShowUnread: Match.Optional(Boolean),\n\t\tsidebarSortby: Match.Optional(String),\n\t\tsidebarViewMode: Match.Optional(String),\n\t\tsidebarDisplayAvatar: Match.Optional(Boolean),\n\t\tsidebarGroupByType: Match.Optional(Boolean),\n\t\tmuteFocusedConversations: Match.Optional(Boolean),\n\t\tthemeAppearence: Match.Optional(String),\n\t\tfontSize: Match.Optional(String),\n\t\tomnichannelTranscriptEmail: Match.Optional(Boolean),\n\t\tomnichannelTranscriptPDF: Match.Optional(Boolean),\n\t\tomnichannelHideConversationAfterClosing: Match.Optional(Boolean),\n\t\tnotifyCalendarEvents: Match.Optional(Boolean),\n\t\tenableMobileRinging: Match.Optional(Boolean),\n\t\tmentionsWithSymbol: Match.Optional(Boolean),\n\t};\n\tcheck(settings, Match.ObjectIncluding(keys));\n\n\tconst user = await Users.findOneById(userId);\n\tif (!user) {\n\t\treturn;\n\t}\n\n\tconst {\n\t\tdesktopNotifications: oldDesktopNotifications,\n\t\tpushNotifications: oldMobileNotifications,\n\t\temailNotificationMode: oldEmailNotifications,\n\t\tlanguage: oldLanguage,\n\t} = user.settings?.preferences || {};\n\n\tif (user.settings == null) {\n\t\tawait Users.clearSettings(user._id);\n\t}\n\n\tif (settings.language != null) {\n\t\tawait Users.setLanguage(user._id, settings.language);\n\t}\n\n\t// Keep compatibility with old values\n\tif (settings.emailNotificationMode === 'all') {\n\t\tsettings.emailNotificationMode = 'mentions';\n\t} else if (settings.emailNotificationMode === 'disabled') {\n\t\tsettings.emailNotificationMode = 'nothing';\n\t}\n\n\tif (settings.idleTimeLimit != null && settings.idleTimeLimit < 60) {\n\t\tthrow new Meteor.Error('invalid-idle-time-limit-value', 'Invalid idleTimeLimit');\n\t}\n\n\tawait Users.setPreferences(user._id, settings);\n\n\tconst diff = (Object.keys(settings) as (keyof UserPreferences)[]).reduce<Record<string, any>>((data, key) => {\n\t\tdata[`settings.preferences.${key}`] = settings[key];\n\n\t\treturn data;\n\t}, {});\n\n\tvoid notifyOnUserChange({\n\t\tid: user._id,\n\t\tclientAction: 'updated',\n\t\tdiff: {\n\t\t\t...diff,\n\t\t\t...(settings.language != null && { language: settings.language }),\n\t\t},\n\t});\n\n\t// propagate changed notification preferences\n\tsetImmediate(async () => {\n\t\tconst { desktopNotifications, pushNotifications, emailNotificationMode, highlights, language } = settings;\n\t\tconst promises = [];\n\n\t\tif (desktopNotifications) {\n\t\t\tpromises.push(\n\t\t\t\tupdateNotificationPreferences(user._id, 'desktopNotifications', desktopNotifications, oldDesktopNotifications, 'desktopPrefOrigin'),\n\t\t\t);\n\t\t}\n\n\t\tif (pushNotifications) {\n\t\t\tpromises.push(\n\t\t\t\tupdateNotificationPreferences(user._id, 'mobilePushNotifications', pushNotifications, oldMobileNotifications, 'mobilePrefOrigin'),\n\t\t\t);\n\t\t}\n\n\t\tif (emailNotificationMode) {\n\t\t\tpromises.push(\n\t\t\t\tupdateNotificationPreferences(user._id, 'emailNotifications', emailNotificationMode, oldEmailNotifications, 'emailPrefOrigin'),\n\t\t\t);\n\t\t}\n\n\t\tawait Promise.allSettled(promises);\n\n\t\tif (Array.isArray(highlights)) {\n\t\t\tconst response = await Subscriptions.updateUserHighlights(user._id, highlights);\n\t\t\tif (response.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByUserId(user._id);\n\t\t\t}\n\t\t}\n\n\t\tif (language && oldLanguage !== language && rcSettings.get('AutoTranslate_AutoEnableOnJoinRoom')) {\n\t\t\tconst response = await Subscriptions.updateAllAutoTranslateLanguagesByUserId(user._id, language);\n\t\t\tif (response.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByAutoTranslateAndUserId(user._id);\n\t\t\t}\n\t\t}\n\t});\n};\n\nMeteor.methods<ServerMethods>({\n\tasync saveUserPreferences(settings) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'saveUserPreferences' });\n\t\t}\n\n\t\tawait saveUserPreferences(settings, userId);\n\n\t\treturn true;\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      saveUserPreferences: () => saveUserPreferences\n    });\n    let Subscriptions, Users;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 1);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let notifyOnSubscriptionChangedByAutoTranslateAndUserId, notifyOnSubscriptionChangedByUserId, notifyOnSubscriptionChangedByUserPreferences, notifyOnUserChange;\n    module.link(\"../../app/lib/server/lib/notifyListener\", {\n      notifyOnSubscriptionChangedByAutoTranslateAndUserId(v) {\n        notifyOnSubscriptionChangedByAutoTranslateAndUserId = v;\n      },\n      notifyOnSubscriptionChangedByUserId(v) {\n        notifyOnSubscriptionChangedByUserId = v;\n      },\n      notifyOnSubscriptionChangedByUserPreferences(v) {\n        notifyOnSubscriptionChangedByUserPreferences = v;\n      },\n      notifyOnUserChange(v) {\n        notifyOnUserChange = v;\n      }\n    }, 3);\n    let rcSettings;\n    module.link(\"../../app/settings/server\", {\n      settings(v) {\n        rcSettings = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function updateNotificationPreferences(userId, setting, newValue, oldValue, preferenceType) {\n      if (newValue === oldValue) {\n        return;\n      }\n      if (newValue === 'default') {\n        const clearNotificationResponse = await Subscriptions.clearNotificationUserPreferences(userId, setting, preferenceType);\n        if (clearNotificationResponse.modifiedCount) {\n          void notifyOnSubscriptionChangedByUserPreferences(userId, preferenceType, 'user');\n        }\n        return;\n      }\n      const updateNotificationResponse = await Subscriptions.updateNotificationUserPreferences(userId, newValue, setting, preferenceType);\n      if (updateNotificationResponse.modifiedCount) {\n        void notifyOnSubscriptionChangedByUserPreferences(userId, preferenceType, 'subscription');\n      }\n    }\n    const saveUserPreferences = async (settings, userId) => {\n      var _user$settings;\n      const keys = {\n        language: Match.Optional(String),\n        newRoomNotification: Match.Optional(String),\n        newMessageNotification: Match.Optional(String),\n        clockMode: Match.Optional(Number),\n        useEmojis: Match.Optional(Boolean),\n        convertAsciiEmoji: Match.Optional(Boolean),\n        saveMobileBandwidth: Match.Optional(Boolean),\n        collapseMediaByDefault: Match.Optional(Boolean),\n        autoImageLoad: Match.Optional(Boolean),\n        emailNotificationMode: Match.Optional(String),\n        unreadAlert: Match.Optional(Boolean),\n        notificationsSoundVolume: Match.Optional(Number),\n        desktopNotifications: Match.Optional(String),\n        pushNotifications: Match.Optional(String),\n        enableAutoAway: Match.Optional(Boolean),\n        highlights: Match.Optional([String]),\n        hideUsernames: Match.Optional(Boolean),\n        hideRoles: Match.Optional(Boolean),\n        displayAvatars: Match.Optional(Boolean),\n        hideFlexTab: Match.Optional(Boolean),\n        sendOnEnter: Match.Optional(String),\n        idleTimeLimit: Match.Optional(Number),\n        sidebarShowFavorites: Match.Optional(Boolean),\n        sidebarShowUnread: Match.Optional(Boolean),\n        sidebarSortby: Match.Optional(String),\n        sidebarViewMode: Match.Optional(String),\n        sidebarDisplayAvatar: Match.Optional(Boolean),\n        sidebarGroupByType: Match.Optional(Boolean),\n        muteFocusedConversations: Match.Optional(Boolean),\n        themeAppearence: Match.Optional(String),\n        fontSize: Match.Optional(String),\n        omnichannelTranscriptEmail: Match.Optional(Boolean),\n        omnichannelTranscriptPDF: Match.Optional(Boolean),\n        omnichannelHideConversationAfterClosing: Match.Optional(Boolean),\n        notifyCalendarEvents: Match.Optional(Boolean),\n        enableMobileRinging: Match.Optional(Boolean),\n        mentionsWithSymbol: Match.Optional(Boolean)\n      };\n      check(settings, Match.ObjectIncluding(keys));\n      const user = await Users.findOneById(userId);\n      if (!user) {\n        return;\n      }\n      const {\n        desktopNotifications: oldDesktopNotifications,\n        pushNotifications: oldMobileNotifications,\n        emailNotificationMode: oldEmailNotifications,\n        language: oldLanguage\n      } = ((_user$settings = user.settings) === null || _user$settings === void 0 ? void 0 : _user$settings.preferences) || {};\n      if (user.settings == null) {\n        await Users.clearSettings(user._id);\n      }\n      if (settings.language != null) {\n        await Users.setLanguage(user._id, settings.language);\n      }\n      // Keep compatibility with old values\n      if (settings.emailNotificationMode === 'all') {\n        settings.emailNotificationMode = 'mentions';\n      } else if (settings.emailNotificationMode === 'disabled') {\n        settings.emailNotificationMode = 'nothing';\n      }\n      if (settings.idleTimeLimit != null && settings.idleTimeLimit < 60) {\n        throw new Meteor.Error('invalid-idle-time-limit-value', 'Invalid idleTimeLimit');\n      }\n      await Users.setPreferences(user._id, settings);\n      const diff = Object.keys(settings).reduce((data, key) => {\n        data[\"settings.preferences.\".concat(key)] = settings[key];\n        return data;\n      }, {});\n      void notifyOnUserChange({\n        id: user._id,\n        clientAction: 'updated',\n        diff: _objectSpread(_objectSpread({}, diff), settings.language != null && {\n          language: settings.language\n        })\n      });\n      // propagate changed notification preferences\n      setImmediate(async () => {\n        const {\n          desktopNotifications,\n          pushNotifications,\n          emailNotificationMode,\n          highlights,\n          language\n        } = settings;\n        const promises = [];\n        if (desktopNotifications) {\n          promises.push(updateNotificationPreferences(user._id, 'desktopNotifications', desktopNotifications, oldDesktopNotifications, 'desktopPrefOrigin'));\n        }\n        if (pushNotifications) {\n          promises.push(updateNotificationPreferences(user._id, 'mobilePushNotifications', pushNotifications, oldMobileNotifications, 'mobilePrefOrigin'));\n        }\n        if (emailNotificationMode) {\n          promises.push(updateNotificationPreferences(user._id, 'emailNotifications', emailNotificationMode, oldEmailNotifications, 'emailPrefOrigin'));\n        }\n        await Promise.allSettled(promises);\n        if (Array.isArray(highlights)) {\n          const response = await Subscriptions.updateUserHighlights(user._id, highlights);\n          if (response.modifiedCount) {\n            void notifyOnSubscriptionChangedByUserId(user._id);\n          }\n        }\n        if (language && oldLanguage !== language && rcSettings.get('AutoTranslate_AutoEnableOnJoinRoom')) {\n          const response = await Subscriptions.updateAllAutoTranslateLanguagesByUserId(user._id, language);\n          if (response.modifiedCount) {\n            void notifyOnSubscriptionChangedByAutoTranslateAndUserId(user._id);\n          }\n        }\n      });\n    };\n    Meteor.methods({\n      async saveUserPreferences(settings) {\n        const userId = Meteor.userId();\n        if (!userId) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'saveUserPreferences'\n          });\n        }\n        await saveUserPreferences(settings, userId);\n        return true;\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","saveUserPreferences","Subscriptions","Users","Match","check","Meteor","notifyOnSubscriptionChangedByAutoTranslateAndUserId","notifyOnSubscriptionChangedByUserId","notifyOnSubscriptionChangedByUserPreferences","notifyOnUserChange","rcSettings","settings","__reifyWaitForDeps__","updateNotificationPreferences","userId","setting","newValue","oldValue","preferenceType","clearNotificationResponse","clearNotificationUserPreferences","modifiedCount","updateNotificationResponse","updateNotificationUserPreferences","_user$settings","keys","language","Optional","String","newRoomNotification","newMessageNotification","clockMode","Number","useEmojis","Boolean","convertAsciiEmoji","saveMobileBandwidth","collapseMediaByDefault","autoImageLoad","emailNotificationMode","unreadAlert","notificationsSoundVolume","desktopNotifications","pushNotifications","enableAutoAway","highlights","hideUsernames","hideRoles","displayAvatars","hideFlexTab","sendOnEnter","idleTimeLimit","sidebarShowFavorites","sidebarShowUnread","sidebarSortby","sidebarViewMode","sidebarDisplayAvatar","sidebarGroupByType","muteFocusedConversations","themeAppearence","fontSize","omnichannelTranscriptEmail","omnichannelTranscriptPDF","omnichannelHideConversationAfterClosing","notifyCalendarEvents","enableMobileRinging","mentionsWithSymbol","ObjectIncluding","user","findOneById","oldDesktopNotifications","oldMobileNotifications","oldEmailNotifications","oldLanguage","preferences","clearSettings","_id","setLanguage","Error","setPreferences","diff","Object","reduce","data","key","concat","id","clientAction","setImmediate","promises","push","Promise","allSettled","Array","isArray","response","updateUserHighlights","get","updateAllAutoTranslateLanguagesByUserId","methods","method","__reify_async_result__","_reifyError","self","async"],"sources":["server/methods/saveUserPreferences.ts"],"sourcesContent":["import type { ISubscription, ThemePreference } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Subscriptions, Users } from '@rocket.chat/models';\nimport type { FontSize } from '@rocket.chat/rest-typings';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport {\n\tnotifyOnSubscriptionChangedByAutoTranslateAndUserId,\n\tnotifyOnSubscriptionChangedByUserId,\n\tnotifyOnSubscriptionChangedByUserPreferences,\n\tnotifyOnUserChange,\n} from '../../app/lib/server/lib/notifyListener';\nimport { settings as rcSettings } from '../../app/settings/server';\n\ntype UserPreferences = {\n\tlanguage: string;\n\tnewRoomNotification: string;\n\tnewMessageNotification: string;\n\tclockMode: number;\n\tuseEmojis: boolean;\n\tconvertAsciiEmoji: boolean;\n\tsaveMobileBandwidth: boolean;\n\tcollapseMediaByDefault: boolean;\n\tautoImageLoad: boolean;\n\temailNotificationMode: string;\n\tunreadAlert: boolean;\n\tnotificationsSoundVolume: number;\n\tdesktopNotifications: string;\n\tpushNotifications: string;\n\tenableAutoAway: boolean;\n\thighlights: string[];\n\thideUsernames: boolean;\n\thideRoles: boolean;\n\tdisplayAvatars: boolean;\n\thideFlexTab: boolean;\n\tsendOnEnter: string;\n\tidleTimeLimit: number;\n\tsidebarShowFavorites: boolean;\n\tsidebarShowUnread: boolean;\n\tsidebarSortby: string;\n\tsidebarViewMode: string;\n\tsidebarDisplayAvatar: boolean;\n\tsidebarGroupByType: boolean;\n\tmuteFocusedConversations: boolean;\n\tdontAskAgainList: { action: string; label: string }[];\n\tthemeAppearence: ThemePreference;\n\tfontSize?: FontSize;\n\treceiveLoginDetectionEmail: boolean;\n\tnotifyCalendarEvents: boolean;\n\tenableMobileRinging: boolean;\n\tmentionsWithSymbol?: boolean;\n};\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tsaveUserPreferences(preferences: Partial<UserPreferences>): boolean;\n\t}\n}\n\nasync function updateNotificationPreferences(\n\tuserId: ISubscription['u']['_id'],\n\tsetting: keyof ISubscription,\n\tnewValue: string,\n\toldValue: string,\n\tpreferenceType: keyof ISubscription,\n) {\n\tif (newValue === oldValue) {\n\t\treturn;\n\t}\n\n\tif (newValue === 'default') {\n\t\tconst clearNotificationResponse = await Subscriptions.clearNotificationUserPreferences(userId, setting, preferenceType);\n\t\tif (clearNotificationResponse.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByUserPreferences(userId, preferenceType, 'user');\n\t\t}\n\t\treturn;\n\t}\n\n\tconst updateNotificationResponse = await Subscriptions.updateNotificationUserPreferences(userId, newValue, setting, preferenceType);\n\tif (updateNotificationResponse.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByUserPreferences(userId, preferenceType, 'subscription');\n\t}\n}\n\nexport const saveUserPreferences = async (settings: Partial<UserPreferences>, userId: string): Promise<void> => {\n\tconst keys = {\n\t\tlanguage: Match.Optional(String),\n\t\tnewRoomNotification: Match.Optional(String),\n\t\tnewMessageNotification: Match.Optional(String),\n\t\tclockMode: Match.Optional(Number),\n\t\tuseEmojis: Match.Optional(Boolean),\n\t\tconvertAsciiEmoji: Match.Optional(Boolean),\n\t\tsaveMobileBandwidth: Match.Optional(Boolean),\n\t\tcollapseMediaByDefault: Match.Optional(Boolean),\n\t\tautoImageLoad: Match.Optional(Boolean),\n\t\temailNotificationMode: Match.Optional(String),\n\t\tunreadAlert: Match.Optional(Boolean),\n\t\tnotificationsSoundVolume: Match.Optional(Number),\n\t\tdesktopNotifications: Match.Optional(String),\n\t\tpushNotifications: Match.Optional(String),\n\t\tenableAutoAway: Match.Optional(Boolean),\n\t\thighlights: Match.Optional([String]),\n\t\thideUsernames: Match.Optional(Boolean),\n\t\thideRoles: Match.Optional(Boolean),\n\t\tdisplayAvatars: Match.Optional(Boolean),\n\t\thideFlexTab: Match.Optional(Boolean),\n\t\tsendOnEnter: Match.Optional(String),\n\t\tidleTimeLimit: Match.Optional(Number),\n\t\tsidebarShowFavorites: Match.Optional(Boolean),\n\t\tsidebarShowUnread: Match.Optional(Boolean),\n\t\tsidebarSortby: Match.Optional(String),\n\t\tsidebarViewMode: Match.Optional(String),\n\t\tsidebarDisplayAvatar: Match.Optional(Boolean),\n\t\tsidebarGroupByType: Match.Optional(Boolean),\n\t\tmuteFocusedConversations: Match.Optional(Boolean),\n\t\tthemeAppearence: Match.Optional(String),\n\t\tfontSize: Match.Optional(String),\n\t\tomnichannelTranscriptEmail: Match.Optional(Boolean),\n\t\tomnichannelTranscriptPDF: Match.Optional(Boolean),\n\t\tomnichannelHideConversationAfterClosing: Match.Optional(Boolean),\n\t\tnotifyCalendarEvents: Match.Optional(Boolean),\n\t\tenableMobileRinging: Match.Optional(Boolean),\n\t\tmentionsWithSymbol: Match.Optional(Boolean),\n\t};\n\tcheck(settings, Match.ObjectIncluding(keys));\n\n\tconst user = await Users.findOneById(userId);\n\tif (!user) {\n\t\treturn;\n\t}\n\n\tconst {\n\t\tdesktopNotifications: oldDesktopNotifications,\n\t\tpushNotifications: oldMobileNotifications,\n\t\temailNotificationMode: oldEmailNotifications,\n\t\tlanguage: oldLanguage,\n\t} = user.settings?.preferences || {};\n\n\tif (user.settings == null) {\n\t\tawait Users.clearSettings(user._id);\n\t}\n\n\tif (settings.language != null) {\n\t\tawait Users.setLanguage(user._id, settings.language);\n\t}\n\n\t// Keep compatibility with old values\n\tif (settings.emailNotificationMode === 'all') {\n\t\tsettings.emailNotificationMode = 'mentions';\n\t} else if (settings.emailNotificationMode === 'disabled') {\n\t\tsettings.emailNotificationMode = 'nothing';\n\t}\n\n\tif (settings.idleTimeLimit != null && settings.idleTimeLimit < 60) {\n\t\tthrow new Meteor.Error('invalid-idle-time-limit-value', 'Invalid idleTimeLimit');\n\t}\n\n\tawait Users.setPreferences(user._id, settings);\n\n\tconst diff = (Object.keys(settings) as (keyof UserPreferences)[]).reduce<Record<string, any>>((data, key) => {\n\t\tdata[`settings.preferences.${key}`] = settings[key];\n\n\t\treturn data;\n\t}, {});\n\n\tvoid notifyOnUserChange({\n\t\tid: user._id,\n\t\tclientAction: 'updated',\n\t\tdiff: {\n\t\t\t...diff,\n\t\t\t...(settings.language != null && { language: settings.language }),\n\t\t},\n\t});\n\n\t// propagate changed notification preferences\n\tsetImmediate(async () => {\n\t\tconst { desktopNotifications, pushNotifications, emailNotificationMode, highlights, language } = settings;\n\t\tconst promises = [];\n\n\t\tif (desktopNotifications) {\n\t\t\tpromises.push(\n\t\t\t\tupdateNotificationPreferences(user._id, 'desktopNotifications', desktopNotifications, oldDesktopNotifications, 'desktopPrefOrigin'),\n\t\t\t);\n\t\t}\n\n\t\tif (pushNotifications) {\n\t\t\tpromises.push(\n\t\t\t\tupdateNotificationPreferences(user._id, 'mobilePushNotifications', pushNotifications, oldMobileNotifications, 'mobilePrefOrigin'),\n\t\t\t);\n\t\t}\n\n\t\tif (emailNotificationMode) {\n\t\t\tpromises.push(\n\t\t\t\tupdateNotificationPreferences(user._id, 'emailNotifications', emailNotificationMode, oldEmailNotifications, 'emailPrefOrigin'),\n\t\t\t);\n\t\t}\n\n\t\tawait Promise.allSettled(promises);\n\n\t\tif (Array.isArray(highlights)) {\n\t\t\tconst response = await Subscriptions.updateUserHighlights(user._id, highlights);\n\t\t\tif (response.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByUserId(user._id);\n\t\t\t}\n\t\t}\n\n\t\tif (language && oldLanguage !== language && rcSettings.get('AutoTranslate_AutoEnableOnJoinRoom')) {\n\t\t\tconst response = await Subscriptions.updateAllAutoTranslateLanguagesByUserId(user._id, language);\n\t\t\tif (response.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByAutoTranslateAndUserId(user._id);\n\t\t\t}\n\t\t}\n\t});\n};\n\nMeteor.methods<ServerMethods>({\n\tasync saveUserPreferences(settings) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'saveUserPreferences' });\n\t\t}\n\n\t\tawait saveUserPreferences(settings, userId);\n\n\t\treturn true;\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"166c98728e9d7eb3e8cfea4dc2ed85354c74f90c"}
