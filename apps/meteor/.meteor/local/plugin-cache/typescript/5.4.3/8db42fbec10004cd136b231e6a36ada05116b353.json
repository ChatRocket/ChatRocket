{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/saveUserIdentity.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/saveUserIdentity.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/saveUserIdentity.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/saveUserIdentity.ts","sourceRoot":"","sources":["app/lib/server/functions/saveUserIdentity.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Messages, VideoConference, LivechatDepartmentAgents, Rooms, Subscriptions, Users } from '@rocket.chat/models';\n\nimport { _setRealName } from './setRealName';\nimport { _setUsername } from './setUsername';\nimport { updateGroupDMsName } from './updateGroupDMsName';\nimport { validateName } from './validateName';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { FileUpload } from '../../../file-upload/server';\nimport {\n\tnotifyOnRoomChangedByUsernamesOrUids,\n\tnotifyOnSubscriptionChangedByUserId,\n\tnotifyOnSubscriptionChangedByNameAndRoomType,\n} from '../lib/notifyListener';\n\n/**\n *\n * @param {object} changes changes to the user\n */\n\nexport async function saveUserIdentity({\n\t_id,\n\tname: rawName,\n\tusername: rawUsername,\n\tupdateUsernameInBackground = false,\n}: {\n\t_id: string;\n\tname?: string;\n\tusername?: string;\n\tupdateUsernameInBackground?: boolean; // TODO: remove this\n}) {\n\tif (!_id) {\n\t\treturn false;\n\t}\n\n\tconst name = String(rawName).trim();\n\tconst username = String(rawUsername).trim();\n\n\tconst user = await Users.findOneById(_id);\n\tif (!user) {\n\t\treturn false;\n\t}\n\n\tconst previousUsername = user.username;\n\tconst previousName = user.name;\n\tconst nameChanged = previousName !== name;\n\tconst usernameChanged = previousUsername !== username;\n\n\tif (typeof rawUsername !== 'undefined' && usernameChanged) {\n\t\tif (!validateName(username)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!(await _setUsername(_id, username, user))) {\n\t\t\treturn false;\n\t\t}\n\t\tuser.username = username;\n\t}\n\n\tif (typeof rawName !== 'undefined' && nameChanged) {\n\t\tif (!(await _setRealName(_id, name, user))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// if coming from old username, update all references\n\tif (previousUsername) {\n\t\tconst handleUpdateParams = {\n\t\t\tusername,\n\t\t\tpreviousUsername,\n\t\t\trawUsername,\n\t\t\tusernameChanged,\n\t\t\tuser,\n\t\t\tname,\n\t\t\tpreviousName,\n\t\t\trawName,\n\t\t\tnameChanged,\n\t\t};\n\t\tif (updateUsernameInBackground) {\n\t\t\tsetImmediate(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait updateUsernameReferences(handleUpdateParams);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tSystemLogger.error(err);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tawait updateUsernameReferences(handleUpdateParams);\n\t\t}\n\t}\n\n\treturn true;\n}\n\nasync function updateUsernameReferences({\n\tusername,\n\tpreviousUsername,\n\trawUsername,\n\tusernameChanged,\n\tuser,\n\tname,\n\tpreviousName,\n\trawName,\n\tnameChanged,\n}: {\n\tusername: string;\n\tpreviousUsername: string;\n\trawUsername?: string;\n\tusernameChanged: boolean;\n\tuser: IUser;\n\tname: string;\n\tpreviousName: string | undefined;\n\trawName?: string;\n\tnameChanged: boolean;\n}): Promise<void> {\n\tif (usernameChanged && typeof rawUsername !== 'undefined') {\n\t\tconst fileStore = FileUpload.getStore('Avatars');\n\t\tconst previousFile = await fileStore.model.findOneByName(previousUsername);\n\t\tconst file = await fileStore.model.findOneByName(username);\n\t\tif (file) {\n\t\t\tawait fileStore.model.deleteFile(file._id);\n\t\t}\n\t\tif (previousFile) {\n\t\t\tawait fileStore.model.updateFileNameById(previousFile._id, username);\n\t\t}\n\n\t\tawait Messages.updateAllUsernamesByUserId(user._id, username);\n\t\tawait Messages.updateUsernameOfEditByUserId(user._id, username);\n\n\t\tconst cursor = Messages.findByMention(previousUsername);\n\t\tfor await (const msg of cursor) {\n\t\t\tconst updatedMsg = msg.msg.replace(new RegExp(`@${previousUsername}`, 'ig'), `@${username}`);\n\t\t\tawait Messages.updateUsernameAndMessageOfMentionByIdAndOldUsername(msg._id, previousUsername, username, updatedMsg);\n\t\t}\n\n\t\tconst responses = await Promise.all([\n\t\t\tRooms.replaceUsername(previousUsername, username),\n\t\t\tRooms.replaceMutedUsername(previousUsername, username),\n\t\t\tRooms.replaceUsernameOfUserByUserId(user._id, username),\n\t\t\tSubscriptions.setUserUsernameByUserId(user._id, username),\n\t\t\tLivechatDepartmentAgents.replaceUsernameOfAgentByUserId(user._id, username),\n\t\t]);\n\n\t\tif (responses[3]?.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByUserId(user._id);\n\t\t}\n\n\t\tif (responses[0]?.modifiedCount || responses[1]?.modifiedCount || responses[2]?.modifiedCount) {\n\t\t\tvoid notifyOnRoomChangedByUsernamesOrUids([user._id], [previousUsername, username]);\n\t\t}\n\t}\n\n\t// update other references if either the name or username has changed\n\tif (usernameChanged || nameChanged) {\n\t\t// update name and fname of 1-on-1 direct messages\n\t\tconst updateDirectNameResponse = await Subscriptions.updateDirectNameAndFnameByName(\n\t\t\tpreviousUsername,\n\t\t\trawUsername && username,\n\t\t\trawName && name,\n\t\t);\n\n\t\tif (updateDirectNameResponse?.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByNameAndRoomType({\n\t\t\t\tt: 'd',\n\t\t\t\tname: username,\n\t\t\t});\n\t\t}\n\n\t\t// update name and fname of group direct messages\n\t\tawait updateGroupDMsName(user);\n\n\t\t// update name and username of users on video conferences\n\t\tawait VideoConference.updateUserReferences(user._id, username || previousUsername, name || previousName);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/saveUserIdentity.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/saveUserIdentity.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/saveUserIdentity.ts","sourceRoot":"","sources":["app/lib/server/functions/saveUserIdentity.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Messages, VideoConference, LivechatDepartmentAgents, Rooms, Subscriptions, Users } from '@rocket.chat/models';\n\nimport { _setRealName } from './setRealName';\nimport { _setUsername } from './setUsername';\nimport { updateGroupDMsName } from './updateGroupDMsName';\nimport { validateName } from './validateName';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { FileUpload } from '../../../file-upload/server';\nimport {\n\tnotifyOnRoomChangedByUsernamesOrUids,\n\tnotifyOnSubscriptionChangedByUserId,\n\tnotifyOnSubscriptionChangedByNameAndRoomType,\n} from '../lib/notifyListener';\n\n/**\n *\n * @param {object} changes changes to the user\n */\n\nexport async function saveUserIdentity({\n\t_id,\n\tname: rawName,\n\tusername: rawUsername,\n\tupdateUsernameInBackground = false,\n}: {\n\t_id: string;\n\tname?: string;\n\tusername?: string;\n\tupdateUsernameInBackground?: boolean; // TODO: remove this\n}) {\n\tif (!_id) {\n\t\treturn false;\n\t}\n\n\tconst name = String(rawName).trim();\n\tconst username = String(rawUsername).trim();\n\n\tconst user = await Users.findOneById(_id);\n\tif (!user) {\n\t\treturn false;\n\t}\n\n\tconst previousUsername = user.username;\n\tconst previousName = user.name;\n\tconst nameChanged = previousName !== name;\n\tconst usernameChanged = previousUsername !== username;\n\n\tif (typeof rawUsername !== 'undefined' && usernameChanged) {\n\t\tif (!validateName(username)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!(await _setUsername(_id, username, user))) {\n\t\t\treturn false;\n\t\t}\n\t\tuser.username = username;\n\t}\n\n\tif (typeof rawName !== 'undefined' && nameChanged) {\n\t\tif (!(await _setRealName(_id, name, user))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// if coming from old username, update all references\n\tif (previousUsername) {\n\t\tconst handleUpdateParams = {\n\t\t\tusername,\n\t\t\tpreviousUsername,\n\t\t\trawUsername,\n\t\t\tusernameChanged,\n\t\t\tuser,\n\t\t\tname,\n\t\t\tpreviousName,\n\t\t\trawName,\n\t\t\tnameChanged,\n\t\t};\n\t\tif (updateUsernameInBackground) {\n\t\t\tsetImmediate(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait updateUsernameReferences(handleUpdateParams);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tSystemLogger.error(err);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tawait updateUsernameReferences(handleUpdateParams);\n\t\t}\n\t}\n\n\treturn true;\n}\n\nasync function updateUsernameReferences({\n\tusername,\n\tpreviousUsername,\n\trawUsername,\n\tusernameChanged,\n\tuser,\n\tname,\n\tpreviousName,\n\trawName,\n\tnameChanged,\n}: {\n\tusername: string;\n\tpreviousUsername: string;\n\trawUsername?: string;\n\tusernameChanged: boolean;\n\tuser: IUser;\n\tname: string;\n\tpreviousName: string | undefined;\n\trawName?: string;\n\tnameChanged: boolean;\n}): Promise<void> {\n\tif (usernameChanged && typeof rawUsername !== 'undefined') {\n\t\tconst fileStore = FileUpload.getStore('Avatars');\n\t\tconst previousFile = await fileStore.model.findOneByName(previousUsername);\n\t\tconst file = await fileStore.model.findOneByName(username);\n\t\tif (file) {\n\t\t\tawait fileStore.model.deleteFile(file._id);\n\t\t}\n\t\tif (previousFile) {\n\t\t\tawait fileStore.model.updateFileNameById(previousFile._id, username);\n\t\t}\n\n\t\tawait Messages.updateAllUsernamesByUserId(user._id, username);\n\t\tawait Messages.updateUsernameOfEditByUserId(user._id, username);\n\n\t\tconst cursor = Messages.findByMention(previousUsername);\n\t\tfor await (const msg of cursor) {\n\t\t\tconst updatedMsg = msg.msg.replace(new RegExp(`@${previousUsername}`, 'ig'), `@${username}`);\n\t\t\tawait Messages.updateUsernameAndMessageOfMentionByIdAndOldUsername(msg._id, previousUsername, username, updatedMsg);\n\t\t}\n\n\t\tconst responses = await Promise.all([\n\t\t\tRooms.replaceUsername(previousUsername, username),\n\t\t\tRooms.replaceMutedUsername(previousUsername, username),\n\t\t\tRooms.replaceUsernameOfUserByUserId(user._id, username),\n\t\t\tSubscriptions.setUserUsernameByUserId(user._id, username),\n\t\t\tLivechatDepartmentAgents.replaceUsernameOfAgentByUserId(user._id, username),\n\t\t]);\n\n\t\tif (responses[3]?.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByUserId(user._id);\n\t\t}\n\n\t\tif (responses[0]?.modifiedCount || responses[1]?.modifiedCount || responses[2]?.modifiedCount) {\n\t\t\tvoid notifyOnRoomChangedByUsernamesOrUids([user._id], [previousUsername, username]);\n\t\t}\n\t}\n\n\t// update other references if either the name or username has changed\n\tif (usernameChanged || nameChanged) {\n\t\t// update name and fname of 1-on-1 direct messages\n\t\tconst updateDirectNameResponse = await Subscriptions.updateDirectNameAndFnameByName(\n\t\t\tpreviousUsername,\n\t\t\trawUsername && username,\n\t\t\trawName && name,\n\t\t);\n\n\t\tif (updateDirectNameResponse?.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByNameAndRoomType({\n\t\t\t\tt: 'd',\n\t\t\t\tname: username,\n\t\t\t});\n\t\t}\n\n\t\t// update name and fname of group direct messages\n\t\tawait updateGroupDMsName(user);\n\n\t\t// update name and username of users on video conferences\n\t\tawait VideoConference.updateUserReferences(user._id, username || previousUsername, name || previousName);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      saveUserIdentity: () => saveUserIdentity\n    });\n    let Messages, VideoConference, LivechatDepartmentAgents, Rooms, Subscriptions, Users;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      VideoConference(v) {\n        VideoConference = v;\n      },\n      LivechatDepartmentAgents(v) {\n        LivechatDepartmentAgents = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let _setRealName;\n    module.link(\"./setRealName\", {\n      _setRealName(v) {\n        _setRealName = v;\n      }\n    }, 1);\n    let _setUsername;\n    module.link(\"./setUsername\", {\n      _setUsername(v) {\n        _setUsername = v;\n      }\n    }, 2);\n    let updateGroupDMsName;\n    module.link(\"./updateGroupDMsName\", {\n      updateGroupDMsName(v) {\n        updateGroupDMsName = v;\n      }\n    }, 3);\n    let validateName;\n    module.link(\"./validateName\", {\n      validateName(v) {\n        validateName = v;\n      }\n    }, 4);\n    let SystemLogger;\n    module.link(\"../../../../server/lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 5);\n    let FileUpload;\n    module.link(\"../../../file-upload/server\", {\n      FileUpload(v) {\n        FileUpload = v;\n      }\n    }, 6);\n    let notifyOnRoomChangedByUsernamesOrUids, notifyOnSubscriptionChangedByUserId, notifyOnSubscriptionChangedByNameAndRoomType;\n    module.link(\"../lib/notifyListener\", {\n      notifyOnRoomChangedByUsernamesOrUids(v) {\n        notifyOnRoomChangedByUsernamesOrUids = v;\n      },\n      notifyOnSubscriptionChangedByUserId(v) {\n        notifyOnSubscriptionChangedByUserId = v;\n      },\n      notifyOnSubscriptionChangedByNameAndRoomType(v) {\n        notifyOnSubscriptionChangedByNameAndRoomType = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function saveUserIdentity(_ref) {\n      let {\n        _id,\n        name: rawName,\n        username: rawUsername,\n        updateUsernameInBackground = false\n      } = _ref;\n      if (!_id) {\n        return false;\n      }\n      const name = String(rawName).trim();\n      const username = String(rawUsername).trim();\n      const user = await Users.findOneById(_id);\n      if (!user) {\n        return false;\n      }\n      const previousUsername = user.username;\n      const previousName = user.name;\n      const nameChanged = previousName !== name;\n      const usernameChanged = previousUsername !== username;\n      if (typeof rawUsername !== 'undefined' && usernameChanged) {\n        if (!validateName(username)) {\n          return false;\n        }\n        if (!(await _setUsername(_id, username, user))) {\n          return false;\n        }\n        user.username = username;\n      }\n      if (typeof rawName !== 'undefined' && nameChanged) {\n        if (!(await _setRealName(_id, name, user))) {\n          return false;\n        }\n      }\n      // if coming from old username, update all references\n      if (previousUsername) {\n        const handleUpdateParams = {\n          username,\n          previousUsername,\n          rawUsername,\n          usernameChanged,\n          user,\n          name,\n          previousName,\n          rawName,\n          nameChanged\n        };\n        if (updateUsernameInBackground) {\n          setImmediate(async () => {\n            try {\n              await updateUsernameReferences(handleUpdateParams);\n            } catch (err) {\n              SystemLogger.error(err);\n            }\n          });\n        } else {\n          await updateUsernameReferences(handleUpdateParams);\n        }\n      }\n      return true;\n    }\n    async function updateUsernameReferences(_ref2) {\n      let {\n        username,\n        previousUsername,\n        rawUsername,\n        usernameChanged,\n        user,\n        name,\n        previousName,\n        rawName,\n        nameChanged\n      } = _ref2;\n      if (usernameChanged && typeof rawUsername !== 'undefined') {\n        var _responses$, _responses$2, _responses$3, _responses$4;\n        const fileStore = FileUpload.getStore('Avatars');\n        const previousFile = await fileStore.model.findOneByName(previousUsername);\n        const file = await fileStore.model.findOneByName(username);\n        if (file) {\n          await fileStore.model.deleteFile(file._id);\n        }\n        if (previousFile) {\n          await fileStore.model.updateFileNameById(previousFile._id, username);\n        }\n        await Messages.updateAllUsernamesByUserId(user._id, username);\n        await Messages.updateUsernameOfEditByUserId(user._id, username);\n        const cursor = Messages.findByMention(previousUsername);\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(cursor), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const msg = _step.value;\n            {\n              const updatedMsg = msg.msg.replace(new RegExp(\"@\".concat(previousUsername), 'ig'), \"@\".concat(username));\n              await Messages.updateUsernameAndMessageOfMentionByIdAndOldUsername(msg._id, previousUsername, username, updatedMsg);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        const responses = await Promise.all([Rooms.replaceUsername(previousUsername, username), Rooms.replaceMutedUsername(previousUsername, username), Rooms.replaceUsernameOfUserByUserId(user._id, username), Subscriptions.setUserUsernameByUserId(user._id, username), LivechatDepartmentAgents.replaceUsernameOfAgentByUserId(user._id, username)]);\n        if ((_responses$ = responses[3]) !== null && _responses$ !== void 0 && _responses$.modifiedCount) {\n          void notifyOnSubscriptionChangedByUserId(user._id);\n        }\n        if ((_responses$2 = responses[0]) !== null && _responses$2 !== void 0 && _responses$2.modifiedCount || (_responses$3 = responses[1]) !== null && _responses$3 !== void 0 && _responses$3.modifiedCount || (_responses$4 = responses[2]) !== null && _responses$4 !== void 0 && _responses$4.modifiedCount) {\n          void notifyOnRoomChangedByUsernamesOrUids([user._id], [previousUsername, username]);\n        }\n      }\n      // update other references if either the name or username has changed\n      if (usernameChanged || nameChanged) {\n        // update name and fname of 1-on-1 direct messages\n        const updateDirectNameResponse = await Subscriptions.updateDirectNameAndFnameByName(previousUsername, rawUsername && username, rawName && name);\n        if (updateDirectNameResponse !== null && updateDirectNameResponse !== void 0 && updateDirectNameResponse.modifiedCount) {\n          void notifyOnSubscriptionChangedByNameAndRoomType({\n            t: 'd',\n            name: username\n          });\n        }\n        // update name and fname of group direct messages\n        await updateGroupDMsName(user);\n        // update name and username of users on video conferences\n        await VideoConference.updateUserReferences(user._id, username || previousUsername, name || previousName);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","saveUserIdentity","Messages","VideoConference","LivechatDepartmentAgents","Rooms","Subscriptions","Users","_setRealName","_setUsername","updateGroupDMsName","validateName","SystemLogger","FileUpload","notifyOnRoomChangedByUsernamesOrUids","notifyOnSubscriptionChangedByUserId","notifyOnSubscriptionChangedByNameAndRoomType","__reifyWaitForDeps__","_ref","_id","name","rawName","username","rawUsername","updateUsernameInBackground","String","trim","user","findOneById","previousUsername","previousName","nameChanged","usernameChanged","handleUpdateParams","setImmediate","updateUsernameReferences","err","error","_ref2","_responses$","_responses$2","_responses$3","_responses$4","fileStore","getStore","previousFile","model","findOneByName","file","deleteFile","updateFileNameById","updateAllUsernamesByUserId","updateUsernameOfEditByUserId","cursor","findByMention","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","msg","value","updatedMsg","replace","RegExp","concat","updateUsernameAndMessageOfMentionByIdAndOldUsername","return","responses","Promise","all","replaceUsername","replaceMutedUsername","replaceUsernameOfUserByUserId","setUserUsernameByUserId","replaceUsernameOfAgentByUserId","modifiedCount","updateDirectNameResponse","updateDirectNameAndFnameByName","t","updateUserReferences","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/functions/saveUserIdentity.ts"],"sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Messages, VideoConference, LivechatDepartmentAgents, Rooms, Subscriptions, Users } from '@rocket.chat/models';\n\nimport { _setRealName } from './setRealName';\nimport { _setUsername } from './setUsername';\nimport { updateGroupDMsName } from './updateGroupDMsName';\nimport { validateName } from './validateName';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { FileUpload } from '../../../file-upload/server';\nimport {\n\tnotifyOnRoomChangedByUsernamesOrUids,\n\tnotifyOnSubscriptionChangedByUserId,\n\tnotifyOnSubscriptionChangedByNameAndRoomType,\n} from '../lib/notifyListener';\n\n/**\n *\n * @param {object} changes changes to the user\n */\n\nexport async function saveUserIdentity({\n\t_id,\n\tname: rawName,\n\tusername: rawUsername,\n\tupdateUsernameInBackground = false,\n}: {\n\t_id: string;\n\tname?: string;\n\tusername?: string;\n\tupdateUsernameInBackground?: boolean; // TODO: remove this\n}) {\n\tif (!_id) {\n\t\treturn false;\n\t}\n\n\tconst name = String(rawName).trim();\n\tconst username = String(rawUsername).trim();\n\n\tconst user = await Users.findOneById(_id);\n\tif (!user) {\n\t\treturn false;\n\t}\n\n\tconst previousUsername = user.username;\n\tconst previousName = user.name;\n\tconst nameChanged = previousName !== name;\n\tconst usernameChanged = previousUsername !== username;\n\n\tif (typeof rawUsername !== 'undefined' && usernameChanged) {\n\t\tif (!validateName(username)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!(await _setUsername(_id, username, user))) {\n\t\t\treturn false;\n\t\t}\n\t\tuser.username = username;\n\t}\n\n\tif (typeof rawName !== 'undefined' && nameChanged) {\n\t\tif (!(await _setRealName(_id, name, user))) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// if coming from old username, update all references\n\tif (previousUsername) {\n\t\tconst handleUpdateParams = {\n\t\t\tusername,\n\t\t\tpreviousUsername,\n\t\t\trawUsername,\n\t\t\tusernameChanged,\n\t\t\tuser,\n\t\t\tname,\n\t\t\tpreviousName,\n\t\t\trawName,\n\t\t\tnameChanged,\n\t\t};\n\t\tif (updateUsernameInBackground) {\n\t\t\tsetImmediate(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait updateUsernameReferences(handleUpdateParams);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tSystemLogger.error(err);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tawait updateUsernameReferences(handleUpdateParams);\n\t\t}\n\t}\n\n\treturn true;\n}\n\nasync function updateUsernameReferences({\n\tusername,\n\tpreviousUsername,\n\trawUsername,\n\tusernameChanged,\n\tuser,\n\tname,\n\tpreviousName,\n\trawName,\n\tnameChanged,\n}: {\n\tusername: string;\n\tpreviousUsername: string;\n\trawUsername?: string;\n\tusernameChanged: boolean;\n\tuser: IUser;\n\tname: string;\n\tpreviousName: string | undefined;\n\trawName?: string;\n\tnameChanged: boolean;\n}): Promise<void> {\n\tif (usernameChanged && typeof rawUsername !== 'undefined') {\n\t\tconst fileStore = FileUpload.getStore('Avatars');\n\t\tconst previousFile = await fileStore.model.findOneByName(previousUsername);\n\t\tconst file = await fileStore.model.findOneByName(username);\n\t\tif (file) {\n\t\t\tawait fileStore.model.deleteFile(file._id);\n\t\t}\n\t\tif (previousFile) {\n\t\t\tawait fileStore.model.updateFileNameById(previousFile._id, username);\n\t\t}\n\n\t\tawait Messages.updateAllUsernamesByUserId(user._id, username);\n\t\tawait Messages.updateUsernameOfEditByUserId(user._id, username);\n\n\t\tconst cursor = Messages.findByMention(previousUsername);\n\t\tfor await (const msg of cursor) {\n\t\t\tconst updatedMsg = msg.msg.replace(new RegExp(`@${previousUsername}`, 'ig'), `@${username}`);\n\t\t\tawait Messages.updateUsernameAndMessageOfMentionByIdAndOldUsername(msg._id, previousUsername, username, updatedMsg);\n\t\t}\n\n\t\tconst responses = await Promise.all([\n\t\t\tRooms.replaceUsername(previousUsername, username),\n\t\t\tRooms.replaceMutedUsername(previousUsername, username),\n\t\t\tRooms.replaceUsernameOfUserByUserId(user._id, username),\n\t\t\tSubscriptions.setUserUsernameByUserId(user._id, username),\n\t\t\tLivechatDepartmentAgents.replaceUsernameOfAgentByUserId(user._id, username),\n\t\t]);\n\n\t\tif (responses[3]?.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByUserId(user._id);\n\t\t}\n\n\t\tif (responses[0]?.modifiedCount || responses[1]?.modifiedCount || responses[2]?.modifiedCount) {\n\t\t\tvoid notifyOnRoomChangedByUsernamesOrUids([user._id], [previousUsername, username]);\n\t\t}\n\t}\n\n\t// update other references if either the name or username has changed\n\tif (usernameChanged || nameChanged) {\n\t\t// update name and fname of 1-on-1 direct messages\n\t\tconst updateDirectNameResponse = await Subscriptions.updateDirectNameAndFnameByName(\n\t\t\tpreviousUsername,\n\t\t\trawUsername && username,\n\t\t\trawName && name,\n\t\t);\n\n\t\tif (updateDirectNameResponse?.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByNameAndRoomType({\n\t\t\t\tt: 'd',\n\t\t\t\tname: username,\n\t\t\t});\n\t\t}\n\n\t\t// update name and fname of group direct messages\n\t\tawait updateGroupDMsName(user);\n\n\t\t// update name and username of users on video conferences\n\t\tawait VideoConference.updateUserReferences(user._id, username || previousUsername, name || previousName);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"8db42fbec10004cd136b231e6a36ada05116b353"}
