{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/ldap/UserConverter.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/lib/ldap/UserConverter.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/ldap/UserConverter.ts","inputSourceMap":{"version":3,"file":"server/lib/ldap/UserConverter.ts","sourceRoot":"","sources":["server/lib/ldap/UserConverter.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAI5C,OAAO,EAAE,aAAa,EAA6B,MAAM,+DAA+D,CAAC;AACzH,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAExD,MAAM,OAAO,iBAAkB,SAAQ,aAAa;IAC3C,kBAAkB,CAAU;IAEpC,YAAY,OAAuD,EAAE,MAAe,EAAE,KAAsB;QAC3G,MAAM,WAAW,GAAG;YACnB,YAAY,EAAE,IAAI;YAClB,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC;SAClB,CAAC;QAEF,KAAK,CAAC,WAAW,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAAU,2BAA2B,CAAC,IAAI,IAAI,CAAC;IACtF,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,IAAiB;QACvC,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;YAC7B,MAAM,YAAY,GAAG,MAAM,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxG,IAAI,YAAY,EAAE,CAAC;gBAClB,OAAO,YAAY,CAAC;YACrB,CAAC;QACF,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC9B,OAAO;QACR,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACxB,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,gCAAgC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAEnF,IAAI,SAAS,EAAE,CAAC;gBACf,OAAO,SAAS,CAAC;YAClB,CAAC;QACF,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,KAAK,CAAC,wCAAwC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtE,CAAC;IACF,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,QAAqB,EAAE,OAA8B;QACnF,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpC,MAAM,SAAS,CAAC,WAAW,EAAE,CAAC;IAC/B,CAAC;CACD","sourcesContent":["import type { IImportUser, IUser } from '@rocket.chat/core-typings';\nimport type { Logger } from '@rocket.chat/logger';\nimport { Users } from '@rocket.chat/models';\n\nimport type { ConverterCache } from '../../../app/importer/server/classes/converters/ConverterCache';\nimport { type RecordConverterOptions } from '../../../app/importer/server/classes/converters/RecordConverter';\nimport { UserConverter, type UserConverterOptions } from '../../../app/importer/server/classes/converters/UserConverter';\nimport { settings } from '../../../app/settings/server';\n\nexport class LDAPUserConverter extends UserConverter {\n\tprivate mergeExistingUsers: boolean;\n\n\tconstructor(options?: UserConverterOptions & RecordConverterOptions, logger?: Logger, cache?: ConverterCache) {\n\t\tconst ldapOptions = {\n\t\t\tworkInMemory: true,\n\t\t\t...(options || {}),\n\t\t};\n\n\t\tsuper(ldapOptions, logger, cache);\n\t\tthis.mergeExistingUsers = settings.get<boolean>('LDAP_Merge_Existing_Users') ?? true;\n\t}\n\n\tasync findExistingUser(data: IImportUser): Promise<IUser | undefined> {\n\t\tif (data.services?.ldap?.id) {\n\t\t\tconst importedUser = await Users.findOneByLDAPId(data.services.ldap.id, data.services.ldap.idAttribute);\n\t\t\tif (importedUser) {\n\t\t\t\treturn importedUser;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.mergeExistingUsers) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (data.emails.length) {\n\t\t\tconst emailUser = await Users.findOneWithoutLDAPByEmailAddress(data.emails[0], {});\n\n\t\t\tif (emailUser) {\n\t\t\t\treturn emailUser;\n\t\t\t}\n\t\t}\n\n\t\tif (data.username) {\n\t\t\treturn Users.findOneWithoutLDAPByUsernameIgnoringCase(data.username);\n\t\t}\n\t}\n\n\tstatic async convertSingleUser(userData: IImportUser, options?: UserConverterOptions): Promise<void> {\n\t\tconst converter = new LDAPUserConverter(options);\n\t\tawait converter.addObject(userData);\n\t\tawait converter.convertData();\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/ldap/UserConverter.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/ldap/UserConverter.ts","inputSourceMap":{"version":3,"file":"server/lib/ldap/UserConverter.ts","sourceRoot":"","sources":["server/lib/ldap/UserConverter.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAI5C,OAAO,EAAE,aAAa,EAA6B,MAAM,+DAA+D,CAAC;AACzH,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAExD,MAAM,OAAO,iBAAkB,SAAQ,aAAa;IAC3C,kBAAkB,CAAU;IAEpC,YAAY,OAAuD,EAAE,MAAe,EAAE,KAAsB;QAC3G,MAAM,WAAW,GAAG;YACnB,YAAY,EAAE,IAAI;YAClB,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC;SAClB,CAAC;QAEF,KAAK,CAAC,WAAW,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAAU,2BAA2B,CAAC,IAAI,IAAI,CAAC;IACtF,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,IAAiB;QACvC,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;YAC7B,MAAM,YAAY,GAAG,MAAM,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxG,IAAI,YAAY,EAAE,CAAC;gBAClB,OAAO,YAAY,CAAC;YACrB,CAAC;QACF,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC9B,OAAO;QACR,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACxB,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,gCAAgC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAEnF,IAAI,SAAS,EAAE,CAAC;gBACf,OAAO,SAAS,CAAC;YAClB,CAAC;QACF,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,KAAK,CAAC,wCAAwC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtE,CAAC;IACF,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,QAAqB,EAAE,OAA8B;QACnF,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpC,MAAM,SAAS,CAAC,WAAW,EAAE,CAAC;IAC/B,CAAC;CACD","sourcesContent":["import type { IImportUser, IUser } from '@rocket.chat/core-typings';\nimport type { Logger } from '@rocket.chat/logger';\nimport { Users } from '@rocket.chat/models';\n\nimport type { ConverterCache } from '../../../app/importer/server/classes/converters/ConverterCache';\nimport { type RecordConverterOptions } from '../../../app/importer/server/classes/converters/RecordConverter';\nimport { UserConverter, type UserConverterOptions } from '../../../app/importer/server/classes/converters/UserConverter';\nimport { settings } from '../../../app/settings/server';\n\nexport class LDAPUserConverter extends UserConverter {\n\tprivate mergeExistingUsers: boolean;\n\n\tconstructor(options?: UserConverterOptions & RecordConverterOptions, logger?: Logger, cache?: ConverterCache) {\n\t\tconst ldapOptions = {\n\t\t\tworkInMemory: true,\n\t\t\t...(options || {}),\n\t\t};\n\n\t\tsuper(ldapOptions, logger, cache);\n\t\tthis.mergeExistingUsers = settings.get<boolean>('LDAP_Merge_Existing_Users') ?? true;\n\t}\n\n\tasync findExistingUser(data: IImportUser): Promise<IUser | undefined> {\n\t\tif (data.services?.ldap?.id) {\n\t\t\tconst importedUser = await Users.findOneByLDAPId(data.services.ldap.id, data.services.ldap.idAttribute);\n\t\t\tif (importedUser) {\n\t\t\t\treturn importedUser;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.mergeExistingUsers) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (data.emails.length) {\n\t\t\tconst emailUser = await Users.findOneWithoutLDAPByEmailAddress(data.emails[0], {});\n\n\t\t\tif (emailUser) {\n\t\t\t\treturn emailUser;\n\t\t\t}\n\t\t}\n\n\t\tif (data.username) {\n\t\t\treturn Users.findOneWithoutLDAPByUsernameIgnoringCase(data.username);\n\t\t}\n\t}\n\n\tstatic async convertSingleUser(userData: IImportUser, options?: UserConverterOptions): Promise<void> {\n\t\tconst converter = new LDAPUserConverter(options);\n\t\tawait converter.addObject(userData);\n\t\tawait converter.convertData();\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      LDAPUserConverter: () => LDAPUserConverter\n    });\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let UserConverter;\n    module.link(\"../../../app/importer/server/classes/converters/UserConverter\", {\n      UserConverter(v) {\n        UserConverter = v;\n      }\n    }, 1);\n    let settings;\n    module.link(\"../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class LDAPUserConverter extends UserConverter {\n      constructor(options, logger, cache) {\n        var _settings$get;\n        const ldapOptions = _objectSpread({\n          workInMemory: true\n        }, options || {});\n        super(ldapOptions, logger, cache);\n        this.mergeExistingUsers = void 0;\n        this.mergeExistingUsers = (_settings$get = settings.get('LDAP_Merge_Existing_Users')) !== null && _settings$get !== void 0 ? _settings$get : true;\n      }\n      async findExistingUser(data) {\n        var _data$services, _data$services$ldap;\n        if ((_data$services = data.services) !== null && _data$services !== void 0 && (_data$services$ldap = _data$services.ldap) !== null && _data$services$ldap !== void 0 && _data$services$ldap.id) {\n          const importedUser = await Users.findOneByLDAPId(data.services.ldap.id, data.services.ldap.idAttribute);\n          if (importedUser) {\n            return importedUser;\n          }\n        }\n        if (!this.mergeExistingUsers) {\n          return;\n        }\n        if (data.emails.length) {\n          const emailUser = await Users.findOneWithoutLDAPByEmailAddress(data.emails[0], {});\n          if (emailUser) {\n            return emailUser;\n          }\n        }\n        if (data.username) {\n          return Users.findOneWithoutLDAPByUsernameIgnoringCase(data.username);\n        }\n      }\n      static async convertSingleUser(userData, options) {\n        const converter = new LDAPUserConverter(options);\n        await converter.addObject(userData);\n        await converter.convertData();\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","LDAPUserConverter","Users","UserConverter","settings","__reifyWaitForDeps__","constructor","options","logger","cache","_settings$get","ldapOptions","workInMemory","mergeExistingUsers","get","findExistingUser","data","_data$services","_data$services$ldap","services","ldap","id","importedUser","findOneByLDAPId","idAttribute","emails","length","emailUser","findOneWithoutLDAPByEmailAddress","username","findOneWithoutLDAPByUsernameIgnoringCase","convertSingleUser","userData","converter","addObject","convertData","__reify_async_result__","_reifyError","self","async"],"sources":["server/lib/ldap/UserConverter.ts"],"sourcesContent":["import type { IImportUser, IUser } from '@rocket.chat/core-typings';\nimport type { Logger } from '@rocket.chat/logger';\nimport { Users } from '@rocket.chat/models';\n\nimport type { ConverterCache } from '../../../app/importer/server/classes/converters/ConverterCache';\nimport { type RecordConverterOptions } from '../../../app/importer/server/classes/converters/RecordConverter';\nimport { UserConverter, type UserConverterOptions } from '../../../app/importer/server/classes/converters/UserConverter';\nimport { settings } from '../../../app/settings/server';\n\nexport class LDAPUserConverter extends UserConverter {\n\tprivate mergeExistingUsers: boolean;\n\n\tconstructor(options?: UserConverterOptions & RecordConverterOptions, logger?: Logger, cache?: ConverterCache) {\n\t\tconst ldapOptions = {\n\t\t\tworkInMemory: true,\n\t\t\t...(options || {}),\n\t\t};\n\n\t\tsuper(ldapOptions, logger, cache);\n\t\tthis.mergeExistingUsers = settings.get<boolean>('LDAP_Merge_Existing_Users') ?? true;\n\t}\n\n\tasync findExistingUser(data: IImportUser): Promise<IUser | undefined> {\n\t\tif (data.services?.ldap?.id) {\n\t\t\tconst importedUser = await Users.findOneByLDAPId(data.services.ldap.id, data.services.ldap.idAttribute);\n\t\t\tif (importedUser) {\n\t\t\t\treturn importedUser;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.mergeExistingUsers) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (data.emails.length) {\n\t\t\tconst emailUser = await Users.findOneWithoutLDAPByEmailAddress(data.emails[0], {});\n\n\t\t\tif (emailUser) {\n\t\t\t\treturn emailUser;\n\t\t\t}\n\t\t}\n\n\t\tif (data.username) {\n\t\t\treturn Users.findOneWithoutLDAPByUsernameIgnoringCase(data.username);\n\t\t}\n\t}\n\n\tstatic async convertSingleUser(userData: IImportUser, options?: UserConverterOptions): Promise<void> {\n\t\tconst converter = new LDAPUserConverter(options);\n\t\tawait converter.addObject(userData);\n\t\tawait converter.convertData();\n\t}\n}\n"],"mappings":";;;IAEA,IAAAA,aAAgB;IAAAC,MAAM,CAAAC,IAAA,uCAAsB;MAAAC,QAAAC,CAAA;QAAAJ,aAAA,GAAAI,CAAA;MAAA;IAAA;IAA5CH,MAAA,CAAOI,MAAE,CAAK;MAAAC,iBAAQ,EAAAA,CAAA,KAAAA;IAAsB;IAAA,IAAAC,KAAA;IAAAN,MAAA,CAAAC,IAAA;MAAAK,MAAAH,CAAA;QAAAG,KAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,aAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAM,cAAAJ,CAAA;QAAAI,aAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,QAAA;IAAAR,MAAA,CAAAC,IAAA;MAAAO,SAAAL,CAAA;QAAAK,QAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,oBAAA,WAAAA,oBAAA;IAOtC,MAAOJ,iBAAkB,SAAQE,aAAa;MAGnDG,YAAYC,OAAuD,EAAEC,MAAe,EAAEC,KAAsB;QAAA,IAAAC,aAAA;QAC3G,MAAMC,WAAW,GAAAhB,aAAA;UAChBiB,YAAY,EAAE;QAAI,GACdL,OAAO,IAAI,EAAE,CACjB;QAED,KAAK,CAACI,WAAW,EAAEH,MAAM,EAAEC,KAAK,CAAC;QAAC,KAR3BI,kBAAkB;QASzB,IAAI,CAACA,kBAAkB,IAAAH,aAAA,GAAGN,QAAQ,CAACU,GAAG,CAAU,2BAA2B,CAAC,cAAAJ,aAAA,cAAAA,aAAA,GAAI,IAAI;MACrF;MAEA,MAAMK,gBAAgBA,CAACC,IAAiB;QAAA,IAAAC,cAAA,EAAAC,mBAAA;QACvC,KAAAD,cAAA,GAAID,IAAI,CAACG,QAAQ,cAAAF,cAAA,gBAAAC,mBAAA,GAAbD,cAAA,CAAeG,IAAI,cAAAF,mBAAA,eAAnBA,mBAAA,CAAqBG,EAAE,EAAE;UAC5B,MAAMC,YAAY,GAAG,MAAMpB,KAAK,CAACqB,eAAe,CAACP,IAAI,CAACG,QAAQ,CAACC,IAAI,CAACC,EAAE,EAAEL,IAAI,CAACG,QAAQ,CAACC,IAAI,CAACI,WAAW,CAAC;UACvG,IAAIF,YAAY,EAAE;YACjB,OAAOA,YAAY;UACpB;QACD;QAEA,IAAI,CAAC,IAAI,CAACT,kBAAkB,EAAE;UAC7B;QACD;QAEA,IAAIG,IAAI,CAACS,MAAM,CAACC,MAAM,EAAE;UACvB,MAAMC,SAAS,GAAG,MAAMzB,KAAK,CAAC0B,gCAAgC,CAACZ,IAAI,CAACS,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UAElF,IAAIE,SAAS,EAAE;YACd,OAAOA,SAAS;UACjB;QACD;QAEA,IAAIX,IAAI,CAACa,QAAQ,EAAE;UAClB,OAAO3B,KAAK,CAAC4B,wCAAwC,CAACd,IAAI,CAACa,QAAQ,CAAC;QACrE;MACD;MAEA,aAAaE,iBAAiBA,CAACC,QAAqB,EAAEzB,OAA8B;QACnF,MAAM0B,SAAS,GAAG,IAAIhC,iBAAiB,CAACM,OAAO,CAAC;QAChD,MAAM0B,SAAS,CAACC,SAAS,CAACF,QAAQ,CAAC;QACnC,MAAMC,SAAS,CAACE,WAAW,EAAE;MAC9B;;IACAC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"37d939cd93806f3b700e6a643c5f02e59bccfec6"}
