{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/methods/getChannelHistory.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/methods/getChannelHistory.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/methods/getChannelHistory.ts","inputSourceMap":{"version":3,"file":"app/lib/server/methods/getChannelHistory.ts","sourceRoot":"","sources":["app/lib/server/methods/getChannelHistory.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessage, MessageTypesValues } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Subscriptions, Rooms } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { canAccessRoomAsync } from '../../../authorization/server';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { settings } from '../../../settings/server/cached';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { getHiddenSystemMessages } from '../lib/getHiddenSystemMessages';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tgetChannelHistory(params: {\n\t\t\trid: string;\n\t\t\tlatest?: Date;\n\t\t\toldest?: Date;\n\t\t\tinclusive?: boolean;\n\t\t\toffset?: number;\n\t\t\tcount?: number;\n\t\t\tunreads?: boolean;\n\t\t\tshowThreadMessages?: boolean;\n\t\t}): boolean | IMessage[] | { messages: IMessage[]; firstUnread?: any; unreadNotLoaded?: number };\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync getChannelHistory({ rid, latest, oldest, inclusive, offset = 0, count = 20, unreads, showThreadMessages = true }) {\n\t\tcheck(rid, String);\n\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst fromUserId = Meteor.userId();\n\t\tif (!fromUserId) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, { _id: fromUserId }))) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Make sure they can access the room\n\t\tif (\n\t\t\troom.t === 'c' &&\n\t\t\t!(await hasPermissionAsync(fromUserId, 'preview-c-room')) &&\n\t\t\t!(await Subscriptions.findOneByRoomIdAndUserId(rid, fromUserId, { projection: { _id: 1 } }))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ensure latest is always defined.\n\t\tif (latest === undefined) {\n\t\t\tlatest = new Date();\n\t\t}\n\n\t\t// Verify oldest is a date if it exists\n\n\t\tif (oldest !== undefined && {}.toString.call(oldest) !== '[object Date]') {\n\t\t\tthrow new Meteor.Error('error-invalid-date', 'Invalid date', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst hiddenSystemMessages = settings.get<MessageTypesValues[]>('Hide_System_Messages');\n\n\t\tconst hiddenMessageTypes = getHiddenSystemMessages(room, hiddenSystemMessages);\n\n\t\tconst options: Record<string, unknown> = {\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t};\n\n\t\tconst records =\n\t\t\toldest === undefined\n\t\t\t\t? await Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tlatest,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t\tinclusive,\n\t\t\t\t\t).toArray()\n\t\t\t\t: await Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tlatest,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t\tinclusive,\n\t\t\t\t\t).toArray();\n\n\t\tconst messages = await normalizeMessagesForUser(records, fromUserId);\n\n\t\tif (unreads) {\n\t\t\tlet unreadNotLoaded = 0;\n\t\t\tlet firstUnread = undefined;\n\n\t\t\tif (oldest !== undefined) {\n\t\t\t\tconst firstMsg = messages[messages.length - 1];\n\t\t\t\tif (firstMsg !== undefined && firstMsg.ts > oldest) {\n\t\t\t\t\tconst unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tfirstMsg.ts,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlimit: 1,\n\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\tts: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst totalCursor = await Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tfirstMsg.ts,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t);\n\n\t\t\t\t\tfirstUnread = (await unreadMessages.toArray())[0];\n\t\t\t\t\tunreadNotLoaded = totalCursor;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tmessages: messages || [],\n\t\t\t\tfirstUnread,\n\t\t\t\tunreadNotLoaded,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tmessages: messages || [],\n\t\t};\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/methods/getChannelHistory.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/methods/getChannelHistory.ts","inputSourceMap":{"version":3,"file":"app/lib/server/methods/getChannelHistory.ts","sourceRoot":"","sources":["app/lib/server/methods/getChannelHistory.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessage, MessageTypesValues } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Subscriptions, Rooms } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { canAccessRoomAsync } from '../../../authorization/server';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { settings } from '../../../settings/server/cached';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { getHiddenSystemMessages } from '../lib/getHiddenSystemMessages';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tgetChannelHistory(params: {\n\t\t\trid: string;\n\t\t\tlatest?: Date;\n\t\t\toldest?: Date;\n\t\t\tinclusive?: boolean;\n\t\t\toffset?: number;\n\t\t\tcount?: number;\n\t\t\tunreads?: boolean;\n\t\t\tshowThreadMessages?: boolean;\n\t\t}): boolean | IMessage[] | { messages: IMessage[]; firstUnread?: any; unreadNotLoaded?: number };\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync getChannelHistory({ rid, latest, oldest, inclusive, offset = 0, count = 20, unreads, showThreadMessages = true }) {\n\t\tcheck(rid, String);\n\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst fromUserId = Meteor.userId();\n\t\tif (!fromUserId) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, { _id: fromUserId }))) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Make sure they can access the room\n\t\tif (\n\t\t\troom.t === 'c' &&\n\t\t\t!(await hasPermissionAsync(fromUserId, 'preview-c-room')) &&\n\t\t\t!(await Subscriptions.findOneByRoomIdAndUserId(rid, fromUserId, { projection: { _id: 1 } }))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ensure latest is always defined.\n\t\tif (latest === undefined) {\n\t\t\tlatest = new Date();\n\t\t}\n\n\t\t// Verify oldest is a date if it exists\n\n\t\tif (oldest !== undefined && {}.toString.call(oldest) !== '[object Date]') {\n\t\t\tthrow new Meteor.Error('error-invalid-date', 'Invalid date', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst hiddenSystemMessages = settings.get<MessageTypesValues[]>('Hide_System_Messages');\n\n\t\tconst hiddenMessageTypes = getHiddenSystemMessages(room, hiddenSystemMessages);\n\n\t\tconst options: Record<string, unknown> = {\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t};\n\n\t\tconst records =\n\t\t\toldest === undefined\n\t\t\t\t? await Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tlatest,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t\tinclusive,\n\t\t\t\t\t).toArray()\n\t\t\t\t: await Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tlatest,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t\tinclusive,\n\t\t\t\t\t).toArray();\n\n\t\tconst messages = await normalizeMessagesForUser(records, fromUserId);\n\n\t\tif (unreads) {\n\t\t\tlet unreadNotLoaded = 0;\n\t\t\tlet firstUnread = undefined;\n\n\t\t\tif (oldest !== undefined) {\n\t\t\t\tconst firstMsg = messages[messages.length - 1];\n\t\t\t\tif (firstMsg !== undefined && firstMsg.ts > oldest) {\n\t\t\t\t\tconst unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tfirstMsg.ts,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlimit: 1,\n\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\tts: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst totalCursor = await Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tfirstMsg.ts,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t);\n\n\t\t\t\t\tfirstUnread = (await unreadMessages.toArray())[0];\n\t\t\t\t\tunreadNotLoaded = totalCursor;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tmessages: messages || [],\n\t\t\t\tfirstUnread,\n\t\t\t\tunreadNotLoaded,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tmessages: messages || [],\n\t\t};\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Messages, Subscriptions, Rooms;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      }\n    }, 0);\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 1);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let canAccessRoomAsync;\n    module.link(\"../../../authorization/server\", {\n      canAccessRoomAsync(v) {\n        canAccessRoomAsync = v;\n      }\n    }, 3);\n    let hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 4);\n    let settings;\n    module.link(\"../../../settings/server/cached\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 5);\n    let normalizeMessagesForUser;\n    module.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n      normalizeMessagesForUser(v) {\n        normalizeMessagesForUser = v;\n      }\n    }, 6);\n    let getHiddenSystemMessages;\n    module.link(\"../lib/getHiddenSystemMessages\", {\n      getHiddenSystemMessages(v) {\n        getHiddenSystemMessages = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    Meteor.methods({\n      async getChannelHistory(_ref) {\n        let {\n          rid,\n          latest,\n          oldest,\n          inclusive,\n          offset = 0,\n          count = 20,\n          unreads,\n          showThreadMessages = true\n        } = _ref;\n        check(rid, String);\n        if (!Meteor.userId()) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'getChannelHistory'\n          });\n        }\n        const fromUserId = Meteor.userId();\n        if (!fromUserId) {\n          return false;\n        }\n        const room = await Rooms.findOneById(rid);\n        if (!room) {\n          return false;\n        }\n        if (!(await canAccessRoomAsync(room, {\n          _id: fromUserId\n        }))) {\n          return false;\n        }\n        // Make sure they can access the room\n        if (room.t === 'c' && !(await hasPermissionAsync(fromUserId, 'preview-c-room')) && !(await Subscriptions.findOneByRoomIdAndUserId(rid, fromUserId, {\n          projection: {\n            _id: 1\n          }\n        }))) {\n          return false;\n        }\n        // Ensure latest is always defined.\n        if (latest === undefined) {\n          latest = new Date();\n        }\n        // Verify oldest is a date if it exists\n        if (oldest !== undefined && {}.toString.call(oldest) !== '[object Date]') {\n          throw new Meteor.Error('error-invalid-date', 'Invalid date', {\n            method: 'getChannelHistory'\n          });\n        }\n        const hiddenSystemMessages = settings.get('Hide_System_Messages');\n        const hiddenMessageTypes = getHiddenSystemMessages(room, hiddenSystemMessages);\n        const options = {\n          sort: {\n            ts: -1\n          },\n          skip: offset,\n          limit: count\n        };\n        const records = oldest === undefined ? await Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(rid, latest, hiddenMessageTypes, options, showThreadMessages, inclusive).toArray() : await Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(rid, oldest, latest, hiddenMessageTypes, options, showThreadMessages, inclusive).toArray();\n        const messages = await normalizeMessagesForUser(records, fromUserId);\n        if (unreads) {\n          let unreadNotLoaded = 0;\n          let firstUnread = undefined;\n          if (oldest !== undefined) {\n            const firstMsg = messages[messages.length - 1];\n            if (firstMsg !== undefined && firstMsg.ts > oldest) {\n              const unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(rid, oldest, firstMsg.ts, hiddenMessageTypes, {\n                limit: 1,\n                sort: {\n                  ts: 1\n                }\n              }, showThreadMessages);\n              const totalCursor = await Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(rid, oldest, firstMsg.ts, hiddenMessageTypes, showThreadMessages);\n              firstUnread = (await unreadMessages.toArray())[0];\n              unreadNotLoaded = totalCursor;\n            }\n          }\n          return {\n            messages: messages || [],\n            firstUnread,\n            unreadNotLoaded\n          };\n        }\n        return {\n          messages: messages || []\n        };\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Messages","Subscriptions","Rooms","module","link","v","check","Meteor","canAccessRoomAsync","hasPermissionAsync","settings","normalizeMessagesForUser","getHiddenSystemMessages","__reifyWaitForDeps__","methods","getChannelHistory","_ref","rid","latest","oldest","inclusive","offset","count","unreads","showThreadMessages","String","userId","Error","method","fromUserId","room","findOneById","_id","t","findOneByRoomIdAndUserId","projection","undefined","Date","toString","call","hiddenSystemMessages","get","hiddenMessageTypes","options","sort","ts","skip","limit","records","findVisibleByRoomIdBeforeTimestampNotContainingTypes","toArray","findVisibleByRoomIdBetweenTimestampsNotContainingTypes","messages","unreadNotLoaded","firstUnread","firstMsg","length","unreadMessages","totalCursor","countVisibleByRoomIdBetweenTimestampsNotContainingTypes","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/methods/getChannelHistory.ts"],"sourcesContent":["import type { IMessage, MessageTypesValues } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Subscriptions, Rooms } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { canAccessRoomAsync } from '../../../authorization/server';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { settings } from '../../../settings/server/cached';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { getHiddenSystemMessages } from '../lib/getHiddenSystemMessages';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tgetChannelHistory(params: {\n\t\t\trid: string;\n\t\t\tlatest?: Date;\n\t\t\toldest?: Date;\n\t\t\tinclusive?: boolean;\n\t\t\toffset?: number;\n\t\t\tcount?: number;\n\t\t\tunreads?: boolean;\n\t\t\tshowThreadMessages?: boolean;\n\t\t}): boolean | IMessage[] | { messages: IMessage[]; firstUnread?: any; unreadNotLoaded?: number };\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync getChannelHistory({ rid, latest, oldest, inclusive, offset = 0, count = 20, unreads, showThreadMessages = true }) {\n\t\tcheck(rid, String);\n\n\t\tif (!Meteor.userId()) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst fromUserId = Meteor.userId();\n\t\tif (!fromUserId) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, { _id: fromUserId }))) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Make sure they can access the room\n\t\tif (\n\t\t\troom.t === 'c' &&\n\t\t\t!(await hasPermissionAsync(fromUserId, 'preview-c-room')) &&\n\t\t\t!(await Subscriptions.findOneByRoomIdAndUserId(rid, fromUserId, { projection: { _id: 1 } }))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Ensure latest is always defined.\n\t\tif (latest === undefined) {\n\t\t\tlatest = new Date();\n\t\t}\n\n\t\t// Verify oldest is a date if it exists\n\n\t\tif (oldest !== undefined && {}.toString.call(oldest) !== '[object Date]') {\n\t\t\tthrow new Meteor.Error('error-invalid-date', 'Invalid date', { method: 'getChannelHistory' });\n\t\t}\n\n\t\tconst hiddenSystemMessages = settings.get<MessageTypesValues[]>('Hide_System_Messages');\n\n\t\tconst hiddenMessageTypes = getHiddenSystemMessages(room, hiddenSystemMessages);\n\n\t\tconst options: Record<string, unknown> = {\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t};\n\n\t\tconst records =\n\t\t\toldest === undefined\n\t\t\t\t? await Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tlatest,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t\tinclusive,\n\t\t\t\t\t).toArray()\n\t\t\t\t: await Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tlatest,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t\tinclusive,\n\t\t\t\t\t).toArray();\n\n\t\tconst messages = await normalizeMessagesForUser(records, fromUserId);\n\n\t\tif (unreads) {\n\t\t\tlet unreadNotLoaded = 0;\n\t\t\tlet firstUnread = undefined;\n\n\t\t\tif (oldest !== undefined) {\n\t\t\t\tconst firstMsg = messages[messages.length - 1];\n\t\t\t\tif (firstMsg !== undefined && firstMsg.ts > oldest) {\n\t\t\t\t\tconst unreadMessages = Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tfirstMsg.ts,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlimit: 1,\n\t\t\t\t\t\t\tsort: {\n\t\t\t\t\t\t\t\tts: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t);\n\n\t\t\t\t\tconst totalCursor = await Messages.countVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\t\t\t\t\trid,\n\t\t\t\t\t\toldest,\n\t\t\t\t\t\tfirstMsg.ts,\n\t\t\t\t\t\thiddenMessageTypes,\n\t\t\t\t\t\tshowThreadMessages,\n\t\t\t\t\t);\n\n\t\t\t\t\tfirstUnread = (await unreadMessages.toArray())[0];\n\t\t\t\t\tunreadNotLoaded = totalCursor;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tmessages: messages || [],\n\t\t\t\tfirstUnread,\n\t\t\t\tunreadNotLoaded,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tmessages: messages || [],\n\t\t};\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"5f3e9d34f20ce4a1711fbaa0ca8b95c5e2f9102e"}
