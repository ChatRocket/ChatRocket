{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push-notifications/server/lib/PushNotification.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/push-notifications/server/lib/PushNotification.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push-notifications/server/lib/PushNotification.ts","inputSourceMap":{"version":3,"file":"app/push-notifications/server/lib/PushNotification.ts","sourceRoot":"","sources":["app/push-notifications/server/lib/PushNotification.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessage, IPushNotificationConfig, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { RocketChatAssets } from '../../../assets/server';\nimport { replaceMentionedUsernamesWithFullNames, parseMessageTextPerUser } from '../../../lib/server/functions/notifications';\nimport { getPushData } from '../../../lib/server/functions/notifications/mobile';\nimport { metrics } from '../../../metrics/server';\nimport { Push } from '../../../push/server';\nimport { settings } from '../../../settings/server';\n\ntype PushNotificationData = {\n\trid: string;\n\tuid: string;\n\tmid: string;\n\troomName: string;\n\tusername: string;\n\tmessage: string;\n\tpayload: Record<string, any>;\n\tbadge: number;\n\tcategory: string;\n};\n\ntype GetNotificationConfigParam = PushNotificationData & {\n\tidOnly: boolean;\n};\n\ntype NotificationPayload = {\n\tmessage: IMessage;\n\tnotification: IPushNotificationConfig;\n};\n\nfunction hash(str: string): number {\n\tlet hash = 0;\n\tlet i = str.length;\n\n\twhile (i) {\n\t\thash = (hash << 5) - hash + str.charCodeAt(--i);\n\t\thash &= hash; // Convert to 32bit integer\n\t}\n\treturn hash;\n}\n\nclass PushNotification {\n\tgetNotificationId(roomId: string): number {\n\t\tconst serverId = settings.get('uniqueID');\n\t\treturn hash(`${serverId}|${roomId}`); // hash\n\t}\n\n\tprivate getNotificationConfig({\n\t\trid,\n\t\tuid: userId,\n\t\tmid: messageId,\n\t\troomName,\n\t\tusername,\n\t\tmessage,\n\t\tpayload,\n\t\tbadge = 1,\n\t\tcategory,\n\t\tidOnly = false,\n\t}: GetNotificationConfigParam): IPushNotificationConfig {\n\t\tconst title = idOnly ? '' : roomName || username;\n\n\t\t// message is being redacted already by 'getPushData' if idOnly is true\n\t\tconst text = !idOnly && roomName !== '' ? `${username}: ${message}` : message;\n\n\t\treturn {\n\t\t\tfrom: 'push',\n\t\t\tbadge,\n\t\t\tsound: 'default',\n\t\t\tpriority: 10,\n\t\t\ttitle,\n\t\t\ttext,\n\t\t\tpayload: {\n\t\t\t\thost: Meteor.absoluteUrl(),\n\t\t\t\tmessageId,\n\t\t\t\tnotificationType: idOnly ? 'message-id-only' : 'message',\n\t\t\t\t...(!idOnly && { rid, ...payload }),\n\t\t\t},\n\t\t\tuserId,\n\t\t\tnotId: this.getNotificationId(rid),\n\t\t\tgcm: {\n\t\t\t\tstyle: 'inbox',\n\t\t\t\timage: RocketChatAssets.getURL('Assets_favicon_192'),\n\t\t\t},\n\t\t\t...(category !== '' ? { apn: { category } } : {}),\n\t\t};\n\t}\n\n\tasync send({ rid, uid, mid, roomName, username, message, payload, badge = 1, category }: PushNotificationData): Promise<void> {\n\t\tconst idOnly = settings.get<boolean>('Push_request_content_from_server');\n\t\tconst config = this.getNotificationConfig({\n\t\t\trid,\n\t\t\tuid,\n\t\t\tmid,\n\t\t\troomName,\n\t\t\tusername,\n\t\t\tmessage,\n\t\t\tpayload,\n\t\t\tbadge,\n\t\t\tcategory,\n\t\t\tidOnly,\n\t\t});\n\n\t\tmetrics.notificationsSent.inc({ notification_type: 'mobile' });\n\t\tawait Push.send(config);\n\t}\n\n\tasync getNotificationForMessageId({\n\t\treceiver,\n\t\tmessage,\n\t\troom,\n\t}: {\n\t\treceiver: IUser;\n\t\tmessage: IMessage;\n\t\troom: IRoom;\n\t}): Promise<NotificationPayload> {\n\t\tconst sender = await Users.findOneById(message.u._id, { projection: { username: 1, name: 1 } });\n\t\tif (!sender) {\n\t\t\tthrow new Error('Message sender not found');\n\t\t}\n\n\t\tlet notificationMessage = await callbacks.run('beforeSendMessageNotifications', message.msg);\n\t\tif (message.mentions && Object.keys(message.mentions).length > 0 && settings.get('UI_Use_Real_Name')) {\n\t\t\tnotificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions);\n\t\t}\n\t\tnotificationMessage = await parseMessageTextPerUser(notificationMessage, message, receiver);\n\n\t\tconst pushData = await getPushData({\n\t\t\troom,\n\t\t\tmessage,\n\t\t\tuserId: receiver._id,\n\t\t\treceiver,\n\t\t\tsenderUsername: sender.username,\n\t\t\tsenderName: sender.name,\n\t\t\tnotificationMessage,\n\t\t\tshouldOmitMessage: false,\n\t\t});\n\n\t\treturn {\n\t\t\tmessage,\n\t\t\tnotification: this.getNotificationConfig({\n\t\t\t\t...pushData,\n\t\t\t\trid: message.rid,\n\t\t\t\tuid: message.u._id,\n\t\t\t\tmid: message._id,\n\t\t\t\tidOnly: false,\n\t\t\t}),\n\t\t};\n\t}\n}\n\nexport default new PushNotification();\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push-notifications/server/lib/PushNotification.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/push-notifications/server/lib/PushNotification.ts","inputSourceMap":{"version":3,"file":"app/push-notifications/server/lib/PushNotification.ts","sourceRoot":"","sources":["app/push-notifications/server/lib/PushNotification.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessage, IPushNotificationConfig, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { RocketChatAssets } from '../../../assets/server';\nimport { replaceMentionedUsernamesWithFullNames, parseMessageTextPerUser } from '../../../lib/server/functions/notifications';\nimport { getPushData } from '../../../lib/server/functions/notifications/mobile';\nimport { metrics } from '../../../metrics/server';\nimport { Push } from '../../../push/server';\nimport { settings } from '../../../settings/server';\n\ntype PushNotificationData = {\n\trid: string;\n\tuid: string;\n\tmid: string;\n\troomName: string;\n\tusername: string;\n\tmessage: string;\n\tpayload: Record<string, any>;\n\tbadge: number;\n\tcategory: string;\n};\n\ntype GetNotificationConfigParam = PushNotificationData & {\n\tidOnly: boolean;\n};\n\ntype NotificationPayload = {\n\tmessage: IMessage;\n\tnotification: IPushNotificationConfig;\n};\n\nfunction hash(str: string): number {\n\tlet hash = 0;\n\tlet i = str.length;\n\n\twhile (i) {\n\t\thash = (hash << 5) - hash + str.charCodeAt(--i);\n\t\thash &= hash; // Convert to 32bit integer\n\t}\n\treturn hash;\n}\n\nclass PushNotification {\n\tgetNotificationId(roomId: string): number {\n\t\tconst serverId = settings.get('uniqueID');\n\t\treturn hash(`${serverId}|${roomId}`); // hash\n\t}\n\n\tprivate getNotificationConfig({\n\t\trid,\n\t\tuid: userId,\n\t\tmid: messageId,\n\t\troomName,\n\t\tusername,\n\t\tmessage,\n\t\tpayload,\n\t\tbadge = 1,\n\t\tcategory,\n\t\tidOnly = false,\n\t}: GetNotificationConfigParam): IPushNotificationConfig {\n\t\tconst title = idOnly ? '' : roomName || username;\n\n\t\t// message is being redacted already by 'getPushData' if idOnly is true\n\t\tconst text = !idOnly && roomName !== '' ? `${username}: ${message}` : message;\n\n\t\treturn {\n\t\t\tfrom: 'push',\n\t\t\tbadge,\n\t\t\tsound: 'default',\n\t\t\tpriority: 10,\n\t\t\ttitle,\n\t\t\ttext,\n\t\t\tpayload: {\n\t\t\t\thost: Meteor.absoluteUrl(),\n\t\t\t\tmessageId,\n\t\t\t\tnotificationType: idOnly ? 'message-id-only' : 'message',\n\t\t\t\t...(!idOnly && { rid, ...payload }),\n\t\t\t},\n\t\t\tuserId,\n\t\t\tnotId: this.getNotificationId(rid),\n\t\t\tgcm: {\n\t\t\t\tstyle: 'inbox',\n\t\t\t\timage: RocketChatAssets.getURL('Assets_favicon_192'),\n\t\t\t},\n\t\t\t...(category !== '' ? { apn: { category } } : {}),\n\t\t};\n\t}\n\n\tasync send({ rid, uid, mid, roomName, username, message, payload, badge = 1, category }: PushNotificationData): Promise<void> {\n\t\tconst idOnly = settings.get<boolean>('Push_request_content_from_server');\n\t\tconst config = this.getNotificationConfig({\n\t\t\trid,\n\t\t\tuid,\n\t\t\tmid,\n\t\t\troomName,\n\t\t\tusername,\n\t\t\tmessage,\n\t\t\tpayload,\n\t\t\tbadge,\n\t\t\tcategory,\n\t\t\tidOnly,\n\t\t});\n\n\t\tmetrics.notificationsSent.inc({ notification_type: 'mobile' });\n\t\tawait Push.send(config);\n\t}\n\n\tasync getNotificationForMessageId({\n\t\treceiver,\n\t\tmessage,\n\t\troom,\n\t}: {\n\t\treceiver: IUser;\n\t\tmessage: IMessage;\n\t\troom: IRoom;\n\t}): Promise<NotificationPayload> {\n\t\tconst sender = await Users.findOneById(message.u._id, { projection: { username: 1, name: 1 } });\n\t\tif (!sender) {\n\t\t\tthrow new Error('Message sender not found');\n\t\t}\n\n\t\tlet notificationMessage = await callbacks.run('beforeSendMessageNotifications', message.msg);\n\t\tif (message.mentions && Object.keys(message.mentions).length > 0 && settings.get('UI_Use_Real_Name')) {\n\t\t\tnotificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions);\n\t\t}\n\t\tnotificationMessage = await parseMessageTextPerUser(notificationMessage, message, receiver);\n\n\t\tconst pushData = await getPushData({\n\t\t\troom,\n\t\t\tmessage,\n\t\t\tuserId: receiver._id,\n\t\t\treceiver,\n\t\t\tsenderUsername: sender.username,\n\t\t\tsenderName: sender.name,\n\t\t\tnotificationMessage,\n\t\t\tshouldOmitMessage: false,\n\t\t});\n\n\t\treturn {\n\t\t\tmessage,\n\t\t\tnotification: this.getNotificationConfig({\n\t\t\t\t...pushData,\n\t\t\t\trid: message.rid,\n\t\t\t\tuid: message.u._id,\n\t\t\t\tmid: message._id,\n\t\t\t\tidOnly: false,\n\t\t\t}),\n\t\t};\n\t}\n}\n\nexport default new PushNotification();\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 1);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 2);\n    let RocketChatAssets;\n    module.link(\"../../../assets/server\", {\n      RocketChatAssets(v) {\n        RocketChatAssets = v;\n      }\n    }, 3);\n    let replaceMentionedUsernamesWithFullNames, parseMessageTextPerUser;\n    module.link(\"../../../lib/server/functions/notifications\", {\n      replaceMentionedUsernamesWithFullNames(v) {\n        replaceMentionedUsernamesWithFullNames = v;\n      },\n      parseMessageTextPerUser(v) {\n        parseMessageTextPerUser = v;\n      }\n    }, 4);\n    let getPushData;\n    module.link(\"../../../lib/server/functions/notifications/mobile\", {\n      getPushData(v) {\n        getPushData = v;\n      }\n    }, 5);\n    let metrics;\n    module.link(\"../../../metrics/server\", {\n      metrics(v) {\n        metrics = v;\n      }\n    }, 6);\n    let Push;\n    module.link(\"../../../push/server\", {\n      Push(v) {\n        Push = v;\n      }\n    }, 7);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 8);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    function hash(str) {\n      let hash = 0;\n      let i = str.length;\n      while (i) {\n        hash = (hash << 5) - hash + str.charCodeAt(--i);\n        hash &= hash; // Convert to 32bit integer\n      }\n      return hash;\n    }\n    class PushNotification {\n      getNotificationId(roomId) {\n        const serverId = settings.get('uniqueID');\n        return hash(\"\".concat(serverId, \"|\").concat(roomId)); // hash\n      }\n      getNotificationConfig(_ref) {\n        let {\n          rid,\n          uid: userId,\n          mid: messageId,\n          roomName,\n          username,\n          message,\n          payload,\n          badge = 1,\n          category,\n          idOnly = false\n        } = _ref;\n        const title = idOnly ? '' : roomName || username;\n        // message is being redacted already by 'getPushData' if idOnly is true\n        const text = !idOnly && roomName !== '' ? \"\".concat(username, \": \").concat(message) : message;\n        return _objectSpread({\n          from: 'push',\n          badge,\n          sound: 'default',\n          priority: 10,\n          title,\n          text,\n          payload: _objectSpread({\n            host: Meteor.absoluteUrl(),\n            messageId,\n            notificationType: idOnly ? 'message-id-only' : 'message'\n          }, !idOnly && _objectSpread({\n            rid\n          }, payload)),\n          userId,\n          notId: this.getNotificationId(rid),\n          gcm: {\n            style: 'inbox',\n            image: RocketChatAssets.getURL('Assets_favicon_192')\n          }\n        }, category !== '' ? {\n          apn: {\n            category\n          }\n        } : {});\n      }\n      async send(_ref2) {\n        let {\n          rid,\n          uid,\n          mid,\n          roomName,\n          username,\n          message,\n          payload,\n          badge = 1,\n          category\n        } = _ref2;\n        const idOnly = settings.get('Push_request_content_from_server');\n        const config = this.getNotificationConfig({\n          rid,\n          uid,\n          mid,\n          roomName,\n          username,\n          message,\n          payload,\n          badge,\n          category,\n          idOnly\n        });\n        metrics.notificationsSent.inc({\n          notification_type: 'mobile'\n        });\n        await Push.send(config);\n      }\n      async getNotificationForMessageId(_ref3) {\n        let {\n          receiver,\n          message,\n          room\n        } = _ref3;\n        const sender = await Users.findOneById(message.u._id, {\n          projection: {\n            username: 1,\n            name: 1\n          }\n        });\n        if (!sender) {\n          throw new Error('Message sender not found');\n        }\n        let notificationMessage = await callbacks.run('beforeSendMessageNotifications', message.msg);\n        if (message.mentions && Object.keys(message.mentions).length > 0 && settings.get('UI_Use_Real_Name')) {\n          notificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions);\n        }\n        notificationMessage = await parseMessageTextPerUser(notificationMessage, message, receiver);\n        const pushData = await getPushData({\n          room,\n          message,\n          userId: receiver._id,\n          receiver,\n          senderUsername: sender.username,\n          senderName: sender.name,\n          notificationMessage,\n          shouldOmitMessage: false\n        });\n        return {\n          message,\n          notification: this.getNotificationConfig(_objectSpread(_objectSpread({}, pushData), {}, {\n            rid: message.rid,\n            uid: message.u._id,\n            mid: message._id,\n            idOnly: false\n          }))\n        };\n      }\n    }\n    module.exportDefault(new PushNotification());\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","Users","Meteor","callbacks","RocketChatAssets","replaceMentionedUsernamesWithFullNames","parseMessageTextPerUser","getPushData","metrics","Push","settings","__reifyWaitForDeps__","hash","str","i","length","charCodeAt","PushNotification","getNotificationId","roomId","serverId","get","concat","getNotificationConfig","_ref","rid","uid","userId","mid","messageId","roomName","username","message","payload","badge","category","idOnly","title","text","from","sound","priority","host","absoluteUrl","notificationType","notId","gcm","style","image","getURL","apn","send","_ref2","config","notificationsSent","inc","notification_type","getNotificationForMessageId","_ref3","receiver","room","sender","findOneById","u","_id","projection","name","Error","notificationMessage","run","msg","mentions","Object","keys","pushData","senderUsername","senderName","shouldOmitMessage","notification","exportDefault","__reify_async_result__","_reifyError","self","async"],"sources":["app/push-notifications/server/lib/PushNotification.ts"],"sourcesContent":["import type { IMessage, IPushNotificationConfig, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { RocketChatAssets } from '../../../assets/server';\nimport { replaceMentionedUsernamesWithFullNames, parseMessageTextPerUser } from '../../../lib/server/functions/notifications';\nimport { getPushData } from '../../../lib/server/functions/notifications/mobile';\nimport { metrics } from '../../../metrics/server';\nimport { Push } from '../../../push/server';\nimport { settings } from '../../../settings/server';\n\ntype PushNotificationData = {\n\trid: string;\n\tuid: string;\n\tmid: string;\n\troomName: string;\n\tusername: string;\n\tmessage: string;\n\tpayload: Record<string, any>;\n\tbadge: number;\n\tcategory: string;\n};\n\ntype GetNotificationConfigParam = PushNotificationData & {\n\tidOnly: boolean;\n};\n\ntype NotificationPayload = {\n\tmessage: IMessage;\n\tnotification: IPushNotificationConfig;\n};\n\nfunction hash(str: string): number {\n\tlet hash = 0;\n\tlet i = str.length;\n\n\twhile (i) {\n\t\thash = (hash << 5) - hash + str.charCodeAt(--i);\n\t\thash &= hash; // Convert to 32bit integer\n\t}\n\treturn hash;\n}\n\nclass PushNotification {\n\tgetNotificationId(roomId: string): number {\n\t\tconst serverId = settings.get('uniqueID');\n\t\treturn hash(`${serverId}|${roomId}`); // hash\n\t}\n\n\tprivate getNotificationConfig({\n\t\trid,\n\t\tuid: userId,\n\t\tmid: messageId,\n\t\troomName,\n\t\tusername,\n\t\tmessage,\n\t\tpayload,\n\t\tbadge = 1,\n\t\tcategory,\n\t\tidOnly = false,\n\t}: GetNotificationConfigParam): IPushNotificationConfig {\n\t\tconst title = idOnly ? '' : roomName || username;\n\n\t\t// message is being redacted already by 'getPushData' if idOnly is true\n\t\tconst text = !idOnly && roomName !== '' ? `${username}: ${message}` : message;\n\n\t\treturn {\n\t\t\tfrom: 'push',\n\t\t\tbadge,\n\t\t\tsound: 'default',\n\t\t\tpriority: 10,\n\t\t\ttitle,\n\t\t\ttext,\n\t\t\tpayload: {\n\t\t\t\thost: Meteor.absoluteUrl(),\n\t\t\t\tmessageId,\n\t\t\t\tnotificationType: idOnly ? 'message-id-only' : 'message',\n\t\t\t\t...(!idOnly && { rid, ...payload }),\n\t\t\t},\n\t\t\tuserId,\n\t\t\tnotId: this.getNotificationId(rid),\n\t\t\tgcm: {\n\t\t\t\tstyle: 'inbox',\n\t\t\t\timage: RocketChatAssets.getURL('Assets_favicon_192'),\n\t\t\t},\n\t\t\t...(category !== '' ? { apn: { category } } : {}),\n\t\t};\n\t}\n\n\tasync send({ rid, uid, mid, roomName, username, message, payload, badge = 1, category }: PushNotificationData): Promise<void> {\n\t\tconst idOnly = settings.get<boolean>('Push_request_content_from_server');\n\t\tconst config = this.getNotificationConfig({\n\t\t\trid,\n\t\t\tuid,\n\t\t\tmid,\n\t\t\troomName,\n\t\t\tusername,\n\t\t\tmessage,\n\t\t\tpayload,\n\t\t\tbadge,\n\t\t\tcategory,\n\t\t\tidOnly,\n\t\t});\n\n\t\tmetrics.notificationsSent.inc({ notification_type: 'mobile' });\n\t\tawait Push.send(config);\n\t}\n\n\tasync getNotificationForMessageId({\n\t\treceiver,\n\t\tmessage,\n\t\troom,\n\t}: {\n\t\treceiver: IUser;\n\t\tmessage: IMessage;\n\t\troom: IRoom;\n\t}): Promise<NotificationPayload> {\n\t\tconst sender = await Users.findOneById(message.u._id, { projection: { username: 1, name: 1 } });\n\t\tif (!sender) {\n\t\t\tthrow new Error('Message sender not found');\n\t\t}\n\n\t\tlet notificationMessage = await callbacks.run('beforeSendMessageNotifications', message.msg);\n\t\tif (message.mentions && Object.keys(message.mentions).length > 0 && settings.get('UI_Use_Real_Name')) {\n\t\t\tnotificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions);\n\t\t}\n\t\tnotificationMessage = await parseMessageTextPerUser(notificationMessage, message, receiver);\n\n\t\tconst pushData = await getPushData({\n\t\t\troom,\n\t\t\tmessage,\n\t\t\tuserId: receiver._id,\n\t\t\treceiver,\n\t\t\tsenderUsername: sender.username,\n\t\t\tsenderName: sender.name,\n\t\t\tnotificationMessage,\n\t\t\tshouldOmitMessage: false,\n\t\t});\n\n\t\treturn {\n\t\t\tmessage,\n\t\t\tnotification: this.getNotificationConfig({\n\t\t\t\t...pushData,\n\t\t\t\trid: message.rid,\n\t\t\t\tuid: message.u._id,\n\t\t\t\tmid: message._id,\n\t\t\t\tidOnly: false,\n\t\t\t}),\n\t\t};\n\t}\n}\n\nexport default new PushNotification();\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"1e200acccc6a7d9e18f23ba5fc5d9e7e2f30e5bc"}
