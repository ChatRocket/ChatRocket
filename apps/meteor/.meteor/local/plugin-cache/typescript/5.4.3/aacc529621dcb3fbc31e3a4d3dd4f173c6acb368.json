{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"app/e2e/client/rocketchat.e2e.room.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.ts","inputSourceMap":{"version":3,"file":"app/e2e/client/rocketchat.e2e.room.ts","sourceRoot":"","sources":["app/e2e/client/rocketchat.e2e.room.ts"],"names":[],"mappings":"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","sourcesContent":["import { Base64 } from '@rocket.chat/base64';\nimport { Emitter } from '@rocket.chat/emitter';\nimport EJSON from 'ejson';\n\nimport { RoomManager } from '../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../client/lib/rooms/roomCoordinator';\nimport { RoomSettingsEnum } from '../../../definition/IRoomTypeConfig';\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\nimport { E2ERoomState } from './E2ERoomState';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptRSA,\n\tencryptAES,\n\tdecryptRSA,\n\tdecryptAES,\n\tgenerateAESKey,\n\texportJWKKey,\n\timportAESKey,\n\timportRSAKey,\n\treadFileAsArrayBuffer,\n\tencryptAESCTR,\n\tgenerateAESCTRKey,\n\tsha256HashFromArrayBuffer,\n\tcreateSha256HashFromText,\n} from './helper';\nimport { log, logError } from './logger';\nimport { e2e } from './rocketchat.e2e';\n\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\n\nconst permitedMutations: any = {\n\t[E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n\t[E2ERoomState.READY]: [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS],\n\t[E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n\t[E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n\t[E2ERoomState.ESTABLISHING]: [\n\t\tE2ERoomState.READY,\n\t\tE2ERoomState.KEYS_RECEIVED,\n\t\tE2ERoomState.ERROR,\n\t\tE2ERoomState.DISABLED,\n\t\tE2ERoomState.WAITING_KEYS,\n\t\tE2ERoomState.CREATING_KEYS,\n\t],\n};\n\nconst filterMutation = (currentState: any, nextState: any): any => {\n\tif (currentState === nextState) {\n\t\treturn nextState === E2ERoomState.ERROR;\n\t}\n\n\tif (!(currentState in permitedMutations)) {\n\t\treturn nextState;\n\t}\n\n\tif (permitedMutations[currentState].includes(nextState)) {\n\t\treturn nextState;\n\t}\n\n\treturn false;\n};\n\nexport class E2ERoom extends Emitter {\n\tstate: any = undefined;\n\n\t[PAUSED]: boolean | undefined = undefined;\n\n\t[KEY_ID]: any;\n\n\tuserId: any;\n\n\troomId: any;\n\n\ttypeOfRoom: any;\n\n\troomKeyId: any;\n\n\tgroupSessionKey: any;\n\n\toldKeys: any;\n\n\tsessionKeyExportedString: string | undefined;\n\n\tsessionKeyExported: any;\n\n\tconstructor(userId: any, room: any) {\n\t\tsuper();\n\n\t\tthis.userId = userId;\n\t\tthis.roomId = room._id;\n\t\tthis.typeOfRoom = room.t;\n\t\tthis.roomKeyId = room.e2eKeyId;\n\n\t\tthis.once(E2ERoomState.READY, async () => {\n\t\t\tawait this.decryptOldRoomKeys();\n\t\t\treturn this.decryptPendingMessages();\n\t\t});\n\t\tthis.once(E2ERoomState.READY, () => this.decryptSubscription());\n\t\tthis.on('STATE_CHANGED', (prev) => {\n\t\t\tif (this.roomId === RoomManager.opened) {\n\t\t\t\tthis.log(`[PREV: ${prev}]`, 'State CHANGED');\n\t\t\t}\n\t\t});\n\t\tthis.on('STATE_CHANGED', () => this.handshake());\n\n\t\tthis.setState(E2ERoomState.NOT_STARTED);\n\t}\n\n\tlog(...msg: unknown[]) {\n\t\tlog(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\terror(...msg: unknown[]) {\n\t\tlogError(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\thasSessionKey() {\n\t\treturn !!this.groupSessionKey;\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tsetState(requestedState: any) {\n\t\tconst currentState = this.state;\n\t\tconst nextState = filterMutation(currentState, requestedState);\n\n\t\tif (!nextState) {\n\t\t\tthis.error(`invalid state ${currentState} -> ${requestedState}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state = nextState;\n\t\tthis.log(currentState, '->', nextState);\n\t\tthis.emit('STATE_CHANGED', currentState);\n\t\tthis.emit(nextState, this);\n\t}\n\n\tisReady() {\n\t\treturn this.state === E2ERoomState.READY;\n\t}\n\n\tisDisabled() {\n\t\treturn this.state === E2ERoomState.DISABLED;\n\t}\n\n\tenable() {\n\t\tif (this.state === E2ERoomState.READY) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tdisable() {\n\t\tthis.setState(E2ERoomState.DISABLED);\n\t}\n\n\tpause() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', true);\n\t\tthis[PAUSED] = true;\n\t\tthis.emit('PAUSED', true);\n\t}\n\n\tresume() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', false);\n\t\tthis[PAUSED] = false;\n\t\tthis.emit('PAUSED', false);\n\t}\n\n\tkeyReceived() {\n\t\tthis.setState(E2ERoomState.KEYS_RECEIVED);\n\t}\n\n\tasync shouldConvertSentMessages(message: any) {\n\t\tif (!this.isReady() || this[PAUSED]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this[PAUSED] === undefined) {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tthis.once('PAUSED', resolve);\n\t\t\t});\n\t\t}\n\n\t\tif (message.msg[0] === '/') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshouldConvertReceivedMessages() {\n\t\treturn this.isReady();\n\t}\n\n\tisWaitingKeys() {\n\t\treturn this.state === E2ERoomState.WAITING_KEYS;\n\t}\n\n\tget keyID() {\n\t\treturn this[KEY_ID];\n\t}\n\n\tset keyID(keyID) {\n\t\tthis[KEY_ID] = keyID;\n\t}\n\n\tasync decryptSubscription() {\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (subscription?.lastMessage?.t !== 'e2e') {\n\t\t\tthis.log('decryptSubscriptions nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await this.decryptMessage(subscription.lastMessage);\n\n\t\tSubscriptions.update(\n\t\t\t{\n\t\t\t\t_id: subscription._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastMessage: message,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.log('decryptSubscriptions Done');\n\t}\n\n\tasync decryptOldRoomKeys() {\n\t\tconst sub = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (!sub?.oldRoomKeys || sub?.oldRoomKeys.length === 0) {\n\t\t\tthis.log('decryptOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of sub.oldRoomKeys) {\n\t\t\ttry {\n\t\t\t\tconst k = await this.decryptSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t\tkeys.push({ ...key, E2EKey: null });\n\t\t\t}\n\t\t}\n\n\t\tthis.oldKeys = keys;\n\t\tthis.log('decryptOldRoomKeys Done');\n\t}\n\n\tasync exportOldRoomKeys(oldKeys: any) {\n\t\tthis.log('exportOldRoomKeys starting');\n\t\tif (!oldKeys || oldKeys.length === 0) {\n\t\t\tthis.log('exportOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of oldKeys) {\n\t\t\ttry {\n\t\t\t\tif (!key.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst k = await this.exportSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.log(`exportOldRoomKeys Done: ${keys.length} keys exported`);\n\t\treturn keys;\n\t}\n\n\tasync decryptPendingMessages() {\n\t\treturn Messages.find({ rid: this.roomId, t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg));\n\t\t});\n\t}\n\n\t// Initiates E2E Encryption\n\tasync handshake() {\n\t\tif (!e2e.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.ESTABLISHING);\n\n\t\ttry {\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId })?.E2EKey;\n\t\t\tif (groupKey) {\n\t\t\t\tawait this.importGroupKey(groupKey);\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t\tthis.error('Error fetching group key: ', error);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId })!;\n\t\t\t// Only room creator can set keys for room\n\t\t\tif (!room.e2eKeyId && this.userShouldCreateKeys(room)) {\n\t\t\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\t\t\tawait this.createGroupKey();\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\t\tthis.log('Requesting room key');\n\t\t\tsdk.publish('notify-room-users', [`${this.roomId}/e2ekeyRequest`, this.roomId, room.e2eKeyId]);\n\t\t} catch (error) {\n\t\t\t// this.error = error;\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t}\n\t}\n\n\tuserShouldCreateKeys(room: any) {\n\t\t// On DMs, we'll allow any user to set the keys\n\t\tif (room.t === 'd') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn room.u._id === this.userId;\n\t}\n\n\tisSupportedRoomType(type: any) {\n\t\treturn roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n\t}\n\n\tasync decryptSessionKey(key: any) {\n\t\treturn importAESKey(JSON.parse(await this.exportSessionKey(key)));\n\t}\n\n\tasync exportSessionKey(key: any) {\n\t\tkey = key.slice(12);\n\t\tkey = Base64.decode(key);\n\n\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, key);\n\t\treturn toString(decryptedKey);\n\t}\n\n\tasync importGroupKey(groupKey: any) {\n\t\tthis.log('Importing room key ->', this.roomId);\n\t\t// Get existing group key\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\t// When a new e2e room is created, it will be initialized without an e2e key id\n\t\t// This will prevent new rooms from storing `undefined` as the keyid\n\t\tif (!this.keyID) {\n\t\t\tthis.keyID = this.roomKeyId || (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t\t}\n\n\t\t// Import session key for use.\n\t\ttry {\n\t\t\tconst key = await importAESKey(JSON.parse(this.sessionKeyExportedString!));\n\t\t\t// Key has been obtained. E2E is now in session.\n\t\t\tthis.groupSessionKey = key;\n\t\t} catch (error) {\n\t\t\tthis.error('Error importing group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync createNewGroupKey() {\n\t\tthis.groupSessionKey = await generateAESKey();\n\n\t\tconst sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n\t\tthis.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n\t\tthis.keyID = (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t}\n\n\tasync createGroupKey() {\n\t\tthis.log('Creating room key');\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tawait sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID);\n\t\t\tawait sdk.rest.post('/v1/e2e.updateGroupKey', {\n\t\t\t\trid: this.roomId,\n\t\t\t\tuid: this.userId,\n\t\t\t\tkey: await this.encryptGroupKeyForParticipant(e2e.publicKey!),\n\t\t\t} as any);\n\t\t\tawait this.encryptKeyForOtherParticipants();\n\t\t} catch (error) {\n\t\t\tthis.error('Error exporting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync resetRoomKey() {\n\t\tthis.log('Resetting room key');\n\t\tif (!e2e.publicKey) {\n\t\t\tthis.error('Cannot reset room key. No public key found.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tconst e2eNewKeys = { e2eKeyId: this.keyID, e2eKey: await this.encryptGroupKeyForParticipant(e2e.publicKey) };\n\n\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\tthis.log(`Room key reset done for room ${this.roomId}`);\n\n\t\t\treturn e2eNewKeys;\n\t\t} catch (error) {\n\t\t\tthis.error('Error resetting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tonRoomKeyReset(keyID: any) {\n\t\tthis.log(`Room keyID was reset. New keyID: ${keyID} Previous keyID: ${this.keyID}`);\n\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\tthis.keyID = keyID;\n\t\tthis.groupSessionKey = undefined;\n\t\tthis.sessionKeyExportedString = undefined;\n\t\tthis.sessionKeyExported = undefined;\n\t\tthis.oldKeys = undefined;\n\t}\n\n\tasync encryptKeyForOtherParticipants() {\n\t\t// Encrypt generated session key for every user in room and publish to subscription model.\n\t\ttry {\n\t\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\t\tconst users = (await sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId)).users.filter((user) => user?.e2e?.public_key);\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst usersSuggestedGroupKeys = { [this.roomId]: [] as any[] };\n\t\t\tfor await (const user of users) {\n\t\t\t\tconst encryptedGroupKey = await this.encryptGroupKeyForParticipant(user.e2e!.public_key!);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(user.e2e?.public_key, decryptedOldGroupKeys);\n\n\t\t\t\tusersSuggestedGroupKeys[this.roomId].push({ _id: user._id, key: encryptedGroupKey, ...(oldKeys && { oldKeys }) });\n\t\t\t}\n\n\t\t\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys });\n\t\t} catch (error) {\n\t\t\treturn this.error('Error getting room users: ', error);\n\t\t}\n\t}\n\n\tasync encryptOldKeysForParticipant(publicKey: any, oldRoomKeys: any) {\n\t\tif (!oldRoomKeys || oldRoomKeys.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet userKey;\n\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst keys = [];\n\t\t\tfor await (const oldRoomKey of oldRoomKeys) {\n\t\t\t\tif (!oldRoomKey.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst encryptedKey = await encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey));\n\t\t\t\tconst encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n\n\t\t\t\tkeys.push({ ...oldRoomKey, E2EKey: encryptedKeyToString });\n\t\t\t}\n\t\t\treturn keys;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\tasync encryptGroupKeyForParticipant(publicKey: string) {\n\t\tlet userKey;\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\t\t// const vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\t// Encrypt session key for this user with his/her public key\n\t\ttry {\n\t\t\tconst encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n\t\t\tconst encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n\t\t\treturn encryptedUserKeyToString;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\t// Encrypts files before upload. I/O is in arraybuffers.\n\tasync encryptFile(file: any) {\n\t\t// if (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t// \treturn;\n\t\t// }\n\n\t\tconst fileArrayBuffer = await readFileAsArrayBuffer(file);\n\n\t\tconst hash = await sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer));\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst key = await generateAESCTRKey();\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAESCTR(vector, key, fileArrayBuffer);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\treturn this.error('Error encrypting group key: ', error);\n\t\t}\n\n\t\tconst exportedKey = await window.crypto.subtle.exportKey('jwk', key);\n\n\t\tconst fileName = await createSha256HashFromText(file.name);\n\n\t\tconst encryptedFile = new File([toArrayBuffer(result)], fileName);\n\n\t\treturn {\n\t\t\tfile: encryptedFile,\n\t\t\tkey: exportedKey,\n\t\t\tiv: Base64.encode(vector),\n\t\t\ttype: file.type,\n\t\t\thash,\n\t\t};\n\t}\n\n\t// Decrypt uploaded encrypted files. I/O is in arraybuffers.\n\tasync decryptFile(file: any, key: any, iv: any) {\n\t\tconst ivArray = Base64.decode(iv);\n\t\tconst cryptoKey = await window.crypto.subtle.importKey('jwk', key, { name: 'AES-CTR' }, true, ['encrypt', 'decrypt']);\n\n\t\treturn window.crypto.subtle.decrypt({ name: 'AES-CTR', counter: ivArray, length: 64 }, cryptoKey, file);\n\t}\n\n\t// Encrypts messages\n\tasync encryptText(data: any) {\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\ttry {\n\t\t\tconst result = await encryptAES(vector, this.groupSessionKey, data);\n\t\t\treturn this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n\t\t} catch (error) {\n\t\t\tthis.error('Error encrypting message: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessageContent(contentToBeEncrypted: any) {\n\t\tconst data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n\n\t\treturn {\n\t\t\talgorithm: 'rc.v1.aes-sha2',\n\t\t\tciphertext: await this.encryptText(data),\n\t\t};\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessage(message: any) {\n\t\tconst { msg, attachments, ...rest } = message;\n\n\t\tconst content = await this.encryptMessageContent({ msg, attachments });\n\n\t\treturn {\n\t\t\t...rest,\n\t\t\tcontent,\n\t\t\tt: 'e2e',\n\t\t\te2e: 'pending',\n\t\t};\n\t}\n\n\t// Helper function for encryption of messages\n\tencrypt(message: any) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.groupSessionKey) {\n\t\t\tthrow new Error(t('E2E_Invalid_Key'));\n\t\t}\n\n\t\tconst ts = new Date();\n\n\t\tconst data = new TextEncoder().encode(\n\t\t\tEJSON.stringify({\n\t\t\t\t_id: message._id,\n\t\t\t\ttext: message.msg,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tts,\n\t\t\t}),\n\t\t);\n\n\t\treturn this.encryptText(data);\n\t}\n\n\tasync decryptContent(data: any) {\n\t\tif (data.content && data.content.algorithm === 'rc.v1.aes-sha2') {\n\t\t\tconst content = await this.decrypt(data.content.ciphertext);\n\t\t\tObject.assign(data, content);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// Decrypt messages\n\tasync decryptMessage(message: any) {\n\t\tif (message.t !== 'e2e' || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.msg) {\n\t\t\tconst data = await this.decrypt(message.msg);\n\n\t\t\tif (data?.text) {\n\t\t\t\tmessage.msg = data.text;\n\t\t\t}\n\t\t}\n\n\t\tmessage = await this.decryptContent(message);\n\n\t\treturn {\n\t\t\t...message,\n\t\t\te2e: 'done',\n\t\t};\n\t}\n\n\tasync doDecrypt(vector: any, key: any, cipherText: any) {\n\t\tconst result = await decryptAES(vector, key, cipherText);\n\t\treturn EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n\t}\n\n\tasync decrypt(message: any) {\n\t\tconst keyID = message.slice(0, 12);\n\t\tmessage = message.slice(12);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n\n\t\tlet oldKey = '';\n\t\tif (keyID !== this.keyID) {\n\t\t\tconst oldRoomKey = this.oldKeys?.find((key: any) => key.e2eKeyId === keyID);\n\t\t\t// Messages already contain a keyID stored with them\n\t\t\t// That means that if we cannot find a keyID for the key the message has preppended to\n\t\t\t// The message is indecipherable.\n\t\t\t// In these cases, we'll give a last shot using the current session key, which may not work\n\t\t\t// but will be enough to help with some mobile issues.\n\t\t\tif (!oldRoomKey) {\n\t\t\t\ttry {\n\t\t\t\t\treturn await this.doDecrypt(vector, this.groupSessionKey, cipherText);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\t\t\treturn { msg: t('E2E_indecipherable') };\n\t\t\t\t}\n\t\t\t}\n\t\t\toldKey = oldRoomKey.E2EKey;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.doDecrypt(vector, oldKey || this.groupSessionKey, cipherText);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\treturn { msg: t('E2E_Key_Error') };\n\t\t}\n\t}\n\n\tprovideKeyToUser(keyId: any) {\n\t\tif (this.keyID !== keyId) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid this.encryptKeyForOtherParticipants();\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tonStateChange(cb: any) {\n\t\tthis.on('STATE_CHANGED', cb);\n\t\treturn () => this.off('STATE_CHANGED', cb);\n\t}\n\n\tasync encryptGroupKeyForParticipantsWaitingForTheKeys(users: any[]) {\n\t\tif (!this.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\tconst usersWithKeys = await Promise.all(\n\t\t\tusers.map(async (user) => {\n\t\t\t\tconst { _id, public_key } = user;\n\t\t\t\tconst key = await this.encryptGroupKeyForParticipant(public_key);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys);\n\t\t\t\treturn { _id, key, ...(oldKeys && { oldKeys }) };\n\t\t\t}),\n\t\t);\n\n\t\treturn usersWithKeys;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"production","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/e2e/client/rocketchat.e2e.room.ts","inputSourceMap":{"version":3,"file":"app/e2e/client/rocketchat.e2e.room.ts","sourceRoot":"","sources":["app/e2e/client/rocketchat.e2e.room.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAC/C,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAC9D,OAAO,EAAE,eAAe,EAAE,MAAM,2CAA2C,CAAC;AAC5E,OAAO,EAAE,gBAAgB,EAAE,MAAM,qCAAqC,CAAC;AACvE,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AACxE,OAAO,EAAE,GAAG,EAAE,MAAM,kCAAkC,CAAC;AACvD,OAAO,EAAE,CAAC,EAAE,MAAM,sBAAsB,CAAC;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EACN,QAAQ,EACR,aAAa,EACb,yBAAyB,EACzB,0BAA0B,EAC1B,UAAU,EACV,UAAU,EACV,UAAU,EACV,UAAU,EACV,cAAc,EACd,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,qBAAqB,EACrB,aAAa,EACb,iBAAiB,EACjB,yBAAyB,EACzB,wBAAwB,GACxB,MAAM,UAAU,CAAC;AAClB,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AACzC,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAC;AAEvC,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;AAC/B,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;AAEhC,MAAM,iBAAiB,GAAQ;IAC9B,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,YAAY,CAAC,YAAY,EAAE,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,aAAa,CAAC;IAC1G,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,aAAa,EAAE,YAAY,CAAC,YAAY,CAAC;IACpG,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,aAAa,EAAE,YAAY,CAAC,WAAW,CAAC;IAC5E,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,aAAa,EAAE,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,QAAQ,CAAC;IACpG,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE;QAC5B,YAAY,CAAC,KAAK;QAClB,YAAY,CAAC,aAAa;QAC1B,YAAY,CAAC,KAAK;QAClB,YAAY,CAAC,QAAQ;QACrB,YAAY,CAAC,YAAY;QACzB,YAAY,CAAC,aAAa;KAC1B;CACD,CAAC;AAEF,MAAM,cAAc,GAAG,CAAC,YAAiB,EAAE,SAAc,EAAO,EAAE;IACjE,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;QAChC,OAAO,SAAS,KAAK,YAAY,CAAC,KAAK,CAAC;IACzC,CAAC;IAED,IAAI,CAAC,CAAC,YAAY,IAAI,iBAAiB,CAAC,EAAE,CAAC;QAC1C,OAAO,SAAS,CAAC;IAClB,CAAC;IAED,IAAI,iBAAiB,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;QACzD,OAAO,SAAS,CAAC;IAClB,CAAC;IAED,OAAO,KAAK,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,OAAO,OAAQ,SAAQ,OAAO;IACnC,KAAK,GAAQ,SAAS,CAAC;IAEvB,CAAC,MAAM,CAAC,GAAwB,SAAS,CAAC;IAE1C,CAAC,MAAM,CAAC,CAAM;IAEd,MAAM,CAAM;IAEZ,MAAM,CAAM;IAEZ,UAAU,CAAM;IAEhB,SAAS,CAAM;IAEf,eAAe,CAAM;IAErB,OAAO,CAAM;IAEb,wBAAwB,CAAqB;IAE7C,kBAAkB,CAAM;IAExB,YAAY,MAAW,EAAE,IAAS;QACjC,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE/B,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,IAAI,EAAE;YACxC,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAChE,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,IAAI,EAAE,EAAE;YACjC,IAAI,IAAI,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE,CAAC;gBACxC,IAAI,CAAC,GAAG,CAAC,UAAU,IAAI,GAAG,EAAE,eAAe,CAAC,CAAC;YAC9C,CAAC;QACF,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QAEjD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC;IAED,GAAG,CAAC,GAAG,GAAc;QACpB,GAAG,CAAC,qBAAqB,IAAI,CAAC,KAAK,UAAU,IAAI,CAAC,MAAM,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC;IACvE,CAAC;IAED,KAAK,CAAC,GAAG,GAAc;QACtB,QAAQ,CAAC,qBAAqB,IAAI,CAAC,KAAK,UAAU,IAAI,CAAC,MAAM,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC;IAC5E,CAAC;IAED,aAAa;QACZ,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;IAC/B,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,QAAQ,CAAC,cAAmB;QAC3B,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,MAAM,SAAS,GAAG,cAAc,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;QAE/D,IAAI,CAAC,SAAS,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,iBAAiB,YAAY,OAAO,cAAc,EAAE,CAAC,CAAC;YACjE,OAAO;QACR,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QACvB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,OAAO;QACN,OAAO,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,KAAK,CAAC;IAC1C,CAAC;IAED,UAAU;QACT,OAAO,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,QAAQ,CAAC;IAC7C,CAAC;IAED,MAAM;QACL,IAAI,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,KAAK,EAAE,CAAC;YACvC,OAAO;QACR,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,OAAO;QACN,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAED,KAAK;QACJ,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,MAAM;QACL,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,WAAW;QACV,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,OAAY;QAC3C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACrC,OAAO,KAAK,CAAC;QACd,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE,CAAC;YAChC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC9B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YAC5B,OAAO,KAAK,CAAC;QACd,CAAC;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAED,6BAA6B;QAC5B,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;IACvB,CAAC;IAED,aAAa;QACZ,OAAO,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,YAAY,CAAC;IACjD,CAAC;IAED,IAAI,KAAK;QACR,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC;IAED,IAAI,KAAK,CAAC,KAAK;QACd,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,mBAAmB;QACxB,MAAM,YAAY,GAAG,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAEjE,IAAI,YAAY,EAAE,WAAW,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC;YAC5C,IAAI,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;YAC/C,OAAO;QACR,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QAEpE,aAAa,CAAC,MAAM,CACnB;YACC,GAAG,EAAE,YAAY,CAAC,GAAG;SACrB,EACD;YACC,IAAI,EAAE;gBACL,WAAW,EAAE,OAAO;aACpB;SACD,CACD,CAAC;QACF,IAAI,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,kBAAkB;QACvB,MAAM,GAAG,GAAG,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,GAAG,EAAE,WAAW,IAAI,GAAG,EAAE,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxD,IAAI,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;YAC7C,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,EAAE,CAAC;QAChB,IAAI,KAAK,EAAE,MAAM,GAAG,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;YACzC,IAAI,CAAC;gBACJ,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACnD,IAAI,CAAC,IAAI,CAAC;oBACT,GAAG,GAAG;oBACN,MAAM,EAAE,CAAC;iBACT,CAAC,CAAC;YACJ,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACZ,IAAI,CAAC,KAAK,CACT,uCAAuC,GAAG,CAAC,QAAQ,2EAA2E,CAC9H,CAAC;gBACF,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;YACrC,CAAC;QACF,CAAC;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,OAAY;QACnC,IAAI,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtC,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;YAC5C,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,EAAE,CAAC;QAChB,IAAI,KAAK,EAAE,MAAM,GAAG,IAAI,OAAO,EAAE,CAAC;YACjC,IAAI,CAAC;gBACJ,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;oBACjB,SAAS;gBACV,CAAC;gBAED,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAClD,IAAI,CAAC,IAAI,CAAC;oBACT,GAAG,GAAG;oBACN,MAAM,EAAE,CAAC;iBACT,CAAC,CAAC;YACJ,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACZ,IAAI,CAAC,KAAK,CACT,uCAAuC,GAAG,CAAC,QAAQ,2EAA2E,CAC9H,CAAC;YACH,CAAC;QACF,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,2BAA2B,IAAI,CAAC,MAAM,gBAAgB,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC;IACb,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC3B,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE;YACtG,QAAQ,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,2BAA2B;IAC3B,KAAK,CAAC,SAAS;QACd,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC;YACpB,OAAO;QACR,CAAC;QAED,IAAI,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,aAAa,IAAI,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,WAAW,EAAE,CAAC;YAC1F,OAAO;QACR,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAEzC,IAAI,CAAC;YACJ,MAAM,QAAQ,GAAG,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC;YACrE,IAAI,QAAQ,EAAE,CAAC;gBACd,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACpC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAClC,OAAO;YACR,CAAC;QACF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAChD,OAAO;QACR,CAAC;QAED,IAAI,CAAC;YACJ,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAE,CAAC;YACrD,0CAA0C;YAC1C,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC;gBACvD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;gBAC1C,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;gBAC5B,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAClC,OAAO;YACR,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YACzC,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YAChC,GAAG,CAAC,OAAO,CAAC,mBAAmB,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,gBAAgB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChG,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,sBAAsB;YACtB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC;IACF,CAAC;IAED,oBAAoB,CAAC,IAAS;QAC7B,+CAA+C;QAC/C,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACpB,OAAO,IAAI,CAAC;QACb,CAAC;QAED,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,MAAM,CAAC;IACnC,CAAC;IAED,mBAAmB,CAAC,IAAS;QAC5B,OAAO,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,sBAAsB,CAAC,EAAE,EAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACjG,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,GAAQ;QAC/B,OAAO,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,GAAQ;QAC9B,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACpB,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAEzB,MAAM,YAAY,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;QAC3D,OAAO,QAAQ,CAAC,YAAY,CAAC,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,QAAa;QACjC,IAAI,CAAC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/C,yBAAyB;QACzB,uCAAuC;QACvC,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC9B,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEnC,yCAAyC;QACzC,IAAI,CAAC;YACJ,MAAM,YAAY,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAChE,IAAI,CAAC,wBAAwB,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC;QACxD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO,KAAK,CAAC;QACd,CAAC;QAED,+EAA+E;QAC/E,oEAAoE;QACpE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YACjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,MAAM,wBAAwB,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC7G,CAAC;QAED,8BAA8B;QAC9B,IAAI,CAAC;YACJ,MAAM,GAAG,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,wBAAyB,CAAC,CAAC,CAAC;YAC3E,gDAAgD;YAChD,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;QAC5B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACjD,OAAO,KAAK,CAAC;QACd,CAAC;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAED,KAAK,CAAC,iBAAiB;QACtB,IAAI,CAAC,eAAe,GAAG,MAAM,cAAc,EAAE,CAAC;QAE9C,MAAM,kBAAkB,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACpE,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;QACnE,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,wBAAwB,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC3F,CAAC;IAED,KAAK,CAAC,cAAc;QACnB,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAC9B,IAAI,CAAC;YACJ,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAE/B,MAAM,GAAG,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5D,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;gBAC7C,GAAG,EAAE,IAAI,CAAC,MAAM;gBAChB,GAAG,EAAE,IAAI,CAAC,MAAM;gBAChB,GAAG,EAAE,MAAM,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,SAAU,CAAC;aACtD,CAAC,CAAC;YACV,MAAM,IAAI,CAAC,8BAA8B,EAAE,CAAC;QAC7C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,KAAK,CAAC;QACb,CAAC;IACF,CAAC;IAED,KAAK,CAAC,YAAY;QACjB,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;YACpB,IAAI,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;YAC1D,OAAO;QACR,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAC1C,IAAI,CAAC;YACJ,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAE/B,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;YAE7G,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAClC,IAAI,CAAC,GAAG,CAAC,gCAAgC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;YAExD,OAAO,UAAU,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,KAAK,CAAC;QACb,CAAC;IACF,CAAC;IAED,cAAc,CAAC,KAAU;QACxB,IAAI,CAAC,GAAG,CAAC,oCAAoC,KAAK,oBAAoB,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACzC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QACjC,IAAI,CAAC,wBAAwB,GAAG,SAAS,CAAC;QAC1C,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,8BAA8B;QACnC,0FAA0F;QAC1F,IAAI,CAAC;YACJ,MAAM,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1D,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAC/E,MAAM,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,8BAA8B,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;YAE1H,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;gBACnB,OAAO;YACR,CAAC;YAED,MAAM,uBAAuB,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAW,EAAE,CAAC;YAC/D,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBAChC,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,GAAI,CAAC,UAAW,CAAC,CAAC;gBAC1F,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,EAAE,qBAAqB,CAAC,CAAC;gBAErG,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,iBAAiB,EAAE,GAAG,CAAC,OAAO,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;YACnH,CAAC;YAED,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,wCAAwC,EAAE,EAAE,uBAAuB,EAAE,CAAC,CAAC;QAC5F,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACxD,CAAC;IACF,CAAC;IAED,KAAK,CAAC,4BAA4B,CAAC,SAAc,EAAE,WAAgB;QAClE,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC9C,OAAO;QACR,CAAC;QAED,IAAI,OAAO,CAAC;QAEZ,IAAI,CAAC;YACJ,OAAO,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QAClE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACxD,CAAC;QAED,IAAI,CAAC;YACJ,MAAM,IAAI,GAAG,EAAE,CAAC;YAChB,IAAI,KAAK,EAAE,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;gBAC5C,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;oBACxB,SAAS;gBACV,CAAC;gBACD,MAAM,YAAY,GAAG,MAAM,UAAU,CAAC,OAAO,EAAE,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjF,MAAM,oBAAoB,GAAG,UAAU,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;gBAE/F,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,UAAU,EAAE,MAAM,EAAE,oBAAoB,EAAE,CAAC,CAAC;YAC5D,CAAC;YACD,OAAO,IAAI,CAAC;QACb,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;QACzD,CAAC;IACF,CAAC;IAED,KAAK,CAAC,6BAA6B,CAAC,SAAiB;QACpD,IAAI,OAAO,CAAC;QACZ,IAAI,CAAC;YACJ,OAAO,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QAClE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACxD,CAAC;QACD,6DAA6D;QAE7D,4DAA4D;QAC5D,IAAI,CAAC;YACJ,MAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,OAAO,EAAE,aAAa,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;YACjG,MAAM,wBAAwB,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC9F,OAAO,wBAAwB,CAAC;QACjC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;QACzD,CAAC;IACF,CAAC;IAED,wDAAwD;IACxD,KAAK,CAAC,WAAW,CAAC,IAAS;QAC1B,oDAAoD;QACpD,WAAW;QACX,IAAI;QAEJ,MAAM,eAAe,GAAG,MAAM,qBAAqB,CAAC,IAAI,CAAC,CAAC;QAE1D,MAAM,IAAI,GAAG,MAAM,yBAAyB,CAAC,IAAI,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;QAE9E,MAAM,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,MAAM,GAAG,GAAG,MAAM,iBAAiB,EAAE,CAAC;QACtC,IAAI,MAAM,CAAC;QACX,IAAI,CAAC;YACJ,MAAM,GAAG,MAAM,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;QAC5D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,OAAO,IAAI,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAErE,MAAM,QAAQ,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE3D,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QAElE,OAAO;YACN,IAAI,EAAE,aAAa;YACnB,GAAG,EAAE,WAAW;YAChB,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YACzB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI;SACJ,CAAC;IACH,CAAC;IAED,4DAA4D;IAC5D,KAAK,CAAC,WAAW,CAAC,IAAS,EAAE,GAAQ,EAAE,EAAO;QAC7C,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAClC,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAEtH,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IACzG,CAAC;IAED,oBAAoB;IACpB,KAAK,CAAC,WAAW,CAAC,IAAS;QAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;QAE1D,IAAI,CAAC;YACJ,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;YACpE,OAAO,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,yBAAyB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;QAC9E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAChD,MAAM,KAAK,CAAC;QACb,CAAC;IACF,CAAC;IAED,4CAA4C;IAC5C,KAAK,CAAC,qBAAqB,CAAC,oBAAyB;QACpD,MAAM,IAAI,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC;QAE7E,OAAO;YACN,SAAS,EAAE,gBAAgB;YAC3B,UAAU,EAAE,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;SACxC,CAAC;IACH,CAAC;IAED,4CAA4C;IAC5C,KAAK,CAAC,cAAc,CAAC,OAAY;QAChC,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,IAAI,EAAE,GAAG,OAAO,CAAC;QAE9C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,CAAC;QAEvE,OAAO;YACN,GAAG,IAAI;YACP,OAAO;YACP,CAAC,EAAE,KAAK;YACR,GAAG,EAAE,SAAS;SACd,CAAC;IACH,CAAC;IAED,6CAA6C;IAC7C,OAAO,CAAC,OAAY;QACnB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;YAChD,OAAO;QACR,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACvC,CAAC;QAED,MAAM,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;QAEtB,MAAM,IAAI,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CACpC,KAAK,CAAC,SAAS,CAAC;YACf,GAAG,EAAE,OAAO,CAAC,GAAG;YAChB,IAAI,EAAE,OAAO,CAAC,GAAG;YACjB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,EAAE;SACF,CAAC,CACF,CAAC;QAEF,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAAS;QAC7B,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,gBAAgB,EAAE,CAAC;YACjE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC5D,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC9B,CAAC;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAED,mBAAmB;IACnB,KAAK,CAAC,cAAc,CAAC,OAAY;QAChC,IAAI,OAAO,CAAC,CAAC,KAAK,KAAK,IAAI,OAAO,CAAC,GAAG,KAAK,MAAM,EAAE,CAAC;YACnD,OAAO,OAAO,CAAC;QAChB,CAAC;QAED,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;YACjB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAE7C,IAAI,IAAI,EAAE,IAAI,EAAE,CAAC;gBAChB,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;YACzB,CAAC;QACF,CAAC;QAED,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAE7C,OAAO;YACN,GAAG,OAAO;YACV,GAAG,EAAE,MAAM;SACX,CAAC;IACH,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,MAAW,EAAE,GAAQ,EAAE,UAAe;QACrD,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;QACzD,OAAO,KAAK,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,OAAY;QACzB,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACnC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAE5B,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,0BAA0B,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QAEhF,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC;YAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC;YAC5E,oDAAoD;YACpD,sFAAsF;YACtF,iCAAiC;YACjC,2FAA2F;YAC3F,sDAAsD;YACtD,IAAI,CAAC,UAAU,EAAE,CAAC;gBACjB,IAAI,CAAC;oBACJ,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;gBACvE,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBAChB,IAAI,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;oBACzD,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,oBAAoB,CAAC,EAAE,CAAC;gBACzC,CAAC;YACF,CAAC;YACD,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QAC5B,CAAC;QAED,IAAI,CAAC;YACJ,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,IAAI,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;QACjF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YACzD,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC;QACpC,CAAC;IACF,CAAC;IAED,gBAAgB,CAAC,KAAU;QAC1B,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE,CAAC;YAC1B,OAAO;QACR,CAAC;QAED,KAAK,IAAI,CAAC,8BAA8B,EAAE,CAAC;QAC3C,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,aAAa,CAAC,EAAO;QACpB,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;QAC7B,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,+CAA+C,CAAC,KAAY;QACjE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;YACrB,OAAO;QACR,CAAC;QAED,MAAM,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAC1D,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAC/E,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,GAAG,CACtC,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YACxB,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;YACjC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,6BAA6B,CAAC,UAAU,CAAC,CAAC;YACjE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,4BAA4B,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAC;YAC3F,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,OAAO,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;QAClD,CAAC,CAAC,CACF,CAAC;QAEF,OAAO,aAAa,CAAC;IACtB,CAAC;CACD","sourcesContent":["import { Base64 } from '@rocket.chat/base64';\nimport { Emitter } from '@rocket.chat/emitter';\nimport EJSON from 'ejson';\n\nimport { RoomManager } from '../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../client/lib/rooms/roomCoordinator';\nimport { RoomSettingsEnum } from '../../../definition/IRoomTypeConfig';\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\nimport { E2ERoomState } from './E2ERoomState';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptRSA,\n\tencryptAES,\n\tdecryptRSA,\n\tdecryptAES,\n\tgenerateAESKey,\n\texportJWKKey,\n\timportAESKey,\n\timportRSAKey,\n\treadFileAsArrayBuffer,\n\tencryptAESCTR,\n\tgenerateAESCTRKey,\n\tsha256HashFromArrayBuffer,\n\tcreateSha256HashFromText,\n} from './helper';\nimport { log, logError } from './logger';\nimport { e2e } from './rocketchat.e2e';\n\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\n\nconst permitedMutations: any = {\n\t[E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n\t[E2ERoomState.READY]: [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS],\n\t[E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n\t[E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n\t[E2ERoomState.ESTABLISHING]: [\n\t\tE2ERoomState.READY,\n\t\tE2ERoomState.KEYS_RECEIVED,\n\t\tE2ERoomState.ERROR,\n\t\tE2ERoomState.DISABLED,\n\t\tE2ERoomState.WAITING_KEYS,\n\t\tE2ERoomState.CREATING_KEYS,\n\t],\n};\n\nconst filterMutation = (currentState: any, nextState: any): any => {\n\tif (currentState === nextState) {\n\t\treturn nextState === E2ERoomState.ERROR;\n\t}\n\n\tif (!(currentState in permitedMutations)) {\n\t\treturn nextState;\n\t}\n\n\tif (permitedMutations[currentState].includes(nextState)) {\n\t\treturn nextState;\n\t}\n\n\treturn false;\n};\n\nexport class E2ERoom extends Emitter {\n\tstate: any = undefined;\n\n\t[PAUSED]: boolean | undefined = undefined;\n\n\t[KEY_ID]: any;\n\n\tuserId: any;\n\n\troomId: any;\n\n\ttypeOfRoom: any;\n\n\troomKeyId: any;\n\n\tgroupSessionKey: any;\n\n\toldKeys: any;\n\n\tsessionKeyExportedString: string | undefined;\n\n\tsessionKeyExported: any;\n\n\tconstructor(userId: any, room: any) {\n\t\tsuper();\n\n\t\tthis.userId = userId;\n\t\tthis.roomId = room._id;\n\t\tthis.typeOfRoom = room.t;\n\t\tthis.roomKeyId = room.e2eKeyId;\n\n\t\tthis.once(E2ERoomState.READY, async () => {\n\t\t\tawait this.decryptOldRoomKeys();\n\t\t\treturn this.decryptPendingMessages();\n\t\t});\n\t\tthis.once(E2ERoomState.READY, () => this.decryptSubscription());\n\t\tthis.on('STATE_CHANGED', (prev) => {\n\t\t\tif (this.roomId === RoomManager.opened) {\n\t\t\t\tthis.log(`[PREV: ${prev}]`, 'State CHANGED');\n\t\t\t}\n\t\t});\n\t\tthis.on('STATE_CHANGED', () => this.handshake());\n\n\t\tthis.setState(E2ERoomState.NOT_STARTED);\n\t}\n\n\tlog(...msg: unknown[]) {\n\t\tlog(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\terror(...msg: unknown[]) {\n\t\tlogError(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\thasSessionKey() {\n\t\treturn !!this.groupSessionKey;\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tsetState(requestedState: any) {\n\t\tconst currentState = this.state;\n\t\tconst nextState = filterMutation(currentState, requestedState);\n\n\t\tif (!nextState) {\n\t\t\tthis.error(`invalid state ${currentState} -> ${requestedState}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state = nextState;\n\t\tthis.log(currentState, '->', nextState);\n\t\tthis.emit('STATE_CHANGED', currentState);\n\t\tthis.emit(nextState, this);\n\t}\n\n\tisReady() {\n\t\treturn this.state === E2ERoomState.READY;\n\t}\n\n\tisDisabled() {\n\t\treturn this.state === E2ERoomState.DISABLED;\n\t}\n\n\tenable() {\n\t\tif (this.state === E2ERoomState.READY) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tdisable() {\n\t\tthis.setState(E2ERoomState.DISABLED);\n\t}\n\n\tpause() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', true);\n\t\tthis[PAUSED] = true;\n\t\tthis.emit('PAUSED', true);\n\t}\n\n\tresume() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', false);\n\t\tthis[PAUSED] = false;\n\t\tthis.emit('PAUSED', false);\n\t}\n\n\tkeyReceived() {\n\t\tthis.setState(E2ERoomState.KEYS_RECEIVED);\n\t}\n\n\tasync shouldConvertSentMessages(message: any) {\n\t\tif (!this.isReady() || this[PAUSED]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this[PAUSED] === undefined) {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tthis.once('PAUSED', resolve);\n\t\t\t});\n\t\t}\n\n\t\tif (message.msg[0] === '/') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshouldConvertReceivedMessages() {\n\t\treturn this.isReady();\n\t}\n\n\tisWaitingKeys() {\n\t\treturn this.state === E2ERoomState.WAITING_KEYS;\n\t}\n\n\tget keyID() {\n\t\treturn this[KEY_ID];\n\t}\n\n\tset keyID(keyID) {\n\t\tthis[KEY_ID] = keyID;\n\t}\n\n\tasync decryptSubscription() {\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (subscription?.lastMessage?.t !== 'e2e') {\n\t\t\tthis.log('decryptSubscriptions nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await this.decryptMessage(subscription.lastMessage);\n\n\t\tSubscriptions.update(\n\t\t\t{\n\t\t\t\t_id: subscription._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastMessage: message,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.log('decryptSubscriptions Done');\n\t}\n\n\tasync decryptOldRoomKeys() {\n\t\tconst sub = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (!sub?.oldRoomKeys || sub?.oldRoomKeys.length === 0) {\n\t\t\tthis.log('decryptOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of sub.oldRoomKeys) {\n\t\t\ttry {\n\t\t\t\tconst k = await this.decryptSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t\tkeys.push({ ...key, E2EKey: null });\n\t\t\t}\n\t\t}\n\n\t\tthis.oldKeys = keys;\n\t\tthis.log('decryptOldRoomKeys Done');\n\t}\n\n\tasync exportOldRoomKeys(oldKeys: any) {\n\t\tthis.log('exportOldRoomKeys starting');\n\t\tif (!oldKeys || oldKeys.length === 0) {\n\t\t\tthis.log('exportOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of oldKeys) {\n\t\t\ttry {\n\t\t\t\tif (!key.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst k = await this.exportSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.log(`exportOldRoomKeys Done: ${keys.length} keys exported`);\n\t\treturn keys;\n\t}\n\n\tasync decryptPendingMessages() {\n\t\treturn Messages.find({ rid: this.roomId, t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg));\n\t\t});\n\t}\n\n\t// Initiates E2E Encryption\n\tasync handshake() {\n\t\tif (!e2e.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.ESTABLISHING);\n\n\t\ttry {\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId })?.E2EKey;\n\t\t\tif (groupKey) {\n\t\t\t\tawait this.importGroupKey(groupKey);\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t\tthis.error('Error fetching group key: ', error);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId })!;\n\t\t\t// Only room creator can set keys for room\n\t\t\tif (!room.e2eKeyId && this.userShouldCreateKeys(room)) {\n\t\t\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\t\t\tawait this.createGroupKey();\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\t\tthis.log('Requesting room key');\n\t\t\tsdk.publish('notify-room-users', [`${this.roomId}/e2ekeyRequest`, this.roomId, room.e2eKeyId]);\n\t\t} catch (error) {\n\t\t\t// this.error = error;\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t}\n\t}\n\n\tuserShouldCreateKeys(room: any) {\n\t\t// On DMs, we'll allow any user to set the keys\n\t\tif (room.t === 'd') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn room.u._id === this.userId;\n\t}\n\n\tisSupportedRoomType(type: any) {\n\t\treturn roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n\t}\n\n\tasync decryptSessionKey(key: any) {\n\t\treturn importAESKey(JSON.parse(await this.exportSessionKey(key)));\n\t}\n\n\tasync exportSessionKey(key: any) {\n\t\tkey = key.slice(12);\n\t\tkey = Base64.decode(key);\n\n\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, key);\n\t\treturn toString(decryptedKey);\n\t}\n\n\tasync importGroupKey(groupKey: any) {\n\t\tthis.log('Importing room key ->', this.roomId);\n\t\t// Get existing group key\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\t// When a new e2e room is created, it will be initialized without an e2e key id\n\t\t// This will prevent new rooms from storing `undefined` as the keyid\n\t\tif (!this.keyID) {\n\t\t\tthis.keyID = this.roomKeyId || (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t\t}\n\n\t\t// Import session key for use.\n\t\ttry {\n\t\t\tconst key = await importAESKey(JSON.parse(this.sessionKeyExportedString!));\n\t\t\t// Key has been obtained. E2E is now in session.\n\t\t\tthis.groupSessionKey = key;\n\t\t} catch (error) {\n\t\t\tthis.error('Error importing group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync createNewGroupKey() {\n\t\tthis.groupSessionKey = await generateAESKey();\n\n\t\tconst sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n\t\tthis.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n\t\tthis.keyID = (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t}\n\n\tasync createGroupKey() {\n\t\tthis.log('Creating room key');\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tawait sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID);\n\t\t\tawait sdk.rest.post('/v1/e2e.updateGroupKey', {\n\t\t\t\trid: this.roomId,\n\t\t\t\tuid: this.userId,\n\t\t\t\tkey: await this.encryptGroupKeyForParticipant(e2e.publicKey!),\n\t\t\t} as any);\n\t\t\tawait this.encryptKeyForOtherParticipants();\n\t\t} catch (error) {\n\t\t\tthis.error('Error exporting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync resetRoomKey() {\n\t\tthis.log('Resetting room key');\n\t\tif (!e2e.publicKey) {\n\t\t\tthis.error('Cannot reset room key. No public key found.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tconst e2eNewKeys = { e2eKeyId: this.keyID, e2eKey: await this.encryptGroupKeyForParticipant(e2e.publicKey) };\n\n\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\tthis.log(`Room key reset done for room ${this.roomId}`);\n\n\t\t\treturn e2eNewKeys;\n\t\t} catch (error) {\n\t\t\tthis.error('Error resetting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tonRoomKeyReset(keyID: any) {\n\t\tthis.log(`Room keyID was reset. New keyID: ${keyID} Previous keyID: ${this.keyID}`);\n\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\tthis.keyID = keyID;\n\t\tthis.groupSessionKey = undefined;\n\t\tthis.sessionKeyExportedString = undefined;\n\t\tthis.sessionKeyExported = undefined;\n\t\tthis.oldKeys = undefined;\n\t}\n\n\tasync encryptKeyForOtherParticipants() {\n\t\t// Encrypt generated session key for every user in room and publish to subscription model.\n\t\ttry {\n\t\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\t\tconst users = (await sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId)).users.filter((user) => user?.e2e?.public_key);\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst usersSuggestedGroupKeys = { [this.roomId]: [] as any[] };\n\t\t\tfor await (const user of users) {\n\t\t\t\tconst encryptedGroupKey = await this.encryptGroupKeyForParticipant(user.e2e!.public_key!);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(user.e2e?.public_key, decryptedOldGroupKeys);\n\n\t\t\t\tusersSuggestedGroupKeys[this.roomId].push({ _id: user._id, key: encryptedGroupKey, ...(oldKeys && { oldKeys }) });\n\t\t\t}\n\n\t\t\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys });\n\t\t} catch (error) {\n\t\t\treturn this.error('Error getting room users: ', error);\n\t\t}\n\t}\n\n\tasync encryptOldKeysForParticipant(publicKey: any, oldRoomKeys: any) {\n\t\tif (!oldRoomKeys || oldRoomKeys.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet userKey;\n\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst keys = [];\n\t\t\tfor await (const oldRoomKey of oldRoomKeys) {\n\t\t\t\tif (!oldRoomKey.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst encryptedKey = await encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey));\n\t\t\t\tconst encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n\n\t\t\t\tkeys.push({ ...oldRoomKey, E2EKey: encryptedKeyToString });\n\t\t\t}\n\t\t\treturn keys;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\tasync encryptGroupKeyForParticipant(publicKey: string) {\n\t\tlet userKey;\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\t\t// const vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\t// Encrypt session key for this user with his/her public key\n\t\ttry {\n\t\t\tconst encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n\t\t\tconst encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n\t\t\treturn encryptedUserKeyToString;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\t// Encrypts files before upload. I/O is in arraybuffers.\n\tasync encryptFile(file: any) {\n\t\t// if (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t// \treturn;\n\t\t// }\n\n\t\tconst fileArrayBuffer = await readFileAsArrayBuffer(file);\n\n\t\tconst hash = await sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer));\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst key = await generateAESCTRKey();\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAESCTR(vector, key, fileArrayBuffer);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\treturn this.error('Error encrypting group key: ', error);\n\t\t}\n\n\t\tconst exportedKey = await window.crypto.subtle.exportKey('jwk', key);\n\n\t\tconst fileName = await createSha256HashFromText(file.name);\n\n\t\tconst encryptedFile = new File([toArrayBuffer(result)], fileName);\n\n\t\treturn {\n\t\t\tfile: encryptedFile,\n\t\t\tkey: exportedKey,\n\t\t\tiv: Base64.encode(vector),\n\t\t\ttype: file.type,\n\t\t\thash,\n\t\t};\n\t}\n\n\t// Decrypt uploaded encrypted files. I/O is in arraybuffers.\n\tasync decryptFile(file: any, key: any, iv: any) {\n\t\tconst ivArray = Base64.decode(iv);\n\t\tconst cryptoKey = await window.crypto.subtle.importKey('jwk', key, { name: 'AES-CTR' }, true, ['encrypt', 'decrypt']);\n\n\t\treturn window.crypto.subtle.decrypt({ name: 'AES-CTR', counter: ivArray, length: 64 }, cryptoKey, file);\n\t}\n\n\t// Encrypts messages\n\tasync encryptText(data: any) {\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\ttry {\n\t\t\tconst result = await encryptAES(vector, this.groupSessionKey, data);\n\t\t\treturn this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n\t\t} catch (error) {\n\t\t\tthis.error('Error encrypting message: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessageContent(contentToBeEncrypted: any) {\n\t\tconst data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n\n\t\treturn {\n\t\t\talgorithm: 'rc.v1.aes-sha2',\n\t\t\tciphertext: await this.encryptText(data),\n\t\t};\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessage(message: any) {\n\t\tconst { msg, attachments, ...rest } = message;\n\n\t\tconst content = await this.encryptMessageContent({ msg, attachments });\n\n\t\treturn {\n\t\t\t...rest,\n\t\t\tcontent,\n\t\t\tt: 'e2e',\n\t\t\te2e: 'pending',\n\t\t};\n\t}\n\n\t// Helper function for encryption of messages\n\tencrypt(message: any) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.groupSessionKey) {\n\t\t\tthrow new Error(t('E2E_Invalid_Key'));\n\t\t}\n\n\t\tconst ts = new Date();\n\n\t\tconst data = new TextEncoder().encode(\n\t\t\tEJSON.stringify({\n\t\t\t\t_id: message._id,\n\t\t\t\ttext: message.msg,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tts,\n\t\t\t}),\n\t\t);\n\n\t\treturn this.encryptText(data);\n\t}\n\n\tasync decryptContent(data: any) {\n\t\tif (data.content && data.content.algorithm === 'rc.v1.aes-sha2') {\n\t\t\tconst content = await this.decrypt(data.content.ciphertext);\n\t\t\tObject.assign(data, content);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// Decrypt messages\n\tasync decryptMessage(message: any) {\n\t\tif (message.t !== 'e2e' || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.msg) {\n\t\t\tconst data = await this.decrypt(message.msg);\n\n\t\t\tif (data?.text) {\n\t\t\t\tmessage.msg = data.text;\n\t\t\t}\n\t\t}\n\n\t\tmessage = await this.decryptContent(message);\n\n\t\treturn {\n\t\t\t...message,\n\t\t\te2e: 'done',\n\t\t};\n\t}\n\n\tasync doDecrypt(vector: any, key: any, cipherText: any) {\n\t\tconst result = await decryptAES(vector, key, cipherText);\n\t\treturn EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n\t}\n\n\tasync decrypt(message: any) {\n\t\tconst keyID = message.slice(0, 12);\n\t\tmessage = message.slice(12);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n\n\t\tlet oldKey = '';\n\t\tif (keyID !== this.keyID) {\n\t\t\tconst oldRoomKey = this.oldKeys?.find((key: any) => key.e2eKeyId === keyID);\n\t\t\t// Messages already contain a keyID stored with them\n\t\t\t// That means that if we cannot find a keyID for the key the message has preppended to\n\t\t\t// The message is indecipherable.\n\t\t\t// In these cases, we'll give a last shot using the current session key, which may not work\n\t\t\t// but will be enough to help with some mobile issues.\n\t\t\tif (!oldRoomKey) {\n\t\t\t\ttry {\n\t\t\t\t\treturn await this.doDecrypt(vector, this.groupSessionKey, cipherText);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\t\t\treturn { msg: t('E2E_indecipherable') };\n\t\t\t\t}\n\t\t\t}\n\t\t\toldKey = oldRoomKey.E2EKey;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.doDecrypt(vector, oldKey || this.groupSessionKey, cipherText);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\treturn { msg: t('E2E_Key_Error') };\n\t\t}\n\t}\n\n\tprovideKeyToUser(keyId: any) {\n\t\tif (this.keyID !== keyId) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid this.encryptKeyForOtherParticipants();\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tonStateChange(cb: any) {\n\t\tthis.on('STATE_CHANGED', cb);\n\t\treturn () => this.off('STATE_CHANGED', cb);\n\t}\n\n\tasync encryptGroupKeyForParticipantsWaitingForTheKeys(users: any[]) {\n\t\tif (!this.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\tconst usersWithKeys = await Promise.all(\n\t\t\tusers.map(async (user) => {\n\t\t\t\tconst { _id, public_key } = user;\n\t\t\t\tconst key = await this.encryptGroupKeyForParticipant(public_key);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys);\n\t\t\t\treturn { _id, key, ...(oldKeys && { oldKeys }) };\n\t\t\t}),\n\t\t);\n\n\t\treturn usersWithKeys;\n\t}\n}\n"]}}},"code":"var _excluded = [\"_id\"],\n  _excluded2 = [\"msg\", \"attachments\"];\nvar _permitedMutations;\nvar _slicedToArray;\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 0);\nvar _objectWithoutProperties;\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default: function (v) {\n    _objectWithoutProperties = v;\n  }\n}, 1);\nvar _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 2);\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 3);\nvar _createClass;\nmodule.link(\"@babel/runtime/helpers/createClass\", {\n  default: function (v) {\n    _createClass = v;\n  }\n}, 4);\nvar _inheritsLoose;\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 5);\nvar _asyncIterator;\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default: function (v) {\n    _asyncIterator = v;\n  }\n}, 6);\nmodule.export({\n  E2ERoom: function () {\n    return E2ERoom;\n  }\n});\nvar Base64;\nmodule.link(\"@rocket.chat/base64\", {\n  Base64: function (v) {\n    Base64 = v;\n  }\n}, 0);\nvar Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter: function (v) {\n    Emitter = v;\n  }\n}, 1);\nvar EJSON;\nmodule.link(\"ejson\", {\n  \"default\": function (v) {\n    EJSON = v;\n  }\n}, 2);\nvar RoomManager;\nmodule.link(\"../../../client/lib/RoomManager\", {\n  RoomManager: function (v) {\n    RoomManager = v;\n  }\n}, 3);\nvar roomCoordinator;\nmodule.link(\"../../../client/lib/rooms/roomCoordinator\", {\n  roomCoordinator: function (v) {\n    roomCoordinator = v;\n  }\n}, 4);\nvar RoomSettingsEnum;\nmodule.link(\"../../../definition/IRoomTypeConfig\", {\n  RoomSettingsEnum: function (v) {\n    RoomSettingsEnum = v;\n  }\n}, 5);\nvar ChatRoom, Subscriptions, Messages;\nmodule.link(\"../../models/client\", {\n  ChatRoom: function (v) {\n    ChatRoom = v;\n  },\n  Subscriptions: function (v) {\n    Subscriptions = v;\n  },\n  Messages: function (v) {\n    Messages = v;\n  }\n}, 6);\nvar sdk;\nmodule.link(\"../../utils/client/lib/SDKClient\", {\n  sdk: function (v) {\n    sdk = v;\n  }\n}, 7);\nvar t;\nmodule.link(\"../../utils/lib/i18n\", {\n  t: function (v) {\n    t = v;\n  }\n}, 8);\nvar E2ERoomState;\nmodule.link(\"./E2ERoomState\", {\n  E2ERoomState: function (v) {\n    E2ERoomState = v;\n  }\n}, 9);\nvar toString, toArrayBuffer, joinVectorAndEcryptedData, splitVectorAndEcryptedData, encryptRSA, encryptAES, decryptRSA, decryptAES, generateAESKey, exportJWKKey, importAESKey, importRSAKey, readFileAsArrayBuffer, encryptAESCTR, generateAESCTRKey, sha256HashFromArrayBuffer, createSha256HashFromText;\nmodule.link(\"./helper\", {\n  toString: function (v) {\n    toString = v;\n  },\n  toArrayBuffer: function (v) {\n    toArrayBuffer = v;\n  },\n  joinVectorAndEcryptedData: function (v) {\n    joinVectorAndEcryptedData = v;\n  },\n  splitVectorAndEcryptedData: function (v) {\n    splitVectorAndEcryptedData = v;\n  },\n  encryptRSA: function (v) {\n    encryptRSA = v;\n  },\n  encryptAES: function (v) {\n    encryptAES = v;\n  },\n  decryptRSA: function (v) {\n    decryptRSA = v;\n  },\n  decryptAES: function (v) {\n    decryptAES = v;\n  },\n  generateAESKey: function (v) {\n    generateAESKey = v;\n  },\n  exportJWKKey: function (v) {\n    exportJWKKey = v;\n  },\n  importAESKey: function (v) {\n    importAESKey = v;\n  },\n  importRSAKey: function (v) {\n    importRSAKey = v;\n  },\n  readFileAsArrayBuffer: function (v) {\n    readFileAsArrayBuffer = v;\n  },\n  encryptAESCTR: function (v) {\n    encryptAESCTR = v;\n  },\n  generateAESCTRKey: function (v) {\n    generateAESCTRKey = v;\n  },\n  sha256HashFromArrayBuffer: function (v) {\n    sha256HashFromArrayBuffer = v;\n  },\n  createSha256HashFromText: function (v) {\n    createSha256HashFromText = v;\n  }\n}, 10);\nvar _log, logError;\nmodule.link(\"./logger\", {\n  log: function (v) {\n    _log = v;\n  },\n  logError: function (v) {\n    logError = v;\n  }\n}, 11);\nvar e2e;\nmodule.link(\"./rocketchat.e2e\", {\n  e2e: function (v) {\n    e2e = v;\n  }\n}, 12);\nvar KEY_ID = Symbol('keyID');\nvar PAUSED = Symbol('PAUSED');\nvar permitedMutations = (_permitedMutations = {}, _permitedMutations[E2ERoomState.NOT_STARTED] = [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED], _permitedMutations[E2ERoomState.READY] = [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS], _permitedMutations[E2ERoomState.ERROR] = [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED], _permitedMutations[E2ERoomState.WAITING_KEYS] = [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED], _permitedMutations[E2ERoomState.ESTABLISHING] = [E2ERoomState.READY, E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED, E2ERoomState.WAITING_KEYS, E2ERoomState.CREATING_KEYS], _permitedMutations);\nvar filterMutation = function (currentState, nextState) {\n  if (currentState === nextState) {\n    return nextState === E2ERoomState.ERROR;\n  }\n  if (!(currentState in permitedMutations)) {\n    return nextState;\n  }\n  if (permitedMutations[currentState].includes(nextState)) {\n    return nextState;\n  }\n  return false;\n};\nvar E2ERoom = /*#__PURE__*/function (_Emitter) {\n  function E2ERoom(userId, room) {\n    var _this;\n    _this = _Emitter.call(this) || this;\n    _this.state = undefined;\n    _this[PAUSED] = undefined;\n    _this[KEY_ID] = void 0;\n    _this.userId = void 0;\n    _this.roomId = void 0;\n    _this.typeOfRoom = void 0;\n    _this.roomKeyId = void 0;\n    _this.groupSessionKey = void 0;\n    _this.oldKeys = void 0;\n    _this.sessionKeyExportedString = void 0;\n    _this.sessionKeyExported = void 0;\n    _this.userId = userId;\n    _this.roomId = room._id;\n    _this.typeOfRoom = room.t;\n    _this.roomKeyId = room.e2eKeyId;\n    _this.once(E2ERoomState.READY, function () {\n      function _callee() {\n        return _regeneratorRuntime.async(function () {\n          function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(_this.decryptOldRoomKeys());\n              case 2:\n                return _context.abrupt(\"return\", _this.decryptPendingMessages());\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n          return _callee$;\n        }(), null, null, null, Promise);\n      }\n      return _callee;\n    }());\n    _this.once(E2ERoomState.READY, function () {\n      return _this.decryptSubscription();\n    });\n    _this.on('STATE_CHANGED', function (prev) {\n      if (_this.roomId === RoomManager.opened) {\n        _this.log(\"[PREV: \" + prev + \"]\", 'State CHANGED');\n      }\n    });\n    _this.on('STATE_CHANGED', function () {\n      return _this.handshake();\n    });\n    _this.setState(E2ERoomState.NOT_STARTED);\n    return _this;\n  }\n  _inheritsLoose(E2ERoom, _Emitter);\n  var _proto = E2ERoom.prototype;\n  _proto.log = function () {\n    function log() {\n      for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n        msg[_key] = arguments[_key];\n      }\n      _log.apply(void 0, [\"E2E ROOM { state: \" + this.state + \", rid: \" + this.roomId + \" }\"].concat(msg));\n    }\n    return log;\n  }();\n  _proto.error = function () {\n    function error() {\n      for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        msg[_key2] = arguments[_key2];\n      }\n      logError.apply(void 0, [\"E2E ROOM { state: \" + this.state + \", rid: \" + this.roomId + \" }\"].concat(msg));\n    }\n    return error;\n  }();\n  _proto.hasSessionKey = function () {\n    function hasSessionKey() {\n      return !!this.groupSessionKey;\n    }\n    return hasSessionKey;\n  }();\n  _proto.getState = function () {\n    function getState() {\n      return this.state;\n    }\n    return getState;\n  }();\n  _proto.setState = function () {\n    function setState(requestedState) {\n      var currentState = this.state;\n      var nextState = filterMutation(currentState, requestedState);\n      if (!nextState) {\n        this.error(\"invalid state \" + currentState + \" -> \" + requestedState);\n        return;\n      }\n      this.state = nextState;\n      this.log(currentState, '->', nextState);\n      this.emit('STATE_CHANGED', currentState);\n      this.emit(nextState, this);\n    }\n    return setState;\n  }();\n  _proto.isReady = function () {\n    function isReady() {\n      return this.state === E2ERoomState.READY;\n    }\n    return isReady;\n  }();\n  _proto.isDisabled = function () {\n    function isDisabled() {\n      return this.state === E2ERoomState.DISABLED;\n    }\n    return isDisabled;\n  }();\n  _proto.enable = function () {\n    function enable() {\n      if (this.state === E2ERoomState.READY) {\n        return;\n      }\n      this.setState(E2ERoomState.READY);\n    }\n    return enable;\n  }();\n  _proto.disable = function () {\n    function disable() {\n      this.setState(E2ERoomState.DISABLED);\n    }\n    return disable;\n  }();\n  _proto.pause = function () {\n    function pause() {\n      this.log('PAUSED', this[PAUSED], '->', true);\n      this[PAUSED] = true;\n      this.emit('PAUSED', true);\n    }\n    return pause;\n  }();\n  _proto.resume = function () {\n    function resume() {\n      this.log('PAUSED', this[PAUSED], '->', false);\n      this[PAUSED] = false;\n      this.emit('PAUSED', false);\n    }\n    return resume;\n  }();\n  _proto.keyReceived = function () {\n    function keyReceived() {\n      this.setState(E2ERoomState.KEYS_RECEIVED);\n    }\n    return keyReceived;\n  }();\n  _proto.shouldConvertSentMessages = function () {\n    function shouldConvertSentMessages(message) {\n      var _this2 = this;\n      return _regeneratorRuntime.async(function () {\n        function shouldConvertSentMessages$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(!this.isReady() || this[PAUSED])) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 2:\n              if (!(this[PAUSED] === undefined)) {\n                _context2.next = 4;\n                break;\n              }\n              return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                _this2.once('PAUSED', resolve);\n              }));\n            case 4:\n              if (!(message.msg[0] === '/')) {\n                _context2.next = 6;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 6:\n              return _context2.abrupt(\"return\", true);\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n        return shouldConvertSentMessages$;\n      }(), null, this, null, Promise);\n    }\n    return shouldConvertSentMessages;\n  }();\n  _proto.shouldConvertReceivedMessages = function () {\n    function shouldConvertReceivedMessages() {\n      return this.isReady();\n    }\n    return shouldConvertReceivedMessages;\n  }();\n  _proto.isWaitingKeys = function () {\n    function isWaitingKeys() {\n      return this.state === E2ERoomState.WAITING_KEYS;\n    }\n    return isWaitingKeys;\n  }();\n  _proto.decryptSubscription = function () {\n    function decryptSubscription() {\n      var _subscription$lastMes;\n      var subscription, message;\n      return _regeneratorRuntime.async(function () {\n        function decryptSubscription$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              subscription = Subscriptions.findOne({\n                rid: this.roomId\n              });\n              if (!((subscription === null || subscription === void 0 ? void 0 : (_subscription$lastMes = subscription.lastMessage) === null || _subscription$lastMes === void 0 ? void 0 : _subscription$lastMes.t) !== 'e2e')) {\n                _context3.next = 4;\n                break;\n              }\n              this.log('decryptSubscriptions nothing to do');\n              return _context3.abrupt(\"return\");\n            case 4:\n              _context3.next = 6;\n              return _regeneratorRuntime.awrap(this.decryptMessage(subscription.lastMessage));\n            case 6:\n              message = _context3.sent;\n              Subscriptions.update({\n                _id: subscription._id\n              }, {\n                $set: {\n                  lastMessage: message\n                }\n              });\n              this.log('decryptSubscriptions Done');\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n        return decryptSubscription$;\n      }(), null, this, null, Promise);\n    }\n    return decryptSubscription;\n  }();\n  _proto.decryptOldRoomKeys = function () {\n    function decryptOldRoomKeys() {\n      var sub, keys, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, k;\n      return _regeneratorRuntime.async(function () {\n        function decryptOldRoomKeys$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              sub = Subscriptions.findOne({\n                rid: this.roomId\n              });\n              if (!(!(sub !== null && sub !== void 0 && sub.oldRoomKeys) || (sub === null || sub === void 0 ? void 0 : sub.oldRoomKeys.length) === 0)) {\n                _context4.next = 4;\n                break;\n              }\n              this.log('decryptOldRoomKeys nothing to do');\n              return _context4.abrupt(\"return\");\n            case 4:\n              keys = [];\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context4.prev = 7;\n              _iterator = _asyncIterator(sub.oldRoomKeys);\n            case 9:\n              _context4.next = 11;\n              return _regeneratorRuntime.awrap(_iterator.next());\n            case 11:\n              if (!(_iteratorAbruptCompletion = !(_step = _context4.sent).done)) {\n                _context4.next = 27;\n                break;\n              }\n              key = _step.value;\n              _context4.prev = 13;\n              _context4.next = 16;\n              return _regeneratorRuntime.awrap(this.decryptSessionKey(key.E2EKey));\n            case 16:\n              k = _context4.sent;\n              keys.push(_objectSpread(_objectSpread({}, key), {}, {\n                E2EKey: k\n              }));\n              _context4.next = 24;\n              break;\n            case 20:\n              _context4.prev = 20;\n              _context4.t0 = _context4[\"catch\"](13);\n              this.error(\"Cannot decrypt old room key with id \" + key.e2eKeyId + \". This is likely because user private key changed or is missing. Skipping\");\n              keys.push(_objectSpread(_objectSpread({}, key), {}, {\n                E2EKey: null\n              }));\n            case 24:\n              _iteratorAbruptCompletion = false;\n              _context4.next = 9;\n              break;\n            case 27:\n              _context4.next = 33;\n              break;\n            case 29:\n              _context4.prev = 29;\n              _context4.t1 = _context4[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context4.t1;\n            case 33:\n              _context4.prev = 33;\n              _context4.prev = 34;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context4.next = 38;\n                break;\n              }\n              _context4.next = 38;\n              return _regeneratorRuntime.awrap(_iterator.return());\n            case 38:\n              _context4.prev = 38;\n              if (!_didIteratorError) {\n                _context4.next = 41;\n                break;\n              }\n              throw _iteratorError;\n            case 41:\n              return _context4.finish(38);\n            case 42:\n              return _context4.finish(33);\n            case 43:\n              this.oldKeys = keys;\n              this.log('decryptOldRoomKeys Done');\n            case 45:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n        return decryptOldRoomKeys$;\n      }(), null, this, [[7, 29, 33, 43], [13, 20], [34,, 38, 42]], Promise);\n    }\n    return decryptOldRoomKeys;\n  }();\n  _proto.exportOldRoomKeys = function () {\n    function exportOldRoomKeys(oldKeys) {\n      var keys, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, key, k;\n      return _regeneratorRuntime.async(function () {\n        function exportOldRoomKeys$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              this.log('exportOldRoomKeys starting');\n              if (!(!oldKeys || oldKeys.length === 0)) {\n                _context5.next = 4;\n                break;\n              }\n              this.log('exportOldRoomKeys nothing to do');\n              return _context5.abrupt(\"return\");\n            case 4:\n              keys = [];\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context5.prev = 7;\n              _iterator2 = _asyncIterator(oldKeys);\n            case 9:\n              _context5.next = 11;\n              return _regeneratorRuntime.awrap(_iterator2.next());\n            case 11:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context5.sent).done)) {\n                _context5.next = 28;\n                break;\n              }\n              key = _step2.value;\n              _context5.prev = 13;\n              if (key.E2EKey) {\n                _context5.next = 16;\n                break;\n              }\n              return _context5.abrupt(\"continue\", 25);\n            case 16:\n              _context5.next = 18;\n              return _regeneratorRuntime.awrap(this.exportSessionKey(key.E2EKey));\n            case 18:\n              k = _context5.sent;\n              keys.push(_objectSpread(_objectSpread({}, key), {}, {\n                E2EKey: k\n              }));\n              _context5.next = 25;\n              break;\n            case 22:\n              _context5.prev = 22;\n              _context5.t0 = _context5[\"catch\"](13);\n              this.error(\"Cannot decrypt old room key with id \" + key.e2eKeyId + \". This is likely because user private key changed or is missing. Skipping\");\n            case 25:\n              _iteratorAbruptCompletion2 = false;\n              _context5.next = 9;\n              break;\n            case 28:\n              _context5.next = 34;\n              break;\n            case 30:\n              _context5.prev = 30;\n              _context5.t1 = _context5[\"catch\"](7);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context5.t1;\n            case 34:\n              _context5.prev = 34;\n              _context5.prev = 35;\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context5.next = 39;\n                break;\n              }\n              _context5.next = 39;\n              return _regeneratorRuntime.awrap(_iterator2.return());\n            case 39:\n              _context5.prev = 39;\n              if (!_didIteratorError2) {\n                _context5.next = 42;\n                break;\n              }\n              throw _iteratorError2;\n            case 42:\n              return _context5.finish(39);\n            case 43:\n              return _context5.finish(34);\n            case 44:\n              this.log(\"exportOldRoomKeys Done: \" + keys.length + \" keys exported\");\n              return _context5.abrupt(\"return\", keys);\n            case 46:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n        return exportOldRoomKeys$;\n      }(), null, this, [[7, 30, 34, 44], [13, 22], [35,, 39, 43]], Promise);\n    }\n    return exportOldRoomKeys;\n  }();\n  _proto.decryptPendingMessages = function () {\n    function decryptPendingMessages() {\n      var _this3 = this;\n      return _regeneratorRuntime.async(function () {\n        function decryptPendingMessages$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", Messages.find({\n                rid: this.roomId,\n                t: 'e2e',\n                e2e: 'pending'\n              }).forEach(function () {\n                function _callee2(_ref) {\n                  var _id, msg;\n                  return _regeneratorRuntime.async(function () {\n                    function _callee2$(_context6) {\n                      while (1) switch (_context6.prev = _context6.next) {\n                        case 0:\n                          _id = _ref._id, msg = _objectWithoutProperties(_ref, _excluded);\n                          _context6.t0 = Messages;\n                          _context6.t1 = {\n                            _id: _id\n                          };\n                          _context6.next = 5;\n                          return _regeneratorRuntime.awrap(_this3.decryptMessage(msg));\n                        case 5:\n                          _context6.t2 = _context6.sent;\n                          _context6.t0.update.call(_context6.t0, _context6.t1, _context6.t2);\n                        case 7:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                    return _callee2$;\n                  }(), null, null, null, Promise);\n                }\n                return _callee2;\n              }()));\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n        return decryptPendingMessages$;\n      }(), null, this, null, Promise);\n    }\n    return decryptPendingMessages;\n  }() // Initiates E2E Encryption\n  ;\n  _proto.handshake = function () {\n    function handshake() {\n      var _Subscriptions$findOn, groupKey, room;\n      return _regeneratorRuntime.async(function () {\n        function handshake$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (e2e.isReady()) {\n                _context8.next = 2;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 2:\n              if (!(this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED)) {\n                _context8.next = 4;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 4:\n              this.setState(E2ERoomState.ESTABLISHING);\n              _context8.prev = 5;\n              groupKey = (_Subscriptions$findOn = Subscriptions.findOne({\n                rid: this.roomId\n              })) === null || _Subscriptions$findOn === void 0 ? void 0 : _Subscriptions$findOn.E2EKey;\n              if (!groupKey) {\n                _context8.next = 12;\n                break;\n              }\n              _context8.next = 10;\n              return _regeneratorRuntime.awrap(this.importGroupKey(groupKey));\n            case 10:\n              this.setState(E2ERoomState.READY);\n              return _context8.abrupt(\"return\");\n            case 12:\n              _context8.next = 19;\n              break;\n            case 14:\n              _context8.prev = 14;\n              _context8.t0 = _context8[\"catch\"](5);\n              this.setState(E2ERoomState.ERROR);\n              this.error('Error fetching group key: ', _context8.t0);\n              return _context8.abrupt(\"return\");\n            case 19:\n              _context8.prev = 19;\n              room = ChatRoom.findOne({\n                _id: this.roomId\n              }); // Only room creator can set keys for room\n              if (!(!room.e2eKeyId && this.userShouldCreateKeys(room))) {\n                _context8.next = 27;\n                break;\n              }\n              this.setState(E2ERoomState.CREATING_KEYS);\n              _context8.next = 25;\n              return _regeneratorRuntime.awrap(this.createGroupKey());\n            case 25:\n              this.setState(E2ERoomState.READY);\n              return _context8.abrupt(\"return\");\n            case 27:\n              this.setState(E2ERoomState.WAITING_KEYS);\n              this.log('Requesting room key');\n              sdk.publish('notify-room-users', [this.roomId + \"/e2ekeyRequest\", this.roomId, room.e2eKeyId]);\n              _context8.next = 35;\n              break;\n            case 32:\n              _context8.prev = 32;\n              _context8.t1 = _context8[\"catch\"](19);\n              // this.error = error;\n              this.setState(E2ERoomState.ERROR);\n            case 35:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n        return handshake$;\n      }(), null, this, [[5, 14], [19, 32]], Promise);\n    }\n    return handshake;\n  }();\n  _proto.userShouldCreateKeys = function () {\n    function userShouldCreateKeys(room) {\n      // On DMs, we'll allow any user to set the keys\n      if (room.t === 'd') {\n        return true;\n      }\n      return room.u._id === this.userId;\n    }\n    return userShouldCreateKeys;\n  }();\n  _proto.isSupportedRoomType = function () {\n    function isSupportedRoomType(type) {\n      return roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n    }\n    return isSupportedRoomType;\n  }();\n  _proto.decryptSessionKey = function () {\n    function decryptSessionKey(key) {\n      return _regeneratorRuntime.async(function () {\n        function decryptSessionKey$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.t0 = importAESKey;\n              _context9.t1 = JSON;\n              _context9.next = 4;\n              return _regeneratorRuntime.awrap(this.exportSessionKey(key));\n            case 4:\n              _context9.t2 = _context9.sent;\n              _context9.t3 = _context9.t1.parse.call(_context9.t1, _context9.t2);\n              return _context9.abrupt(\"return\", (0, _context9.t0)(_context9.t3));\n            case 7:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n        return decryptSessionKey$;\n      }(), null, this, null, Promise);\n    }\n    return decryptSessionKey;\n  }();\n  _proto.exportSessionKey = function () {\n    function exportSessionKey(key) {\n      var decryptedKey;\n      return _regeneratorRuntime.async(function () {\n        function exportSessionKey$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              key = key.slice(12);\n              key = Base64.decode(key);\n              _context10.next = 4;\n              return _regeneratorRuntime.awrap(decryptRSA(e2e.privateKey, key));\n            case 4:\n              decryptedKey = _context10.sent;\n              return _context10.abrupt(\"return\", toString(decryptedKey));\n            case 6:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n        return exportSessionKey$;\n      }(), null, null, null, Promise);\n    }\n    return exportSessionKey;\n  }();\n  _proto.importGroupKey = function () {\n    function importGroupKey(groupKey) {\n      var decryptedKey, key;\n      return _regeneratorRuntime.async(function () {\n        function importGroupKey$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              this.log('Importing room key ->', this.roomId);\n              // Get existing group key\n              // const keyID = groupKey.slice(0, 12);\n              groupKey = groupKey.slice(12);\n              groupKey = Base64.decode(groupKey);\n              // Decrypt obtained encrypted session key\n              _context11.prev = 3;\n              _context11.next = 6;\n              return _regeneratorRuntime.awrap(decryptRSA(e2e.privateKey, groupKey));\n            case 6:\n              decryptedKey = _context11.sent;\n              this.sessionKeyExportedString = toString(decryptedKey);\n              _context11.next = 14;\n              break;\n            case 10:\n              _context11.prev = 10;\n              _context11.t0 = _context11[\"catch\"](3);\n              this.error('Error decrypting group key: ', _context11.t0);\n              return _context11.abrupt(\"return\", false);\n            case 14:\n              if (this.keyID) {\n                _context11.next = 21;\n                break;\n              }\n              _context11.t1 = this.roomKeyId;\n              if (_context11.t1) {\n                _context11.next = 20;\n                break;\n              }\n              _context11.next = 19;\n              return _regeneratorRuntime.awrap(createSha256HashFromText(this.sessionKeyExportedString));\n            case 19:\n              _context11.t1 = _context11.sent.slice(0, 12);\n            case 20:\n              this.keyID = _context11.t1;\n            case 21:\n              _context11.prev = 21;\n              _context11.next = 24;\n              return _regeneratorRuntime.awrap(importAESKey(JSON.parse(this.sessionKeyExportedString)));\n            case 24:\n              key = _context11.sent;\n              // Key has been obtained. E2E is now in session.\n              this.groupSessionKey = key;\n              _context11.next = 32;\n              break;\n            case 28:\n              _context11.prev = 28;\n              _context11.t2 = _context11[\"catch\"](21);\n              this.error('Error importing group key: ', _context11.t2);\n              return _context11.abrupt(\"return\", false);\n            case 32:\n              return _context11.abrupt(\"return\", true);\n            case 33:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n        return importGroupKey$;\n      }(), null, this, [[3, 10], [21, 28]], Promise);\n    }\n    return importGroupKey;\n  }();\n  _proto.createNewGroupKey = function () {\n    function createNewGroupKey() {\n      var sessionKeyExported;\n      return _regeneratorRuntime.async(function () {\n        function createNewGroupKey$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return _regeneratorRuntime.awrap(generateAESKey());\n            case 2:\n              this.groupSessionKey = _context12.sent;\n              _context12.next = 5;\n              return _regeneratorRuntime.awrap(exportJWKKey(this.groupSessionKey));\n            case 5:\n              sessionKeyExported = _context12.sent;\n              this.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n              _context12.next = 9;\n              return _regeneratorRuntime.awrap(createSha256HashFromText(this.sessionKeyExportedString));\n            case 9:\n              this.keyID = _context12.sent.slice(0, 12);\n            case 10:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n        return createNewGroupKey$;\n      }(), null, this, null, Promise);\n    }\n    return createNewGroupKey;\n  }();\n  _proto.createGroupKey = function () {\n    function createGroupKey() {\n      return _regeneratorRuntime.async(function () {\n        function createGroupKey$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              this.log('Creating room key');\n              _context13.prev = 1;\n              _context13.next = 4;\n              return _regeneratorRuntime.awrap(this.createNewGroupKey());\n            case 4:\n              _context13.next = 6;\n              return _regeneratorRuntime.awrap(sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID));\n            case 6:\n              _context13.t0 = _regeneratorRuntime;\n              _context13.t1 = sdk.rest;\n              _context13.t2 = this.roomId;\n              _context13.t3 = this.userId;\n              _context13.next = 12;\n              return _regeneratorRuntime.awrap(this.encryptGroupKeyForParticipant(e2e.publicKey));\n            case 12:\n              _context13.t4 = _context13.sent;\n              _context13.t5 = {\n                rid: _context13.t2,\n                uid: _context13.t3,\n                key: _context13.t4\n              };\n              _context13.t6 = _context13.t1.post.call(_context13.t1, '/v1/e2e.updateGroupKey', _context13.t5);\n              _context13.next = 17;\n              return _context13.t0.awrap.call(_context13.t0, _context13.t6);\n            case 17:\n              _context13.next = 19;\n              return _regeneratorRuntime.awrap(this.encryptKeyForOtherParticipants());\n            case 19:\n              _context13.next = 25;\n              break;\n            case 21:\n              _context13.prev = 21;\n              _context13.t7 = _context13[\"catch\"](1);\n              this.error('Error exporting group key: ', _context13.t7);\n              throw _context13.t7;\n            case 25:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n        return createGroupKey$;\n      }(), null, this, [[1, 21]], Promise);\n    }\n    return createGroupKey;\n  }();\n  _proto.resetRoomKey = function () {\n    function resetRoomKey() {\n      var e2eNewKeys;\n      return _regeneratorRuntime.async(function () {\n        function resetRoomKey$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              this.log('Resetting room key');\n              if (e2e.publicKey) {\n                _context14.next = 4;\n                break;\n              }\n              this.error('Cannot reset room key. No public key found.');\n              return _context14.abrupt(\"return\");\n            case 4:\n              this.setState(E2ERoomState.CREATING_KEYS);\n              _context14.prev = 5;\n              _context14.next = 8;\n              return _regeneratorRuntime.awrap(this.createNewGroupKey());\n            case 8:\n              _context14.t0 = this.keyID;\n              _context14.next = 11;\n              return _regeneratorRuntime.awrap(this.encryptGroupKeyForParticipant(e2e.publicKey));\n            case 11:\n              _context14.t1 = _context14.sent;\n              e2eNewKeys = {\n                e2eKeyId: _context14.t0,\n                e2eKey: _context14.t1\n              };\n              this.setState(E2ERoomState.READY);\n              this.log(\"Room key reset done for room \" + this.roomId);\n              return _context14.abrupt(\"return\", e2eNewKeys);\n            case 18:\n              _context14.prev = 18;\n              _context14.t2 = _context14[\"catch\"](5);\n              this.error('Error resetting group key: ', _context14.t2);\n              throw _context14.t2;\n            case 22:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n        return resetRoomKey$;\n      }(), null, this, [[5, 18]], Promise);\n    }\n    return resetRoomKey;\n  }();\n  _proto.onRoomKeyReset = function () {\n    function onRoomKeyReset(keyID) {\n      this.log(\"Room keyID was reset. New keyID: \" + keyID + \" Previous keyID: \" + this.keyID);\n      this.setState(E2ERoomState.WAITING_KEYS);\n      this.keyID = keyID;\n      this.groupSessionKey = undefined;\n      this.sessionKeyExportedString = undefined;\n      this.sessionKeyExported = undefined;\n      this.oldKeys = undefined;\n    }\n    return onRoomKeyReset;\n  }();\n  _proto.encryptKeyForOtherParticipants = function () {\n    function encryptKeyForOtherParticipants() {\n      var _usersSuggestedGroupK, mySub, decryptedOldGroupKeys, users, usersSuggestedGroupKeys, _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, user, _user$e2e2, encryptedGroupKey, oldKeys;\n      return _regeneratorRuntime.async(function () {\n        function encryptKeyForOtherParticipants$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.prev = 0;\n              mySub = Subscriptions.findOne({\n                rid: this.roomId\n              });\n              _context15.next = 4;\n              return _regeneratorRuntime.awrap(this.exportOldRoomKeys(mySub === null || mySub === void 0 ? void 0 : mySub.oldRoomKeys));\n            case 4:\n              decryptedOldGroupKeys = _context15.sent;\n              _context15.next = 7;\n              return _regeneratorRuntime.awrap(sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId));\n            case 7:\n              users = _context15.sent.users.filter(function (user) {\n                var _user$e2e;\n                return user === null || user === void 0 ? void 0 : (_user$e2e = user.e2e) === null || _user$e2e === void 0 ? void 0 : _user$e2e.public_key;\n              });\n              if (users.length) {\n                _context15.next = 10;\n                break;\n              }\n              return _context15.abrupt(\"return\");\n            case 10:\n              usersSuggestedGroupKeys = (_usersSuggestedGroupK = {}, _usersSuggestedGroupK[this.roomId] = [], _usersSuggestedGroupK);\n              _iteratorAbruptCompletion3 = false;\n              _didIteratorError3 = false;\n              _context15.prev = 13;\n              _iterator3 = _asyncIterator(users);\n            case 15:\n              _context15.next = 17;\n              return _regeneratorRuntime.awrap(_iterator3.next());\n            case 17:\n              if (!(_iteratorAbruptCompletion3 = !(_step3 = _context15.sent).done)) {\n                _context15.next = 29;\n                break;\n              }\n              user = _step3.value;\n              _context15.next = 21;\n              return _regeneratorRuntime.awrap(this.encryptGroupKeyForParticipant(user.e2e.public_key));\n            case 21:\n              encryptedGroupKey = _context15.sent;\n              _context15.next = 24;\n              return _regeneratorRuntime.awrap(this.encryptOldKeysForParticipant((_user$e2e2 = user.e2e) === null || _user$e2e2 === void 0 ? void 0 : _user$e2e2.public_key, decryptedOldGroupKeys));\n            case 24:\n              oldKeys = _context15.sent;\n              usersSuggestedGroupKeys[this.roomId].push(_objectSpread({\n                _id: user._id,\n                key: encryptedGroupKey\n              }, oldKeys && {\n                oldKeys: oldKeys\n              }));\n            case 26:\n              _iteratorAbruptCompletion3 = false;\n              _context15.next = 15;\n              break;\n            case 29:\n              _context15.next = 35;\n              break;\n            case 31:\n              _context15.prev = 31;\n              _context15.t0 = _context15[\"catch\"](13);\n              _didIteratorError3 = true;\n              _iteratorError3 = _context15.t0;\n            case 35:\n              _context15.prev = 35;\n              _context15.prev = 36;\n              if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n                _context15.next = 40;\n                break;\n              }\n              _context15.next = 40;\n              return _regeneratorRuntime.awrap(_iterator3.return());\n            case 40:\n              _context15.prev = 40;\n              if (!_didIteratorError3) {\n                _context15.next = 43;\n                break;\n              }\n              throw _iteratorError3;\n            case 43:\n              return _context15.finish(40);\n            case 44:\n              return _context15.finish(35);\n            case 45:\n              _context15.next = 47;\n              return _regeneratorRuntime.awrap(sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', {\n                usersSuggestedGroupKeys: usersSuggestedGroupKeys\n              }));\n            case 47:\n              _context15.next = 52;\n              break;\n            case 49:\n              _context15.prev = 49;\n              _context15.t1 = _context15[\"catch\"](0);\n              return _context15.abrupt(\"return\", this.error('Error getting room users: ', _context15.t1));\n            case 52:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n        return encryptKeyForOtherParticipants$;\n      }(), null, this, [[0, 49], [13, 31, 35, 45], [36,, 40, 44]], Promise);\n    }\n    return encryptKeyForOtherParticipants;\n  }();\n  _proto.encryptOldKeysForParticipant = function () {\n    function encryptOldKeysForParticipant(publicKey, oldRoomKeys) {\n      var userKey, keys, _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, oldRoomKey, encryptedKey, encryptedKeyToString;\n      return _regeneratorRuntime.async(function () {\n        function encryptOldKeysForParticipant$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              if (!(!oldRoomKeys || oldRoomKeys.length === 0)) {\n                _context16.next = 2;\n                break;\n              }\n              return _context16.abrupt(\"return\");\n            case 2:\n              _context16.prev = 2;\n              _context16.next = 5;\n              return _regeneratorRuntime.awrap(importRSAKey(JSON.parse(publicKey), ['encrypt']));\n            case 5:\n              userKey = _context16.sent;\n              _context16.next = 11;\n              break;\n            case 8:\n              _context16.prev = 8;\n              _context16.t0 = _context16[\"catch\"](2);\n              return _context16.abrupt(\"return\", this.error('Error importing user key: ', _context16.t0));\n            case 11:\n              _context16.prev = 11;\n              keys = [];\n              _iteratorAbruptCompletion4 = false;\n              _didIteratorError4 = false;\n              _context16.prev = 15;\n              _iterator4 = _asyncIterator(oldRoomKeys);\n            case 17:\n              _context16.next = 19;\n              return _regeneratorRuntime.awrap(_iterator4.next());\n            case 19:\n              if (!(_iteratorAbruptCompletion4 = !(_step4 = _context16.sent).done)) {\n                _context16.next = 31;\n                break;\n              }\n              oldRoomKey = _step4.value;\n              if (oldRoomKey.E2EKey) {\n                _context16.next = 23;\n                break;\n              }\n              return _context16.abrupt(\"continue\", 28);\n            case 23:\n              _context16.next = 25;\n              return _regeneratorRuntime.awrap(encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey)));\n            case 25:\n              encryptedKey = _context16.sent;\n              encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n              keys.push(_objectSpread(_objectSpread({}, oldRoomKey), {}, {\n                E2EKey: encryptedKeyToString\n              }));\n            case 28:\n              _iteratorAbruptCompletion4 = false;\n              _context16.next = 17;\n              break;\n            case 31:\n              _context16.next = 37;\n              break;\n            case 33:\n              _context16.prev = 33;\n              _context16.t1 = _context16[\"catch\"](15);\n              _didIteratorError4 = true;\n              _iteratorError4 = _context16.t1;\n            case 37:\n              _context16.prev = 37;\n              _context16.prev = 38;\n              if (!(_iteratorAbruptCompletion4 && _iterator4.return != null)) {\n                _context16.next = 42;\n                break;\n              }\n              _context16.next = 42;\n              return _regeneratorRuntime.awrap(_iterator4.return());\n            case 42:\n              _context16.prev = 42;\n              if (!_didIteratorError4) {\n                _context16.next = 45;\n                break;\n              }\n              throw _iteratorError4;\n            case 45:\n              return _context16.finish(42);\n            case 46:\n              return _context16.finish(37);\n            case 47:\n              return _context16.abrupt(\"return\", keys);\n            case 50:\n              _context16.prev = 50;\n              _context16.t2 = _context16[\"catch\"](11);\n              return _context16.abrupt(\"return\", this.error('Error encrypting user key: ', _context16.t2));\n            case 53:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n        return encryptOldKeysForParticipant$;\n      }(), null, this, [[2, 8], [11, 50], [15, 33, 37, 47], [38,, 42, 46]], Promise);\n    }\n    return encryptOldKeysForParticipant;\n  }();\n  _proto.encryptGroupKeyForParticipant = function () {\n    function encryptGroupKeyForParticipant(publicKey) {\n      var userKey, encryptedUserKey, encryptedUserKeyToString;\n      return _regeneratorRuntime.async(function () {\n        function encryptGroupKeyForParticipant$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.prev = 0;\n              _context17.next = 3;\n              return _regeneratorRuntime.awrap(importRSAKey(JSON.parse(publicKey), ['encrypt']));\n            case 3:\n              userKey = _context17.sent;\n              _context17.next = 9;\n              break;\n            case 6:\n              _context17.prev = 6;\n              _context17.t0 = _context17[\"catch\"](0);\n              return _context17.abrupt(\"return\", this.error('Error importing user key: ', _context17.t0));\n            case 9:\n              _context17.prev = 9;\n              _context17.next = 12;\n              return _regeneratorRuntime.awrap(encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString)));\n            case 12:\n              encryptedUserKey = _context17.sent;\n              encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n              return _context17.abrupt(\"return\", encryptedUserKeyToString);\n            case 17:\n              _context17.prev = 17;\n              _context17.t1 = _context17[\"catch\"](9);\n              return _context17.abrupt(\"return\", this.error('Error encrypting user key: ', _context17.t1));\n            case 20:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n        return encryptGroupKeyForParticipant$;\n      }(), null, this, [[0, 6], [9, 17]], Promise);\n    }\n    return encryptGroupKeyForParticipant;\n  }() // Encrypts files before upload. I/O is in arraybuffers.\n  ;\n  _proto.encryptFile = function () {\n    function encryptFile(file) {\n      var fileArrayBuffer, hash, vector, key, result, exportedKey, fileName, encryptedFile;\n      return _regeneratorRuntime.async(function () {\n        function encryptFile$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return _regeneratorRuntime.awrap(readFileAsArrayBuffer(file));\n            case 2:\n              fileArrayBuffer = _context18.sent;\n              _context18.next = 5;\n              return _regeneratorRuntime.awrap(sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer)));\n            case 5:\n              hash = _context18.sent;\n              vector = crypto.getRandomValues(new Uint8Array(16));\n              _context18.next = 9;\n              return _regeneratorRuntime.awrap(generateAESCTRKey());\n            case 9:\n              key = _context18.sent;\n              _context18.prev = 10;\n              _context18.next = 13;\n              return _regeneratorRuntime.awrap(encryptAESCTR(vector, key, fileArrayBuffer));\n            case 13:\n              result = _context18.sent;\n              _context18.next = 20;\n              break;\n            case 16:\n              _context18.prev = 16;\n              _context18.t0 = _context18[\"catch\"](10);\n              console.log(_context18.t0);\n              return _context18.abrupt(\"return\", this.error('Error encrypting group key: ', _context18.t0));\n            case 20:\n              _context18.next = 22;\n              return _regeneratorRuntime.awrap(window.crypto.subtle.exportKey('jwk', key));\n            case 22:\n              exportedKey = _context18.sent;\n              _context18.next = 25;\n              return _regeneratorRuntime.awrap(createSha256HashFromText(file.name));\n            case 25:\n              fileName = _context18.sent;\n              encryptedFile = new File([toArrayBuffer(result)], fileName);\n              return _context18.abrupt(\"return\", {\n                file: encryptedFile,\n                key: exportedKey,\n                iv: Base64.encode(vector),\n                type: file.type,\n                hash: hash\n              });\n            case 28:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n        return encryptFile$;\n      }(), null, this, [[10, 16]], Promise);\n    }\n    return encryptFile;\n  }() // Decrypt uploaded encrypted files. I/O is in arraybuffers.\n  ;\n  _proto.decryptFile = function () {\n    function decryptFile(file, key, iv) {\n      var ivArray, cryptoKey;\n      return _regeneratorRuntime.async(function () {\n        function decryptFile$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              ivArray = Base64.decode(iv);\n              _context19.next = 3;\n              return _regeneratorRuntime.awrap(window.crypto.subtle.importKey('jwk', key, {\n                name: 'AES-CTR'\n              }, true, ['encrypt', 'decrypt']));\n            case 3:\n              cryptoKey = _context19.sent;\n              return _context19.abrupt(\"return\", window.crypto.subtle.decrypt({\n                name: 'AES-CTR',\n                counter: ivArray,\n                length: 64\n              }, cryptoKey, file));\n            case 5:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n        return decryptFile$;\n      }(), null, null, null, Promise);\n    }\n    return decryptFile;\n  }() // Encrypts messages\n  ;\n  _proto.encryptText = function () {\n    function encryptText(data) {\n      var vector, result;\n      return _regeneratorRuntime.async(function () {\n        function encryptText$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              vector = crypto.getRandomValues(new Uint8Array(16));\n              _context20.prev = 1;\n              _context20.next = 4;\n              return _regeneratorRuntime.awrap(encryptAES(vector, this.groupSessionKey, data));\n            case 4:\n              result = _context20.sent;\n              return _context20.abrupt(\"return\", this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result)));\n            case 8:\n              _context20.prev = 8;\n              _context20.t0 = _context20[\"catch\"](1);\n              this.error('Error encrypting message: ', _context20.t0);\n              throw _context20.t0;\n            case 12:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n        return encryptText$;\n      }(), null, this, [[1, 8]], Promise);\n    }\n    return encryptText;\n  }() // Helper function for encryption of content\n  ;\n  _proto.encryptMessageContent = function () {\n    function encryptMessageContent(contentToBeEncrypted) {\n      var data;\n      return _regeneratorRuntime.async(function () {\n        function encryptMessageContent$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n              _context21.next = 3;\n              return _regeneratorRuntime.awrap(this.encryptText(data));\n            case 3:\n              _context21.t0 = _context21.sent;\n              return _context21.abrupt(\"return\", {\n                algorithm: 'rc.v1.aes-sha2',\n                ciphertext: _context21.t0\n              });\n            case 5:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n        return encryptMessageContent$;\n      }(), null, this, null, Promise);\n    }\n    return encryptMessageContent;\n  }() // Helper function for encryption of content\n  ;\n  _proto.encryptMessage = function () {\n    function encryptMessage(message) {\n      var msg, attachments, rest, content;\n      return _regeneratorRuntime.async(function () {\n        function encryptMessage$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              msg = message.msg, attachments = message.attachments, rest = _objectWithoutProperties(message, _excluded2);\n              _context22.next = 3;\n              return _regeneratorRuntime.awrap(this.encryptMessageContent({\n                msg: msg,\n                attachments: attachments\n              }));\n            case 3:\n              content = _context22.sent;\n              return _context22.abrupt(\"return\", _objectSpread(_objectSpread({}, rest), {}, {\n                content: content,\n                t: 'e2e',\n                e2e: 'pending'\n              }));\n            case 5:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n        return encryptMessage$;\n      }(), null, this, null, Promise);\n    }\n    return encryptMessage;\n  }() // Helper function for encryption of messages\n  ;\n  _proto.encrypt = function () {\n    function encrypt(message) {\n      if (!this.isSupportedRoomType(this.typeOfRoom)) {\n        return;\n      }\n      if (!this.groupSessionKey) {\n        throw new Error(t('E2E_Invalid_Key'));\n      }\n      var ts = new Date();\n      var data = new TextEncoder().encode(EJSON.stringify({\n        _id: message._id,\n        text: message.msg,\n        userId: this.userId,\n        ts: ts\n      }));\n      return this.encryptText(data);\n    }\n    return encrypt;\n  }();\n  _proto.decryptContent = function () {\n    function decryptContent(data) {\n      var content;\n      return _regeneratorRuntime.async(function () {\n        function decryptContent$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              if (!(data.content && data.content.algorithm === 'rc.v1.aes-sha2')) {\n                _context23.next = 5;\n                break;\n              }\n              _context23.next = 3;\n              return _regeneratorRuntime.awrap(this.decrypt(data.content.ciphertext));\n            case 3:\n              content = _context23.sent;\n              Object.assign(data, content);\n            case 5:\n              return _context23.abrupt(\"return\", data);\n            case 6:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n        return decryptContent$;\n      }(), null, this, null, Promise);\n    }\n    return decryptContent;\n  }() // Decrypt messages\n  ;\n  _proto.decryptMessage = function () {\n    function decryptMessage(message) {\n      var data;\n      return _regeneratorRuntime.async(function () {\n        function decryptMessage$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              if (!(message.t !== 'e2e' || message.e2e === 'done')) {\n                _context24.next = 2;\n                break;\n              }\n              return _context24.abrupt(\"return\", message);\n            case 2:\n              if (!message.msg) {\n                _context24.next = 7;\n                break;\n              }\n              _context24.next = 5;\n              return _regeneratorRuntime.awrap(this.decrypt(message.msg));\n            case 5:\n              data = _context24.sent;\n              if (data !== null && data !== void 0 && data.text) {\n                message.msg = data.text;\n              }\n            case 7:\n              _context24.next = 9;\n              return _regeneratorRuntime.awrap(this.decryptContent(message));\n            case 9:\n              message = _context24.sent;\n              return _context24.abrupt(\"return\", _objectSpread(_objectSpread({}, message), {}, {\n                e2e: 'done'\n              }));\n            case 11:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n        return decryptMessage$;\n      }(), null, this, null, Promise);\n    }\n    return decryptMessage;\n  }();\n  _proto.doDecrypt = function () {\n    function doDecrypt(vector, key, cipherText) {\n      var result;\n      return _regeneratorRuntime.async(function () {\n        function doDecrypt$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.next = 2;\n              return _regeneratorRuntime.awrap(decryptAES(vector, key, cipherText));\n            case 2:\n              result = _context25.sent;\n              return _context25.abrupt(\"return\", EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result))));\n            case 4:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n        return doDecrypt$;\n      }(), null, null, null, Promise);\n    }\n    return doDecrypt;\n  }();\n  _proto.decrypt = function () {\n    function decrypt(message) {\n      var keyID, _splitVectorAndEcrypt, _splitVectorAndEcrypt2, vector, cipherText, oldKey, _this$oldKeys, oldRoomKey;\n      return _regeneratorRuntime.async(function () {\n        function decrypt$(_context26) {\n          while (1) switch (_context26.prev = _context26.next) {\n            case 0:\n              keyID = message.slice(0, 12);\n              message = message.slice(12);\n              _splitVectorAndEcrypt = splitVectorAndEcryptedData(Base64.decode(message)), _splitVectorAndEcrypt2 = _slicedToArray(_splitVectorAndEcrypt, 2), vector = _splitVectorAndEcrypt2[0], cipherText = _splitVectorAndEcrypt2[1];\n              oldKey = '';\n              if (!(keyID !== this.keyID)) {\n                _context26.next = 18;\n                break;\n              }\n              oldRoomKey = (_this$oldKeys = this.oldKeys) === null || _this$oldKeys === void 0 ? void 0 : _this$oldKeys.find(function (key) {\n                return key.e2eKeyId === keyID;\n              }); // Messages already contain a keyID stored with them\n              // That means that if we cannot find a keyID for the key the message has preppended to\n              // The message is indecipherable.\n              // In these cases, we'll give a last shot using the current session key, which may not work\n              // but will be enough to help with some mobile issues.\n              if (oldRoomKey) {\n                _context26.next = 17;\n                break;\n              }\n              _context26.prev = 7;\n              _context26.next = 10;\n              return _regeneratorRuntime.awrap(this.doDecrypt(vector, this.groupSessionKey, cipherText));\n            case 10:\n              return _context26.abrupt(\"return\", _context26.sent);\n            case 13:\n              _context26.prev = 13;\n              _context26.t0 = _context26[\"catch\"](7);\n              this.error('Error decrypting message: ', _context26.t0, message);\n              return _context26.abrupt(\"return\", {\n                msg: t('E2E_indecipherable')\n              });\n            case 17:\n              oldKey = oldRoomKey.E2EKey;\n            case 18:\n              _context26.prev = 18;\n              _context26.next = 21;\n              return _regeneratorRuntime.awrap(this.doDecrypt(vector, oldKey || this.groupSessionKey, cipherText));\n            case 21:\n              return _context26.abrupt(\"return\", _context26.sent);\n            case 24:\n              _context26.prev = 24;\n              _context26.t1 = _context26[\"catch\"](18);\n              this.error('Error decrypting message: ', _context26.t1, message);\n              return _context26.abrupt(\"return\", {\n                msg: t('E2E_Key_Error')\n              });\n            case 28:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n        return decrypt$;\n      }(), null, this, [[7, 13], [18, 24]], Promise);\n    }\n    return decrypt;\n  }();\n  _proto.provideKeyToUser = function () {\n    function provideKeyToUser(keyId) {\n      if (this.keyID !== keyId) {\n        return;\n      }\n      void this.encryptKeyForOtherParticipants();\n      this.setState(E2ERoomState.READY);\n    }\n    return provideKeyToUser;\n  }();\n  _proto.onStateChange = function () {\n    function onStateChange(cb) {\n      var _this4 = this;\n      this.on('STATE_CHANGED', cb);\n      return function () {\n        return _this4.off('STATE_CHANGED', cb);\n      };\n    }\n    return onStateChange;\n  }();\n  _proto.encryptGroupKeyForParticipantsWaitingForTheKeys = function () {\n    function encryptGroupKeyForParticipantsWaitingForTheKeys(users) {\n      var _this5 = this;\n      var mySub, decryptedOldGroupKeys, usersWithKeys;\n      return _regeneratorRuntime.async(function () {\n        function encryptGroupKeyForParticipantsWaitingForTheKeys$(_context28) {\n          while (1) switch (_context28.prev = _context28.next) {\n            case 0:\n              if (this.isReady()) {\n                _context28.next = 2;\n                break;\n              }\n              return _context28.abrupt(\"return\");\n            case 2:\n              mySub = Subscriptions.findOne({\n                rid: this.roomId\n              });\n              _context28.next = 5;\n              return _regeneratorRuntime.awrap(this.exportOldRoomKeys(mySub === null || mySub === void 0 ? void 0 : mySub.oldRoomKeys));\n            case 5:\n              decryptedOldGroupKeys = _context28.sent;\n              _context28.next = 8;\n              return _regeneratorRuntime.awrap(Promise.all(users.map(function () {\n                function _callee3(user) {\n                  var _id, public_key, key, oldKeys;\n                  return _regeneratorRuntime.async(function () {\n                    function _callee3$(_context27) {\n                      while (1) switch (_context27.prev = _context27.next) {\n                        case 0:\n                          _id = user._id, public_key = user.public_key;\n                          _context27.next = 3;\n                          return _regeneratorRuntime.awrap(_this5.encryptGroupKeyForParticipant(public_key));\n                        case 3:\n                          key = _context27.sent;\n                          _context27.next = 6;\n                          return _regeneratorRuntime.awrap(_this5.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys));\n                        case 6:\n                          oldKeys = _context27.sent;\n                          return _context27.abrupt(\"return\", _objectSpread({\n                            _id: _id,\n                            key: key\n                          }, oldKeys && {\n                            oldKeys: oldKeys\n                          }));\n                        case 8:\n                        case \"end\":\n                          return _context27.stop();\n                      }\n                    }\n                    return _callee3$;\n                  }(), null, null, null, Promise);\n                }\n                return _callee3;\n              }())));\n            case 8:\n              usersWithKeys = _context28.sent;\n              return _context28.abrupt(\"return\", usersWithKeys);\n            case 10:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n        return encryptGroupKeyForParticipantsWaitingForTheKeys$;\n      }(), null, this, null, Promise);\n    }\n    return encryptGroupKeyForParticipantsWaitingForTheKeys;\n  }();\n  return _createClass(E2ERoom, [{\n    key: \"keyID\",\n    get: function () {\n      return this[KEY_ID];\n    },\n    set: function (keyID) {\n      this[KEY_ID] = keyID;\n    }\n  }]);\n}(Emitter);","map":{"version":3,"names":["_slicedToArray","module","link","default","v","_objectWithoutProperties","_regeneratorRuntime","_objectSpread","_createClass","_inheritsLoose","_asyncIterator","export","E2ERoom","Base64","Emitter","EJSON","RoomManager","roomCoordinator","RoomSettingsEnum","ChatRoom","Subscriptions","Messages","sdk","t","E2ERoomState","toString","toArrayBuffer","joinVectorAndEcryptedData","splitVectorAndEcryptedData","encryptRSA","encryptAES","decryptRSA","decryptAES","generateAESKey","exportJWKKey","importAESKey","importRSAKey","readFileAsArrayBuffer","encryptAESCTR","generateAESCTRKey","sha256HashFromArrayBuffer","createSha256HashFromText","log","logError","e2e","KEY_ID","Symbol","PAUSED","permitedMutations","_permitedMutations","NOT_STARTED","ESTABLISHING","DISABLED","KEYS_RECEIVED","READY","CREATING_KEYS","WAITING_KEYS","ERROR","filterMutation","currentState","nextState","includes","_Emitter","userId","room","_this","call","state","undefined","roomId","typeOfRoom","roomKeyId","groupSessionKey","oldKeys","sessionKeyExportedString","sessionKeyExported","_id","e2eKeyId","once","_callee","async","_callee$","_context","prev","next","awrap","decryptOldRoomKeys","abrupt","decryptPendingMessages","stop","Promise","decryptSubscription","on","opened","handshake","setState","_proto","prototype","_len","arguments","length","msg","Array","_key","apply","concat","error","_len2","_key2","hasSessionKey","getState","requestedState","emit","isReady","isDisabled","enable","disable","pause","resume","keyReceived","shouldConvertSentMessages","message","_this2","shouldConvertSentMessages$","_context2","resolve","shouldConvertReceivedMessages","isWaitingKeys","_subscription$lastMes","subscription","decryptSubscription$","_context3","findOne","rid","lastMessage","decryptMessage","sent","update","$set","sub","keys","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","key","k","decryptOldRoomKeys$","_context4","oldRoomKeys","done","value","decryptSessionKey","E2EKey","push","t0","t1","return","finish","exportOldRoomKeys","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","exportOldRoomKeys$","_context5","exportSessionKey","_this3","decryptPendingMessages$","_context7","find","forEach","_callee2","_ref","_callee2$","_context6","_excluded","t2","_Subscriptions$findOn","groupKey","handshake$","_context8","importGroupKey","userShouldCreateKeys","createGroupKey","publish","u","isSupportedRoomType","type","getRoomDirectives","allowRoomSettingChange","E2E","decryptSessionKey$","_context9","JSON","t3","parse","decryptedKey","exportSessionKey$","_context10","slice","decode","privateKey","importGroupKey$","_context11","keyID","createNewGroupKey","createNewGroupKey$","_context12","stringify","createGroupKey$","_context13","rest","encryptGroupKeyForParticipant","publicKey","t4","t5","uid","t6","post","encryptKeyForOtherParticipants","t7","resetRoomKey","e2eNewKeys","resetRoomKey$","_context14","e2eKey","onRoomKeyReset","_usersSuggestedGroupK","mySub","decryptedOldGroupKeys","users","usersSuggestedGroupKeys","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","user","_user$e2e2","encryptedGroupKey","encryptKeyForOtherParticipants$","_context15","filter","_user$e2e","public_key","encryptOldKeysForParticipant","userKey","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","oldRoomKey","encryptedKey","encryptedKeyToString","encryptOldKeysForParticipant$","_context16","encode","Uint8Array","encryptedUserKey","encryptedUserKeyToString","encryptGroupKeyForParticipant$","_context17","encryptFile","file","fileArrayBuffer","hash","vector","result","exportedKey","fileName","encryptedFile","encryptFile$","_context18","crypto","getRandomValues","console","window","subtle","exportKey","name","File","iv","decryptFile","ivArray","cryptoKey","decryptFile$","_context19","importKey","decrypt","counter","encryptText","data","encryptText$","_context20","encryptMessageContent","contentToBeEncrypted","encryptMessageContent$","_context21","TextEncoder","algorithm","ciphertext","encryptMessage","attachments","content","encryptMessage$","_context22","_excluded2","encrypt","Error","ts","Date","text","decryptContent","decryptContent$","_context23","Object","assign","decryptMessage$","_context24","doDecrypt","cipherText","doDecrypt$","_context25","TextDecoder","_splitVectorAndEcrypt","_splitVectorAndEcrypt2","oldKey","_this$oldKeys","decrypt$","_context26","provideKeyToUser","keyId","onStateChange","cb","_this4","off","encryptGroupKeyForParticipantsWaitingForTheKeys","_this5","usersWithKeys","encryptGroupKeyForParticipantsWaitingForTheKeys$","_context28","all","map","_callee3","_callee3$","_context27","get","set"],"sources":["app/e2e/client/rocketchat.e2e.room.ts"],"sourcesContent":["import { Base64 } from '@rocket.chat/base64';\nimport { Emitter } from '@rocket.chat/emitter';\nimport EJSON from 'ejson';\n\nimport { RoomManager } from '../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../client/lib/rooms/roomCoordinator';\nimport { RoomSettingsEnum } from '../../../definition/IRoomTypeConfig';\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\nimport { E2ERoomState } from './E2ERoomState';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptRSA,\n\tencryptAES,\n\tdecryptRSA,\n\tdecryptAES,\n\tgenerateAESKey,\n\texportJWKKey,\n\timportAESKey,\n\timportRSAKey,\n\treadFileAsArrayBuffer,\n\tencryptAESCTR,\n\tgenerateAESCTRKey,\n\tsha256HashFromArrayBuffer,\n\tcreateSha256HashFromText,\n} from './helper';\nimport { log, logError } from './logger';\nimport { e2e } from './rocketchat.e2e';\n\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\n\nconst permitedMutations: any = {\n\t[E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n\t[E2ERoomState.READY]: [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS],\n\t[E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n\t[E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n\t[E2ERoomState.ESTABLISHING]: [\n\t\tE2ERoomState.READY,\n\t\tE2ERoomState.KEYS_RECEIVED,\n\t\tE2ERoomState.ERROR,\n\t\tE2ERoomState.DISABLED,\n\t\tE2ERoomState.WAITING_KEYS,\n\t\tE2ERoomState.CREATING_KEYS,\n\t],\n};\n\nconst filterMutation = (currentState: any, nextState: any): any => {\n\tif (currentState === nextState) {\n\t\treturn nextState === E2ERoomState.ERROR;\n\t}\n\n\tif (!(currentState in permitedMutations)) {\n\t\treturn nextState;\n\t}\n\n\tif (permitedMutations[currentState].includes(nextState)) {\n\t\treturn nextState;\n\t}\n\n\treturn false;\n};\n\nexport class E2ERoom extends Emitter {\n\tstate: any = undefined;\n\n\t[PAUSED]: boolean | undefined = undefined;\n\n\t[KEY_ID]: any;\n\n\tuserId: any;\n\n\troomId: any;\n\n\ttypeOfRoom: any;\n\n\troomKeyId: any;\n\n\tgroupSessionKey: any;\n\n\toldKeys: any;\n\n\tsessionKeyExportedString: string | undefined;\n\n\tsessionKeyExported: any;\n\n\tconstructor(userId: any, room: any) {\n\t\tsuper();\n\n\t\tthis.userId = userId;\n\t\tthis.roomId = room._id;\n\t\tthis.typeOfRoom = room.t;\n\t\tthis.roomKeyId = room.e2eKeyId;\n\n\t\tthis.once(E2ERoomState.READY, async () => {\n\t\t\tawait this.decryptOldRoomKeys();\n\t\t\treturn this.decryptPendingMessages();\n\t\t});\n\t\tthis.once(E2ERoomState.READY, () => this.decryptSubscription());\n\t\tthis.on('STATE_CHANGED', (prev) => {\n\t\t\tif (this.roomId === RoomManager.opened) {\n\t\t\t\tthis.log(`[PREV: ${prev}]`, 'State CHANGED');\n\t\t\t}\n\t\t});\n\t\tthis.on('STATE_CHANGED', () => this.handshake());\n\n\t\tthis.setState(E2ERoomState.NOT_STARTED);\n\t}\n\n\tlog(...msg: unknown[]) {\n\t\tlog(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\terror(...msg: unknown[]) {\n\t\tlogError(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\thasSessionKey() {\n\t\treturn !!this.groupSessionKey;\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tsetState(requestedState: any) {\n\t\tconst currentState = this.state;\n\t\tconst nextState = filterMutation(currentState, requestedState);\n\n\t\tif (!nextState) {\n\t\t\tthis.error(`invalid state ${currentState} -> ${requestedState}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state = nextState;\n\t\tthis.log(currentState, '->', nextState);\n\t\tthis.emit('STATE_CHANGED', currentState);\n\t\tthis.emit(nextState, this);\n\t}\n\n\tisReady() {\n\t\treturn this.state === E2ERoomState.READY;\n\t}\n\n\tisDisabled() {\n\t\treturn this.state === E2ERoomState.DISABLED;\n\t}\n\n\tenable() {\n\t\tif (this.state === E2ERoomState.READY) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tdisable() {\n\t\tthis.setState(E2ERoomState.DISABLED);\n\t}\n\n\tpause() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', true);\n\t\tthis[PAUSED] = true;\n\t\tthis.emit('PAUSED', true);\n\t}\n\n\tresume() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', false);\n\t\tthis[PAUSED] = false;\n\t\tthis.emit('PAUSED', false);\n\t}\n\n\tkeyReceived() {\n\t\tthis.setState(E2ERoomState.KEYS_RECEIVED);\n\t}\n\n\tasync shouldConvertSentMessages(message: any) {\n\t\tif (!this.isReady() || this[PAUSED]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this[PAUSED] === undefined) {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tthis.once('PAUSED', resolve);\n\t\t\t});\n\t\t}\n\n\t\tif (message.msg[0] === '/') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshouldConvertReceivedMessages() {\n\t\treturn this.isReady();\n\t}\n\n\tisWaitingKeys() {\n\t\treturn this.state === E2ERoomState.WAITING_KEYS;\n\t}\n\n\tget keyID() {\n\t\treturn this[KEY_ID];\n\t}\n\n\tset keyID(keyID) {\n\t\tthis[KEY_ID] = keyID;\n\t}\n\n\tasync decryptSubscription() {\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (subscription?.lastMessage?.t !== 'e2e') {\n\t\t\tthis.log('decryptSubscriptions nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await this.decryptMessage(subscription.lastMessage);\n\n\t\tSubscriptions.update(\n\t\t\t{\n\t\t\t\t_id: subscription._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastMessage: message,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.log('decryptSubscriptions Done');\n\t}\n\n\tasync decryptOldRoomKeys() {\n\t\tconst sub = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (!sub?.oldRoomKeys || sub?.oldRoomKeys.length === 0) {\n\t\t\tthis.log('decryptOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of sub.oldRoomKeys) {\n\t\t\ttry {\n\t\t\t\tconst k = await this.decryptSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t\tkeys.push({ ...key, E2EKey: null });\n\t\t\t}\n\t\t}\n\n\t\tthis.oldKeys = keys;\n\t\tthis.log('decryptOldRoomKeys Done');\n\t}\n\n\tasync exportOldRoomKeys(oldKeys: any) {\n\t\tthis.log('exportOldRoomKeys starting');\n\t\tif (!oldKeys || oldKeys.length === 0) {\n\t\t\tthis.log('exportOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of oldKeys) {\n\t\t\ttry {\n\t\t\t\tif (!key.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst k = await this.exportSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.log(`exportOldRoomKeys Done: ${keys.length} keys exported`);\n\t\treturn keys;\n\t}\n\n\tasync decryptPendingMessages() {\n\t\treturn Messages.find({ rid: this.roomId, t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg));\n\t\t});\n\t}\n\n\t// Initiates E2E Encryption\n\tasync handshake() {\n\t\tif (!e2e.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.ESTABLISHING);\n\n\t\ttry {\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId })?.E2EKey;\n\t\t\tif (groupKey) {\n\t\t\t\tawait this.importGroupKey(groupKey);\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t\tthis.error('Error fetching group key: ', error);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId })!;\n\t\t\t// Only room creator can set keys for room\n\t\t\tif (!room.e2eKeyId && this.userShouldCreateKeys(room)) {\n\t\t\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\t\t\tawait this.createGroupKey();\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\t\tthis.log('Requesting room key');\n\t\t\tsdk.publish('notify-room-users', [`${this.roomId}/e2ekeyRequest`, this.roomId, room.e2eKeyId]);\n\t\t} catch (error) {\n\t\t\t// this.error = error;\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t}\n\t}\n\n\tuserShouldCreateKeys(room: any) {\n\t\t// On DMs, we'll allow any user to set the keys\n\t\tif (room.t === 'd') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn room.u._id === this.userId;\n\t}\n\n\tisSupportedRoomType(type: any) {\n\t\treturn roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n\t}\n\n\tasync decryptSessionKey(key: any) {\n\t\treturn importAESKey(JSON.parse(await this.exportSessionKey(key)));\n\t}\n\n\tasync exportSessionKey(key: any) {\n\t\tkey = key.slice(12);\n\t\tkey = Base64.decode(key);\n\n\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, key);\n\t\treturn toString(decryptedKey);\n\t}\n\n\tasync importGroupKey(groupKey: any) {\n\t\tthis.log('Importing room key ->', this.roomId);\n\t\t// Get existing group key\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\t// When a new e2e room is created, it will be initialized without an e2e key id\n\t\t// This will prevent new rooms from storing `undefined` as the keyid\n\t\tif (!this.keyID) {\n\t\t\tthis.keyID = this.roomKeyId || (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t\t}\n\n\t\t// Import session key for use.\n\t\ttry {\n\t\t\tconst key = await importAESKey(JSON.parse(this.sessionKeyExportedString!));\n\t\t\t// Key has been obtained. E2E is now in session.\n\t\t\tthis.groupSessionKey = key;\n\t\t} catch (error) {\n\t\t\tthis.error('Error importing group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync createNewGroupKey() {\n\t\tthis.groupSessionKey = await generateAESKey();\n\n\t\tconst sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n\t\tthis.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n\t\tthis.keyID = (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t}\n\n\tasync createGroupKey() {\n\t\tthis.log('Creating room key');\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tawait sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID);\n\t\t\tawait sdk.rest.post('/v1/e2e.updateGroupKey', {\n\t\t\t\trid: this.roomId,\n\t\t\t\tuid: this.userId,\n\t\t\t\tkey: await this.encryptGroupKeyForParticipant(e2e.publicKey!),\n\t\t\t} as any);\n\t\t\tawait this.encryptKeyForOtherParticipants();\n\t\t} catch (error) {\n\t\t\tthis.error('Error exporting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync resetRoomKey() {\n\t\tthis.log('Resetting room key');\n\t\tif (!e2e.publicKey) {\n\t\t\tthis.error('Cannot reset room key. No public key found.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tconst e2eNewKeys = { e2eKeyId: this.keyID, e2eKey: await this.encryptGroupKeyForParticipant(e2e.publicKey) };\n\n\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\tthis.log(`Room key reset done for room ${this.roomId}`);\n\n\t\t\treturn e2eNewKeys;\n\t\t} catch (error) {\n\t\t\tthis.error('Error resetting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tonRoomKeyReset(keyID: any) {\n\t\tthis.log(`Room keyID was reset. New keyID: ${keyID} Previous keyID: ${this.keyID}`);\n\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\tthis.keyID = keyID;\n\t\tthis.groupSessionKey = undefined;\n\t\tthis.sessionKeyExportedString = undefined;\n\t\tthis.sessionKeyExported = undefined;\n\t\tthis.oldKeys = undefined;\n\t}\n\n\tasync encryptKeyForOtherParticipants() {\n\t\t// Encrypt generated session key for every user in room and publish to subscription model.\n\t\ttry {\n\t\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\t\tconst users = (await sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId)).users.filter((user) => user?.e2e?.public_key);\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst usersSuggestedGroupKeys = { [this.roomId]: [] as any[] };\n\t\t\tfor await (const user of users) {\n\t\t\t\tconst encryptedGroupKey = await this.encryptGroupKeyForParticipant(user.e2e!.public_key!);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(user.e2e?.public_key, decryptedOldGroupKeys);\n\n\t\t\t\tusersSuggestedGroupKeys[this.roomId].push({ _id: user._id, key: encryptedGroupKey, ...(oldKeys && { oldKeys }) });\n\t\t\t}\n\n\t\t\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys });\n\t\t} catch (error) {\n\t\t\treturn this.error('Error getting room users: ', error);\n\t\t}\n\t}\n\n\tasync encryptOldKeysForParticipant(publicKey: any, oldRoomKeys: any) {\n\t\tif (!oldRoomKeys || oldRoomKeys.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet userKey;\n\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst keys = [];\n\t\t\tfor await (const oldRoomKey of oldRoomKeys) {\n\t\t\t\tif (!oldRoomKey.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst encryptedKey = await encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey));\n\t\t\t\tconst encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n\n\t\t\t\tkeys.push({ ...oldRoomKey, E2EKey: encryptedKeyToString });\n\t\t\t}\n\t\t\treturn keys;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\tasync encryptGroupKeyForParticipant(publicKey: string) {\n\t\tlet userKey;\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\t\t// const vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\t// Encrypt session key for this user with his/her public key\n\t\ttry {\n\t\t\tconst encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n\t\t\tconst encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n\t\t\treturn encryptedUserKeyToString;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\t// Encrypts files before upload. I/O is in arraybuffers.\n\tasync encryptFile(file: any) {\n\t\t// if (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t// \treturn;\n\t\t// }\n\n\t\tconst fileArrayBuffer = await readFileAsArrayBuffer(file);\n\n\t\tconst hash = await sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer));\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst key = await generateAESCTRKey();\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAESCTR(vector, key, fileArrayBuffer);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\treturn this.error('Error encrypting group key: ', error);\n\t\t}\n\n\t\tconst exportedKey = await window.crypto.subtle.exportKey('jwk', key);\n\n\t\tconst fileName = await createSha256HashFromText(file.name);\n\n\t\tconst encryptedFile = new File([toArrayBuffer(result)], fileName);\n\n\t\treturn {\n\t\t\tfile: encryptedFile,\n\t\t\tkey: exportedKey,\n\t\t\tiv: Base64.encode(vector),\n\t\t\ttype: file.type,\n\t\t\thash,\n\t\t};\n\t}\n\n\t// Decrypt uploaded encrypted files. I/O is in arraybuffers.\n\tasync decryptFile(file: any, key: any, iv: any) {\n\t\tconst ivArray = Base64.decode(iv);\n\t\tconst cryptoKey = await window.crypto.subtle.importKey('jwk', key, { name: 'AES-CTR' }, true, ['encrypt', 'decrypt']);\n\n\t\treturn window.crypto.subtle.decrypt({ name: 'AES-CTR', counter: ivArray, length: 64 }, cryptoKey, file);\n\t}\n\n\t// Encrypts messages\n\tasync encryptText(data: any) {\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\ttry {\n\t\t\tconst result = await encryptAES(vector, this.groupSessionKey, data);\n\t\t\treturn this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n\t\t} catch (error) {\n\t\t\tthis.error('Error encrypting message: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessageContent(contentToBeEncrypted: any) {\n\t\tconst data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n\n\t\treturn {\n\t\t\talgorithm: 'rc.v1.aes-sha2',\n\t\t\tciphertext: await this.encryptText(data),\n\t\t};\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessage(message: any) {\n\t\tconst { msg, attachments, ...rest } = message;\n\n\t\tconst content = await this.encryptMessageContent({ msg, attachments });\n\n\t\treturn {\n\t\t\t...rest,\n\t\t\tcontent,\n\t\t\tt: 'e2e',\n\t\t\te2e: 'pending',\n\t\t};\n\t}\n\n\t// Helper function for encryption of messages\n\tencrypt(message: any) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.groupSessionKey) {\n\t\t\tthrow new Error(t('E2E_Invalid_Key'));\n\t\t}\n\n\t\tconst ts = new Date();\n\n\t\tconst data = new TextEncoder().encode(\n\t\t\tEJSON.stringify({\n\t\t\t\t_id: message._id,\n\t\t\t\ttext: message.msg,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tts,\n\t\t\t}),\n\t\t);\n\n\t\treturn this.encryptText(data);\n\t}\n\n\tasync decryptContent(data: any) {\n\t\tif (data.content && data.content.algorithm === 'rc.v1.aes-sha2') {\n\t\t\tconst content = await this.decrypt(data.content.ciphertext);\n\t\t\tObject.assign(data, content);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// Decrypt messages\n\tasync decryptMessage(message: any) {\n\t\tif (message.t !== 'e2e' || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.msg) {\n\t\t\tconst data = await this.decrypt(message.msg);\n\n\t\t\tif (data?.text) {\n\t\t\t\tmessage.msg = data.text;\n\t\t\t}\n\t\t}\n\n\t\tmessage = await this.decryptContent(message);\n\n\t\treturn {\n\t\t\t...message,\n\t\t\te2e: 'done',\n\t\t};\n\t}\n\n\tasync doDecrypt(vector: any, key: any, cipherText: any) {\n\t\tconst result = await decryptAES(vector, key, cipherText);\n\t\treturn EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n\t}\n\n\tasync decrypt(message: any) {\n\t\tconst keyID = message.slice(0, 12);\n\t\tmessage = message.slice(12);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n\n\t\tlet oldKey = '';\n\t\tif (keyID !== this.keyID) {\n\t\t\tconst oldRoomKey = this.oldKeys?.find((key: any) => key.e2eKeyId === keyID);\n\t\t\t// Messages already contain a keyID stored with them\n\t\t\t// That means that if we cannot find a keyID for the key the message has preppended to\n\t\t\t// The message is indecipherable.\n\t\t\t// In these cases, we'll give a last shot using the current session key, which may not work\n\t\t\t// but will be enough to help with some mobile issues.\n\t\t\tif (!oldRoomKey) {\n\t\t\t\ttry {\n\t\t\t\t\treturn await this.doDecrypt(vector, this.groupSessionKey, cipherText);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\t\t\treturn { msg: t('E2E_indecipherable') };\n\t\t\t\t}\n\t\t\t}\n\t\t\toldKey = oldRoomKey.E2EKey;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.doDecrypt(vector, oldKey || this.groupSessionKey, cipherText);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\treturn { msg: t('E2E_Key_Error') };\n\t\t}\n\t}\n\n\tprovideKeyToUser(keyId: any) {\n\t\tif (this.keyID !== keyId) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid this.encryptKeyForOtherParticipants();\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tonStateChange(cb: any) {\n\t\tthis.on('STATE_CHANGED', cb);\n\t\treturn () => this.off('STATE_CHANGED', cb);\n\t}\n\n\tasync encryptGroupKeyForParticipantsWaitingForTheKeys(users: any[]) {\n\t\tif (!this.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\tconst usersWithKeys = await Promise.all(\n\t\t\tusers.map(async (user) => {\n\t\t\t\tconst { _id, public_key } = user;\n\t\t\t\tconst key = await this.encryptGroupKeyForParticipant(public_key);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys);\n\t\t\t\treturn { _id, key, ...(oldKeys && { oldKeys }) };\n\t\t\t}),\n\t\t);\n\n\t\treturn usersWithKeys;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"aacc529621dcb3fbc31e3a4d3dd4f173c6acb368"}
