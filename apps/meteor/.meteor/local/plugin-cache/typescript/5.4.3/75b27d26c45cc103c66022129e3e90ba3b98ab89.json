{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/sendMessagesToAdmins.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/lib/sendMessagesToAdmins.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/sendMessagesToAdmins.ts","inputSourceMap":{"version":3,"file":"server/lib/sendMessagesToAdmins.ts","sourceRoot":"","sources":["server/lib/sendMessagesToAdmins.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IUser, IMessage } from '@rocket.chat/core-typings';\nimport { Roles, Users } from '@rocket.chat/models';\n\nimport { notifyOnUserChangeAsync } from '../../app/lib/server/lib/notifyListener';\nimport { executeSendMessage } from '../../app/lib/server/methods/sendMessage';\nimport { createDirectMessage } from '../methods/createDirectMessage';\nimport { SystemLogger } from './logger/system';\n\ntype Banner = {\n\tid: string;\n\tpriority: number;\n\ttitle: string;\n\ttext: string;\n\ttextArguments?: string[];\n\tmodifiers: string[];\n\tlink: string;\n};\n\nconst getData = async <T>(param: T[] | ((params: { adminUser: IUser }) => Promise<T[] | T>), adminUser: IUser): Promise<T[]> => {\n\tconst result = typeof param === 'function' ? await param({ adminUser }) : param;\n\n\tif (!Array.isArray(result)) {\n\t\treturn [result];\n\t}\n\n\treturn result;\n};\n\nexport async function sendMessagesToAdmins({\n\tfromId = 'rocket.cat',\n\tcheckFrom = true,\n\tmsgs = [],\n\tbanners = [],\n}: {\n\tfromId?: string;\n\tcheckFrom?: boolean;\n\tmsgs?: Partial<IMessage>[] | ((params: { adminUser: IUser }) => Promise<Partial<IMessage>[] | Partial<IMessage>>);\n\tbanners?: Banner[] | ((params: { adminUser: IUser }) => Promise<Banner[]>);\n}): Promise<void> {\n\tconst fromUser = checkFrom ? await Users.findOneById(fromId, { projection: { _id: 1 } }) : true;\n\n\tconst users = await (await Roles.findUsersInRole('admin')).toArray();\n\n\tconst notifyAdmins: string[] = [];\n\n\tfor await (const adminUser of users) {\n\t\tif (fromUser) {\n\t\t\ttry {\n\t\t\t\tconst { rid } = await createDirectMessage([adminUser.username], fromId);\n\n\t\t\t\tawait Promise.all(\n\t\t\t\t\t(await getData<Partial<IMessage>>(msgs, adminUser)).map((msg) => executeSendMessage(fromId, Object.assign({ rid }, msg))),\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tSystemLogger.error(error);\n\t\t\t}\n\t\t}\n\n\t\tconst updates = await Promise.all(\n\t\t\t(await getData<Banner>(banners, adminUser)).map((banner) => Users.addBannerById(adminUser._id, banner)),\n\t\t);\n\n\t\tconst hasUpdated = updates.some(({ modifiedCount }) => modifiedCount > 0);\n\t\tif (hasUpdated) {\n\t\t\tnotifyAdmins.push(adminUser._id);\n\t\t}\n\t}\n\n\tif (notifyAdmins.length === 0) {\n\t\treturn;\n\t}\n\n\tvoid notifyOnUserChangeAsync(async () => {\n\t\tconst results = await Users.findByIds<Pick<IUser, '_id' | 'banners'>>(notifyAdmins, { projection: { banners: 1 } }).toArray();\n\n\t\treturn results.map(({ _id, banners }) => ({\n\t\t\tid: _id,\n\t\t\tclientAction: 'updated',\n\t\t\tdiff: {\n\t\t\t\tbanners,\n\t\t\t},\n\t\t}));\n\t});\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/sendMessagesToAdmins.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/sendMessagesToAdmins.ts","inputSourceMap":{"version":3,"file":"server/lib/sendMessagesToAdmins.ts","sourceRoot":"","sources":["server/lib/sendMessagesToAdmins.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IUser, IMessage } from '@rocket.chat/core-typings';\nimport { Roles, Users } from '@rocket.chat/models';\n\nimport { notifyOnUserChangeAsync } from '../../app/lib/server/lib/notifyListener';\nimport { executeSendMessage } from '../../app/lib/server/methods/sendMessage';\nimport { createDirectMessage } from '../methods/createDirectMessage';\nimport { SystemLogger } from './logger/system';\n\ntype Banner = {\n\tid: string;\n\tpriority: number;\n\ttitle: string;\n\ttext: string;\n\ttextArguments?: string[];\n\tmodifiers: string[];\n\tlink: string;\n};\n\nconst getData = async <T>(param: T[] | ((params: { adminUser: IUser }) => Promise<T[] | T>), adminUser: IUser): Promise<T[]> => {\n\tconst result = typeof param === 'function' ? await param({ adminUser }) : param;\n\n\tif (!Array.isArray(result)) {\n\t\treturn [result];\n\t}\n\n\treturn result;\n};\n\nexport async function sendMessagesToAdmins({\n\tfromId = 'rocket.cat',\n\tcheckFrom = true,\n\tmsgs = [],\n\tbanners = [],\n}: {\n\tfromId?: string;\n\tcheckFrom?: boolean;\n\tmsgs?: Partial<IMessage>[] | ((params: { adminUser: IUser }) => Promise<Partial<IMessage>[] | Partial<IMessage>>);\n\tbanners?: Banner[] | ((params: { adminUser: IUser }) => Promise<Banner[]>);\n}): Promise<void> {\n\tconst fromUser = checkFrom ? await Users.findOneById(fromId, { projection: { _id: 1 } }) : true;\n\n\tconst users = await (await Roles.findUsersInRole('admin')).toArray();\n\n\tconst notifyAdmins: string[] = [];\n\n\tfor await (const adminUser of users) {\n\t\tif (fromUser) {\n\t\t\ttry {\n\t\t\t\tconst { rid } = await createDirectMessage([adminUser.username], fromId);\n\n\t\t\t\tawait Promise.all(\n\t\t\t\t\t(await getData<Partial<IMessage>>(msgs, adminUser)).map((msg) => executeSendMessage(fromId, Object.assign({ rid }, msg))),\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tSystemLogger.error(error);\n\t\t\t}\n\t\t}\n\n\t\tconst updates = await Promise.all(\n\t\t\t(await getData<Banner>(banners, adminUser)).map((banner) => Users.addBannerById(adminUser._id, banner)),\n\t\t);\n\n\t\tconst hasUpdated = updates.some(({ modifiedCount }) => modifiedCount > 0);\n\t\tif (hasUpdated) {\n\t\t\tnotifyAdmins.push(adminUser._id);\n\t\t}\n\t}\n\n\tif (notifyAdmins.length === 0) {\n\t\treturn;\n\t}\n\n\tvoid notifyOnUserChangeAsync(async () => {\n\t\tconst results = await Users.findByIds<Pick<IUser, '_id' | 'banners'>>(notifyAdmins, { projection: { banners: 1 } }).toArray();\n\n\t\treturn results.map(({ _id, banners }) => ({\n\t\t\tid: _id,\n\t\t\tclientAction: 'updated',\n\t\t\tdiff: {\n\t\t\t\tbanners,\n\t\t\t},\n\t\t}));\n\t});\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      sendMessagesToAdmins: () => sendMessagesToAdmins\n    });\n    let Roles, Users;\n    module.link(\"@rocket.chat/models\", {\n      Roles(v) {\n        Roles = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let notifyOnUserChangeAsync;\n    module.link(\"../../app/lib/server/lib/notifyListener\", {\n      notifyOnUserChangeAsync(v) {\n        notifyOnUserChangeAsync = v;\n      }\n    }, 1);\n    let executeSendMessage;\n    module.link(\"../../app/lib/server/methods/sendMessage\", {\n      executeSendMessage(v) {\n        executeSendMessage = v;\n      }\n    }, 2);\n    let createDirectMessage;\n    module.link(\"../methods/createDirectMessage\", {\n      createDirectMessage(v) {\n        createDirectMessage = v;\n      }\n    }, 3);\n    let SystemLogger;\n    module.link(\"./logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const getData = async (param, adminUser) => {\n      const result = typeof param === 'function' ? await param({\n        adminUser\n      }) : param;\n      if (!Array.isArray(result)) {\n        return [result];\n      }\n      return result;\n    };\n    async function sendMessagesToAdmins(_ref) {\n      let {\n        fromId = 'rocket.cat',\n        checkFrom = true,\n        msgs = [],\n        banners = []\n      } = _ref;\n      const fromUser = checkFrom ? await Users.findOneById(fromId, {\n        projection: {\n          _id: 1\n        }\n      }) : true;\n      const users = await (await Roles.findUsersInRole('admin')).toArray();\n      const notifyAdmins = [];\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(users), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const adminUser = _step.value;\n          {\n            if (fromUser) {\n              try {\n                const {\n                  rid\n                } = await createDirectMessage([adminUser.username], fromId);\n                await Promise.all((await getData(msgs, adminUser)).map(msg => executeSendMessage(fromId, Object.assign({\n                  rid\n                }, msg))));\n              } catch (error) {\n                SystemLogger.error(error);\n              }\n            }\n            const updates = await Promise.all((await getData(banners, adminUser)).map(banner => Users.addBannerById(adminUser._id, banner)));\n            const hasUpdated = updates.some(_ref2 => {\n              let {\n                modifiedCount\n              } = _ref2;\n              return modifiedCount > 0;\n            });\n            if (hasUpdated) {\n              notifyAdmins.push(adminUser._id);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      if (notifyAdmins.length === 0) {\n        return;\n      }\n      void notifyOnUserChangeAsync(async () => {\n        const results = await Users.findByIds(notifyAdmins, {\n          projection: {\n            banners: 1\n          }\n        }).toArray();\n        return results.map(_ref3 => {\n          let {\n            _id,\n            banners\n          } = _ref3;\n          return {\n            id: _id,\n            clientAction: 'updated',\n            diff: {\n              banners\n            }\n          };\n        });\n      });\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","sendMessagesToAdmins","Roles","Users","notifyOnUserChangeAsync","executeSendMessage","createDirectMessage","SystemLogger","__reifyWaitForDeps__","getData","param","adminUser","result","Array","isArray","_ref","fromId","checkFrom","msgs","banners","fromUser","findOneById","projection","_id","users","findUsersInRole","toArray","notifyAdmins","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","rid","username","Promise","all","map","msg","Object","assign","error","updates","banner","addBannerById","hasUpdated","some","_ref2","modifiedCount","push","err","return","length","results","findByIds","_ref3","id","clientAction","diff","__reify_async_result__","_reifyError","self","async"],"sources":["server/lib/sendMessagesToAdmins.ts"],"sourcesContent":["import type { IUser, IMessage } from '@rocket.chat/core-typings';\nimport { Roles, Users } from '@rocket.chat/models';\n\nimport { notifyOnUserChangeAsync } from '../../app/lib/server/lib/notifyListener';\nimport { executeSendMessage } from '../../app/lib/server/methods/sendMessage';\nimport { createDirectMessage } from '../methods/createDirectMessage';\nimport { SystemLogger } from './logger/system';\n\ntype Banner = {\n\tid: string;\n\tpriority: number;\n\ttitle: string;\n\ttext: string;\n\ttextArguments?: string[];\n\tmodifiers: string[];\n\tlink: string;\n};\n\nconst getData = async <T>(param: T[] | ((params: { adminUser: IUser }) => Promise<T[] | T>), adminUser: IUser): Promise<T[]> => {\n\tconst result = typeof param === 'function' ? await param({ adminUser }) : param;\n\n\tif (!Array.isArray(result)) {\n\t\treturn [result];\n\t}\n\n\treturn result;\n};\n\nexport async function sendMessagesToAdmins({\n\tfromId = 'rocket.cat',\n\tcheckFrom = true,\n\tmsgs = [],\n\tbanners = [],\n}: {\n\tfromId?: string;\n\tcheckFrom?: boolean;\n\tmsgs?: Partial<IMessage>[] | ((params: { adminUser: IUser }) => Promise<Partial<IMessage>[] | Partial<IMessage>>);\n\tbanners?: Banner[] | ((params: { adminUser: IUser }) => Promise<Banner[]>);\n}): Promise<void> {\n\tconst fromUser = checkFrom ? await Users.findOneById(fromId, { projection: { _id: 1 } }) : true;\n\n\tconst users = await (await Roles.findUsersInRole('admin')).toArray();\n\n\tconst notifyAdmins: string[] = [];\n\n\tfor await (const adminUser of users) {\n\t\tif (fromUser) {\n\t\t\ttry {\n\t\t\t\tconst { rid } = await createDirectMessage([adminUser.username], fromId);\n\n\t\t\t\tawait Promise.all(\n\t\t\t\t\t(await getData<Partial<IMessage>>(msgs, adminUser)).map((msg) => executeSendMessage(fromId, Object.assign({ rid }, msg))),\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tSystemLogger.error(error);\n\t\t\t}\n\t\t}\n\n\t\tconst updates = await Promise.all(\n\t\t\t(await getData<Banner>(banners, adminUser)).map((banner) => Users.addBannerById(adminUser._id, banner)),\n\t\t);\n\n\t\tconst hasUpdated = updates.some(({ modifiedCount }) => modifiedCount > 0);\n\t\tif (hasUpdated) {\n\t\t\tnotifyAdmins.push(adminUser._id);\n\t\t}\n\t}\n\n\tif (notifyAdmins.length === 0) {\n\t\treturn;\n\t}\n\n\tvoid notifyOnUserChangeAsync(async () => {\n\t\tconst results = await Users.findByIds<Pick<IUser, '_id' | 'banners'>>(notifyAdmins, { projection: { banners: 1 } }).toArray();\n\n\t\treturn results.map(({ _id, banners }) => ({\n\t\t\tid: _id,\n\t\t\tclientAction: 'updated',\n\t\t\tdiff: {\n\t\t\t\tbanners,\n\t\t\t},\n\t\t}));\n\t});\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"75b27d26c45cc103c66022129e3e90ba3b98ab89"}
