{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","sourceRoot":"","sources":["app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IRoom, IUser, RoomType } from '@rocket.chat/core-typings';\nimport { Rooms, Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isObject } from '../../../../lib/utils/isObject';\nimport { createDirectMessage } from '../../../../server/methods/createDirectMessage';\nimport { addUserToRoom } from './addUserToRoom';\n\nexport const getRoomByNameOrIdWithOptionToJoin = async ({\n\tuser,\n\tnameOrId = '',\n\ttype,\n\ttryDirectByUserIdOnly = false,\n\tjoinChannel = true,\n\terrorOnEmpty = true,\n}: {\n\tuser: Pick<IUser, '_id' | 'username'>;\n\tnameOrId: string;\n\ttype?: RoomType;\n\ttryDirectByUserIdOnly?: boolean;\n\tjoinChannel?: boolean;\n\terrorOnEmpty?: boolean;\n}): Promise<IRoom | null> => {\n\tlet room: IRoom | null;\n\n\t// If the nameOrId starts with #, then let's try to find a channel or group\n\tif (nameOrId.startsWith('#')) {\n\t\tnameOrId = nameOrId.substring(1);\n\t\troom = await Rooms.findOneByIdOrName(nameOrId);\n\t} else if (nameOrId.startsWith('@') || type === 'd') {\n\t\t// If the nameOrId starts with @ OR type is 'd', then let's try just a direct message\n\t\tnameOrId = nameOrId.replace('@', '');\n\n\t\tlet roomUser;\n\t\tif (tryDirectByUserIdOnly) {\n\t\t\troomUser = await Users.findOneById(nameOrId);\n\t\t} else {\n\t\t\troomUser = await Users.findOne({\n\t\t\t\t$or: [{ _id: nameOrId }, { username: nameOrId }],\n\t\t\t});\n\t\t}\n\n\t\troom = isObject(roomUser)\n\t\t\t? await Rooms.findOneDirectRoomContainingAllUserIDs([...new Set([user._id, roomUser._id])])\n\t\t\t: await Rooms.findOneById(nameOrId);\n\n\t\t// If the room hasn't been found yet, let's try some more\n\t\tif (!isObject(room)) {\n\t\t\t// If the roomUser wasn't found, then there's no destination to point towards\n\t\t\t// so return out based upon errorOnEmpty\n\t\t\tif (!isObject(roomUser)) {\n\t\t\t\tif (errorOnEmpty) {\n\t\t\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { rid } = await createDirectMessage([roomUser.username], user._id);\n\n\t\t\treturn Rooms.findOneById(rid);\n\t\t}\n\t} else {\n\t\t// Otherwise, we'll treat this as a channel or group.\n\t\troom = await Rooms.findOneByIdOrName(nameOrId);\n\t}\n\n\t// If no room was found, handle the room return based upon errorOnEmpty\n\tif (!room && errorOnEmpty) {\n\t\tthrow new Meteor.Error('invalid-channel');\n\t}\n\n\tif (room === null) {\n\t\treturn null;\n\t}\n\n\t// If a room was found and they provided a type to search, then check\n\t// and if the type found isn't what we're looking for then handle\n\t// the return based upon errorOnEmpty\n\tif (type && room.t !== type) {\n\t\tif (errorOnEmpty) {\n\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// If the room type is channel and joinChannel has been passed, try to join them\n\t// if they can't join the room, this will error out!\n\tif (room.t === 'c' && joinChannel) {\n\t\tawait addUserToRoom(room._id, user);\n\t}\n\n\treturn room;\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts","sourceRoot":"","sources":["app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IRoom, IUser, RoomType } from '@rocket.chat/core-typings';\nimport { Rooms, Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isObject } from '../../../../lib/utils/isObject';\nimport { createDirectMessage } from '../../../../server/methods/createDirectMessage';\nimport { addUserToRoom } from './addUserToRoom';\n\nexport const getRoomByNameOrIdWithOptionToJoin = async ({\n\tuser,\n\tnameOrId = '',\n\ttype,\n\ttryDirectByUserIdOnly = false,\n\tjoinChannel = true,\n\terrorOnEmpty = true,\n}: {\n\tuser: Pick<IUser, '_id' | 'username'>;\n\tnameOrId: string;\n\ttype?: RoomType;\n\ttryDirectByUserIdOnly?: boolean;\n\tjoinChannel?: boolean;\n\terrorOnEmpty?: boolean;\n}): Promise<IRoom | null> => {\n\tlet room: IRoom | null;\n\n\t// If the nameOrId starts with #, then let's try to find a channel or group\n\tif (nameOrId.startsWith('#')) {\n\t\tnameOrId = nameOrId.substring(1);\n\t\troom = await Rooms.findOneByIdOrName(nameOrId);\n\t} else if (nameOrId.startsWith('@') || type === 'd') {\n\t\t// If the nameOrId starts with @ OR type is 'd', then let's try just a direct message\n\t\tnameOrId = nameOrId.replace('@', '');\n\n\t\tlet roomUser;\n\t\tif (tryDirectByUserIdOnly) {\n\t\t\troomUser = await Users.findOneById(nameOrId);\n\t\t} else {\n\t\t\troomUser = await Users.findOne({\n\t\t\t\t$or: [{ _id: nameOrId }, { username: nameOrId }],\n\t\t\t});\n\t\t}\n\n\t\troom = isObject(roomUser)\n\t\t\t? await Rooms.findOneDirectRoomContainingAllUserIDs([...new Set([user._id, roomUser._id])])\n\t\t\t: await Rooms.findOneById(nameOrId);\n\n\t\t// If the room hasn't been found yet, let's try some more\n\t\tif (!isObject(room)) {\n\t\t\t// If the roomUser wasn't found, then there's no destination to point towards\n\t\t\t// so return out based upon errorOnEmpty\n\t\t\tif (!isObject(roomUser)) {\n\t\t\t\tif (errorOnEmpty) {\n\t\t\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { rid } = await createDirectMessage([roomUser.username], user._id);\n\n\t\t\treturn Rooms.findOneById(rid);\n\t\t}\n\t} else {\n\t\t// Otherwise, we'll treat this as a channel or group.\n\t\troom = await Rooms.findOneByIdOrName(nameOrId);\n\t}\n\n\t// If no room was found, handle the room return based upon errorOnEmpty\n\tif (!room && errorOnEmpty) {\n\t\tthrow new Meteor.Error('invalid-channel');\n\t}\n\n\tif (room === null) {\n\t\treturn null;\n\t}\n\n\t// If a room was found and they provided a type to search, then check\n\t// and if the type found isn't what we're looking for then handle\n\t// the return based upon errorOnEmpty\n\tif (type && room.t !== type) {\n\t\tif (errorOnEmpty) {\n\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// If the room type is channel and joinChannel has been passed, try to join them\n\t// if they can't join the room, this will error out!\n\tif (room.t === 'c' && joinChannel) {\n\t\tawait addUserToRoom(room._id, user);\n\t}\n\n\treturn room;\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      getRoomByNameOrIdWithOptionToJoin: () => getRoomByNameOrIdWithOptionToJoin\n    });\n    let Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 1);\n    let isObject;\n    module.link(\"../../../../lib/utils/isObject\", {\n      isObject(v) {\n        isObject = v;\n      }\n    }, 2);\n    let createDirectMessage;\n    module.link(\"../../../../server/methods/createDirectMessage\", {\n      createDirectMessage(v) {\n        createDirectMessage = v;\n      }\n    }, 3);\n    let addUserToRoom;\n    module.link(\"./addUserToRoom\", {\n      addUserToRoom(v) {\n        addUserToRoom = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const getRoomByNameOrIdWithOptionToJoin = async _ref => {\n      let {\n        user,\n        nameOrId = '',\n        type,\n        tryDirectByUserIdOnly = false,\n        joinChannel = true,\n        errorOnEmpty = true\n      } = _ref;\n      let room;\n      // If the nameOrId starts with #, then let's try to find a channel or group\n      if (nameOrId.startsWith('#')) {\n        nameOrId = nameOrId.substring(1);\n        room = await Rooms.findOneByIdOrName(nameOrId);\n      } else if (nameOrId.startsWith('@') || type === 'd') {\n        // If the nameOrId starts with @ OR type is 'd', then let's try just a direct message\n        nameOrId = nameOrId.replace('@', '');\n        let roomUser;\n        if (tryDirectByUserIdOnly) {\n          roomUser = await Users.findOneById(nameOrId);\n        } else {\n          roomUser = await Users.findOne({\n            $or: [{\n              _id: nameOrId\n            }, {\n              username: nameOrId\n            }]\n          });\n        }\n        room = isObject(roomUser) ? await Rooms.findOneDirectRoomContainingAllUserIDs([...new Set([user._id, roomUser._id])]) : await Rooms.findOneById(nameOrId);\n        // If the room hasn't been found yet, let's try some more\n        if (!isObject(room)) {\n          // If the roomUser wasn't found, then there's no destination to point towards\n          // so return out based upon errorOnEmpty\n          if (!isObject(roomUser)) {\n            if (errorOnEmpty) {\n              throw new Meteor.Error('invalid-channel');\n            } else {\n              return null;\n            }\n          }\n          const {\n            rid\n          } = await createDirectMessage([roomUser.username], user._id);\n          return Rooms.findOneById(rid);\n        }\n      } else {\n        // Otherwise, we'll treat this as a channel or group.\n        room = await Rooms.findOneByIdOrName(nameOrId);\n      }\n      // If no room was found, handle the room return based upon errorOnEmpty\n      if (!room && errorOnEmpty) {\n        throw new Meteor.Error('invalid-channel');\n      }\n      if (room === null) {\n        return null;\n      }\n      // If a room was found and they provided a type to search, then check\n      // and if the type found isn't what we're looking for then handle\n      // the return based upon errorOnEmpty\n      if (type && room.t !== type) {\n        if (errorOnEmpty) {\n          throw new Meteor.Error('invalid-channel');\n        } else {\n          return null;\n        }\n      }\n      // If the room type is channel and joinChannel has been passed, try to join them\n      // if they can't join the room, this will error out!\n      if (room.t === 'c' && joinChannel) {\n        await addUserToRoom(room._id, user);\n      }\n      return room;\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","getRoomByNameOrIdWithOptionToJoin","Rooms","Users","link","v","Meteor","isObject","createDirectMessage","addUserToRoom","__reifyWaitForDeps__","_ref","user","nameOrId","type","tryDirectByUserIdOnly","joinChannel","errorOnEmpty","room","startsWith","substring","findOneByIdOrName","replace","roomUser","findOneById","findOne","$or","_id","username","findOneDirectRoomContainingAllUserIDs","Set","Error","rid","t","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/functions/getRoomByNameOrIdWithOptionToJoin.ts"],"sourcesContent":["import type { IRoom, IUser, RoomType } from '@rocket.chat/core-typings';\nimport { Rooms, Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isObject } from '../../../../lib/utils/isObject';\nimport { createDirectMessage } from '../../../../server/methods/createDirectMessage';\nimport { addUserToRoom } from './addUserToRoom';\n\nexport const getRoomByNameOrIdWithOptionToJoin = async ({\n\tuser,\n\tnameOrId = '',\n\ttype,\n\ttryDirectByUserIdOnly = false,\n\tjoinChannel = true,\n\terrorOnEmpty = true,\n}: {\n\tuser: Pick<IUser, '_id' | 'username'>;\n\tnameOrId: string;\n\ttype?: RoomType;\n\ttryDirectByUserIdOnly?: boolean;\n\tjoinChannel?: boolean;\n\terrorOnEmpty?: boolean;\n}): Promise<IRoom | null> => {\n\tlet room: IRoom | null;\n\n\t// If the nameOrId starts with #, then let's try to find a channel or group\n\tif (nameOrId.startsWith('#')) {\n\t\tnameOrId = nameOrId.substring(1);\n\t\troom = await Rooms.findOneByIdOrName(nameOrId);\n\t} else if (nameOrId.startsWith('@') || type === 'd') {\n\t\t// If the nameOrId starts with @ OR type is 'd', then let's try just a direct message\n\t\tnameOrId = nameOrId.replace('@', '');\n\n\t\tlet roomUser;\n\t\tif (tryDirectByUserIdOnly) {\n\t\t\troomUser = await Users.findOneById(nameOrId);\n\t\t} else {\n\t\t\troomUser = await Users.findOne({\n\t\t\t\t$or: [{ _id: nameOrId }, { username: nameOrId }],\n\t\t\t});\n\t\t}\n\n\t\troom = isObject(roomUser)\n\t\t\t? await Rooms.findOneDirectRoomContainingAllUserIDs([...new Set([user._id, roomUser._id])])\n\t\t\t: await Rooms.findOneById(nameOrId);\n\n\t\t// If the room hasn't been found yet, let's try some more\n\t\tif (!isObject(room)) {\n\t\t\t// If the roomUser wasn't found, then there's no destination to point towards\n\t\t\t// so return out based upon errorOnEmpty\n\t\t\tif (!isObject(roomUser)) {\n\t\t\t\tif (errorOnEmpty) {\n\t\t\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { rid } = await createDirectMessage([roomUser.username], user._id);\n\n\t\t\treturn Rooms.findOneById(rid);\n\t\t}\n\t} else {\n\t\t// Otherwise, we'll treat this as a channel or group.\n\t\troom = await Rooms.findOneByIdOrName(nameOrId);\n\t}\n\n\t// If no room was found, handle the room return based upon errorOnEmpty\n\tif (!room && errorOnEmpty) {\n\t\tthrow new Meteor.Error('invalid-channel');\n\t}\n\n\tif (room === null) {\n\t\treturn null;\n\t}\n\n\t// If a room was found and they provided a type to search, then check\n\t// and if the type found isn't what we're looking for then handle\n\t// the return based upon errorOnEmpty\n\tif (type && room.t !== type) {\n\t\tif (errorOnEmpty) {\n\t\t\tthrow new Meteor.Error('invalid-channel');\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// If the room type is channel and joinChannel has been passed, try to join them\n\t// if they can't join the room, this will error out!\n\tif (room.t === 'c' && joinChannel) {\n\t\tawait addUserToRoom(room._id, user);\n\t}\n\n\treturn room;\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"13fd5e842e493225e46fbd86ed9a9bb8fd532962"}
