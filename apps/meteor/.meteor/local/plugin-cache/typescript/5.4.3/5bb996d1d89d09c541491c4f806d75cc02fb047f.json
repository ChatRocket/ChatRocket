{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/ecdh/Session.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"app/ecdh/Session.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/ecdh/Session.ts","inputSourceMap":{"version":3,"file":"app/ecdh/Session.ts","sourceRoot":"","sources":["app/ecdh/Session.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAE1D,IAAI,MAAkB,CAAC;AAEvB,MAAM,OAAO,OAAO;IACnB,6DAA6D;IAC1C,eAAe,GAAmB,QAAQ,CAAC;IAE9D,6EAA6E;IAC1D,yBAAyB,GAAmB,QAAQ,CAAC;IAExE,uDAAuD;IACpC,mBAAmB,GAAmB,QAAQ,CAAC;IAExD,UAAU,CAAkB;IAE5B,UAAU,CAAkB;IAE5B,SAAS,CAAkB;IAE9B,SAAS,CAAkB;IAElC,KAAK,CAAC,MAAM;QACX,OAAO,MAAM,IAAI,UAAU,CAAC,IAAI,EAAE,CAAC;IACpC,CAAC;IAED,IAAI,eAAe;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACtD,CAAC;IAED,mBAAmB,CAAC,IAAY;QAC/B,OAAO,IAAI,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,SAA0B;QAC/C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAE/C,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAEpI,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,SAA0B;QACvC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QACrD,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,IAAqB;QAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAE3G,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAE7G,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAClC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAChD,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;IAC1B,CAAC;CACD","sourcesContent":["import type { X25519SecretKey, CryptographyKey } from 'sodium-plus';\nimport { SodiumPlus, X25519PublicKey } from 'sodium-plus';\n\nlet sodium: SodiumPlus;\n\nexport class Session {\n\t// Encoding for the key exchange, no requirements to be small\n\tprotected readonly stringFormatKey: BufferEncoding = 'base64';\n\n\t// Encoding for the transfer of encrypted data, should be smaller as possible\n\tprotected readonly stringFormatEncryptedData: BufferEncoding = 'base64';\n\n\t// Encoding before the encryption to keep unicode chars\n\tprotected readonly stringFormatRawData: BufferEncoding = 'base64';\n\n\tprotected decryptKey: CryptographyKey;\n\n\tprotected encryptKey: CryptographyKey;\n\n\tprotected secretKey: X25519SecretKey;\n\n\tpublic publicKey: X25519PublicKey;\n\n\tasync sodium(): Promise<SodiumPlus> {\n\t\treturn sodium || SodiumPlus.auto();\n\t}\n\n\tget publicKeyString(): string {\n\t\treturn this.publicKey.toString(this.stringFormatKey);\n\t}\n\n\tpublicKeyFromString(text: string): X25519PublicKey {\n\t\treturn new X25519PublicKey(Buffer.from(text, this.stringFormatKey));\n\t}\n\n\tasync encryptToBuffer(plaintext: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst nonce = await sodium.randombytes_buf(24);\n\n\t\tconst ciphertext = await sodium.crypto_secretbox(Buffer.from(plaintext).toString(this.stringFormatRawData), nonce, this.encryptKey);\n\n\t\treturn Buffer.concat([nonce, ciphertext]);\n\t}\n\n\tasync encrypt(plaintext: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.encryptToBuffer(plaintext);\n\t\treturn buffer.toString(this.stringFormatEncryptedData);\n\t}\n\n\tasync decryptToBuffer(data: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst buffer = Buffer.from(Buffer.isBuffer(data) ? data.toString() : data, this.stringFormatEncryptedData);\n\n\t\tconst decrypted = await sodium.crypto_secretbox_open(buffer.slice(24), buffer.slice(0, 24), this.decryptKey);\n\n\t\treturn Buffer.from(decrypted.toString(), this.stringFormatRawData);\n\t}\n\n\tasync decrypt(data: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.decryptToBuffer(data);\n\t\treturn buffer.toString();\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/ecdh/Session.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/ecdh/Session.ts","inputSourceMap":{"version":3,"file":"app/ecdh/Session.ts","sourceRoot":"","sources":["app/ecdh/Session.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAE1D,IAAI,MAAkB,CAAC;AAEvB,MAAM,OAAO,OAAO;IACnB,6DAA6D;IAC1C,eAAe,GAAmB,QAAQ,CAAC;IAE9D,6EAA6E;IAC1D,yBAAyB,GAAmB,QAAQ,CAAC;IAExE,uDAAuD;IACpC,mBAAmB,GAAmB,QAAQ,CAAC;IAExD,UAAU,CAAkB;IAE5B,UAAU,CAAkB;IAE5B,SAAS,CAAkB;IAE9B,SAAS,CAAkB;IAElC,KAAK,CAAC,MAAM;QACX,OAAO,MAAM,IAAI,UAAU,CAAC,IAAI,EAAE,CAAC;IACpC,CAAC;IAED,IAAI,eAAe;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACtD,CAAC;IAED,mBAAmB,CAAC,IAAY;QAC/B,OAAO,IAAI,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,SAA0B;QAC/C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAE/C,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAEpI,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,SAA0B;QACvC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QACrD,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,IAAqB;QAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAE3G,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAE7G,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAClC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAChD,OAAO,MAAM,CAAC,QAAQ,EAAE,CAAC;IAC1B,CAAC;CACD","sourcesContent":["import type { X25519SecretKey, CryptographyKey } from 'sodium-plus';\nimport { SodiumPlus, X25519PublicKey } from 'sodium-plus';\n\nlet sodium: SodiumPlus;\n\nexport class Session {\n\t// Encoding for the key exchange, no requirements to be small\n\tprotected readonly stringFormatKey: BufferEncoding = 'base64';\n\n\t// Encoding for the transfer of encrypted data, should be smaller as possible\n\tprotected readonly stringFormatEncryptedData: BufferEncoding = 'base64';\n\n\t// Encoding before the encryption to keep unicode chars\n\tprotected readonly stringFormatRawData: BufferEncoding = 'base64';\n\n\tprotected decryptKey: CryptographyKey;\n\n\tprotected encryptKey: CryptographyKey;\n\n\tprotected secretKey: X25519SecretKey;\n\n\tpublic publicKey: X25519PublicKey;\n\n\tasync sodium(): Promise<SodiumPlus> {\n\t\treturn sodium || SodiumPlus.auto();\n\t}\n\n\tget publicKeyString(): string {\n\t\treturn this.publicKey.toString(this.stringFormatKey);\n\t}\n\n\tpublicKeyFromString(text: string): X25519PublicKey {\n\t\treturn new X25519PublicKey(Buffer.from(text, this.stringFormatKey));\n\t}\n\n\tasync encryptToBuffer(plaintext: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst nonce = await sodium.randombytes_buf(24);\n\n\t\tconst ciphertext = await sodium.crypto_secretbox(Buffer.from(plaintext).toString(this.stringFormatRawData), nonce, this.encryptKey);\n\n\t\treturn Buffer.concat([nonce, ciphertext]);\n\t}\n\n\tasync encrypt(plaintext: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.encryptToBuffer(plaintext);\n\t\treturn buffer.toString(this.stringFormatEncryptedData);\n\t}\n\n\tasync decryptToBuffer(data: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst buffer = Buffer.from(Buffer.isBuffer(data) ? data.toString() : data, this.stringFormatEncryptedData);\n\n\t\tconst decrypted = await sodium.crypto_secretbox_open(buffer.slice(24), buffer.slice(0, 24), this.decryptKey);\n\n\t\treturn Buffer.from(decrypted.toString(), this.stringFormatRawData);\n\t}\n\n\tasync decrypt(data: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.decryptToBuffer(data);\n\t\treturn buffer.toString();\n\t}\n}\n"]}}},"code":"var _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\nvar _createClass;\nmodule.link(\"@babel/runtime/helpers/createClass\", {\n  default: function (v) {\n    _createClass = v;\n  }\n}, 1);\nmodule.export({\n  Session: function () {\n    return Session;\n  }\n});\nvar SodiumPlus, X25519PublicKey;\nmodule.link(\"sodium-plus\", {\n  SodiumPlus: function (v) {\n    SodiumPlus = v;\n  },\n  X25519PublicKey: function (v) {\n    X25519PublicKey = v;\n  }\n}, 0);\nvar _sodium;\nvar Session = /*#__PURE__*/function () {\n  function Session() {\n    // Encoding for the key exchange, no requirements to be small\n    this.stringFormatKey = 'base64';\n    // Encoding for the transfer of encrypted data, should be smaller as possible\n    this.stringFormatEncryptedData = 'base64';\n    // Encoding before the encryption to keep unicode chars\n    this.stringFormatRawData = 'base64';\n    this.decryptKey = void 0;\n    this.encryptKey = void 0;\n    this.secretKey = void 0;\n    this.publicKey = void 0;\n  }\n  var _proto = Session.prototype;\n  _proto.sodium = function () {\n    function sodium() {\n      return _regeneratorRuntime.async(function () {\n        function sodium$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", _sodium || SodiumPlus.auto());\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n        return sodium$;\n      }(), null, null, null, Promise);\n    }\n    return sodium;\n  }();\n  _proto.publicKeyFromString = function () {\n    function publicKeyFromString(text) {\n      return new X25519PublicKey(Buffer.from(text, this.stringFormatKey));\n    }\n    return publicKeyFromString;\n  }();\n  _proto.encryptToBuffer = function () {\n    function encryptToBuffer(plaintext) {\n      var sodium, nonce, ciphertext;\n      return _regeneratorRuntime.async(function () {\n        function encryptToBuffer$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.sodium());\n            case 2:\n              sodium = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(sodium.randombytes_buf(24));\n            case 5:\n              nonce = _context2.sent;\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(sodium.crypto_secretbox(Buffer.from(plaintext).toString(this.stringFormatRawData), nonce, this.encryptKey));\n            case 8:\n              ciphertext = _context2.sent;\n              return _context2.abrupt(\"return\", Buffer.concat([nonce, ciphertext]));\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n        return encryptToBuffer$;\n      }(), null, this, null, Promise);\n    }\n    return encryptToBuffer;\n  }();\n  _proto.encrypt = function () {\n    function encrypt(plaintext) {\n      var buffer;\n      return _regeneratorRuntime.async(function () {\n        function encrypt$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.encryptToBuffer(plaintext));\n            case 2:\n              buffer = _context3.sent;\n              return _context3.abrupt(\"return\", buffer.toString(this.stringFormatEncryptedData));\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n        return encrypt$;\n      }(), null, this, null, Promise);\n    }\n    return encrypt;\n  }();\n  _proto.decryptToBuffer = function () {\n    function decryptToBuffer(data) {\n      var sodium, buffer, decrypted;\n      return _regeneratorRuntime.async(function () {\n        function decryptToBuffer$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(this.sodium());\n            case 2:\n              sodium = _context4.sent;\n              buffer = Buffer.from(Buffer.isBuffer(data) ? data.toString() : data, this.stringFormatEncryptedData);\n              _context4.next = 6;\n              return _regeneratorRuntime.awrap(sodium.crypto_secretbox_open(buffer.slice(24), buffer.slice(0, 24), this.decryptKey));\n            case 6:\n              decrypted = _context4.sent;\n              return _context4.abrupt(\"return\", Buffer.from(decrypted.toString(), this.stringFormatRawData));\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n        return decryptToBuffer$;\n      }(), null, this, null, Promise);\n    }\n    return decryptToBuffer;\n  }();\n  _proto.decrypt = function () {\n    function decrypt(data) {\n      var buffer;\n      return _regeneratorRuntime.async(function () {\n        function decrypt$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(this.decryptToBuffer(data));\n            case 2:\n              buffer = _context5.sent;\n              return _context5.abrupt(\"return\", buffer.toString());\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n        return decrypt$;\n      }(), null, this, null, Promise);\n    }\n    return decrypt;\n  }();\n  return _createClass(Session, [{\n    key: \"publicKeyString\",\n    get: function () {\n      return this.publicKey.toString(this.stringFormatKey);\n    }\n  }]);\n}();","map":{"version":3,"names":["_regeneratorRuntime","module","link","default","v","_createClass","export","Session","SodiumPlus","X25519PublicKey","sodium","stringFormatKey","stringFormatEncryptedData","stringFormatRawData","decryptKey","encryptKey","secretKey","publicKey","_proto","prototype","async","sodium$","_context","prev","next","abrupt","auto","stop","Promise","publicKeyFromString","text","Buffer","from","encryptToBuffer","plaintext","nonce","ciphertext","encryptToBuffer$","_context2","awrap","sent","randombytes_buf","crypto_secretbox","toString","concat","encrypt","buffer","encrypt$","_context3","decryptToBuffer","data","decrypted","decryptToBuffer$","_context4","isBuffer","crypto_secretbox_open","slice","decrypt","decrypt$","_context5","key","get"],"sources":["app/ecdh/Session.ts"],"sourcesContent":["import type { X25519SecretKey, CryptographyKey } from 'sodium-plus';\nimport { SodiumPlus, X25519PublicKey } from 'sodium-plus';\n\nlet sodium: SodiumPlus;\n\nexport class Session {\n\t// Encoding for the key exchange, no requirements to be small\n\tprotected readonly stringFormatKey: BufferEncoding = 'base64';\n\n\t// Encoding for the transfer of encrypted data, should be smaller as possible\n\tprotected readonly stringFormatEncryptedData: BufferEncoding = 'base64';\n\n\t// Encoding before the encryption to keep unicode chars\n\tprotected readonly stringFormatRawData: BufferEncoding = 'base64';\n\n\tprotected decryptKey: CryptographyKey;\n\n\tprotected encryptKey: CryptographyKey;\n\n\tprotected secretKey: X25519SecretKey;\n\n\tpublic publicKey: X25519PublicKey;\n\n\tasync sodium(): Promise<SodiumPlus> {\n\t\treturn sodium || SodiumPlus.auto();\n\t}\n\n\tget publicKeyString(): string {\n\t\treturn this.publicKey.toString(this.stringFormatKey);\n\t}\n\n\tpublicKeyFromString(text: string): X25519PublicKey {\n\t\treturn new X25519PublicKey(Buffer.from(text, this.stringFormatKey));\n\t}\n\n\tasync encryptToBuffer(plaintext: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst nonce = await sodium.randombytes_buf(24);\n\n\t\tconst ciphertext = await sodium.crypto_secretbox(Buffer.from(plaintext).toString(this.stringFormatRawData), nonce, this.encryptKey);\n\n\t\treturn Buffer.concat([nonce, ciphertext]);\n\t}\n\n\tasync encrypt(plaintext: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.encryptToBuffer(plaintext);\n\t\treturn buffer.toString(this.stringFormatEncryptedData);\n\t}\n\n\tasync decryptToBuffer(data: string | Buffer): Promise<Buffer> {\n\t\tconst sodium = await this.sodium();\n\t\tconst buffer = Buffer.from(Buffer.isBuffer(data) ? data.toString() : data, this.stringFormatEncryptedData);\n\n\t\tconst decrypted = await sodium.crypto_secretbox_open(buffer.slice(24), buffer.slice(0, 24), this.decryptKey);\n\n\t\treturn Buffer.from(decrypted.toString(), this.stringFormatRawData);\n\t}\n\n\tasync decrypt(data: string | Buffer): Promise<string> {\n\t\tconst buffer = await this.decryptToBuffer(data);\n\t\treturn buffer.toString();\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"5bb996d1d89d09c541491c4f806d75cc02fb047f"}
