{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/room/contexts/RoomContext.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/views/room/contexts/RoomContext.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/room/contexts/RoomContext.ts","inputSourceMap":{"version":3,"file":"client/views/room/contexts/RoomContext.ts","sourceRoot":"","sources":["client/views/room/contexts/RoomContext.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAC1E,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAelD,MAAM,CAAC,MAAM,WAAW,GAAG,aAAa,CAA0B,IAAI,CAAC,CAAC;AAExE,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAY,EAAE;IAChD,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IACzD,CAAC;IAED,OAAO,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC;AAC/B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,GAAU,EAAE;IAClC,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IACzD,CAAC;IAED,OAAO,OAAO,CAAC,IAAI,CAAC;AACrB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAA8B,EAAE;IAClE,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACrE,CAAC;IAED,OAAO,OAAO,CAAC,YAAY,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,GAI7B,EAAE;IACH,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;IACjE,CAAC;IAED,OAAO;QACN,uBAAuB,EAAE,OAAO,CAAC,uBAAuB;QACxD,mBAAmB,EAAE,OAAO,CAAC,mBAAmB;QAChD,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;KACpD,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAqB,EAAE;IACxD,oGAAoG;IACpG,0DAA0D;IAC1D,6FAA6F;IAC7F,qEAAqE;IAErE,MAAM,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAE/C,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IACzD,CAAC;IAED,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACtC,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,GAAc,EAAE;IAC1C,MAAM,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAE/C,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IACzD,CAAC;IAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;QACvB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACtC,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC,CAAC","sourcesContent":["import type { IRoom, IOmnichannelRoom, IVoipRoom, ISubscription } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom, isVoipRoom } from '@rocket.chat/core-typings';\nimport { createContext, useContext } from 'react';\n\nexport interface IRoomWithFederationOriginalName extends IRoom {\n\tfederationOriginalName?: string;\n}\n\ntype RoomContextValue = {\n\trid: IRoom['_id'];\n\troom: IRoomWithFederationOriginalName;\n\tsubscription?: ISubscription;\n\thasMorePreviousMessages: boolean;\n\thasMoreNextMessages: boolean;\n\tisLoadingMoreMessages: boolean;\n};\n\nexport const RoomContext = createContext<RoomContextValue | null>(null);\n\nexport const useUserIsSubscribed = (): boolean => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\treturn !!context.subscription;\n};\n\nexport const useRoom = (): IRoom => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\treturn context.room;\n};\n\nexport const useRoomSubscription = (): ISubscription | undefined => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoomSubscription only inside opened rooms');\n\t}\n\n\treturn context.subscription;\n};\n\nexport const useRoomMessages = (): {\n\thasMorePreviousMessages: boolean;\n\thasMoreNextMessages: boolean;\n\tisLoadingMoreMessages: boolean;\n} => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoomMessages only inside opened rooms');\n\t}\n\n\treturn {\n\t\thasMorePreviousMessages: context.hasMorePreviousMessages,\n\t\thasMoreNextMessages: context.hasMoreNextMessages,\n\t\tisLoadingMoreMessages: context.isLoadingMoreMessages,\n\t};\n};\n\nexport const useOmnichannelRoom = (): IOmnichannelRoom => {\n\t// TODO: today if the user do not belong in the room, the room object will not update on new changes\n\t// for normal rooms this is OK, but for Omnichannel rooms,\n\t// there are cases where an agent can be outside of the room but need to see the room changes\n\t// A solution would be to use subscribeToRoom to get the room updates\n\n\tconst { room } = useContext(RoomContext) || {};\n\n\tif (!room) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\tif (!isOmnichannelRoom(room)) {\n\t\tthrow new Error('invalid room type');\n\t}\n\n\treturn room;\n};\n\nexport const useVoipRoom = (): IVoipRoom => {\n\tconst { room } = useContext(RoomContext) || {};\n\n\tif (!room) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\tif (!isVoipRoom(room)) {\n\t\tthrow new Error('invalid room type');\n\t}\n\n\treturn room;\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/room/contexts/RoomContext.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/views/room/contexts/RoomContext.ts","inputSourceMap":{"version":3,"file":"client/views/room/contexts/RoomContext.ts","sourceRoot":"","sources":["client/views/room/contexts/RoomContext.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AAC1E,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAelD,MAAM,CAAC,MAAM,WAAW,GAAG,aAAa,CAA0B,IAAI,CAAC,CAAC;AAExE,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAY,EAAE;IAChD,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IACzD,CAAC;IAED,OAAO,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC;AAC/B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,GAAU,EAAE;IAClC,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IACzD,CAAC;IAED,OAAO,OAAO,CAAC,IAAI,CAAC;AACrB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAA8B,EAAE;IAClE,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACrE,CAAC;IAED,OAAO,OAAO,CAAC,YAAY,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,GAI7B,EAAE;IACH,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;IACjE,CAAC;IAED,OAAO;QACN,uBAAuB,EAAE,OAAO,CAAC,uBAAuB;QACxD,mBAAmB,EAAE,OAAO,CAAC,mBAAmB;QAChD,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;KACpD,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAqB,EAAE;IACxD,oGAAoG;IACpG,0DAA0D;IAC1D,6FAA6F;IAC7F,qEAAqE;IAErE,MAAM,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAE/C,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IACzD,CAAC;IAED,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACtC,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,GAAc,EAAE;IAC1C,MAAM,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAE/C,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IACzD,CAAC;IAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;QACvB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACtC,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC,CAAC","sourcesContent":["import type { IRoom, IOmnichannelRoom, IVoipRoom, ISubscription } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom, isVoipRoom } from '@rocket.chat/core-typings';\nimport { createContext, useContext } from 'react';\n\nexport interface IRoomWithFederationOriginalName extends IRoom {\n\tfederationOriginalName?: string;\n}\n\ntype RoomContextValue = {\n\trid: IRoom['_id'];\n\troom: IRoomWithFederationOriginalName;\n\tsubscription?: ISubscription;\n\thasMorePreviousMessages: boolean;\n\thasMoreNextMessages: boolean;\n\tisLoadingMoreMessages: boolean;\n};\n\nexport const RoomContext = createContext<RoomContextValue | null>(null);\n\nexport const useUserIsSubscribed = (): boolean => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\treturn !!context.subscription;\n};\n\nexport const useRoom = (): IRoom => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\treturn context.room;\n};\n\nexport const useRoomSubscription = (): ISubscription | undefined => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoomSubscription only inside opened rooms');\n\t}\n\n\treturn context.subscription;\n};\n\nexport const useRoomMessages = (): {\n\thasMorePreviousMessages: boolean;\n\thasMoreNextMessages: boolean;\n\tisLoadingMoreMessages: boolean;\n} => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoomMessages only inside opened rooms');\n\t}\n\n\treturn {\n\t\thasMorePreviousMessages: context.hasMorePreviousMessages,\n\t\thasMoreNextMessages: context.hasMoreNextMessages,\n\t\tisLoadingMoreMessages: context.isLoadingMoreMessages,\n\t};\n};\n\nexport const useOmnichannelRoom = (): IOmnichannelRoom => {\n\t// TODO: today if the user do not belong in the room, the room object will not update on new changes\n\t// for normal rooms this is OK, but for Omnichannel rooms,\n\t// there are cases where an agent can be outside of the room but need to see the room changes\n\t// A solution would be to use subscribeToRoom to get the room updates\n\n\tconst { room } = useContext(RoomContext) || {};\n\n\tif (!room) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\tif (!isOmnichannelRoom(room)) {\n\t\tthrow new Error('invalid room type');\n\t}\n\n\treturn room;\n};\n\nexport const useVoipRoom = (): IVoipRoom => {\n\tconst { room } = useContext(RoomContext) || {};\n\n\tif (!room) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\tif (!isVoipRoom(room)) {\n\t\tthrow new Error('invalid room type');\n\t}\n\n\treturn room;\n};\n"]}}},"code":"module.export({\n  RoomContext: () => RoomContext,\n  useUserIsSubscribed: () => useUserIsSubscribed,\n  useRoom: () => useRoom,\n  useRoomSubscription: () => useRoomSubscription,\n  useRoomMessages: () => useRoomMessages,\n  useOmnichannelRoom: () => useOmnichannelRoom,\n  useVoipRoom: () => useVoipRoom\n});\nlet isOmnichannelRoom, isVoipRoom;\nmodule.link(\"@rocket.chat/core-typings\", {\n  isOmnichannelRoom(v) {\n    isOmnichannelRoom = v;\n  },\n  isVoipRoom(v) {\n    isVoipRoom = v;\n  }\n}, 0);\nlet createContext, useContext;\nmodule.link(\"react\", {\n  createContext(v) {\n    createContext = v;\n  },\n  useContext(v) {\n    useContext = v;\n  }\n}, 1);\nconst RoomContext = /*#__PURE__*/createContext(null);\nconst useUserIsSubscribed = () => {\n  const context = useContext(RoomContext);\n  if (!context) {\n    throw new Error('use useRoom only inside opened rooms');\n  }\n  return !!context.subscription;\n};\nconst useRoom = () => {\n  const context = useContext(RoomContext);\n  if (!context) {\n    throw new Error('use useRoom only inside opened rooms');\n  }\n  return context.room;\n};\nconst useRoomSubscription = () => {\n  const context = useContext(RoomContext);\n  if (!context) {\n    throw new Error('use useRoomSubscription only inside opened rooms');\n  }\n  return context.subscription;\n};\nconst useRoomMessages = () => {\n  const context = useContext(RoomContext);\n  if (!context) {\n    throw new Error('use useRoomMessages only inside opened rooms');\n  }\n  return {\n    hasMorePreviousMessages: context.hasMorePreviousMessages,\n    hasMoreNextMessages: context.hasMoreNextMessages,\n    isLoadingMoreMessages: context.isLoadingMoreMessages\n  };\n};\nconst useOmnichannelRoom = () => {\n  // TODO: today if the user do not belong in the room, the room object will not update on new changes\n  // for normal rooms this is OK, but for Omnichannel rooms,\n  // there are cases where an agent can be outside of the room but need to see the room changes\n  // A solution would be to use subscribeToRoom to get the room updates\n  const {\n    room\n  } = useContext(RoomContext) || {};\n  if (!room) {\n    throw new Error('use useRoom only inside opened rooms');\n  }\n  if (!isOmnichannelRoom(room)) {\n    throw new Error('invalid room type');\n  }\n  return room;\n};\nconst useVoipRoom = () => {\n  const {\n    room\n  } = useContext(RoomContext) || {};\n  if (!room) {\n    throw new Error('use useRoom only inside opened rooms');\n  }\n  if (!isVoipRoom(room)) {\n    throw new Error('invalid room type');\n  }\n  return room;\n};","map":{"version":3,"names":["module","export","RoomContext","useUserIsSubscribed","useRoom","useRoomSubscription","useRoomMessages","useOmnichannelRoom","useVoipRoom","isOmnichannelRoom","isVoipRoom","link","v","createContext","useContext","context","Error","subscription","room","hasMorePreviousMessages","hasMoreNextMessages","isLoadingMoreMessages"],"sources":["client/views/room/contexts/RoomContext.ts"],"sourcesContent":["import type { IRoom, IOmnichannelRoom, IVoipRoom, ISubscription } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom, isVoipRoom } from '@rocket.chat/core-typings';\nimport { createContext, useContext } from 'react';\n\nexport interface IRoomWithFederationOriginalName extends IRoom {\n\tfederationOriginalName?: string;\n}\n\ntype RoomContextValue = {\n\trid: IRoom['_id'];\n\troom: IRoomWithFederationOriginalName;\n\tsubscription?: ISubscription;\n\thasMorePreviousMessages: boolean;\n\thasMoreNextMessages: boolean;\n\tisLoadingMoreMessages: boolean;\n};\n\nexport const RoomContext = createContext<RoomContextValue | null>(null);\n\nexport const useUserIsSubscribed = (): boolean => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\treturn !!context.subscription;\n};\n\nexport const useRoom = (): IRoom => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\treturn context.room;\n};\n\nexport const useRoomSubscription = (): ISubscription | undefined => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoomSubscription only inside opened rooms');\n\t}\n\n\treturn context.subscription;\n};\n\nexport const useRoomMessages = (): {\n\thasMorePreviousMessages: boolean;\n\thasMoreNextMessages: boolean;\n\tisLoadingMoreMessages: boolean;\n} => {\n\tconst context = useContext(RoomContext);\n\n\tif (!context) {\n\t\tthrow new Error('use useRoomMessages only inside opened rooms');\n\t}\n\n\treturn {\n\t\thasMorePreviousMessages: context.hasMorePreviousMessages,\n\t\thasMoreNextMessages: context.hasMoreNextMessages,\n\t\tisLoadingMoreMessages: context.isLoadingMoreMessages,\n\t};\n};\n\nexport const useOmnichannelRoom = (): IOmnichannelRoom => {\n\t// TODO: today if the user do not belong in the room, the room object will not update on new changes\n\t// for normal rooms this is OK, but for Omnichannel rooms,\n\t// there are cases where an agent can be outside of the room but need to see the room changes\n\t// A solution would be to use subscribeToRoom to get the room updates\n\n\tconst { room } = useContext(RoomContext) || {};\n\n\tif (!room) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\tif (!isOmnichannelRoom(room)) {\n\t\tthrow new Error('invalid room type');\n\t}\n\n\treturn room;\n};\n\nexport const useVoipRoom = (): IVoipRoom => {\n\tconst { room } = useContext(RoomContext) || {};\n\n\tif (!room) {\n\t\tthrow new Error('use useRoom only inside opened rooms');\n\t}\n\n\tif (!isVoipRoom(room)) {\n\t\tthrow new Error('invalid room type');\n\t}\n\n\treturn room;\n};\n"],"mappings":"AACAA,MAAA,CAAOC,MAAE;EAAAC,WAAiB,EAAAA,CAAA,KAAEA,WAAY;EAAAC,mBAAM,EAAAA,CAAA,KAAAA,mBAA4B;EAAAC,OAAA,EAAAA,CAAA,KAAAA,OAAA;EAAAC,mBAAA,EAAAA,CAAA,KAAAA,mBAAA;EAAAC,eAAA,EAAAA,CAAA,KAAAA,eAAA;EAAAC,kBAAA,EAAAA,CAAA,KAAAA,kBAAA;EAAAC,WAAA,EAAAA,CAAA,KAAAA;AAAA;AAAA,IAAAC,iBAAA,EAAAC,UAAA;AAAAV,MAAA,CAAAW,IAAA;EAAAF,kBAAAG,CAAA;IAAAH,iBAAA,GAAAG,CAAA;EAAA;EAAAF,WAAAE,CAAA;IAAAF,UAAA,GAAAE,CAAA;EAAA;AAAA;AAAA,IAAAC,aAAA,EAAAC,UAAA;AAAAd,MAAA,CAAAW,IAAA;EAAAE,cAAAD,CAAA;IAAAC,aAAA,GAAAD,CAAA;EAAA;EAAAE,WAAAF,CAAA;IAAAE,UAAA,GAAAF,CAAA;EAAA;AAAA;AAgBnE,MAAMV,WAAW,gBAAGW,aAAa,CAA0B,IAAI,CAAC;AAEhE,MAAMV,mBAAmB,GAAGA,CAAA,KAAc;EAChD,MAAMY,OAAO,GAAGD,UAAU,CAACZ,WAAW,CAAC;EAEvC,IAAI,CAACa,OAAO,EAAE;IACb,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACxD;EAEA,OAAO,CAAC,CAACD,OAAO,CAACE,YAAY;AAC9B,CAAC;AAEM,MAAMb,OAAO,GAAGA,CAAA,KAAY;EAClC,MAAMW,OAAO,GAAGD,UAAU,CAACZ,WAAW,CAAC;EAEvC,IAAI,CAACa,OAAO,EAAE;IACb,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACxD;EAEA,OAAOD,OAAO,CAACG,IAAI;AACpB,CAAC;AAEM,MAAMb,mBAAmB,GAAGA,CAAA,KAAgC;EAClE,MAAMU,OAAO,GAAGD,UAAU,CAACZ,WAAW,CAAC;EAEvC,IAAI,CAACa,OAAO,EAAE;IACb,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACpE;EAEA,OAAOD,OAAO,CAACE,YAAY;AAC5B,CAAC;AAEM,MAAMX,eAAe,GAAGA,CAAA,KAI3B;EACH,MAAMS,OAAO,GAAGD,UAAU,CAACZ,WAAW,CAAC;EAEvC,IAAI,CAACa,OAAO,EAAE;IACb,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EAChE;EAEA,OAAO;IACNG,uBAAuB,EAAEJ,OAAO,CAACI,uBAAuB;IACxDC,mBAAmB,EAAEL,OAAO,CAACK,mBAAmB;IAChDC,qBAAqB,EAAEN,OAAO,CAACM;GAC/B;AACF,CAAC;AAEM,MAAMd,kBAAkB,GAAGA,CAAA,KAAuB;EACxD;EACA;EACA;EACA;EAEA,MAAM;IAAEW;EAAI,CAAE,GAAGJ,UAAU,CAACZ,WAAW,CAAC,IAAI,EAAE;EAE9C,IAAI,CAACgB,IAAI,EAAE;IACV,MAAM,IAAIF,KAAK,CAAC,sCAAsC,CAAC;EACxD;EAEA,IAAI,CAACP,iBAAiB,CAACS,IAAI,CAAC,EAAE;IAC7B,MAAM,IAAIF,KAAK,CAAC,mBAAmB,CAAC;EACrC;EAEA,OAAOE,IAAI;AACZ,CAAC;AAEM,MAAMV,WAAW,GAAGA,CAAA,KAAgB;EAC1C,MAAM;IAAEU;EAAI,CAAE,GAAGJ,UAAU,CAACZ,WAAW,CAAC,IAAI,EAAE;EAE9C,IAAI,CAACgB,IAAI,EAAE;IACV,MAAM,IAAIF,KAAK,CAAC,sCAAsC,CAAC;EACxD;EAEA,IAAI,CAACN,UAAU,CAACQ,IAAI,CAAC,EAAE;IACtB,MAAM,IAAIF,KAAK,CAAC,mBAAmB,CAAC;EACrC;EAEA,OAAOE,IAAI;AACZ,CAAC","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"87f5a1e5f711ba3f3f38c893a15e59b8b9492ad9"}
