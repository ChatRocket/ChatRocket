{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/startup/migrations/v317.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/startup/migrations/v317.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/startup/migrations/v317.ts","inputSourceMap":{"version":3,"file":"server/startup/migrations/v317.ts","sourceRoot":"","sources":["server/startup/migrations/v317.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILoginServiceConfiguration, OAuthConfiguration } from '@rocket.chat/core-typings';\nimport { Settings, LoginServiceConfiguration } from '@rocket.chat/models';\n\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { SystemLogger } from '../../lib/logger/system';\nimport { addMigration } from '../../lib/migrations';\n\nconst newDefaultButtonColor = '#e4e7ea';\nconst newDefaultButtonLabelColor = '#1f2329';\n\nconst settingsToUpdate = [\n\t// button background colors\n\t{ key: 'SAML_Custom_Default_button_color', defaultValue: '#1d74f5', newValue: newDefaultButtonColor },\n\t{ key: 'CAS_button_color', defaultValue: '#1d74f5', newValue: newDefaultButtonColor },\n\t{ key: 'Accounts_OAuth_Nextcloud_button_color', defaultValue: '#0082c9', newValue: newDefaultButtonColor },\n\t{ key: 'Accounts_OAuth_Dolphin_button_color', defaultValue: '#1d74f5', newValue: newDefaultButtonColor },\n\t// button label colors\n\t{ key: 'SAML_Custom_Default_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n\t{ key: 'CAS_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n\t{ key: 'Accounts_OAuth_Nextcloud_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n\t{ key: 'Accounts_OAuth_Dolphin_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n];\n\nconst getSettingValue = async (key: string) => Settings.getValueById(key);\n\nasync function updateOAuthServices(): Promise<void> {\n\tconst services = await Settings.find({ _id: { $regex: /^(Accounts_OAuth_|Accounts_OAuth_Custom-)[a-z0-9_]+$/i } }).toArray();\n\tconst filteredServices = services.filter(({ value }) => typeof value === 'boolean');\n\tfor await (const { _id: key, value } of filteredServices) {\n\t\tif (value !== true) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet serviceName = key.replace('Accounts_OAuth_', '');\n\t\tif (serviceName === 'Meteor') {\n\t\t\tserviceName = 'meteor-developer';\n\t\t}\n\t\tif (/Accounts_OAuth_Custom-/.test(key)) {\n\t\t\tserviceName = key.replace('Accounts_OAuth_Custom-', '');\n\t\t}\n\n\t\tconst serviceKey = serviceName.toLowerCase();\n\n\t\tconst data: Partial<ILoginServiceConfiguration & Omit<OAuthConfiguration, '_id'>> = {};\n\n\t\tif (/Accounts_OAuth_Custom-/.test(key)) {\n\t\t\tdata.buttonLabelColor = (await getSettingValue(`${key}-button_label_color`)) as string;\n\t\t\tdata.buttonColor = (await getSettingValue(`${key}-button_color`)) as string;\n\t\t}\n\n\t\tif (serviceName === 'Nextcloud') {\n\t\t\tdata.buttonLabelColor = (await getSettingValue('Accounts_OAuth_Nextcloud_button_label_color')) as string;\n\t\t\tdata.buttonColor = (await getSettingValue('Accounts_OAuth_Nextcloud_button_color')) as string;\n\t\t}\n\n\t\tawait LoginServiceConfiguration.createOrUpdateService(serviceKey, data);\n\t}\n}\n\naddMigration({\n\tversion: 317,\n\tname: 'Change default color of OAuth login services buttons',\n\tasync up() {\n\t\tconst promises = settingsToUpdate\n\t\t\t.map(async ({ key, defaultValue, newValue }) => {\n\t\t\t\tconst oldSettingValue = await getSettingValue(key);\n\n\t\t\t\tif (!oldSettingValue || oldSettingValue !== defaultValue) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tSystemLogger.warn(`The default value of the setting ${key} has changed to ${newValue}. Please review your settings.`);\n\n\t\t\t\treturn Settings.updateOne({ _id: key }, { $set: { value: newValue } });\n\t\t\t})\n\t\t\t.filter(isTruthy);\n\n\t\tawait Promise.all(promises);\n\n\t\tconst customOAuthButtonColors = await Settings.find({\n\t\t\t_id: { $regex: /^Accounts_OAuth_Custom-[a-zA-Z0-9_-]+-button_color$/ },\n\t\t}).toArray();\n\t\tconst customOAuthButtonLabelColors = await Settings.find({\n\t\t\t_id: { $regex: /^Accounts_OAuth_Custom-[a-zA-Z0-9_-]+-button_label_color$/ },\n\t\t}).toArray();\n\n\t\tconst buttonColorPromises = customOAuthButtonColors\n\t\t\t.map(({ _id, value, packageValue }) => {\n\t\t\t\tif (packageValue !== value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tSystemLogger.warn(\n\t\t\t\t\t`The default value of the custom setting ${_id} has changed to ${newDefaultButtonColor}. Please review your settings.`,\n\t\t\t\t);\n\n\t\t\t\treturn Settings.updateOne({ _id }, { $set: { value: newDefaultButtonColor } });\n\t\t\t})\n\t\t\t.filter(isTruthy);\n\n\t\tconst buttonLabelColorPromises = customOAuthButtonLabelColors\n\t\t\t.map(({ _id, value, packageValue }) => {\n\t\t\t\tif (packageValue !== value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tSystemLogger.warn(\n\t\t\t\t\t`The default value of the custom setting ${_id} has changed to ${newDefaultButtonLabelColor}. Please review your settings.`,\n\t\t\t\t);\n\n\t\t\t\treturn Settings.updateOne({ _id }, { $set: { value: newDefaultButtonLabelColor } });\n\t\t\t})\n\t\t\t.filter(isTruthy);\n\n\t\tawait Promise.all([...buttonColorPromises, ...buttonLabelColorPromises]);\n\t\t// update login service configurations\n\t\tawait updateOAuthServices();\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/startup/migrations/v317.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/startup/migrations/v317.ts","inputSourceMap":{"version":3,"file":"server/startup/migrations/v317.ts","sourceRoot":"","sources":["server/startup/migrations/v317.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILoginServiceConfiguration, OAuthConfiguration } from '@rocket.chat/core-typings';\nimport { Settings, LoginServiceConfiguration } from '@rocket.chat/models';\n\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { SystemLogger } from '../../lib/logger/system';\nimport { addMigration } from '../../lib/migrations';\n\nconst newDefaultButtonColor = '#e4e7ea';\nconst newDefaultButtonLabelColor = '#1f2329';\n\nconst settingsToUpdate = [\n\t// button background colors\n\t{ key: 'SAML_Custom_Default_button_color', defaultValue: '#1d74f5', newValue: newDefaultButtonColor },\n\t{ key: 'CAS_button_color', defaultValue: '#1d74f5', newValue: newDefaultButtonColor },\n\t{ key: 'Accounts_OAuth_Nextcloud_button_color', defaultValue: '#0082c9', newValue: newDefaultButtonColor },\n\t{ key: 'Accounts_OAuth_Dolphin_button_color', defaultValue: '#1d74f5', newValue: newDefaultButtonColor },\n\t// button label colors\n\t{ key: 'SAML_Custom_Default_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n\t{ key: 'CAS_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n\t{ key: 'Accounts_OAuth_Nextcloud_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n\t{ key: 'Accounts_OAuth_Dolphin_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n];\n\nconst getSettingValue = async (key: string) => Settings.getValueById(key);\n\nasync function updateOAuthServices(): Promise<void> {\n\tconst services = await Settings.find({ _id: { $regex: /^(Accounts_OAuth_|Accounts_OAuth_Custom-)[a-z0-9_]+$/i } }).toArray();\n\tconst filteredServices = services.filter(({ value }) => typeof value === 'boolean');\n\tfor await (const { _id: key, value } of filteredServices) {\n\t\tif (value !== true) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet serviceName = key.replace('Accounts_OAuth_', '');\n\t\tif (serviceName === 'Meteor') {\n\t\t\tserviceName = 'meteor-developer';\n\t\t}\n\t\tif (/Accounts_OAuth_Custom-/.test(key)) {\n\t\t\tserviceName = key.replace('Accounts_OAuth_Custom-', '');\n\t\t}\n\n\t\tconst serviceKey = serviceName.toLowerCase();\n\n\t\tconst data: Partial<ILoginServiceConfiguration & Omit<OAuthConfiguration, '_id'>> = {};\n\n\t\tif (/Accounts_OAuth_Custom-/.test(key)) {\n\t\t\tdata.buttonLabelColor = (await getSettingValue(`${key}-button_label_color`)) as string;\n\t\t\tdata.buttonColor = (await getSettingValue(`${key}-button_color`)) as string;\n\t\t}\n\n\t\tif (serviceName === 'Nextcloud') {\n\t\t\tdata.buttonLabelColor = (await getSettingValue('Accounts_OAuth_Nextcloud_button_label_color')) as string;\n\t\t\tdata.buttonColor = (await getSettingValue('Accounts_OAuth_Nextcloud_button_color')) as string;\n\t\t}\n\n\t\tawait LoginServiceConfiguration.createOrUpdateService(serviceKey, data);\n\t}\n}\n\naddMigration({\n\tversion: 317,\n\tname: 'Change default color of OAuth login services buttons',\n\tasync up() {\n\t\tconst promises = settingsToUpdate\n\t\t\t.map(async ({ key, defaultValue, newValue }) => {\n\t\t\t\tconst oldSettingValue = await getSettingValue(key);\n\n\t\t\t\tif (!oldSettingValue || oldSettingValue !== defaultValue) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tSystemLogger.warn(`The default value of the setting ${key} has changed to ${newValue}. Please review your settings.`);\n\n\t\t\t\treturn Settings.updateOne({ _id: key }, { $set: { value: newValue } });\n\t\t\t})\n\t\t\t.filter(isTruthy);\n\n\t\tawait Promise.all(promises);\n\n\t\tconst customOAuthButtonColors = await Settings.find({\n\t\t\t_id: { $regex: /^Accounts_OAuth_Custom-[a-zA-Z0-9_-]+-button_color$/ },\n\t\t}).toArray();\n\t\tconst customOAuthButtonLabelColors = await Settings.find({\n\t\t\t_id: { $regex: /^Accounts_OAuth_Custom-[a-zA-Z0-9_-]+-button_label_color$/ },\n\t\t}).toArray();\n\n\t\tconst buttonColorPromises = customOAuthButtonColors\n\t\t\t.map(({ _id, value, packageValue }) => {\n\t\t\t\tif (packageValue !== value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tSystemLogger.warn(\n\t\t\t\t\t`The default value of the custom setting ${_id} has changed to ${newDefaultButtonColor}. Please review your settings.`,\n\t\t\t\t);\n\n\t\t\t\treturn Settings.updateOne({ _id }, { $set: { value: newDefaultButtonColor } });\n\t\t\t})\n\t\t\t.filter(isTruthy);\n\n\t\tconst buttonLabelColorPromises = customOAuthButtonLabelColors\n\t\t\t.map(({ _id, value, packageValue }) => {\n\t\t\t\tif (packageValue !== value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tSystemLogger.warn(\n\t\t\t\t\t`The default value of the custom setting ${_id} has changed to ${newDefaultButtonLabelColor}. Please review your settings.`,\n\t\t\t\t);\n\n\t\t\t\treturn Settings.updateOne({ _id }, { $set: { value: newDefaultButtonLabelColor } });\n\t\t\t})\n\t\t\t.filter(isTruthy);\n\n\t\tawait Promise.all([...buttonColorPromises, ...buttonLabelColorPromises]);\n\t\t// update login service configurations\n\t\tawait updateOAuthServices();\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    let Settings, LoginServiceConfiguration;\n    module.link(\"@rocket.chat/models\", {\n      Settings(v) {\n        Settings = v;\n      },\n      LoginServiceConfiguration(v) {\n        LoginServiceConfiguration = v;\n      }\n    }, 0);\n    let isTruthy;\n    module.link(\"../../../lib/isTruthy\", {\n      isTruthy(v) {\n        isTruthy = v;\n      }\n    }, 1);\n    let SystemLogger;\n    module.link(\"../../lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 2);\n    let addMigration;\n    module.link(\"../../lib/migrations\", {\n      addMigration(v) {\n        addMigration = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const newDefaultButtonColor = '#e4e7ea';\n    const newDefaultButtonLabelColor = '#1f2329';\n    const settingsToUpdate = [\n    // button background colors\n    {\n      key: 'SAML_Custom_Default_button_color',\n      defaultValue: '#1d74f5',\n      newValue: newDefaultButtonColor\n    }, {\n      key: 'CAS_button_color',\n      defaultValue: '#1d74f5',\n      newValue: newDefaultButtonColor\n    }, {\n      key: 'Accounts_OAuth_Nextcloud_button_color',\n      defaultValue: '#0082c9',\n      newValue: newDefaultButtonColor\n    }, {\n      key: 'Accounts_OAuth_Dolphin_button_color',\n      defaultValue: '#1d74f5',\n      newValue: newDefaultButtonColor\n    },\n    // button label colors\n    {\n      key: 'SAML_Custom_Default_button_label_color',\n      defaultValue: '#1d74f5',\n      newValue: newDefaultButtonLabelColor\n    }, {\n      key: 'CAS_button_label_color',\n      defaultValue: '#1d74f5',\n      newValue: newDefaultButtonLabelColor\n    }, {\n      key: 'Accounts_OAuth_Nextcloud_button_label_color',\n      defaultValue: '#1d74f5',\n      newValue: newDefaultButtonLabelColor\n    }, {\n      key: 'Accounts_OAuth_Dolphin_button_label_color',\n      defaultValue: '#1d74f5',\n      newValue: newDefaultButtonLabelColor\n    }];\n    const getSettingValue = async key => Settings.getValueById(key);\n    async function updateOAuthServices() {\n      const services = await Settings.find({\n        _id: {\n          $regex: /^(Accounts_OAuth_|Accounts_OAuth_Custom-)[a-z0-9_]+$/i\n        }\n      }).toArray();\n      const filteredServices = services.filter(_ref => {\n        let {\n          value\n        } = _ref;\n        return typeof value === 'boolean';\n      });\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(filteredServices), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const {\n            _id: key,\n            value\n          } = _step.value;\n          {\n            if (value !== true) {\n              continue;\n            }\n            let serviceName = key.replace('Accounts_OAuth_', '');\n            if (serviceName === 'Meteor') {\n              serviceName = 'meteor-developer';\n            }\n            if (/Accounts_OAuth_Custom-/.test(key)) {\n              serviceName = key.replace('Accounts_OAuth_Custom-', '');\n            }\n            const serviceKey = serviceName.toLowerCase();\n            const data = {};\n            if (/Accounts_OAuth_Custom-/.test(key)) {\n              data.buttonLabelColor = await getSettingValue(\"\".concat(key, \"-button_label_color\"));\n              data.buttonColor = await getSettingValue(\"\".concat(key, \"-button_color\"));\n            }\n            if (serviceName === 'Nextcloud') {\n              data.buttonLabelColor = await getSettingValue('Accounts_OAuth_Nextcloud_button_label_color');\n              data.buttonColor = await getSettingValue('Accounts_OAuth_Nextcloud_button_color');\n            }\n            await LoginServiceConfiguration.createOrUpdateService(serviceKey, data);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n    addMigration({\n      version: 317,\n      name: 'Change default color of OAuth login services buttons',\n      async up() {\n        const promises = settingsToUpdate.map(async _ref2 => {\n          let {\n            key,\n            defaultValue,\n            newValue\n          } = _ref2;\n          const oldSettingValue = await getSettingValue(key);\n          if (!oldSettingValue || oldSettingValue !== defaultValue) {\n            return;\n          }\n          SystemLogger.warn(\"The default value of the setting \".concat(key, \" has changed to \").concat(newValue, \". Please review your settings.\"));\n          return Settings.updateOne({\n            _id: key\n          }, {\n            $set: {\n              value: newValue\n            }\n          });\n        }).filter(isTruthy);\n        await Promise.all(promises);\n        const customOAuthButtonColors = await Settings.find({\n          _id: {\n            $regex: /^Accounts_OAuth_Custom-[a-zA-Z0-9_-]+-button_color$/\n          }\n        }).toArray();\n        const customOAuthButtonLabelColors = await Settings.find({\n          _id: {\n            $regex: /^Accounts_OAuth_Custom-[a-zA-Z0-9_-]+-button_label_color$/\n          }\n        }).toArray();\n        const buttonColorPromises = customOAuthButtonColors.map(_ref3 => {\n          let {\n            _id,\n            value,\n            packageValue\n          } = _ref3;\n          if (packageValue !== value) {\n            return;\n          }\n          SystemLogger.warn(\"The default value of the custom setting \".concat(_id, \" has changed to \").concat(newDefaultButtonColor, \". Please review your settings.\"));\n          return Settings.updateOne({\n            _id\n          }, {\n            $set: {\n              value: newDefaultButtonColor\n            }\n          });\n        }).filter(isTruthy);\n        const buttonLabelColorPromises = customOAuthButtonLabelColors.map(_ref4 => {\n          let {\n            _id,\n            value,\n            packageValue\n          } = _ref4;\n          if (packageValue !== value) {\n            return;\n          }\n          SystemLogger.warn(\"The default value of the custom setting \".concat(_id, \" has changed to \").concat(newDefaultButtonLabelColor, \". Please review your settings.\"));\n          return Settings.updateOne({\n            _id\n          }, {\n            $set: {\n              value: newDefaultButtonLabelColor\n            }\n          });\n        }).filter(isTruthy);\n        await Promise.all([...buttonColorPromises, ...buttonLabelColorPromises]);\n        // update login service configurations\n        await updateOAuthServices();\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","Settings","LoginServiceConfiguration","isTruthy","SystemLogger","addMigration","__reifyWaitForDeps__","newDefaultButtonColor","newDefaultButtonLabelColor","settingsToUpdate","key","defaultValue","newValue","getSettingValue","getValueById","updateOAuthServices","services","find","_id","$regex","toArray","filteredServices","filter","_ref","value","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","serviceName","replace","test","serviceKey","toLowerCase","data","buttonLabelColor","concat","buttonColor","createOrUpdateService","err","return","version","name","up","promises","map","_ref2","oldSettingValue","warn","updateOne","$set","Promise","all","customOAuthButtonColors","customOAuthButtonLabelColors","buttonColorPromises","_ref3","packageValue","buttonLabelColorPromises","_ref4","__reify_async_result__","_reifyError","self","async"],"sources":["server/startup/migrations/v317.ts"],"sourcesContent":["import type { ILoginServiceConfiguration, OAuthConfiguration } from '@rocket.chat/core-typings';\nimport { Settings, LoginServiceConfiguration } from '@rocket.chat/models';\n\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { SystemLogger } from '../../lib/logger/system';\nimport { addMigration } from '../../lib/migrations';\n\nconst newDefaultButtonColor = '#e4e7ea';\nconst newDefaultButtonLabelColor = '#1f2329';\n\nconst settingsToUpdate = [\n\t// button background colors\n\t{ key: 'SAML_Custom_Default_button_color', defaultValue: '#1d74f5', newValue: newDefaultButtonColor },\n\t{ key: 'CAS_button_color', defaultValue: '#1d74f5', newValue: newDefaultButtonColor },\n\t{ key: 'Accounts_OAuth_Nextcloud_button_color', defaultValue: '#0082c9', newValue: newDefaultButtonColor },\n\t{ key: 'Accounts_OAuth_Dolphin_button_color', defaultValue: '#1d74f5', newValue: newDefaultButtonColor },\n\t// button label colors\n\t{ key: 'SAML_Custom_Default_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n\t{ key: 'CAS_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n\t{ key: 'Accounts_OAuth_Nextcloud_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n\t{ key: 'Accounts_OAuth_Dolphin_button_label_color', defaultValue: '#1d74f5', newValue: newDefaultButtonLabelColor },\n];\n\nconst getSettingValue = async (key: string) => Settings.getValueById(key);\n\nasync function updateOAuthServices(): Promise<void> {\n\tconst services = await Settings.find({ _id: { $regex: /^(Accounts_OAuth_|Accounts_OAuth_Custom-)[a-z0-9_]+$/i } }).toArray();\n\tconst filteredServices = services.filter(({ value }) => typeof value === 'boolean');\n\tfor await (const { _id: key, value } of filteredServices) {\n\t\tif (value !== true) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet serviceName = key.replace('Accounts_OAuth_', '');\n\t\tif (serviceName === 'Meteor') {\n\t\t\tserviceName = 'meteor-developer';\n\t\t}\n\t\tif (/Accounts_OAuth_Custom-/.test(key)) {\n\t\t\tserviceName = key.replace('Accounts_OAuth_Custom-', '');\n\t\t}\n\n\t\tconst serviceKey = serviceName.toLowerCase();\n\n\t\tconst data: Partial<ILoginServiceConfiguration & Omit<OAuthConfiguration, '_id'>> = {};\n\n\t\tif (/Accounts_OAuth_Custom-/.test(key)) {\n\t\t\tdata.buttonLabelColor = (await getSettingValue(`${key}-button_label_color`)) as string;\n\t\t\tdata.buttonColor = (await getSettingValue(`${key}-button_color`)) as string;\n\t\t}\n\n\t\tif (serviceName === 'Nextcloud') {\n\t\t\tdata.buttonLabelColor = (await getSettingValue('Accounts_OAuth_Nextcloud_button_label_color')) as string;\n\t\t\tdata.buttonColor = (await getSettingValue('Accounts_OAuth_Nextcloud_button_color')) as string;\n\t\t}\n\n\t\tawait LoginServiceConfiguration.createOrUpdateService(serviceKey, data);\n\t}\n}\n\naddMigration({\n\tversion: 317,\n\tname: 'Change default color of OAuth login services buttons',\n\tasync up() {\n\t\tconst promises = settingsToUpdate\n\t\t\t.map(async ({ key, defaultValue, newValue }) => {\n\t\t\t\tconst oldSettingValue = await getSettingValue(key);\n\n\t\t\t\tif (!oldSettingValue || oldSettingValue !== defaultValue) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tSystemLogger.warn(`The default value of the setting ${key} has changed to ${newValue}. Please review your settings.`);\n\n\t\t\t\treturn Settings.updateOne({ _id: key }, { $set: { value: newValue } });\n\t\t\t})\n\t\t\t.filter(isTruthy);\n\n\t\tawait Promise.all(promises);\n\n\t\tconst customOAuthButtonColors = await Settings.find({\n\t\t\t_id: { $regex: /^Accounts_OAuth_Custom-[a-zA-Z0-9_-]+-button_color$/ },\n\t\t}).toArray();\n\t\tconst customOAuthButtonLabelColors = await Settings.find({\n\t\t\t_id: { $regex: /^Accounts_OAuth_Custom-[a-zA-Z0-9_-]+-button_label_color$/ },\n\t\t}).toArray();\n\n\t\tconst buttonColorPromises = customOAuthButtonColors\n\t\t\t.map(({ _id, value, packageValue }) => {\n\t\t\t\tif (packageValue !== value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tSystemLogger.warn(\n\t\t\t\t\t`The default value of the custom setting ${_id} has changed to ${newDefaultButtonColor}. Please review your settings.`,\n\t\t\t\t);\n\n\t\t\t\treturn Settings.updateOne({ _id }, { $set: { value: newDefaultButtonColor } });\n\t\t\t})\n\t\t\t.filter(isTruthy);\n\n\t\tconst buttonLabelColorPromises = customOAuthButtonLabelColors\n\t\t\t.map(({ _id, value, packageValue }) => {\n\t\t\t\tif (packageValue !== value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tSystemLogger.warn(\n\t\t\t\t\t`The default value of the custom setting ${_id} has changed to ${newDefaultButtonLabelColor}. Please review your settings.`,\n\t\t\t\t);\n\n\t\t\t\treturn Settings.updateOne({ _id }, { $set: { value: newDefaultButtonLabelColor } });\n\t\t\t})\n\t\t\t.filter(isTruthy);\n\n\t\tawait Promise.all([...buttonColorPromises, ...buttonLabelColorPromises]);\n\t\t// update login service configurations\n\t\tawait updateOAuthServices();\n\t},\n});\n"],"mappings":";;;IACA,IAAAA,cAAiB;IAAEC,MAAA,CAAAC,IAAA,uCAAiC;MAAAC,OAAsBA,CAAAC,CAAA;QAAAJ,cAAA,GAAAI,CAAA;MAAA;IAAA;IAA1E,IAAAC,QAAS,EAAAC,yBAAU;IAAAL,MAAyB,CAAEC,IAAA,sBAAM,EAAqB;MAACG,SAAAD,CAAA;QAAAC,QAAA,GAAAD,CAAA;MAAA;MAAAE,0BAAAF,CAAA;QAAAE,yBAAA,GAAAF,CAAA;MAAA;IAAA;IAAA,IAAAG,QAAA;IAAAN,MAAA,CAAAC,IAAA;MAAAK,SAAAH,CAAA;QAAAG,QAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,YAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAM,aAAAJ,CAAA;QAAAI,YAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,YAAA;IAAAR,MAAA,CAAAC,IAAA;MAAAO,aAAAL,CAAA;QAAAK,YAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,oBAAA,WAAAA,oBAAA;IAM1E,MAAMC,qBAAqB,GAAG,SAAS;IACvC,MAAMC,0BAA0B,GAAG,SAAS;IAE5C,MAAMC,gBAAgB,GAAG;IACxB;IACA;MAAEC,GAAG,EAAE,kCAAkC;MAAEC,YAAY,EAAE,SAAS;MAAEC,QAAQ,EAAEL;IAAqB,CAAE,EACrG;MAAEG,GAAG,EAAE,kBAAkB;MAAEC,YAAY,EAAE,SAAS;MAAEC,QAAQ,EAAEL;IAAqB,CAAE,EACrF;MAAEG,GAAG,EAAE,uCAAuC;MAAEC,YAAY,EAAE,SAAS;MAAEC,QAAQ,EAAEL;IAAqB,CAAE,EAC1G;MAAEG,GAAG,EAAE,qCAAqC;MAAEC,YAAY,EAAE,SAAS;MAAEC,QAAQ,EAAEL;IAAqB,CAAE;IACxG;IACA;MAAEG,GAAG,EAAE,wCAAwC;MAAEC,YAAY,EAAE,SAAS;MAAEC,QAAQ,EAAEJ;IAA0B,CAAE,EAChH;MAAEE,GAAG,EAAE,wBAAwB;MAAEC,YAAY,EAAE,SAAS;MAAEC,QAAQ,EAAEJ;IAA0B,CAAE,EAChG;MAAEE,GAAG,EAAE,6CAA6C;MAAEC,YAAY,EAAE,SAAS;MAAEC,QAAQ,EAAEJ;IAA0B,CAAE,EACrH;MAAEE,GAAG,EAAE,2CAA2C;MAAEC,YAAY,EAAE,SAAS;MAAEC,QAAQ,EAAEJ;IAA0B,CAAE,CACnH;IAED,MAAMK,eAAe,GAAG,MAAOH,GAAW,IAAKT,QAAQ,CAACa,YAAY,CAACJ,GAAG,CAAC;IAEzE,eAAeK,mBAAmBA,CAAA;MACjC,MAAMC,QAAQ,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC;QAAEC,GAAG,EAAE;UAAEC,MAAM,EAAE;QAAuD;MAAE,CAAE,CAAC,CAACC,OAAO,EAAE;MAC5H,MAAMC,gBAAgB,GAAGL,QAAQ,CAACM,MAAM,CAACC,IAAA;QAAA,IAAC;UAAEC;QAAK,CAAE,GAAAD,IAAA;QAAA,OAAK,OAAOC,KAAK,KAAK,SAAS;MAAA,EAAC;MAAC,IAAAC,yBAAA;MAAA,IAAAC,iBAAA;MAAA,IAAAC,cAAA;MAAA;QACpF,SAAAC,SAAA,GAAAhC,cAAA,CAAwCyB,gBAAgB,GAAAQ,KAAA,EAAAJ,yBAAA,KAAAI,KAAA,SAAAD,SAAA,CAAAE,IAAA,IAAAC,IAAA,EAAAN,yBAAA,UAAE;UAAA,MAAzC;YAAEP,GAAG,EAAER,GAAG;YAAEc;UAAK,CAAE,GAAAK,KAAA,CAAAL,KAAA;UAAA;YACnC,IAAIA,KAAK,KAAK,IAAI,EAAE;cACnB;YACD;YAEA,IAAIQ,WAAW,GAAGtB,GAAG,CAACuB,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;YACpD,IAAID,WAAW,KAAK,QAAQ,EAAE;cAC7BA,WAAW,GAAG,kBAAkB;YACjC;YACA,IAAI,wBAAwB,CAACE,IAAI,CAACxB,GAAG,CAAC,EAAE;cACvCsB,WAAW,GAAGtB,GAAG,CAACuB,OAAO,CAAC,wBAAwB,EAAE,EAAE,CAAC;YACxD;YAEA,MAAME,UAAU,GAAGH,WAAW,CAACI,WAAW,EAAE;YAE5C,MAAMC,IAAI,GAA0E,EAAE;YAEtF,IAAI,wBAAwB,CAACH,IAAI,CAACxB,GAAG,CAAC,EAAE;cACvC2B,IAAI,CAACC,gBAAgB,GAAI,MAAMzB,eAAe,IAAA0B,MAAA,CAAI7B,GAAG,wBAAqB,CAAY;cACtF2B,IAAI,CAACG,WAAW,GAAI,MAAM3B,eAAe,IAAA0B,MAAA,CAAI7B,GAAG,kBAAe,CAAY;YAC5E;YAEA,IAAIsB,WAAW,KAAK,WAAW,EAAE;cAChCK,IAAI,CAACC,gBAAgB,GAAI,MAAMzB,eAAe,CAAC,6CAA6C,CAAY;cACxGwB,IAAI,CAACG,WAAW,GAAI,MAAM3B,eAAe,CAAC,uCAAuC,CAAY;YAC9F;YAEA,MAAMX,yBAAyB,CAACuC,qBAAqB,CAACN,UAAU,EAAEE,IAAI,CAAC;UAAC;QACzE;MAAC,SAAAK,GAAA;QAAAhB,iBAAA;QAAAC,cAAA,GAAAe,GAAA;MAAA;QAAA;UAAA,IAAAjB,yBAAA,IAAAG,SAAA,CAAAe,MAAA;YAAA,MAAAf,SAAA,CAAAe,MAAA;UAAA;QAAA;UAAA,IAAAjB,iBAAA;YAAA,MAAAC,cAAA;UAAA;QAAA;MAAA;IACF;IAEAtB,YAAY,CAAC;MACZuC,OAAO,EAAE,GAAG;MACZC,IAAI,EAAE,sDAAsD;MAC5D,MAAMC,EAAEA,CAAA;QACP,MAAMC,QAAQ,GAAGtC,gBAAgB,CAC/BuC,GAAG,CAAC,MAAAC,KAAA,IAA0C;UAAA,IAAnC;YAAEvC,GAAG;YAAEC,YAAY;YAAEC;UAAQ,CAAE,GAAAqC,KAAA;UAC1C,MAAMC,eAAe,GAAG,MAAMrC,eAAe,CAACH,GAAG,CAAC;UAElD,IAAI,CAACwC,eAAe,IAAIA,eAAe,KAAKvC,YAAY,EAAE;YACzD;UACD;UAEAP,YAAY,CAAC+C,IAAI,qCAAAZ,MAAA,CAAqC7B,GAAG,sBAAA6B,MAAA,CAAmB3B,QAAQ,mCAAgC,CAAC;UAErH,OAAOX,QAAQ,CAACmD,SAAS,CAAC;YAAElC,GAAG,EAAER;UAAG,CAAE,EAAE;YAAE2C,IAAI,EAAE;cAAE7B,KAAK,EAAEZ;YAAQ;UAAE,CAAE,CAAC;QACvE,CAAC,CAAC,CACDU,MAAM,CAACnB,QAAQ,CAAC;QAElB,MAAMmD,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;QAE3B,MAAMS,uBAAuB,GAAG,MAAMvD,QAAQ,CAACgB,IAAI,CAAC;UACnDC,GAAG,EAAE;YAAEC,MAAM,EAAE;UAAqD;SACpE,CAAC,CAACC,OAAO,EAAE;QACZ,MAAMqC,4BAA4B,GAAG,MAAMxD,QAAQ,CAACgB,IAAI,CAAC;UACxDC,GAAG,EAAE;YAAEC,MAAM,EAAE;UAA2D;SAC1E,CAAC,CAACC,OAAO,EAAE;QAEZ,MAAMsC,mBAAmB,GAAGF,uBAAuB,CACjDR,GAAG,CAACW,KAAA,IAAiC;UAAA,IAAhC;YAAEzC,GAAG;YAAEM,KAAK;YAAEoC;UAAY,CAAE,GAAAD,KAAA;UACjC,IAAIC,YAAY,KAAKpC,KAAK,EAAE;YAC3B;UACD;UAEApB,YAAY,CAAC+C,IAAI,4CAAAZ,MAAA,CAC2BrB,GAAG,sBAAAqB,MAAA,CAAmBhC,qBAAqB,mCAAgC,CACtH;UAED,OAAON,QAAQ,CAACmD,SAAS,CAAC;YAAElC;UAAG,CAAE,EAAE;YAAEmC,IAAI,EAAE;cAAE7B,KAAK,EAAEjB;YAAqB;UAAE,CAAE,CAAC;QAC/E,CAAC,CAAC,CACDe,MAAM,CAACnB,QAAQ,CAAC;QAElB,MAAM0D,wBAAwB,GAAGJ,4BAA4B,CAC3DT,GAAG,CAACc,KAAA,IAAiC;UAAA,IAAhC;YAAE5C,GAAG;YAAEM,KAAK;YAAEoC;UAAY,CAAE,GAAAE,KAAA;UACjC,IAAIF,YAAY,KAAKpC,KAAK,EAAE;YAC3B;UACD;UAEApB,YAAY,CAAC+C,IAAI,4CAAAZ,MAAA,CAC2BrB,GAAG,sBAAAqB,MAAA,CAAmB/B,0BAA0B,mCAAgC,CAC3H;UAED,OAAOP,QAAQ,CAACmD,SAAS,CAAC;YAAElC;UAAG,CAAE,EAAE;YAAEmC,IAAI,EAAE;cAAE7B,KAAK,EAAEhB;YAA0B;UAAE,CAAE,CAAC;QACpF,CAAC,CAAC,CACDc,MAAM,CAACnB,QAAQ,CAAC;QAElB,MAAMmD,OAAO,CAACC,GAAG,CAAC,CAAC,GAAGG,mBAAmB,EAAE,GAAGG,wBAAwB,CAAC,CAAC;QACxE;QACA,MAAM9C,mBAAmB,EAAE;MAC5B;KACA,CAAC;IAACgD,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"f4f6f53f16e554c6a8e3215aa8e225b393f7d491"}
