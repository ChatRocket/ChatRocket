{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/modules/watchers/watchers.module.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/modules/watchers/watchers.module.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/modules/watchers/watchers.module.ts","inputSourceMap":{"version":3,"file":"server/modules/watchers/watchers.module.ts","sourceRoot":"","sources":["server/modules/watchers/watchers.module.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,kBAAkB,EAAE,MAAM,4BAA4B,CAAC;AAmBhE,OAAO,EACN,aAAa,EACb,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,KAAK,EACL,eAAe,EACf,wBAAwB,EACxB,KAAK,EACL,yBAAyB,EACzB,cAAc,EACd,kBAAkB,EAClB,YAAY,EACZ,UAAU,EACV,SAAS,EACT,WAAW,EACX,gBAAgB,GAChB,MAAM,qBAAqB,CAAC;AAE7B,OAAO,EAAE,qBAAqB,EAAE,MAAM,4CAA4C,CAAC;AACnF,OAAO,EAAE,kBAAkB,EAAE,UAAU,EAAE,MAAM,4BAA4B,CAAC;AAK5E,MAAM,OAAO,GACZ,CAAC,YAAsB,EAA6C,EAAE,CACtE,CAAC,IAA0B,EAAW,EAAE;IACvC,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO,KAAK,CAAC;IACd,CAAC;IAED,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;SACtB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,KAAK,CAAC;SAC9B,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/B,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEH,MAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;AACvD,MAAM,qBAAqB,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;AAEvE,IAAI,cAAc,GAAG,KAAK,CAAC;AAC3B,MAAM,UAAU,gBAAgB;IAC/B,OAAO,cAAc,CAAC;AACvB,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,OAAwB,EAAE,SAA4B;IAClF,8EAA8E;IAC9E,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACzB,OAAO,CAAC,EAAE,CAAW,QAAQ,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;YACvF,QAAQ,YAAY,EAAE,CAAC;gBACtB,KAAK,UAAU,CAAC;gBAChB,KAAK,SAAS;oBACb,MAAM,OAAO,GAAG,MAAM,qBAAqB,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;oBAC1D,IAAI,CAAC,OAAO,EAAE,CAAC;wBACd,OAAO;oBACR,CAAC;oBACD,KAAK,SAAS,CAAC,gBAAgB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;oBAC9C,MAAM;YACR,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,OAAO,CAAC,EAAE,CAAgB,aAAa,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;QACvG,QAAQ,YAAY,EAAE,CAAC;YACtB,KAAK,UAAU,CAAC;YAChB,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,qBAAqB,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC;oBAC1C,OAAO;gBACR,CAAC;gBAED,iDAAiD;gBACjD,MAAM,YAAY,GACjB,IAAI;oBACJ,CAAC,MAAM,aAAa,CAAC,WAAW,CAmD9B,EAAE,EAAE;wBACL,UAAU,EAAE,kBAAkB;qBAC9B,CAAC,CAAC,CAAC;gBAEL,IAAI,CAAC,YAAY,EAAE,CAAC;oBACnB,OAAO;gBACR,CAAC;gBACD,KAAK,SAAS,CAAC,qBAAqB,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC,CAAC;gBACtE,MAAM;YACP,CAAC;YAED,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChB,MAAM,KAAK,GAAG,CAAC,MAAM,aAAa,CAAC,gBAAgB,CAAC,EAAE,EAAE;oBACvD,UAAU,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;iBAClC,CAAC,CAAyD,CAAC;gBAC5D,MAAM,YAAY,GAAG,KAAK,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;gBAC1C,KAAK,SAAS,CAAC,qBAAqB,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC,CAAC;gBACtE,MAAM;YACP,CAAC;QACF,CAAC;IACF,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAQ,KAAK,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;QACvF,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAC/D,wBAAwB;YACxB,OAAO;QACR,CAAC;QAED,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAChC,KAAK,SAAS,CAAC,aAAa,EAAE;gBAC7B,YAAY,EAAE,SAAS;gBACvB,IAAI,EAAE;oBACL,GAAG,EAAE,EAAE;oBACP,IAAI,EAAE,EAAE;iBACR;aACD,CAAC,CAAC;YACH,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;QAEnD,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO;QACR,CAAC;QAED,KAAK,SAAS,CAAC,aAAa,EAAE;YAC7B,YAAY,EAAE,SAAS;YACvB,IAAI;SACJ,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAyB,eAAe,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;QAClH,QAAQ,YAAY,EAAE,CAAC;YACtB,KAAK,UAAU,CAAC;YAChB,KAAK,SAAS;gBACb,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,eAAe,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,IAAI,SAAS,CAAC;gBACpE,MAAM;YAEP,KAAK,SAAS;gBACb,IAAI,GAAG,CAAC,MAAM,eAAe,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,IAAI,SAAS,CAAC;gBACjE,MAAM;QACR,CAAC;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO;QACR,CAAC;QAED,KAAK,SAAS,CAAC,iBAAiB,EAAE,EAAE,YAAY,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAA4B,wBAAwB,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QACxH,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAChC,MAAM,IAAI,GAAG,MAAM,wBAAwB,CAAC,gBAAgB,CAA8D,EAAE,EAAE;gBAC7H,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE;aAC3C,CAAC,CAAC;YACH,IAAI,CAAC,IAAI,EAAE,CAAC;gBACX,OAAO;YACR,CAAC;YACD,KAAK,SAAS,CAAC,gCAAgC,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;YACnF,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,wBAAwB,CAAC,WAAW,CAA8D,EAAE,EAAE;YACxH,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE;SAC3C,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO;QACR,CAAC;QACD,KAAK,SAAS,CAAC,gCAAgC,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAc,WAAW,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE;QAC9G,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAC/D,wBAAwB;YACxB,OAAO;QACR,CAAC;QACD,IAAI,IAAI,CAAC;QACT,QAAQ,YAAY,EAAE,CAAC;YACtB,KAAK,SAAS,CAAC;YACf,KAAK,UAAU;gBACd,IAAI,GAAG,SAAS,IAAI,CAAC,MAAM,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;gBACxD,MAAM;YAEP,KAAK,SAAS;gBACb,IAAI,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;gBAC9B,MAAM;QACR,CAAC;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO;QACR,CAAC;QAED,KAAK,SAAS,CAAC,oBAAoB,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;QAE7D,IAAI,IAAI,CAAC,KAAK,KAAK,UAAU,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjD,8FAA8F;YAC9F,+FAA+F;YAC/F,qCAAqC;YACrC,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACpE,IAAI,CAAC,OAAO,EAAE,CAAC;gBACd,OAAO;YACR,CAAC;YACD,KAAK,SAAS,CAAC,gBAAgB,EAAE,EAAE,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;QACxE,CAAC;IACF,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAW,QAAQ,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;QAC7F,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAC/D,wBAAwB;YACxB,OAAO;QACR,CAAC;QAED,IAAI,OAAO,CAAC;QACZ,QAAQ,YAAY,EAAE,CAAC;YACtB,KAAK,SAAS,CAAC;YACf,KAAK,UAAU,CAAC,CAAC,CAAC;gBACjB,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnD,MAAM;YACP,CAAC;YAED,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChB,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;gBACxD,MAAM;YACP,CAAC;QACF,CAAC;QAED,IAAI,CAAC,OAAO,EAAE,CAAC;YACd,OAAO;QACR,CAAC;QAED,KAAK,SAAS,CAAC,gBAAgB,EAAE,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAQ,KAAK,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;QACvF,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAChC,KAAK,SAAS,CAAC,aAAa,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YACnE,OAAO;QACR,CAAC;QAED,IAAI,CAAC,aAAa,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE,CAAC;YAClC,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;QAC/E,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO;QACR,CAAC;QAED,KAAK,SAAS,CAAC,aAAa,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,gHAAgH;IAChH,4DAA4D;IAC5D,OAAO,CAAC,EAAE,CAAQ,KAAK,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE;QACxF,oHAAoH;QACpH,6EAA6E;QAC7E,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,eAAe,IAAI,IAAI,EAAE,CAAC;YACvE,OAAO;QACR,CAAC;QAED,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAChC,KAAK,SAAS,CAAC,aAAa,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC;YACpD,OAAO;QACR,CAAC;QACD,IAAI,YAAY,KAAK,UAAU,EAAE,CAAC;YACjC,KAAK,SAAS,CAAC,aAAa,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAK,EAAE,CAAC,CAAC;YACjE,OAAO;QACR,CAAC;QAED,KAAK,SAAS,CAAC,aAAa,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,IAAK,EAAE,KAAK,EAAE,KAAM,EAAE,EAAE,EAAE,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAA6B,yBAAyB,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,EAAE,EAAE;QACpH,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAChC,KAAK,SAAS,CAAC,iCAAiC,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC;YACxE,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,yBAAyB,CAAC,OAAO,CAA6C,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAEpI,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO;QACR,CAAC;QAED,KAAK,SAAS,CAAC,iCAAiC,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;IAC/E,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAkB,cAAc,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;QACpG,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAChC,KAAK,SAAS,CAAC,sBAAsB,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAChF,OAAO;QACR,CAAC;QAED,KAAK,SAAS,CAAC,sBAAsB,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAsB,kBAAkB,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;QAClH,QAAQ,YAAY,EAAE,CAAC;YACtB,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChB,MAAM,OAAO,GAAG,MAAM,kBAAkB,CAAC,WAAW,CAA2C,EAAE,EAAE;oBAClG,UAAU,EAAE,EAAE,iBAAiB,EAAE,CAAC,EAAE;iBACpC,CAAC,CAAC;gBACH,IAAI,CAAC,OAAO,EAAE,WAAW,EAAE,CAAC;oBAC3B,OAAO;gBACR,CAAC;gBACD,KAAK,SAAS,CAAC,0BAA0B,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;gBACtF,MAAM;YACP,CAAC;YACD,KAAK,UAAU,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,IAAI,EAAE,CAAC;oBACX,OAAO;gBACR,CAAC;gBACD,KAAK,SAAS,CAAC,0BAA0B,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;gBAC7E,MAAM;YACP,CAAC;QACF,CAAC;IACF,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAe,YAAY,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;QAC1G,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAChC,KAAK,SAAS,CAAC,oBAAoB,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAC9E,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,SAAS,IAAI,CAAC,MAAM,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO;QACR,CAAC;QAED,KAAK,SAAS,CAAC,oBAAoB,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAc,UAAU,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;QACvG,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAChC,KAAK,SAAS,CAAC,kBAAkB,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAC5E,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,SAAS,IAAI,CAAC,MAAM,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO;QACR,CAAC;QAED,KAAK,SAAS,CAAC,kBAAkB,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAY,SAAS,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;QACpG,8CAA8C;QAC9C,IAAI,YAAY,KAAK,UAAU,EAAE,CAAC;YACjC,MAAM,IAAI,GAAG,SAAS,IAAI,CAAC,MAAM,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBAChE,iEAAiE;gBACjE,0DAA0D;gBAC1D,OAAO;YACR,CAAC;YAED,KAAK,SAAS,CAAC,iBAAiB,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;QAC/D,CAAC;IACF,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAoB,gBAAgB,CAAC,iBAAiB,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE;QACxG,IAAI,YAAY,KAAK,SAAS,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,EAAE,CAAC;YAC9D,wDAAwD;YACxD,OAAO;QACR,CAAC;QAED,gGAAgG;QAChG,iGAAiG;QACjG,KAAK,SAAS,CAAC,kBAAkB,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,cAAc,GAAG,IAAI,CAAC;AACvB,CAAC","sourcesContent":["import type { EventSignatures } from '@rocket.chat/core-services';\nimport { dbWatchersDisabled } from '@rocket.chat/core-services';\nimport type {\n\tISubscription,\n\tIUser,\n\tILoginServiceConfiguration,\n\tIIntegrationHistory,\n\tILivechatDepartmentAgents,\n\tIMessage,\n\tIPermission,\n\tISetting,\n\tIRoom,\n\tIInstanceStatus,\n\tIIntegration,\n\tIEmailInbox,\n\tIPbxEvent,\n\tILivechatInquiryRecord,\n\tIRole,\n\tILivechatPriority,\n} from '@rocket.chat/core-typings';\nimport {\n\tSubscriptions,\n\tMessages,\n\tUsers,\n\tSettings,\n\tRoles,\n\tLivechatInquiry,\n\tLivechatDepartmentAgents,\n\tRooms,\n\tLoginServiceConfiguration,\n\tInstanceStatus,\n\tIntegrationHistory,\n\tIntegrations,\n\tEmailInbox,\n\tPbxEvents,\n\tPermissions,\n\tLivechatPriority,\n} from '@rocket.chat/models';\n\nimport { getMessageToBroadcast } from '../../../app/lib/server/lib/notifyListener';\nimport { subscriptionFields, roomFields } from '../../../lib/publishFields';\nimport type { DatabaseWatcher } from '../../database/DatabaseWatcher';\n\ntype BroadcastCallback = <T extends keyof EventSignatures>(event: T, ...args: Parameters<EventSignatures[T]>) => Promise<void>;\n\nconst hasKeys =\n\t(requiredKeys: string[]): ((data?: Record<string, any>) => boolean) =>\n\t(data?: Record<string, any>): boolean => {\n\t\tif (!data) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.keys(data)\n\t\t\t.filter((key) => key !== '_id')\n\t\t\t.map((key) => key.split('.')[0])\n\t\t\t.some((key) => requiredKeys.includes(key));\n\t};\n\nconst hasRoomFields = hasKeys(Object.keys(roomFields));\nconst hasSubscriptionFields = hasKeys(Object.keys(subscriptionFields));\n\nlet watcherStarted = false;\nexport function isWatcherRunning(): boolean {\n\treturn watcherStarted;\n}\n\nexport function initWatchers(watcher: DatabaseWatcher, broadcast: BroadcastCallback): void {\n\t// watch for changes on the database and broadcast them to the other instances\n\tif (!dbWatchersDisabled) {\n\t\twatcher.on<IMessage>(Messages.getCollectionName(), async ({ clientAction, id, data }) => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'inserted':\n\t\t\t\tcase 'updated':\n\t\t\t\t\tconst message = await getMessageToBroadcast({ id, data });\n\t\t\t\t\tif (!message) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvoid broadcast('watch.messages', { message });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\twatcher.on<ISubscription>(Subscriptions.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated': {\n\t\t\t\tif (!hasSubscriptionFields(data || diff)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Override data cuz we do not publish all fields\n\t\t\t\tconst subscription =\n\t\t\t\t\tdata ||\n\t\t\t\t\t(await Subscriptions.findOneById<\n\t\t\t\t\t\tPick<\n\t\t\t\t\t\t\tISubscription,\n\t\t\t\t\t\t\t| 't'\n\t\t\t\t\t\t\t| 'ts'\n\t\t\t\t\t\t\t| 'ls'\n\t\t\t\t\t\t\t| 'lr'\n\t\t\t\t\t\t\t| 'name'\n\t\t\t\t\t\t\t| 'fname'\n\t\t\t\t\t\t\t| 'rid'\n\t\t\t\t\t\t\t| 'code'\n\t\t\t\t\t\t\t| 'f'\n\t\t\t\t\t\t\t| 'u'\n\t\t\t\t\t\t\t| 'open'\n\t\t\t\t\t\t\t| 'alert'\n\t\t\t\t\t\t\t| 'roles'\n\t\t\t\t\t\t\t| 'unread'\n\t\t\t\t\t\t\t| 'prid'\n\t\t\t\t\t\t\t| 'userMentions'\n\t\t\t\t\t\t\t| 'groupMentions'\n\t\t\t\t\t\t\t| 'archived'\n\t\t\t\t\t\t\t| 'audioNotificationValue'\n\t\t\t\t\t\t\t| 'desktopNotifications'\n\t\t\t\t\t\t\t| 'mobilePushNotifications'\n\t\t\t\t\t\t\t| 'emailNotifications'\n\t\t\t\t\t\t\t| 'desktopPrefOrigin'\n\t\t\t\t\t\t\t| 'mobilePrefOrigin'\n\t\t\t\t\t\t\t| 'emailPrefOrigin'\n\t\t\t\t\t\t\t| 'unreadAlert'\n\t\t\t\t\t\t\t| '_updatedAt'\n\t\t\t\t\t\t\t| 'blocked'\n\t\t\t\t\t\t\t| 'blocker'\n\t\t\t\t\t\t\t| 'autoTranslate'\n\t\t\t\t\t\t\t| 'autoTranslateLanguage'\n\t\t\t\t\t\t\t| 'disableNotifications'\n\t\t\t\t\t\t\t| 'hideUnreadStatus'\n\t\t\t\t\t\t\t| 'hideMentionStatus'\n\t\t\t\t\t\t\t| 'muteGroupMentions'\n\t\t\t\t\t\t\t| 'ignored'\n\t\t\t\t\t\t\t| 'E2EKey'\n\t\t\t\t\t\t\t| 'E2ESuggestedKey'\n\t\t\t\t\t\t\t| 'oldRoomKeys'\n\t\t\t\t\t\t\t| 'tunread'\n\t\t\t\t\t\t\t| 'tunreadGroup'\n\t\t\t\t\t\t\t| 'tunreadUser'\n\n\t\t\t\t\t\t\t// Omnichannel fields\n\t\t\t\t\t\t\t| 'department'\n\t\t\t\t\t\t\t| 'v'\n\t\t\t\t\t\t\t| 'onHold'\n\t\t\t\t\t\t>\n\t\t\t\t\t>(id, {\n\t\t\t\t\t\tprojection: subscriptionFields,\n\t\t\t\t\t}));\n\n\t\t\t\tif (!subscription) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvoid broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'removed': {\n\t\t\t\tconst trash = (await Subscriptions.trashFindOneById(id, {\n\t\t\t\t\tprojection: { u: 1, rid: 1, t: 1 },\n\t\t\t\t})) as Pick<ISubscription, 'u' | 'rid' | '_id'> | undefined;\n\t\t\t\tconst subscription = trash || { _id: id };\n\t\t\t\tvoid broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\twatcher.on<IRole>(Roles.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.roles', {\n\t\t\t\tclientAction: 'removed',\n\t\t\t\trole: {\n\t\t\t\t\t_id: id,\n\t\t\t\t\tname: id,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst role = data || (await Roles.findOneById(id));\n\n\t\tif (!role) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.roles', {\n\t\t\tclientAction: 'changed',\n\t\t\trole,\n\t\t});\n\t});\n\n\twatcher.on<ILivechatInquiryRecord>(LivechatInquiry.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated':\n\t\t\t\tdata = data ?? (await LivechatInquiry.findOneById(id)) ?? undefined;\n\t\t\t\tbreak;\n\n\t\t\tcase 'removed':\n\t\t\t\tdata = (await LivechatInquiry.trashFindOneById(id)) ?? undefined;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.inquiries', { clientAction, inquiry: data, diff });\n\t});\n\n\twatcher.on<ILivechatDepartmentAgents>(LivechatDepartmentAgents.getCollectionName(), async ({ clientAction, id, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tconst data = await LivechatDepartmentAgents.trashFindOneById<Pick<ILivechatDepartmentAgents, 'agentId' | 'departmentId'>>(id, {\n\t\t\t\tprojection: { agentId: 1, departmentId: 1 },\n\t\t\t});\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid broadcast('watch.livechatDepartmentAgents', { clientAction, id, data, diff });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = await LivechatDepartmentAgents.findOneById<Pick<ILivechatDepartmentAgents, 'agentId' | 'departmentId'>>(id, {\n\t\t\tprojection: { agentId: 1, departmentId: 1 },\n\t\t});\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tvoid broadcast('watch.livechatDepartmentAgents', { clientAction, id, data, diff });\n\t});\n\n\twatcher.on<IPermission>(Permissions.getCollectionName(), async ({ clientAction, id, data: eventData, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\t\tlet data;\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated':\n\t\t\tcase 'inserted':\n\t\t\t\tdata = eventData ?? (await Permissions.findOneById(id));\n\t\t\t\tbreak;\n\n\t\t\tcase 'removed':\n\t\t\t\tdata = { _id: id, roles: [] };\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('permission.changed', { clientAction, data });\n\n\t\tif (data.level === 'settings' && data.settingId) {\n\t\t\t// if the permission changes, the effect on the visible settings depends on the role affected.\n\t\t\t// The selected-settings-based consumers have to react accordingly and either add or remove the\n\t\t\t// setting from the user's collection\n\t\t\tconst setting = await Settings.findOneNotHiddenById(data.settingId);\n\t\t\tif (!setting) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid broadcast('watch.settings', { clientAction: 'updated', setting });\n\t\t}\n\t});\n\n\twatcher.on<ISetting>(Settings.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\n\t\tlet setting;\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated':\n\t\t\tcase 'inserted': {\n\t\t\t\tsetting = data ?? (await Settings.findOneById(id));\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'removed': {\n\t\t\t\tsetting = data ?? (await Settings.trashFindOneById(id));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!setting) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.settings', { clientAction, setting });\n\t});\n\n\twatcher.on<IRoom>(Rooms.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.rooms', { clientAction, room: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tif (!hasRoomFields(data || diff)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = data ?? (await Rooms.findOneById(id, { projection: roomFields }));\n\t\tif (!room) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.rooms', { clientAction, room });\n\t});\n\n\t// TODO: Prevent flood from database on username change, what causes changes on all past messages from that user\n\t// and most of those messages are not loaded by the clients.\n\twatcher.on<IUser>(Users.getCollectionName(), ({ clientAction, id, data, diff, unset }) => {\n\t\t// LivechatCount is updated each time an agent is routed to a chat. This prop is not used on the UI so we don't need\n\t\t// to broadcast events originated by it when it's the only update on the user\n\t\tif (diff && Object.keys(diff).length === 1 && 'livechatCount' in diff) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.users', { clientAction, id });\n\t\t\treturn;\n\t\t}\n\t\tif (clientAction === 'inserted') {\n\t\t\tvoid broadcast('watch.users', { clientAction, id, data: data! });\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.users', { clientAction, diff: diff!, unset: unset!, id });\n\t});\n\n\twatcher.on<ILoginServiceConfiguration>(LoginServiceConfiguration.getCollectionName(), async ({ clientAction, id }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.loginServiceConfiguration', { clientAction, id });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = await LoginServiceConfiguration.findOne<Omit<ILoginServiceConfiguration, 'secret'>>(id, { projection: { secret: 0 } });\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.loginServiceConfiguration', { clientAction, data, id });\n\t});\n\n\twatcher.on<IInstanceStatus>(InstanceStatus.getCollectionName(), ({ clientAction, id, data, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.instanceStatus', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.instanceStatus', { clientAction, data, diff, id });\n\t});\n\n\twatcher.on<IIntegrationHistory>(IntegrationHistory.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated': {\n\t\t\t\tconst history = await IntegrationHistory.findOneById<Pick<IIntegrationHistory, 'integration'>>(id, {\n\t\t\t\t\tprojection: { 'integration._id': 1 },\n\t\t\t\t});\n\t\t\t\tif (!history?.integration) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvoid broadcast('watch.integrationHistory', { clientAction, data: history, diff, id });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'inserted': {\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvoid broadcast('watch.integrationHistory', { clientAction, data, diff, id });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\twatcher.on<IIntegration>(Integrations.getCollectionName(), async ({ clientAction, id, data: eventData }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.integrations', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = eventData ?? (await Integrations.findOneById(id));\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.integrations', { clientAction, data, id });\n\t});\n\n\twatcher.on<IEmailInbox>(EmailInbox.getCollectionName(), async ({ clientAction, id, data: eventData }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.emailInbox', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = eventData ?? (await EmailInbox.findOneById(id));\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.emailInbox', { clientAction, data, id });\n\t});\n\n\twatcher.on<IPbxEvent>(PbxEvents.getCollectionName(), async ({ clientAction, id, data: eventData }) => {\n\t\t// For now, we just care about insertions here\n\t\tif (clientAction === 'inserted') {\n\t\t\tconst data = eventData ?? (await PbxEvents.findOneById(id));\n\t\t\tif (!data || !['ContactStatus', 'Hangup'].includes(data.event)) {\n\t\t\t\t// For now, we'll only care about agent connect/disconnect events\n\t\t\t\t// Other events are not handled by watchers but by service\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvoid broadcast('watch.pbxevents', { clientAction, data, id });\n\t\t}\n\t});\n\n\twatcher.on<ILivechatPriority>(LivechatPriority.getCollectionName(), async ({ clientAction, id, diff }) => {\n\t\tif (clientAction !== 'updated' || !diff || !('name' in diff)) {\n\t\t\t// For now, we don't support this actions from happening\n\t\t\treturn;\n\t\t}\n\n\t\t// This solves the problem of broadcasting, since now, watcher is the one in charge of doing it.\n\t\t// What i don't like is the idea of giving more responsibilities to watcher, even when this works\n\t\tvoid broadcast('watch.priorities', { clientAction, id, diff });\n\t});\n\n\twatcherStarted = true;\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/modules/watchers/watchers.module.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/modules/watchers/watchers.module.ts","inputSourceMap":{"version":3,"file":"server/modules/watchers/watchers.module.ts","sourceRoot":"","sources":["server/modules/watchers/watchers.module.ts"],"names":[],"mappings":"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","sourcesContent":["import type { EventSignatures } from '@rocket.chat/core-services';\nimport { dbWatchersDisabled } from '@rocket.chat/core-services';\nimport type {\n\tISubscription,\n\tIUser,\n\tILoginServiceConfiguration,\n\tIIntegrationHistory,\n\tILivechatDepartmentAgents,\n\tIMessage,\n\tIPermission,\n\tISetting,\n\tIRoom,\n\tIInstanceStatus,\n\tIIntegration,\n\tIEmailInbox,\n\tIPbxEvent,\n\tILivechatInquiryRecord,\n\tIRole,\n\tILivechatPriority,\n} from '@rocket.chat/core-typings';\nimport {\n\tSubscriptions,\n\tMessages,\n\tUsers,\n\tSettings,\n\tRoles,\n\tLivechatInquiry,\n\tLivechatDepartmentAgents,\n\tRooms,\n\tLoginServiceConfiguration,\n\tInstanceStatus,\n\tIntegrationHistory,\n\tIntegrations,\n\tEmailInbox,\n\tPbxEvents,\n\tPermissions,\n\tLivechatPriority,\n} from '@rocket.chat/models';\n\nimport { getMessageToBroadcast } from '../../../app/lib/server/lib/notifyListener';\nimport { subscriptionFields, roomFields } from '../../../lib/publishFields';\nimport type { DatabaseWatcher } from '../../database/DatabaseWatcher';\n\ntype BroadcastCallback = <T extends keyof EventSignatures>(event: T, ...args: Parameters<EventSignatures[T]>) => Promise<void>;\n\nconst hasKeys =\n\t(requiredKeys: string[]): ((data?: Record<string, any>) => boolean) =>\n\t(data?: Record<string, any>): boolean => {\n\t\tif (!data) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.keys(data)\n\t\t\t.filter((key) => key !== '_id')\n\t\t\t.map((key) => key.split('.')[0])\n\t\t\t.some((key) => requiredKeys.includes(key));\n\t};\n\nconst hasRoomFields = hasKeys(Object.keys(roomFields));\nconst hasSubscriptionFields = hasKeys(Object.keys(subscriptionFields));\n\nlet watcherStarted = false;\nexport function isWatcherRunning(): boolean {\n\treturn watcherStarted;\n}\n\nexport function initWatchers(watcher: DatabaseWatcher, broadcast: BroadcastCallback): void {\n\t// watch for changes on the database and broadcast them to the other instances\n\tif (!dbWatchersDisabled) {\n\t\twatcher.on<IMessage>(Messages.getCollectionName(), async ({ clientAction, id, data }) => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'inserted':\n\t\t\t\tcase 'updated':\n\t\t\t\t\tconst message = await getMessageToBroadcast({ id, data });\n\t\t\t\t\tif (!message) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvoid broadcast('watch.messages', { message });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\twatcher.on<ISubscription>(Subscriptions.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated': {\n\t\t\t\tif (!hasSubscriptionFields(data || diff)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Override data cuz we do not publish all fields\n\t\t\t\tconst subscription =\n\t\t\t\t\tdata ||\n\t\t\t\t\t(await Subscriptions.findOneById<\n\t\t\t\t\t\tPick<\n\t\t\t\t\t\t\tISubscription,\n\t\t\t\t\t\t\t| 't'\n\t\t\t\t\t\t\t| 'ts'\n\t\t\t\t\t\t\t| 'ls'\n\t\t\t\t\t\t\t| 'lr'\n\t\t\t\t\t\t\t| 'name'\n\t\t\t\t\t\t\t| 'fname'\n\t\t\t\t\t\t\t| 'rid'\n\t\t\t\t\t\t\t| 'code'\n\t\t\t\t\t\t\t| 'f'\n\t\t\t\t\t\t\t| 'u'\n\t\t\t\t\t\t\t| 'open'\n\t\t\t\t\t\t\t| 'alert'\n\t\t\t\t\t\t\t| 'roles'\n\t\t\t\t\t\t\t| 'unread'\n\t\t\t\t\t\t\t| 'prid'\n\t\t\t\t\t\t\t| 'userMentions'\n\t\t\t\t\t\t\t| 'groupMentions'\n\t\t\t\t\t\t\t| 'archived'\n\t\t\t\t\t\t\t| 'audioNotificationValue'\n\t\t\t\t\t\t\t| 'desktopNotifications'\n\t\t\t\t\t\t\t| 'mobilePushNotifications'\n\t\t\t\t\t\t\t| 'emailNotifications'\n\t\t\t\t\t\t\t| 'desktopPrefOrigin'\n\t\t\t\t\t\t\t| 'mobilePrefOrigin'\n\t\t\t\t\t\t\t| 'emailPrefOrigin'\n\t\t\t\t\t\t\t| 'unreadAlert'\n\t\t\t\t\t\t\t| '_updatedAt'\n\t\t\t\t\t\t\t| 'blocked'\n\t\t\t\t\t\t\t| 'blocker'\n\t\t\t\t\t\t\t| 'autoTranslate'\n\t\t\t\t\t\t\t| 'autoTranslateLanguage'\n\t\t\t\t\t\t\t| 'disableNotifications'\n\t\t\t\t\t\t\t| 'hideUnreadStatus'\n\t\t\t\t\t\t\t| 'hideMentionStatus'\n\t\t\t\t\t\t\t| 'muteGroupMentions'\n\t\t\t\t\t\t\t| 'ignored'\n\t\t\t\t\t\t\t| 'E2EKey'\n\t\t\t\t\t\t\t| 'E2ESuggestedKey'\n\t\t\t\t\t\t\t| 'oldRoomKeys'\n\t\t\t\t\t\t\t| 'tunread'\n\t\t\t\t\t\t\t| 'tunreadGroup'\n\t\t\t\t\t\t\t| 'tunreadUser'\n\n\t\t\t\t\t\t\t// Omnichannel fields\n\t\t\t\t\t\t\t| 'department'\n\t\t\t\t\t\t\t| 'v'\n\t\t\t\t\t\t\t| 'onHold'\n\t\t\t\t\t\t>\n\t\t\t\t\t>(id, {\n\t\t\t\t\t\tprojection: subscriptionFields,\n\t\t\t\t\t}));\n\n\t\t\t\tif (!subscription) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvoid broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'removed': {\n\t\t\t\tconst trash = (await Subscriptions.trashFindOneById(id, {\n\t\t\t\t\tprojection: { u: 1, rid: 1, t: 1 },\n\t\t\t\t})) as Pick<ISubscription, 'u' | 'rid' | '_id'> | undefined;\n\t\t\t\tconst subscription = trash || { _id: id };\n\t\t\t\tvoid broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\twatcher.on<IRole>(Roles.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.roles', {\n\t\t\t\tclientAction: 'removed',\n\t\t\t\trole: {\n\t\t\t\t\t_id: id,\n\t\t\t\t\tname: id,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst role = data || (await Roles.findOneById(id));\n\n\t\tif (!role) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.roles', {\n\t\t\tclientAction: 'changed',\n\t\t\trole,\n\t\t});\n\t});\n\n\twatcher.on<ILivechatInquiryRecord>(LivechatInquiry.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated':\n\t\t\t\tdata = data ?? (await LivechatInquiry.findOneById(id)) ?? undefined;\n\t\t\t\tbreak;\n\n\t\t\tcase 'removed':\n\t\t\t\tdata = (await LivechatInquiry.trashFindOneById(id)) ?? undefined;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.inquiries', { clientAction, inquiry: data, diff });\n\t});\n\n\twatcher.on<ILivechatDepartmentAgents>(LivechatDepartmentAgents.getCollectionName(), async ({ clientAction, id, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tconst data = await LivechatDepartmentAgents.trashFindOneById<Pick<ILivechatDepartmentAgents, 'agentId' | 'departmentId'>>(id, {\n\t\t\t\tprojection: { agentId: 1, departmentId: 1 },\n\t\t\t});\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid broadcast('watch.livechatDepartmentAgents', { clientAction, id, data, diff });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = await LivechatDepartmentAgents.findOneById<Pick<ILivechatDepartmentAgents, 'agentId' | 'departmentId'>>(id, {\n\t\t\tprojection: { agentId: 1, departmentId: 1 },\n\t\t});\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tvoid broadcast('watch.livechatDepartmentAgents', { clientAction, id, data, diff });\n\t});\n\n\twatcher.on<IPermission>(Permissions.getCollectionName(), async ({ clientAction, id, data: eventData, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\t\tlet data;\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated':\n\t\t\tcase 'inserted':\n\t\t\t\tdata = eventData ?? (await Permissions.findOneById(id));\n\t\t\t\tbreak;\n\n\t\t\tcase 'removed':\n\t\t\t\tdata = { _id: id, roles: [] };\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('permission.changed', { clientAction, data });\n\n\t\tif (data.level === 'settings' && data.settingId) {\n\t\t\t// if the permission changes, the effect on the visible settings depends on the role affected.\n\t\t\t// The selected-settings-based consumers have to react accordingly and either add or remove the\n\t\t\t// setting from the user's collection\n\t\t\tconst setting = await Settings.findOneNotHiddenById(data.settingId);\n\t\t\tif (!setting) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid broadcast('watch.settings', { clientAction: 'updated', setting });\n\t\t}\n\t});\n\n\twatcher.on<ISetting>(Settings.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\n\t\tlet setting;\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated':\n\t\t\tcase 'inserted': {\n\t\t\t\tsetting = data ?? (await Settings.findOneById(id));\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'removed': {\n\t\t\t\tsetting = data ?? (await Settings.trashFindOneById(id));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!setting) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.settings', { clientAction, setting });\n\t});\n\n\twatcher.on<IRoom>(Rooms.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.rooms', { clientAction, room: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tif (!hasRoomFields(data || diff)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = data ?? (await Rooms.findOneById(id, { projection: roomFields }));\n\t\tif (!room) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.rooms', { clientAction, room });\n\t});\n\n\t// TODO: Prevent flood from database on username change, what causes changes on all past messages from that user\n\t// and most of those messages are not loaded by the clients.\n\twatcher.on<IUser>(Users.getCollectionName(), ({ clientAction, id, data, diff, unset }) => {\n\t\t// LivechatCount is updated each time an agent is routed to a chat. This prop is not used on the UI so we don't need\n\t\t// to broadcast events originated by it when it's the only update on the user\n\t\tif (diff && Object.keys(diff).length === 1 && 'livechatCount' in diff) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.users', { clientAction, id });\n\t\t\treturn;\n\t\t}\n\t\tif (clientAction === 'inserted') {\n\t\t\tvoid broadcast('watch.users', { clientAction, id, data: data! });\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.users', { clientAction, diff: diff!, unset: unset!, id });\n\t});\n\n\twatcher.on<ILoginServiceConfiguration>(LoginServiceConfiguration.getCollectionName(), async ({ clientAction, id }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.loginServiceConfiguration', { clientAction, id });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = await LoginServiceConfiguration.findOne<Omit<ILoginServiceConfiguration, 'secret'>>(id, { projection: { secret: 0 } });\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.loginServiceConfiguration', { clientAction, data, id });\n\t});\n\n\twatcher.on<IInstanceStatus>(InstanceStatus.getCollectionName(), ({ clientAction, id, data, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.instanceStatus', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.instanceStatus', { clientAction, data, diff, id });\n\t});\n\n\twatcher.on<IIntegrationHistory>(IntegrationHistory.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated': {\n\t\t\t\tconst history = await IntegrationHistory.findOneById<Pick<IIntegrationHistory, 'integration'>>(id, {\n\t\t\t\t\tprojection: { 'integration._id': 1 },\n\t\t\t\t});\n\t\t\t\tif (!history?.integration) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvoid broadcast('watch.integrationHistory', { clientAction, data: history, diff, id });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'inserted': {\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvoid broadcast('watch.integrationHistory', { clientAction, data, diff, id });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\twatcher.on<IIntegration>(Integrations.getCollectionName(), async ({ clientAction, id, data: eventData }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.integrations', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = eventData ?? (await Integrations.findOneById(id));\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.integrations', { clientAction, data, id });\n\t});\n\n\twatcher.on<IEmailInbox>(EmailInbox.getCollectionName(), async ({ clientAction, id, data: eventData }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.emailInbox', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = eventData ?? (await EmailInbox.findOneById(id));\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.emailInbox', { clientAction, data, id });\n\t});\n\n\twatcher.on<IPbxEvent>(PbxEvents.getCollectionName(), async ({ clientAction, id, data: eventData }) => {\n\t\t// For now, we just care about insertions here\n\t\tif (clientAction === 'inserted') {\n\t\t\tconst data = eventData ?? (await PbxEvents.findOneById(id));\n\t\t\tif (!data || !['ContactStatus', 'Hangup'].includes(data.event)) {\n\t\t\t\t// For now, we'll only care about agent connect/disconnect events\n\t\t\t\t// Other events are not handled by watchers but by service\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvoid broadcast('watch.pbxevents', { clientAction, data, id });\n\t\t}\n\t});\n\n\twatcher.on<ILivechatPriority>(LivechatPriority.getCollectionName(), async ({ clientAction, id, diff }) => {\n\t\tif (clientAction !== 'updated' || !diff || !('name' in diff)) {\n\t\t\t// For now, we don't support this actions from happening\n\t\t\treturn;\n\t\t}\n\n\t\t// This solves the problem of broadcasting, since now, watcher is the one in charge of doing it.\n\t\t// What i don't like is the idea of giving more responsibilities to watcher, even when this works\n\t\tvoid broadcast('watch.priorities', { clientAction, id, diff });\n\t});\n\n\twatcherStarted = true;\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      isWatcherRunning: () => isWatcherRunning,\n      initWatchers: () => initWatchers\n    });\n    let dbWatchersDisabled;\n    module.link(\"@rocket.chat/core-services\", {\n      dbWatchersDisabled(v) {\n        dbWatchersDisabled = v;\n      }\n    }, 0);\n    let Subscriptions, Messages, Users, Settings, Roles, LivechatInquiry, LivechatDepartmentAgents, Rooms, LoginServiceConfiguration, InstanceStatus, IntegrationHistory, Integrations, EmailInbox, PbxEvents, Permissions, LivechatPriority;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Messages(v) {\n        Messages = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      Settings(v) {\n        Settings = v;\n      },\n      Roles(v) {\n        Roles = v;\n      },\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      },\n      LivechatDepartmentAgents(v) {\n        LivechatDepartmentAgents = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      LoginServiceConfiguration(v) {\n        LoginServiceConfiguration = v;\n      },\n      InstanceStatus(v) {\n        InstanceStatus = v;\n      },\n      IntegrationHistory(v) {\n        IntegrationHistory = v;\n      },\n      Integrations(v) {\n        Integrations = v;\n      },\n      EmailInbox(v) {\n        EmailInbox = v;\n      },\n      PbxEvents(v) {\n        PbxEvents = v;\n      },\n      Permissions(v) {\n        Permissions = v;\n      },\n      LivechatPriority(v) {\n        LivechatPriority = v;\n      }\n    }, 1);\n    let getMessageToBroadcast;\n    module.link(\"../../../app/lib/server/lib/notifyListener\", {\n      getMessageToBroadcast(v) {\n        getMessageToBroadcast = v;\n      }\n    }, 2);\n    let subscriptionFields, roomFields;\n    module.link(\"../../../lib/publishFields\", {\n      subscriptionFields(v) {\n        subscriptionFields = v;\n      },\n      roomFields(v) {\n        roomFields = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const hasKeys = requiredKeys => data => {\n      if (!data) {\n        return false;\n      }\n      return Object.keys(data).filter(key => key !== '_id').map(key => key.split('.')[0]).some(key => requiredKeys.includes(key));\n    };\n    const hasRoomFields = hasKeys(Object.keys(roomFields));\n    const hasSubscriptionFields = hasKeys(Object.keys(subscriptionFields));\n    let watcherStarted = false;\n    function isWatcherRunning() {\n      return watcherStarted;\n    }\n    function initWatchers(watcher, broadcast) {\n      // watch for changes on the database and broadcast them to the other instances\n      if (!dbWatchersDisabled) {\n        watcher.on(Messages.getCollectionName(), async _ref => {\n          let {\n            clientAction,\n            id,\n            data\n          } = _ref;\n          switch (clientAction) {\n            case 'inserted':\n            case 'updated':\n              const message = await getMessageToBroadcast({\n                id,\n                data\n              });\n              if (!message) {\n                return;\n              }\n              void broadcast('watch.messages', {\n                message\n              });\n              break;\n          }\n        });\n      }\n      watcher.on(Subscriptions.getCollectionName(), async _ref2 => {\n        let {\n          clientAction,\n          id,\n          data,\n          diff\n        } = _ref2;\n        switch (clientAction) {\n          case 'inserted':\n          case 'updated':\n            {\n              if (!hasSubscriptionFields(data || diff)) {\n                return;\n              }\n              // Override data cuz we do not publish all fields\n              const subscription = data || (await Subscriptions.findOneById(id, {\n                projection: subscriptionFields\n              }));\n              if (!subscription) {\n                return;\n              }\n              void broadcast('watch.subscriptions', {\n                clientAction,\n                subscription\n              });\n              break;\n            }\n          case 'removed':\n            {\n              const trash = await Subscriptions.trashFindOneById(id, {\n                projection: {\n                  u: 1,\n                  rid: 1,\n                  t: 1\n                }\n              });\n              const subscription = trash || {\n                _id: id\n              };\n              void broadcast('watch.subscriptions', {\n                clientAction,\n                subscription\n              });\n              break;\n            }\n        }\n      });\n      watcher.on(Roles.getCollectionName(), async _ref3 => {\n        let {\n          clientAction,\n          id,\n          data,\n          diff\n        } = _ref3;\n        if (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n          // avoid useless changes\n          return;\n        }\n        if (clientAction === 'removed') {\n          void broadcast('watch.roles', {\n            clientAction: 'removed',\n            role: {\n              _id: id,\n              name: id\n            }\n          });\n          return;\n        }\n        const role = data || (await Roles.findOneById(id));\n        if (!role) {\n          return;\n        }\n        void broadcast('watch.roles', {\n          clientAction: 'changed',\n          role\n        });\n      });\n      watcher.on(LivechatInquiry.getCollectionName(), async _ref4 => {\n        var _ref5, _data, _await$LivechatInquir;\n        let {\n          clientAction,\n          id,\n          data,\n          diff\n        } = _ref4;\n        switch (clientAction) {\n          case 'inserted':\n          case 'updated':\n            data = (_ref5 = (_data = data) !== null && _data !== void 0 ? _data : await LivechatInquiry.findOneById(id)) !== null && _ref5 !== void 0 ? _ref5 : undefined;\n            break;\n          case 'removed':\n            data = (_await$LivechatInquir = await LivechatInquiry.trashFindOneById(id)) !== null && _await$LivechatInquir !== void 0 ? _await$LivechatInquir : undefined;\n            break;\n        }\n        if (!data) {\n          return;\n        }\n        void broadcast('watch.inquiries', {\n          clientAction,\n          inquiry: data,\n          diff\n        });\n      });\n      watcher.on(LivechatDepartmentAgents.getCollectionName(), async _ref6 => {\n        let {\n          clientAction,\n          id,\n          diff\n        } = _ref6;\n        if (clientAction === 'removed') {\n          const data = await LivechatDepartmentAgents.trashFindOneById(id, {\n            projection: {\n              agentId: 1,\n              departmentId: 1\n            }\n          });\n          if (!data) {\n            return;\n          }\n          void broadcast('watch.livechatDepartmentAgents', {\n            clientAction,\n            id,\n            data,\n            diff\n          });\n          return;\n        }\n        const data = await LivechatDepartmentAgents.findOneById(id, {\n          projection: {\n            agentId: 1,\n            departmentId: 1\n          }\n        });\n        if (!data) {\n          return;\n        }\n        void broadcast('watch.livechatDepartmentAgents', {\n          clientAction,\n          id,\n          data,\n          diff\n        });\n      });\n      watcher.on(Permissions.getCollectionName(), async _ref7 => {\n        let {\n          clientAction,\n          id,\n          data: eventData,\n          diff\n        } = _ref7;\n        if (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n          // avoid useless changes\n          return;\n        }\n        let data;\n        switch (clientAction) {\n          case 'updated':\n          case 'inserted':\n            data = eventData !== null && eventData !== void 0 ? eventData : await Permissions.findOneById(id);\n            break;\n          case 'removed':\n            data = {\n              _id: id,\n              roles: []\n            };\n            break;\n        }\n        if (!data) {\n          return;\n        }\n        void broadcast('permission.changed', {\n          clientAction,\n          data\n        });\n        if (data.level === 'settings' && data.settingId) {\n          // if the permission changes, the effect on the visible settings depends on the role affected.\n          // The selected-settings-based consumers have to react accordingly and either add or remove the\n          // setting from the user's collection\n          const setting = await Settings.findOneNotHiddenById(data.settingId);\n          if (!setting) {\n            return;\n          }\n          void broadcast('watch.settings', {\n            clientAction: 'updated',\n            setting\n          });\n        }\n      });\n      watcher.on(Settings.getCollectionName(), async _ref8 => {\n        let {\n          clientAction,\n          id,\n          data,\n          diff\n        } = _ref8;\n        if (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n          // avoid useless changes\n          return;\n        }\n        let setting;\n        switch (clientAction) {\n          case 'updated':\n          case 'inserted':\n            {\n              setting = data !== null && data !== void 0 ? data : await Settings.findOneById(id);\n              break;\n            }\n          case 'removed':\n            {\n              setting = data !== null && data !== void 0 ? data : await Settings.trashFindOneById(id);\n              break;\n            }\n        }\n        if (!setting) {\n          return;\n        }\n        void broadcast('watch.settings', {\n          clientAction,\n          setting\n        });\n      });\n      watcher.on(Rooms.getCollectionName(), async _ref9 => {\n        let {\n          clientAction,\n          id,\n          data,\n          diff\n        } = _ref9;\n        if (clientAction === 'removed') {\n          void broadcast('watch.rooms', {\n            clientAction,\n            room: {\n              _id: id\n            }\n          });\n          return;\n        }\n        if (!hasRoomFields(data || diff)) {\n          return;\n        }\n        const room = data !== null && data !== void 0 ? data : await Rooms.findOneById(id, {\n          projection: roomFields\n        });\n        if (!room) {\n          return;\n        }\n        void broadcast('watch.rooms', {\n          clientAction,\n          room\n        });\n      });\n      // TODO: Prevent flood from database on username change, what causes changes on all past messages from that user\n      // and most of those messages are not loaded by the clients.\n      watcher.on(Users.getCollectionName(), _ref10 => {\n        let {\n          clientAction,\n          id,\n          data,\n          diff,\n          unset\n        } = _ref10;\n        // LivechatCount is updated each time an agent is routed to a chat. This prop is not used on the UI so we don't need\n        // to broadcast events originated by it when it's the only update on the user\n        if (diff && Object.keys(diff).length === 1 && 'livechatCount' in diff) {\n          return;\n        }\n        if (clientAction === 'removed') {\n          void broadcast('watch.users', {\n            clientAction,\n            id\n          });\n          return;\n        }\n        if (clientAction === 'inserted') {\n          void broadcast('watch.users', {\n            clientAction,\n            id,\n            data: data\n          });\n          return;\n        }\n        void broadcast('watch.users', {\n          clientAction,\n          diff: diff,\n          unset: unset,\n          id\n        });\n      });\n      watcher.on(LoginServiceConfiguration.getCollectionName(), async _ref11 => {\n        let {\n          clientAction,\n          id\n        } = _ref11;\n        if (clientAction === 'removed') {\n          void broadcast('watch.loginServiceConfiguration', {\n            clientAction,\n            id\n          });\n          return;\n        }\n        const data = await LoginServiceConfiguration.findOne(id, {\n          projection: {\n            secret: 0\n          }\n        });\n        if (!data) {\n          return;\n        }\n        void broadcast('watch.loginServiceConfiguration', {\n          clientAction,\n          data,\n          id\n        });\n      });\n      watcher.on(InstanceStatus.getCollectionName(), _ref12 => {\n        let {\n          clientAction,\n          id,\n          data,\n          diff\n        } = _ref12;\n        if (clientAction === 'removed') {\n          void broadcast('watch.instanceStatus', {\n            clientAction,\n            id,\n            data: {\n              _id: id\n            }\n          });\n          return;\n        }\n        void broadcast('watch.instanceStatus', {\n          clientAction,\n          data,\n          diff,\n          id\n        });\n      });\n      watcher.on(IntegrationHistory.getCollectionName(), async _ref13 => {\n        let {\n          clientAction,\n          id,\n          data,\n          diff\n        } = _ref13;\n        switch (clientAction) {\n          case 'updated':\n            {\n              const history = await IntegrationHistory.findOneById(id, {\n                projection: {\n                  'integration._id': 1\n                }\n              });\n              if (!(history !== null && history !== void 0 && history.integration)) {\n                return;\n              }\n              void broadcast('watch.integrationHistory', {\n                clientAction,\n                data: history,\n                diff,\n                id\n              });\n              break;\n            }\n          case 'inserted':\n            {\n              if (!data) {\n                return;\n              }\n              void broadcast('watch.integrationHistory', {\n                clientAction,\n                data,\n                diff,\n                id\n              });\n              break;\n            }\n        }\n      });\n      watcher.on(Integrations.getCollectionName(), async _ref14 => {\n        let {\n          clientAction,\n          id,\n          data: eventData\n        } = _ref14;\n        if (clientAction === 'removed') {\n          void broadcast('watch.integrations', {\n            clientAction,\n            id,\n            data: {\n              _id: id\n            }\n          });\n          return;\n        }\n        const data = eventData !== null && eventData !== void 0 ? eventData : await Integrations.findOneById(id);\n        if (!data) {\n          return;\n        }\n        void broadcast('watch.integrations', {\n          clientAction,\n          data,\n          id\n        });\n      });\n      watcher.on(EmailInbox.getCollectionName(), async _ref15 => {\n        let {\n          clientAction,\n          id,\n          data: eventData\n        } = _ref15;\n        if (clientAction === 'removed') {\n          void broadcast('watch.emailInbox', {\n            clientAction,\n            id,\n            data: {\n              _id: id\n            }\n          });\n          return;\n        }\n        const data = eventData !== null && eventData !== void 0 ? eventData : await EmailInbox.findOneById(id);\n        if (!data) {\n          return;\n        }\n        void broadcast('watch.emailInbox', {\n          clientAction,\n          data,\n          id\n        });\n      });\n      watcher.on(PbxEvents.getCollectionName(), async _ref16 => {\n        let {\n          clientAction,\n          id,\n          data: eventData\n        } = _ref16;\n        // For now, we just care about insertions here\n        if (clientAction === 'inserted') {\n          const data = eventData !== null && eventData !== void 0 ? eventData : await PbxEvents.findOneById(id);\n          if (!data || !['ContactStatus', 'Hangup'].includes(data.event)) {\n            // For now, we'll only care about agent connect/disconnect events\n            // Other events are not handled by watchers but by service\n            return;\n          }\n          void broadcast('watch.pbxevents', {\n            clientAction,\n            data,\n            id\n          });\n        }\n      });\n      watcher.on(LivechatPriority.getCollectionName(), async _ref17 => {\n        let {\n          clientAction,\n          id,\n          diff\n        } = _ref17;\n        if (clientAction !== 'updated' || !diff || !('name' in diff)) {\n          // For now, we don't support this actions from happening\n          return;\n        }\n        // This solves the problem of broadcasting, since now, watcher is the one in charge of doing it.\n        // What i don't like is the idea of giving more responsibilities to watcher, even when this works\n        void broadcast('watch.priorities', {\n          clientAction,\n          id,\n          diff\n        });\n      });\n      watcherStarted = true;\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","isWatcherRunning","initWatchers","dbWatchersDisabled","link","v","Subscriptions","Messages","Users","Settings","Roles","LivechatInquiry","LivechatDepartmentAgents","Rooms","LoginServiceConfiguration","InstanceStatus","IntegrationHistory","Integrations","EmailInbox","PbxEvents","Permissions","LivechatPriority","getMessageToBroadcast","subscriptionFields","roomFields","__reifyWaitForDeps__","hasKeys","requiredKeys","data","Object","keys","filter","key","map","split","some","includes","hasRoomFields","hasSubscriptionFields","watcherStarted","watcher","broadcast","on","getCollectionName","_ref","clientAction","id","message","_ref2","diff","subscription","findOneById","projection","trash","trashFindOneById","u","rid","t","_id","_ref3","length","_updatedAt","role","name","_ref4","_ref5","_data","_await$LivechatInquir","undefined","inquiry","_ref6","agentId","departmentId","_ref7","eventData","roles","level","settingId","setting","findOneNotHiddenById","_ref8","_ref9","room","_ref10","unset","_ref11","findOne","secret","_ref12","_ref13","history","integration","_ref14","_ref15","_ref16","event","_ref17","__reify_async_result__","_reifyError","self","async"],"sources":["server/modules/watchers/watchers.module.ts"],"sourcesContent":["import type { EventSignatures } from '@rocket.chat/core-services';\nimport { dbWatchersDisabled } from '@rocket.chat/core-services';\nimport type {\n\tISubscription,\n\tIUser,\n\tILoginServiceConfiguration,\n\tIIntegrationHistory,\n\tILivechatDepartmentAgents,\n\tIMessage,\n\tIPermission,\n\tISetting,\n\tIRoom,\n\tIInstanceStatus,\n\tIIntegration,\n\tIEmailInbox,\n\tIPbxEvent,\n\tILivechatInquiryRecord,\n\tIRole,\n\tILivechatPriority,\n} from '@rocket.chat/core-typings';\nimport {\n\tSubscriptions,\n\tMessages,\n\tUsers,\n\tSettings,\n\tRoles,\n\tLivechatInquiry,\n\tLivechatDepartmentAgents,\n\tRooms,\n\tLoginServiceConfiguration,\n\tInstanceStatus,\n\tIntegrationHistory,\n\tIntegrations,\n\tEmailInbox,\n\tPbxEvents,\n\tPermissions,\n\tLivechatPriority,\n} from '@rocket.chat/models';\n\nimport { getMessageToBroadcast } from '../../../app/lib/server/lib/notifyListener';\nimport { subscriptionFields, roomFields } from '../../../lib/publishFields';\nimport type { DatabaseWatcher } from '../../database/DatabaseWatcher';\n\ntype BroadcastCallback = <T extends keyof EventSignatures>(event: T, ...args: Parameters<EventSignatures[T]>) => Promise<void>;\n\nconst hasKeys =\n\t(requiredKeys: string[]): ((data?: Record<string, any>) => boolean) =>\n\t(data?: Record<string, any>): boolean => {\n\t\tif (!data) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.keys(data)\n\t\t\t.filter((key) => key !== '_id')\n\t\t\t.map((key) => key.split('.')[0])\n\t\t\t.some((key) => requiredKeys.includes(key));\n\t};\n\nconst hasRoomFields = hasKeys(Object.keys(roomFields));\nconst hasSubscriptionFields = hasKeys(Object.keys(subscriptionFields));\n\nlet watcherStarted = false;\nexport function isWatcherRunning(): boolean {\n\treturn watcherStarted;\n}\n\nexport function initWatchers(watcher: DatabaseWatcher, broadcast: BroadcastCallback): void {\n\t// watch for changes on the database and broadcast them to the other instances\n\tif (!dbWatchersDisabled) {\n\t\twatcher.on<IMessage>(Messages.getCollectionName(), async ({ clientAction, id, data }) => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'inserted':\n\t\t\t\tcase 'updated':\n\t\t\t\t\tconst message = await getMessageToBroadcast({ id, data });\n\t\t\t\t\tif (!message) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvoid broadcast('watch.messages', { message });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\twatcher.on<ISubscription>(Subscriptions.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated': {\n\t\t\t\tif (!hasSubscriptionFields(data || diff)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Override data cuz we do not publish all fields\n\t\t\t\tconst subscription =\n\t\t\t\t\tdata ||\n\t\t\t\t\t(await Subscriptions.findOneById<\n\t\t\t\t\t\tPick<\n\t\t\t\t\t\t\tISubscription,\n\t\t\t\t\t\t\t| 't'\n\t\t\t\t\t\t\t| 'ts'\n\t\t\t\t\t\t\t| 'ls'\n\t\t\t\t\t\t\t| 'lr'\n\t\t\t\t\t\t\t| 'name'\n\t\t\t\t\t\t\t| 'fname'\n\t\t\t\t\t\t\t| 'rid'\n\t\t\t\t\t\t\t| 'code'\n\t\t\t\t\t\t\t| 'f'\n\t\t\t\t\t\t\t| 'u'\n\t\t\t\t\t\t\t| 'open'\n\t\t\t\t\t\t\t| 'alert'\n\t\t\t\t\t\t\t| 'roles'\n\t\t\t\t\t\t\t| 'unread'\n\t\t\t\t\t\t\t| 'prid'\n\t\t\t\t\t\t\t| 'userMentions'\n\t\t\t\t\t\t\t| 'groupMentions'\n\t\t\t\t\t\t\t| 'archived'\n\t\t\t\t\t\t\t| 'audioNotificationValue'\n\t\t\t\t\t\t\t| 'desktopNotifications'\n\t\t\t\t\t\t\t| 'mobilePushNotifications'\n\t\t\t\t\t\t\t| 'emailNotifications'\n\t\t\t\t\t\t\t| 'desktopPrefOrigin'\n\t\t\t\t\t\t\t| 'mobilePrefOrigin'\n\t\t\t\t\t\t\t| 'emailPrefOrigin'\n\t\t\t\t\t\t\t| 'unreadAlert'\n\t\t\t\t\t\t\t| '_updatedAt'\n\t\t\t\t\t\t\t| 'blocked'\n\t\t\t\t\t\t\t| 'blocker'\n\t\t\t\t\t\t\t| 'autoTranslate'\n\t\t\t\t\t\t\t| 'autoTranslateLanguage'\n\t\t\t\t\t\t\t| 'disableNotifications'\n\t\t\t\t\t\t\t| 'hideUnreadStatus'\n\t\t\t\t\t\t\t| 'hideMentionStatus'\n\t\t\t\t\t\t\t| 'muteGroupMentions'\n\t\t\t\t\t\t\t| 'ignored'\n\t\t\t\t\t\t\t| 'E2EKey'\n\t\t\t\t\t\t\t| 'E2ESuggestedKey'\n\t\t\t\t\t\t\t| 'oldRoomKeys'\n\t\t\t\t\t\t\t| 'tunread'\n\t\t\t\t\t\t\t| 'tunreadGroup'\n\t\t\t\t\t\t\t| 'tunreadUser'\n\n\t\t\t\t\t\t\t// Omnichannel fields\n\t\t\t\t\t\t\t| 'department'\n\t\t\t\t\t\t\t| 'v'\n\t\t\t\t\t\t\t| 'onHold'\n\t\t\t\t\t\t>\n\t\t\t\t\t>(id, {\n\t\t\t\t\t\tprojection: subscriptionFields,\n\t\t\t\t\t}));\n\n\t\t\t\tif (!subscription) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvoid broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'removed': {\n\t\t\t\tconst trash = (await Subscriptions.trashFindOneById(id, {\n\t\t\t\t\tprojection: { u: 1, rid: 1, t: 1 },\n\t\t\t\t})) as Pick<ISubscription, 'u' | 'rid' | '_id'> | undefined;\n\t\t\t\tconst subscription = trash || { _id: id };\n\t\t\t\tvoid broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\twatcher.on<IRole>(Roles.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.roles', {\n\t\t\t\tclientAction: 'removed',\n\t\t\t\trole: {\n\t\t\t\t\t_id: id,\n\t\t\t\t\tname: id,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst role = data || (await Roles.findOneById(id));\n\n\t\tif (!role) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.roles', {\n\t\t\tclientAction: 'changed',\n\t\t\trole,\n\t\t});\n\t});\n\n\twatcher.on<ILivechatInquiryRecord>(LivechatInquiry.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'inserted':\n\t\t\tcase 'updated':\n\t\t\t\tdata = data ?? (await LivechatInquiry.findOneById(id)) ?? undefined;\n\t\t\t\tbreak;\n\n\t\t\tcase 'removed':\n\t\t\t\tdata = (await LivechatInquiry.trashFindOneById(id)) ?? undefined;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.inquiries', { clientAction, inquiry: data, diff });\n\t});\n\n\twatcher.on<ILivechatDepartmentAgents>(LivechatDepartmentAgents.getCollectionName(), async ({ clientAction, id, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tconst data = await LivechatDepartmentAgents.trashFindOneById<Pick<ILivechatDepartmentAgents, 'agentId' | 'departmentId'>>(id, {\n\t\t\t\tprojection: { agentId: 1, departmentId: 1 },\n\t\t\t});\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid broadcast('watch.livechatDepartmentAgents', { clientAction, id, data, diff });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = await LivechatDepartmentAgents.findOneById<Pick<ILivechatDepartmentAgents, 'agentId' | 'departmentId'>>(id, {\n\t\t\tprojection: { agentId: 1, departmentId: 1 },\n\t\t});\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tvoid broadcast('watch.livechatDepartmentAgents', { clientAction, id, data, diff });\n\t});\n\n\twatcher.on<IPermission>(Permissions.getCollectionName(), async ({ clientAction, id, data: eventData, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\t\tlet data;\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated':\n\t\t\tcase 'inserted':\n\t\t\t\tdata = eventData ?? (await Permissions.findOneById(id));\n\t\t\t\tbreak;\n\n\t\t\tcase 'removed':\n\t\t\t\tdata = { _id: id, roles: [] };\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('permission.changed', { clientAction, data });\n\n\t\tif (data.level === 'settings' && data.settingId) {\n\t\t\t// if the permission changes, the effect on the visible settings depends on the role affected.\n\t\t\t// The selected-settings-based consumers have to react accordingly and either add or remove the\n\t\t\t// setting from the user's collection\n\t\t\tconst setting = await Settings.findOneNotHiddenById(data.settingId);\n\t\t\tif (!setting) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid broadcast('watch.settings', { clientAction: 'updated', setting });\n\t\t}\n\t});\n\n\twatcher.on<ISetting>(Settings.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tif (diff && Object.keys(diff).length === 1 && diff._updatedAt) {\n\t\t\t// avoid useless changes\n\t\t\treturn;\n\t\t}\n\n\t\tlet setting;\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated':\n\t\t\tcase 'inserted': {\n\t\t\t\tsetting = data ?? (await Settings.findOneById(id));\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'removed': {\n\t\t\t\tsetting = data ?? (await Settings.trashFindOneById(id));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!setting) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.settings', { clientAction, setting });\n\t});\n\n\twatcher.on<IRoom>(Rooms.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.rooms', { clientAction, room: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tif (!hasRoomFields(data || diff)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = data ?? (await Rooms.findOneById(id, { projection: roomFields }));\n\t\tif (!room) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.rooms', { clientAction, room });\n\t});\n\n\t// TODO: Prevent flood from database on username change, what causes changes on all past messages from that user\n\t// and most of those messages are not loaded by the clients.\n\twatcher.on<IUser>(Users.getCollectionName(), ({ clientAction, id, data, diff, unset }) => {\n\t\t// LivechatCount is updated each time an agent is routed to a chat. This prop is not used on the UI so we don't need\n\t\t// to broadcast events originated by it when it's the only update on the user\n\t\tif (diff && Object.keys(diff).length === 1 && 'livechatCount' in diff) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.users', { clientAction, id });\n\t\t\treturn;\n\t\t}\n\t\tif (clientAction === 'inserted') {\n\t\t\tvoid broadcast('watch.users', { clientAction, id, data: data! });\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.users', { clientAction, diff: diff!, unset: unset!, id });\n\t});\n\n\twatcher.on<ILoginServiceConfiguration>(LoginServiceConfiguration.getCollectionName(), async ({ clientAction, id }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.loginServiceConfiguration', { clientAction, id });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = await LoginServiceConfiguration.findOne<Omit<ILoginServiceConfiguration, 'secret'>>(id, { projection: { secret: 0 } });\n\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.loginServiceConfiguration', { clientAction, data, id });\n\t});\n\n\twatcher.on<IInstanceStatus>(InstanceStatus.getCollectionName(), ({ clientAction, id, data, diff }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.instanceStatus', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.instanceStatus', { clientAction, data, diff, id });\n\t});\n\n\twatcher.on<IIntegrationHistory>(IntegrationHistory.getCollectionName(), async ({ clientAction, id, data, diff }) => {\n\t\tswitch (clientAction) {\n\t\t\tcase 'updated': {\n\t\t\t\tconst history = await IntegrationHistory.findOneById<Pick<IIntegrationHistory, 'integration'>>(id, {\n\t\t\t\t\tprojection: { 'integration._id': 1 },\n\t\t\t\t});\n\t\t\t\tif (!history?.integration) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvoid broadcast('watch.integrationHistory', { clientAction, data: history, diff, id });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'inserted': {\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvoid broadcast('watch.integrationHistory', { clientAction, data, diff, id });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\twatcher.on<IIntegration>(Integrations.getCollectionName(), async ({ clientAction, id, data: eventData }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.integrations', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = eventData ?? (await Integrations.findOneById(id));\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.integrations', { clientAction, data, id });\n\t});\n\n\twatcher.on<IEmailInbox>(EmailInbox.getCollectionName(), async ({ clientAction, id, data: eventData }) => {\n\t\tif (clientAction === 'removed') {\n\t\t\tvoid broadcast('watch.emailInbox', { clientAction, id, data: { _id: id } });\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = eventData ?? (await EmailInbox.findOneById(id));\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid broadcast('watch.emailInbox', { clientAction, data, id });\n\t});\n\n\twatcher.on<IPbxEvent>(PbxEvents.getCollectionName(), async ({ clientAction, id, data: eventData }) => {\n\t\t// For now, we just care about insertions here\n\t\tif (clientAction === 'inserted') {\n\t\t\tconst data = eventData ?? (await PbxEvents.findOneById(id));\n\t\t\tif (!data || !['ContactStatus', 'Hangup'].includes(data.event)) {\n\t\t\t\t// For now, we'll only care about agent connect/disconnect events\n\t\t\t\t// Other events are not handled by watchers but by service\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvoid broadcast('watch.pbxevents', { clientAction, data, id });\n\t\t}\n\t});\n\n\twatcher.on<ILivechatPriority>(LivechatPriority.getCollectionName(), async ({ clientAction, id, diff }) => {\n\t\tif (clientAction !== 'updated' || !diff || !('name' in diff)) {\n\t\t\t// For now, we don't support this actions from happening\n\t\t\treturn;\n\t\t}\n\n\t\t// This solves the problem of broadcasting, since now, watcher is the one in charge of doing it.\n\t\t// What i don't like is the idea of giving more responsibilities to watcher, even when this works\n\t\tvoid broadcast('watch.priorities', { clientAction, id, diff });\n\t});\n\n\twatcherStarted = true;\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"7162386f0990f06c0ae7e41acd84b19e22a84755"}
