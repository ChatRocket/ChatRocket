[{"type":"js","data":"Package[\"core-runtime\"].queue(\"meteor-developer-oauth\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EmitterPromise = Package.meteor.EmitterPromise;\nvar OAuth = Package.oauth.OAuth;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar MeteorDeveloperAccounts;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"meteor-developer-oauth\":{\"meteor_developer_common.js\":function module(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/meteor-developer-oauth/meteor_developer_common.js                                                   //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nMeteorDeveloperAccounts = {};\nMeteorDeveloperAccounts._server = \"https://www.meteor.com\";\n\n// Options are:\n//  - developerAccountsServer: defaults to \"https://www.meteor.com\"\nMeteorDeveloperAccounts._config = options => {\n  if (options.developerAccountsServer) {\n    MeteorDeveloperAccounts._server = options.developerAccountsServer;\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"meteor_developer_server.js\":function module(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/meteor-developer-oauth/meteor_developer_server.js                                                   //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nOAuth.registerService(\"meteor-developer\", 2, null, async query => {\n  const response = await getTokens(query);\n  const {\n    accessToken\n  } = response;\n  const identity = await getIdentity(accessToken);\n  const serviceData = {\n    accessToken: OAuth.sealSecret(accessToken),\n    expiresAt: +new Date() + 1000 * response.expiresIn\n  };\n  Object.assign(serviceData, identity);\n\n  // only set the token in serviceData if it's there. this ensures\n  // that we don't lose old ones (since we only get this on the first\n  // log in attempt)\n  if (response.refreshToken) serviceData.refreshToken = OAuth.sealSecret(response.refreshToken);\n  return {\n    serviceData,\n    options: {\n      profile: {\n        name: serviceData.username\n      }\n    }\n    // XXX use username for name until meteor accounts has a profile with a name\n  };\n});\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\n// - refreshToken, if this is the first authorization request and we got a\n//   refresh token from the server\nconst getTokens = async query => {\n  const config = await ServiceConfiguration.configurations.findOneAsync({\n    service: 'meteor-developer'\n  });\n  if (!config) {\n    throw new ServiceConfiguration.ConfigError();\n  }\n  const body = OAuth._addValuesToQueryParams({\n    grant_type: 'authorization_code',\n    code: query.code,\n    client_id: config.clientId,\n    client_secret: OAuth.openSecret(config.secret),\n    redirect_uri: OAuth._redirectUri('meteor-developer', config)\n  }).toString();\n  return OAuth._fetch(MeteorDeveloperAccounts._server + '/oauth2/token', 'POST', {\n    headers: {\n      Accept: 'application/json',\n      'Content-type': 'application/x-www-form-urlencoded'\n    },\n    body\n  }).then(data => data.json()).then(data => {\n    if (data.error) {\n      throw new Error('Failed to complete OAuth handshake with Meteor developer accounts. ' + (data ? data.error : 'No response data'));\n    }\n    return {\n      accessToken: data.access_token,\n      refreshToken: data.refresh_token,\n      expiresIn: data.expires_in\n    };\n  }).catch(err => {\n    throw Object.assign(new Error(\"Failed to complete OAuth handshake with Meteor developer accounts. \".concat(err.message)), {\n      response: err.response\n    });\n  });\n};\nconst getIdentity = async accessToken => {\n  return OAuth._fetch(\"\".concat(MeteorDeveloperAccounts._server, \"/api/v1/identity\"), 'GET', {\n    headers: {\n      Authorization: \"Bearer \".concat(accessToken)\n    }\n  }).then(data => data.json()).catch(err => {\n    throw Object.assign(new Error('Failed to fetch identity from Meteor developer accounts. ' + err.message), {\n      response: err.response\n    });\n  });\n};\nMeteorDeveloperAccounts.retrieveCredential = (credentialToken, credentialSecret) => OAuth.retrieveCredential(credentialToken, credentialSecret);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      MeteorDeveloperAccounts: MeteorDeveloperAccounts\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/meteor-developer-oauth/meteor_developer_common.js\",\n    \"/node_modules/meteor/meteor-developer-oauth/meteor_developer_server.js\"\n  ]\n}});\n","servePath":"/packages/meteor-developer-oauth.js","sourceMap":{"version":3,"sources":["packages/meteor-developer-oauth/meteor_developer_common.js","packages/meteor-developer-oauth/meteor_developer_server.js"],"names":["MeteorDeveloperAccounts","_server","_config","options","developerAccountsServer","OAuth","registerService","query","response","getTokens","accessToken","identity","getIdentity","serviceData","sealSecret","expiresAt","Date","expiresIn","Object","assign","refreshToken","profile","name","username","config","ServiceConfiguration","configurations","findOneAsync","service","ConfigError","body","_addValuesToQueryParams","grant_type","code","client_id","clientId","client_secret","openSecret","secret","redirect_uri","_redirectUri","toString","_fetch","headers","Accept","then","data","json","error","Error","access_token","refresh_token","expires_in","catch","err","concat","message","Authorization","retrieveCredential","credentialToken","credentialSecret"],"mappings":"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","file":"/packages/meteor-developer-oauth.js","sourcesContent":["MeteorDeveloperAccounts = {};\n\nMeteorDeveloperAccounts._server = \"https://www.meteor.com\";\n\n// Options are:\n//  - developerAccountsServer: defaults to \"https://www.meteor.com\"\nMeteorDeveloperAccounts._config = options => {\n  if (options.developerAccountsServer) {\n    MeteorDeveloperAccounts._server = options.developerAccountsServer;\n  }\n};\n","OAuth.registerService(\"meteor-developer\", 2, null, async query => {\n  const response = await getTokens(query);\n  const { accessToken } = response;\n  const identity = await getIdentity(accessToken);\n\n  const serviceData = {\n    accessToken: OAuth.sealSecret(accessToken),\n    expiresAt: (+new Date) + (1000 * response.expiresIn)\n  };\n\n  Object.assign(serviceData, identity);\n\n  // only set the token in serviceData if it's there. this ensures\n  // that we don't lose old ones (since we only get this on the first\n  // log in attempt)\n  if (response.refreshToken)\n    serviceData.refreshToken = OAuth.sealSecret(response.refreshToken);\n\n  return {\n    serviceData,\n    options: {profile: {name: serviceData.username}}\n    // XXX use username for name until meteor accounts has a profile with a name\n  };\n});\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\n// - refreshToken, if this is the first authorization request and we got a\n//   refresh token from the server\nconst getTokens = async (query) => {\n  const config = await ServiceConfiguration.configurations.findOneAsync({\n    service: 'meteor-developer',\n  });\n  if (!config) {\n    throw new ServiceConfiguration.ConfigError();\n  }\n\n  const body = OAuth._addValuesToQueryParams({\n    grant_type: 'authorization_code',\n    code: query.code,\n    client_id: config.clientId,\n    client_secret: OAuth.openSecret(config.secret),\n    redirect_uri: OAuth._redirectUri('meteor-developer', config),\n  }).toString();\n\n  return OAuth._fetch(\n    MeteorDeveloperAccounts._server + '/oauth2/token',\n    'POST',\n    {\n      headers: {\n        Accept: 'application/json',\n        'Content-type': 'application/x-www-form-urlencoded',\n      },\n      body,\n    }\n  )\n    .then((data) => data.json())\n    .then((data) => {\n      if (data.error) {\n        throw new Error(\n          'Failed to complete OAuth handshake with Meteor developer accounts. ' +\n            (data ? data.error : 'No response data')\n        );\n      }\n      return {\n        accessToken: data.access_token,\n        refreshToken: data.refresh_token,\n        expiresIn: data.expires_in,\n      };\n    })\n    .catch((err) => {\n      throw Object.assign(\n        new Error(\n          `Failed to complete OAuth handshake with Meteor developer accounts. ${err.message}`\n        ),\n        { response: err.response }\n      );\n    });\n};\n\nconst getIdentity = async (accessToken) => {\n  return OAuth._fetch(\n    `${MeteorDeveloperAccounts._server}/api/v1/identity`,\n    'GET',\n    {\n      headers: { Authorization: `Bearer ${accessToken}` },\n    }\n  )\n    .then((data) => data.json())\n    .catch((err) => {\n      throw Object.assign(\n        new Error(\n          'Failed to fetch identity from Meteor developer accounts. ' +\n            err.message\n        ),\n        { response: err.response }\n      );\n    });\n};\n\nMeteorDeveloperAccounts.retrieveCredential =\n  (credentialToken, credentialSecret) =>\n    OAuth.retrieveCredential(credentialToken, credentialSecret);\n"]}}]