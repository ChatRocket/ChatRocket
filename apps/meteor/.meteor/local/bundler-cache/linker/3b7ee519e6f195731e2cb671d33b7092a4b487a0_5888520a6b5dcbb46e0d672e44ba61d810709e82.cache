[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\nPackage[\"core-runtime\"].queue(\"rocketchat:streamer\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar DDPCommon = Package['ddp-common'].DDPCommon;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar EV, Streamer;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"rocketchat:streamer\":{\"lib\":{\"ev.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/rocketchat_streamer/lib/ev.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals EV:true */\n/* exported EV */\n\nEV = class EV {\n  constructor() {\n    this.handlers = {};\n  }\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.handlers[event] && this.handlers[event].forEach(handler => handler.apply(this, args));\n  }\n  emitWithScope(event, scope) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n    return this.handlers[event] && this.handlers[event].forEach(handler => handler.apply(scope, args));\n  }\n  listenerCount(event) {\n    return this.handlers[event] && this.handlers[event].length || 0;\n  }\n  on(event, callback) {\n    if (!this.handlers[event]) {\n      this.handlers[event] = [];\n    }\n    this.handlers[event].push(callback);\n  }\n  once(event, callback) {\n    const self = this;\n    this.on(event, function onetimeCallback() {\n      self.removeListener(event, onetimeCallback);\n      callback.apply(this, arguments);\n    });\n  }\n  removeListener(event, callback) {\n    if (!this.handlers[event]) {\n      return;\n    }\n    const index = this.handlers[event].indexOf(callback);\n    if (index > -1) {\n      this.handlers[event].splice(index, 1);\n    }\n  }\n  removeAllListeners(event) {\n    this.handlers[event] = undefined;\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"client\":{\"client.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/rocketchat_streamer/client/client.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* globals DDPCommon, EV */\n/* eslint-disable new-cap */\nconst NonEmptyString = Match.Where(function (x) {\n  check(x, String);\n  return x.length > 0;\n});\nclass StreamerCentral extends EV {\n  constructor() {\n    super();\n    this.instances = {};\n    this.ddpConnections = {}; // since each Streamer instance can provide its own ddp connection, store them by streamer name\n  }\n  setupDdpConnection(name, ddpConnection) {\n    // make sure we only setup event listeners for each ddp connection once\n    if (ddpConnection.hasMeteorStreamerEventListeners) {\n      return;\n    }\n    ddpConnection._stream.on('message', raw_msg => {\n      const msg = DDPCommon.parseDDP(raw_msg);\n      if (msg && msg.msg === 'changed' && msg.collection && msg.fields && msg.fields.eventName && msg.fields.args) {\n        msg.fields.args.unshift(msg.fields.eventName);\n        msg.fields.args.unshift(msg.collection);\n        this.emit.apply(this, msg.fields.args);\n      }\n    });\n    // store ddp connection\n    this.storeDdpConnection(name, ddpConnection);\n  }\n  storeDdpConnection(name, ddpConnection) {\n    // mark the connection as setup for Streamer, and store it\n    ddpConnection.hasMeteorStreamerEventListeners = true;\n    this.ddpConnections[name] = ddpConnection;\n  }\n}\nMeteor.StreamerCentral = new StreamerCentral();\nMeteor.Streamer = class Streamer extends EV {\n  constructor(name) {\n    var _this;\n    let {\n      useCollection = false,\n      ddpConnection = Meteor.connection\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (Meteor.StreamerCentral.instances[name]) {\n      console.warn('Streamer instance already exists:', name);\n      return Meteor.StreamerCentral.instances[name];\n    }\n    Meteor.StreamerCentral.setupDdpConnection(name, ddpConnection);\n    super();\n    _this = this;\n    this.ddpConnection = ddpConnection || Meteor.connection;\n    Meteor.StreamerCentral.instances[name] = this;\n    this.name = name;\n    this.useCollection = useCollection;\n    this.subscriptions = {};\n    Meteor.StreamerCentral.on(this.subscriptionName, function (eventName) {\n      if (_this.subscriptions[eventName]) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        _this.subscriptions[eventName].lastMessage = args;\n        EV.prototype.emit.call(_this, eventName, ...args);\n      }\n    });\n    this.ddpConnection._stream.on('reset', () => {\n      EV.prototype.emit.call(this, '__reconnect__');\n    });\n  }\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    check(name, String);\n    this._name = name;\n  }\n  get subscriptionName() {\n    return \"stream-\".concat(this.name);\n  }\n  get useCollection() {\n    return this._useCollection;\n  }\n  set useCollection(useCollection) {\n    check(useCollection, Boolean);\n    this._useCollection = useCollection;\n  }\n  stop(eventName) {\n    return this.subscriptions[eventName] && this.subscriptions[eventName].subscription && this.subscriptions[eventName].subscription.stop();\n  }\n  stopAll() {\n    Object.keys(this.subscriptions).forEach(eventName => this.removeAllListeners(eventName));\n  }\n  unsubscribe(eventName) {\n    delete this.subscriptions[eventName];\n    EV.prototype.removeAllListeners.call(this, eventName);\n  }\n  subscribe(eventName, args) {\n    return new Promise((resolve, reject) => {\n      if (this.subscriptions[eventName]) {\n        return resolve();\n      }\n      const subscription = Tracker.nonreactive(() => this.ddpConnection.subscribe(this.subscriptionName, eventName, {\n        useCollection: this.useCollection,\n        args\n      }, {\n        onStop: () => reject(this.unsubscribe(eventName)),\n        onReady: resolve\n      }));\n      this.subscriptions[eventName] = {\n        subscription\n      };\n    });\n  }\n  onReconnect(fn) {\n    if (typeof fn === 'function') {\n      EV.prototype.on.call(this, '__reconnect__', fn);\n    }\n  }\n  getLastMessageFromEvent(eventName) {\n    const subscription = this.subscriptions[eventName];\n    if (subscription && subscription.lastMessage) {\n      return subscription.lastMessage;\n    }\n  }\n  removeAllListeners(eventName) {\n    EV.prototype.removeAllListeners.call(this, eventName);\n    return this.stop(eventName);\n  }\n  removeListener(eventName) {\n    if (this.listenerCount(eventName) === 1) {\n      this.stop(eventName);\n    }\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    EV.prototype.removeListener.call(this, eventName, ...args);\n  }\n  on(eventName) {\n    check(eventName, NonEmptyString);\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    const callback = args.pop();\n    check(callback, Function);\n    EV.prototype.on.call(this, eventName, callback);\n    return this.subscribe(eventName, args);\n  }\n  once(eventName) {\n    var _this2 = this;\n    check(eventName, NonEmptyString);\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n    const callback = args.pop();\n    check(callback, Function);\n    EV.prototype.once.call(this, eventName, function () {\n      callback(...arguments);\n      if (_this2.listenerCount(eventName) === 0) {\n        return _this2.stop(eventName);\n      }\n    });\n    return this.subscribe(eventName, args);\n  }\n  emit() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    this.ddpConnection.call(this.subscriptionName, ...args);\n  }\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      Streamer: Streamer\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/rocketchat:streamer/lib/ev.js\",\n    \"/node_modules/meteor/rocketchat:streamer/client/client.js\"\n  ]\n}});\n","servePath":"/packages/rocketchat_streamer.js","sourceMap":{"version":3,"sources":["packages/rocketchat:streamer/lib/ev.js","packages/rocketchat:streamer/client/client.js"],"names":["EV","constructor","handlers","emit","event","_len","arguments","length","args","Array","_key","forEach","handler","apply","emitWithScope","scope","_len2","_key2","listenerCount","on","callback","push","once","self","onetimeCallback","removeListener","index","indexOf","splice","removeAllListeners","undefined","NonEmptyString","Match","Where","x","check","String","StreamerCentral","instances","ddpConnections","setupDdpConnection","name","ddpConnection","hasMeteorStreamerEventListeners","_stream","raw_msg","msg","DDPCommon","parseDDP","collection","fields","eventName","unshift","storeDdpConnection","Meteor","Streamer","_this","useCollection","connection","console","warn","this","subscriptions","subscriptionName","lastMessage","prototype","call","_name","concat","_useCollection","Boolean","stop","subscription","stopAll","Object","keys","unsubscribe","subscribe","Promise","resolve","reject","Tracker","nonreactive","onStop","onReady","onReconnect","fn","getLastMessageFromEvent","_len3","_key3","pop","Function","_this2","_len4","_key4","_len5","_key5"],"mappings":"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","file":"/packages/rocketchat_streamer.js","sourcesContent":["/* globals EV:true */\n/* exported EV */\n\nEV = class EV {\n\tconstructor() {\n\t\tthis.handlers = {};\n\t}\n\n\temit(event, ...args) {\n\t\treturn this.handlers[event] && this.handlers[event].forEach(handler => handler.apply(this, args));\n\t}\n\n\temitWithScope(event, scope, ...args) {\n\t\treturn this.handlers[event] && this.handlers[event].forEach(handler => handler.apply(scope, args));\n\t}\n\n\tlistenerCount(event) {\n\t\treturn (this.handlers[event] && this.handlers[event].length) || 0;\n\t}\n\n\ton(event, callback) {\n\t\tif (!this.handlers[event]) {\n\t\t\tthis.handlers[event] = [];\n\t\t}\n\t\tthis.handlers[event].push(callback);\n\t}\n\n\tonce(event, callback) {\n\t\tconst self = this;\n\t\tthis.on(event, function onetimeCallback() {\n\t\t\tself.removeListener(event, onetimeCallback);\n\t\t\tcallback.apply(this, arguments);\n\t\t});\n\t}\n\n\tremoveListener(event, callback) {\n\t\tif (!this.handlers[event]) {\n\t\t\treturn;\n\t\t}\n\t\tconst index = this.handlers[event].indexOf(callback);\n\t\tif (index > -1) {\n\t\t\tthis.handlers[event].splice(index, 1);\n\t\t}\n\t}\n\n\tremoveAllListeners(event) {\n\t\tthis.handlers[event] = undefined;\n\t}\n};\n","/* globals DDPCommon, EV */\n/* eslint-disable new-cap */\nconst NonEmptyString = Match.Where(function (x) {\n\tcheck(x, String);\n\treturn x.length > 0;\n});\n\nclass StreamerCentral extends EV {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.instances = {};\n\t\tthis.ddpConnections = {};\t\t// since each Streamer instance can provide its own ddp connection, store them by streamer name\n\t}\n\n\tsetupDdpConnection(name, ddpConnection) {\n\t\t// make sure we only setup event listeners for each ddp connection once\n\t\tif (ddpConnection.hasMeteorStreamerEventListeners) {\n\t\t\treturn;\n\t\t}\n\t\tddpConnection._stream.on('message', (raw_msg) => {\n\t\t\tconst msg = DDPCommon.parseDDP(raw_msg);\n\t\t\tif (msg && msg.msg === 'changed' && msg.collection && msg.fields && msg.fields.eventName && msg.fields.args) {\n\t\t\t\tmsg.fields.args.unshift(msg.fields.eventName);\n\t\t\t\tmsg.fields.args.unshift(msg.collection);\n\t\t\t\tthis.emit.apply(this, msg.fields.args);\n\t\t\t}\n\t\t});\n\t\t// store ddp connection\n\t\tthis.storeDdpConnection(name, ddpConnection);\n\n\t}\n\n\tstoreDdpConnection(name, ddpConnection) {\n\t\t// mark the connection as setup for Streamer, and store it\n\t\tddpConnection.hasMeteorStreamerEventListeners = true;\n\t\tthis.ddpConnections[name] = ddpConnection;\n\t}\n}\n\nMeteor.StreamerCentral = new StreamerCentral;\n\nMeteor.Streamer = class Streamer extends EV {\n\tconstructor(name, { useCollection = false, ddpConnection = Meteor.connection } = {}) {\n\t\tif (Meteor.StreamerCentral.instances[name]) {\n\t\t\tconsole.warn('Streamer instance already exists:', name);\n\t\t\treturn Meteor.StreamerCentral.instances[name];\n\t\t}\n\t\tMeteor.StreamerCentral.setupDdpConnection(name, ddpConnection);\n\n\t\tsuper();\n\n\t\tthis.ddpConnection = ddpConnection || Meteor.connection;\n\n\t\tMeteor.StreamerCentral.instances[name] = this;\n\n\t\tthis.name = name;\n\t\tthis.useCollection = useCollection;\n\t\tthis.subscriptions = {};\n\n\t\tMeteor.StreamerCentral.on(this.subscriptionName, (eventName, ...args) => {\n\t\t\tif (this.subscriptions[eventName]) {\n\t\t\t\tthis.subscriptions[eventName].lastMessage = args;\n\t\t\t\tEV.prototype.emit.call(this, eventName, ...args);\n\t\t\t}\n\t\t});\n\n\t\tthis.ddpConnection._stream.on('reset', () => {\n\t\t\tEV.prototype.emit.call(this, '__reconnect__');\n\t\t});\n\t}\n\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\tset name(name) {\n\t\tcheck(name, String);\n\t\tthis._name = name;\n\t}\n\n\tget subscriptionName() {\n\t\treturn `stream-${this.name}`;\n\t}\n\n\tget useCollection() {\n\t\treturn this._useCollection;\n\t}\n\n\tset useCollection(useCollection) {\n\t\tcheck(useCollection, Boolean);\n\t\tthis._useCollection = useCollection;\n\t}\n\n\tstop(eventName) {\n\t\treturn this.subscriptions[eventName] && this.subscriptions[eventName].subscription && this.subscriptions[eventName].subscription.stop();\n\t}\n\n\tstopAll() {\n\t\tObject.keys(this.subscriptions).forEach(eventName => this.removeAllListeners(eventName));\n\t}\n\n\tunsubscribe(eventName) {\n\t\tdelete this.subscriptions[eventName];\n\t\tEV.prototype.removeAllListeners.call(this, eventName);\n\t}\n\n\tsubscribe(eventName, args) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this.subscriptions[eventName]) {\n\t\t\t\treturn resolve();\n\t\t\t}\n\t\t\tconst subscription = Tracker.nonreactive(() => this.ddpConnection.subscribe(\n\t\t\t\tthis.subscriptionName,\n\t\t\t\teventName,\n\t\t\t\t{ useCollection: this.useCollection, args },\n\t\t\t\t{\n\t\t\t\t\tonStop: () => reject(this.unsubscribe(eventName)),\n\t\t\t\t\tonReady: resolve\n\t\t\t\t}\n\t\t\t));\n\t\t\tthis.subscriptions[eventName] = { subscription };\n\t\t})\n\t}\n\n\tonReconnect(fn) {\n\t\tif (typeof fn === 'function') {\n\t\t\tEV.prototype.on.call(this, '__reconnect__', fn);\n\t\t}\n\t}\n\n\tgetLastMessageFromEvent(eventName) {\n\t\tconst subscription = this.subscriptions[eventName];\n\t\tif (subscription && subscription.lastMessage) {\n\t\t\treturn subscription.lastMessage;\n\t\t}\n\t}\n\n\tremoveAllListeners(eventName) {\n\t\tEV.prototype.removeAllListeners.call(this, eventName);\n\t\treturn this.stop(eventName);\n\t}\n\n\tremoveListener(eventName, ...args) {\n\t\tif (this.listenerCount(eventName) === 1) {\n\t\t\tthis.stop(eventName);\n\t\t}\n\t\tEV.prototype.removeListener.call(this, eventName, ...args);\n\t}\n\n\ton(eventName, ...args) {\n\t\tcheck(eventName, NonEmptyString);\n\n\t\tconst callback = args.pop();\n\t\tcheck(callback, Function);\n\n\t\tEV.prototype.on.call(this, eventName, callback);\n\n\t\treturn this.subscribe(eventName, args);\n\t}\n\n\tonce(eventName, ...args) {\n\t\tcheck(eventName, NonEmptyString);\n\n\t\tconst callback = args.pop();\n\t\tcheck(callback, Function);\n\n\t\tEV.prototype.once.call(this, eventName, (...args) => {\n\t\t\tcallback(...args);\n\t\t\tif (this.listenerCount(eventName) === 0) {\n\t\t\t\treturn this.stop(eventName);\n\t\t\t}\n\t\t});\n\n\t\treturn this.subscribe(eventName, args);\n\t}\n\n\temit(...args) {\n\t\tthis.ddpConnection.call(this.subscriptionName, ...args);\n\t}\n};\n"]}}]