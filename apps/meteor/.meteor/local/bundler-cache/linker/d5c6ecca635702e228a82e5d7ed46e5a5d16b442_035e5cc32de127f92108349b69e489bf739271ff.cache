[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\nPackage[\"core-runtime\"].queue(\"oauth\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar URL = Package.url.URL;\nvar URLSearchParams = Package.url.URLSearchParams;\nvar Reload = Package.reload.Reload;\nvar Base64 = Package.base64.Base64;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar OAuth;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"oauth\":{\"oauth_client.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/oauth/oauth_client.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// credentialToken -> credentialSecret. You must provide both the\n// credentialToken and the credentialSecret to retrieve an access token from\n// the _pendingCredentials collection.\nconst credentialSecrets = {};\nOAuth = {};\nOAuth.showPopup = (url, callback, dimensions) => {\n  throw new Error(\"OAuth.showPopup must be implemented on this arch.\");\n};\n\n// Determine the login style (popup or redirect) for this login flow.\n//\n//\nOAuth._loginStyle = (service, config, options) => {\n  if (Meteor.isCordova) {\n    return \"popup\";\n  }\n  let loginStyle = options && options.loginStyle || config.loginStyle || 'popup';\n  if (![\"popup\", \"redirect\"].includes(loginStyle)) throw new Error(\"Invalid login style: \".concat(loginStyle));\n\n  // If we don't have session storage (for example, Safari in private\n  // mode), the redirect login flow won't work, so fallback to the\n  // popup style.\n  if (loginStyle === 'redirect') {\n    try {\n      sessionStorage.setItem('Meteor.oauth.test', 'test');\n      sessionStorage.removeItem('Meteor.oauth.test');\n    } catch (e) {\n      loginStyle = 'popup';\n    }\n  }\n  return loginStyle;\n};\nOAuth._stateParam = (loginStyle, credentialToken, redirectUrl) => {\n  var _Meteor$settings, _Meteor$settings$publ, _Meteor$settings$publ2, _Meteor$settings$publ3;\n  const state = {\n    loginStyle,\n    credentialToken,\n    isCordova: Meteor.isCordova\n  };\n  if (loginStyle === 'redirect' || (_Meteor$settings = Meteor.settings) !== null && _Meteor$settings !== void 0 && (_Meteor$settings$publ = _Meteor$settings.public) !== null && _Meteor$settings$publ !== void 0 && (_Meteor$settings$publ2 = _Meteor$settings$publ.packages) !== null && _Meteor$settings$publ2 !== void 0 && (_Meteor$settings$publ3 = _Meteor$settings$publ2.oauth) !== null && _Meteor$settings$publ3 !== void 0 && _Meteor$settings$publ3.setRedirectUrlWhenLoginStyleIsPopup && loginStyle === 'popup') {\n    state.redirectUrl = redirectUrl || '' + window.location;\n  }\n\n  // Encode base64 as not all login services URI-encode the state\n  // parameter when they pass it back to us.\n  // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.\n  return Base64.encode(JSON.stringify(state));\n};\n\n// At the beginning of the redirect login flow, before we redirect to\n// the login service, save the credential token for this login attempt\n// in the reload migration data.\n//\nOAuth.saveDataForRedirect = (loginService, credentialToken) => {\n  Reload._onMigrate('oauth', () => [true, {\n    loginService,\n    credentialToken\n  }]);\n  Reload._migrate(null, {\n    immediateMigration: true\n  });\n};\n\n// At the end of the redirect login flow, when we've redirected back\n// to the application, retrieve the credentialToken and (if the login\n// was successful) the credentialSecret.\n//\n// Called at application startup.  Returns null if this is normal\n// application startup and we weren't just redirected at the end of\n// the login flow.\n//\nOAuth.getDataAfterRedirect = () => {\n  const migrationData = Reload._migrationData('oauth');\n  if (!(migrationData && migrationData.credentialToken)) return null;\n  const {\n    credentialToken\n  } = migrationData;\n  const key = OAuth._storageTokenPrefix + credentialToken;\n  let credentialSecret;\n  try {\n    credentialSecret = sessionStorage.getItem(key);\n    sessionStorage.removeItem(key);\n  } catch (e) {\n    Meteor._debug('error retrieving credentialSecret', e);\n  }\n  return {\n    loginService: migrationData.loginService,\n    credentialToken,\n    credentialSecret\n  };\n};\n\n/**\n * Launch an OAuth login flow.  For the popup login style, show the\n * popup.  For the redirect login style, save the credential token for\n * this login attempt in the reload migration data, and redirect to\n * the service for the login.\n *\n * @param {Object} options\n * @param {string} options.loginService \"facebook\", \"google\", etc.\n * @param {string} options.loginStyle \"popup\" or \"redirect\"\n * @param {string} options.loginUrl The URL at the login service provider to start the OAuth flow.\n *  credentialRequestCompleteCallback: for the popup flow, call when the popup\n *    is closed and we have the credential from the login service.\n * @param {string} options.credentialToken our identifier for this login flow.\n **/\nOAuth.launchLogin = options => {\n  if (!options.loginService) throw new Error('loginService required');\n  if (options.loginStyle === 'popup') {\n    OAuth.showPopup(options.loginUrl, options.credentialRequestCompleteCallback.bind(null, options.credentialToken), options.popupOptions);\n  } else if (options.loginStyle === 'redirect') {\n    OAuth.saveDataForRedirect(options.loginService, options.credentialToken);\n    window.location = options.loginUrl;\n  } else {\n    throw new Error('invalid login style');\n  }\n};\n\n// Called by the popup when the OAuth flow is completed, right before\n// the popup closes.\nOAuth._handleCredentialSecret = (credentialToken, secret) => {\n  check(credentialToken, String);\n  check(secret, String);\n  if (!Object.prototype.hasOwnProperty.call(credentialSecrets, credentialToken)) {\n    credentialSecrets[credentialToken] = secret;\n  } else {\n    throw new Error(\"Duplicate credential token from OAuth login\");\n  }\n};\n\n// Used by accounts-oauth, which needs both a credentialToken and the\n// corresponding to credential secret to call the `login` method over DDP.\nOAuth._retrieveCredentialSecret = credentialToken => {\n  // First check the secrets collected by OAuth._handleCredentialSecret,\n  // then check localStorage. This matches what we do in\n  // end_of_login_response.html.\n  let secret = credentialSecrets[credentialToken];\n  if (!secret) {\n    const localStorageKey = OAuth._storageTokenPrefix + credentialToken;\n    secret = Meteor._localStorage.getItem(localStorageKey);\n    Meteor._localStorage.removeItem(localStorageKey);\n  } else {\n    delete credentialSecrets[credentialToken];\n  }\n  return secret;\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"oauth_browser.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/oauth/oauth_browser.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Browser specific code for the OAuth package.\n\n// Open a popup window, centered on the screen, and call a callback when it\n// closes.\n//\n// @param url {String} url to show\n// @param callback {Function} Callback function to call on completion. Takes no\n//   arguments.\n// @param dimensions {optional Object(width, height)} The dimensions of\n//   the popup. If not passed defaults to something sane.\nOAuth.showPopup = (url, callback, dimensions) => {\n  // default dimensions that worked well for facebook and google\n  const popup = openCenteredPopup(url, dimensions && dimensions.width || 650, dimensions && dimensions.height || 331);\n  const checkPopupOpen = setInterval(() => {\n    let popupClosed;\n    try {\n      // Fix for #328 - added a second test criteria (popup.closed === undefined)\n      // to humour this Android quirk:\n      // http://code.google.com/p/android/issues/detail?id=21061\n      popupClosed = popup.closed || popup.closed === undefined;\n    } catch (e) {\n      // For some unknown reason, IE9 (and others?) sometimes (when\n      // the popup closes too quickly?) throws \"SCRIPT16386: No such\n      // interface supported\" when trying to read 'popup.closed'. Try\n      // again in 100ms.\n      return;\n    }\n    if (popupClosed) {\n      clearInterval(checkPopupOpen);\n      callback();\n    }\n  }, 100);\n};\nconst openCenteredPopup = function (url, width, height) {\n  const screenX = typeof window.screenX !== 'undefined' ? window.screenX : window.screenLeft;\n  const screenY = typeof window.screenY !== 'undefined' ? window.screenY : window.screenTop;\n  const outerWidth = typeof window.outerWidth !== 'undefined' ? window.outerWidth : document.body.clientWidth;\n  const outerHeight = typeof window.outerHeight !== 'undefined' ? window.outerHeight : document.body.clientHeight - 22;\n  // XXX what is the 22?\n\n  // Use `outerWidth - width` and `outerHeight - height` for help in\n  // positioning the popup centered relative to the current window\n  const left = screenX + (outerWidth - width) / 2;\n  const top = screenY + (outerHeight - height) / 2;\n  const features = \"width=\".concat(width, \",height=\").concat(height) + \",left=\".concat(left, \",top=\").concat(top, \",scrollbars=yes\");\n  const newwindow = window.open(url, 'Login', features);\n  if (!newwindow || newwindow.closed) {\n    // blocked by a popup blocker maybe?\n    const err = new Error(\"The login popup was blocked by the browser\");\n    err.attemptedUrl = url;\n    throw err;\n  }\n  if (newwindow.focus) newwindow.focus();\n  return newwindow;\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"oauth_common.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/oauth/oauth_common.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nOAuth._storageTokenPrefix = \"Meteor.oauth.credentialSecret-\";\nOAuth._redirectUri = (serviceName, config, params, absoluteUrlOptions) => {\n  // Clone because we're going to mutate 'params'. The 'cordova' and\n  // 'android' parameters are only used for picking the host of the\n  // redirect URL, and not actually included in the redirect URL itself.\n  let isCordova = false;\n  let isAndroid = false;\n  if (params) {\n    params = _objectSpread({}, params);\n    isCordova = params.cordova;\n    isAndroid = params.android;\n    delete params.cordova;\n    delete params.android;\n    if (Object.keys(params).length === 0) {\n      params = undefined;\n    }\n  }\n  if (Meteor.isServer && isCordova) {\n    const url = Npm.require('url');\n    let rootUrl = process.env.MOBILE_ROOT_URL || __meteor_runtime_config__.ROOT_URL;\n    if (isAndroid) {\n      // Match the replace that we do in cordova boilerplate\n      // (boilerplate-generator package).\n      // XXX Maybe we should put this in a separate package or something\n      // that is used here and by boilerplate-generator? Or maybe\n      // `Meteor.absoluteUrl` should know how to do this?\n      const parsedRootUrl = url.parse(rootUrl);\n      if (parsedRootUrl.hostname === \"localhost\") {\n        parsedRootUrl.hostname = \"10.0.2.2\";\n        delete parsedRootUrl.host;\n      }\n      rootUrl = url.format(parsedRootUrl);\n    }\n    absoluteUrlOptions = _objectSpread(_objectSpread({}, absoluteUrlOptions), {}, {\n      // For Cordova clients, redirect to the special Cordova root url\n      // (likely a local IP in development mode).\n      rootUrl\n    });\n  }\n  return URL._constructUrl(Meteor.absoluteUrl(\"_oauth/\".concat(serviceName), absoluteUrlOptions), null, params);\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      OAuth: OAuth\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/oauth/oauth_client.js\",\n    \"/node_modules/meteor/oauth/oauth_browser.js\",\n    \"/node_modules/meteor/oauth/oauth_common.js\"\n  ]\n}});\n","servePath":"/packages/oauth.js","sourceMap":{"version":3,"sources":["packages/oauth/oauth_client.js","packages/oauth/oauth_browser.js","packages/oauth/oauth_common.js"],"names":["credentialSecrets","OAuth","showPopup","url","callback","dimensions","Error","_loginStyle","service","config","options","Meteor","isCordova","loginStyle","includes","concat","sessionStorage","setItem","removeItem","e","_stateParam","credentialToken","redirectUrl","_Meteor$settings","_Meteor$settings$publ","_Meteor$settings$publ2","_Meteor$settings$publ3","state","settings","public","packages","oauth","setRedirectUrlWhenLoginStyleIsPopup","window","location","Base64","encode","JSON","stringify","saveDataForRedirect","loginService","Reload","_onMigrate","_migrate","immediateMigration","getDataAfterRedirect","migrationData","_migrationData","key","_storageTokenPrefix","credentialSecret","getItem","_debug","launchLogin","loginUrl","credentialRequestCompleteCallback","bind","popupOptions","_handleCredentialSecret","secret","check","String","Object","prototype","hasOwnProperty","call","_retrieveCredentialSecret","localStorageKey","_localStorage","popup","openCenteredPopup","width","height","checkPopupOpen","setInterval","popupClosed","closed","undefined","clearInterval","screenX","screenLeft","screenY","screenTop","outerWidth","document","body","clientWidth","outerHeight","clientHeight","left","top","features","newwindow","open","err","attemptedUrl","focus","_objectSpread","module","link","default","v","_redirectUri","serviceName","params","absoluteUrlOptions","isAndroid","cordova","android","keys","length","isServer","Npm","require","rootUrl","process","env","MOBILE_ROOT_URL","__meteor_runtime_config__","ROOT_URL","parsedRootUrl","parse","hostname","host","format","URL","_constructUrl","absoluteUrl"],"mappings":"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","file":"/packages/oauth.js","sourcesContent":["// credentialToken -> credentialSecret. You must provide both the\n// credentialToken and the credentialSecret to retrieve an access token from\n// the _pendingCredentials collection.\nconst credentialSecrets = {};\n\nOAuth = {};\n\nOAuth.showPopup = (url, callback, dimensions) => {\n  throw new Error(\"OAuth.showPopup must be implemented on this arch.\");\n};\n\n// Determine the login style (popup or redirect) for this login flow.\n//\n//\nOAuth._loginStyle = (service, config, options) => {\n\n  if (Meteor.isCordova) {\n    return \"popup\";\n  }\n\n  let loginStyle = (options && options.loginStyle) || config.loginStyle || 'popup';\n\n  if (! [\"popup\", \"redirect\"].includes(loginStyle))\n    throw new Error(`Invalid login style: ${loginStyle}`);\n\n  // If we don't have session storage (for example, Safari in private\n  // mode), the redirect login flow won't work, so fallback to the\n  // popup style.\n  if (loginStyle === 'redirect') {\n    try {\n      sessionStorage.setItem('Meteor.oauth.test', 'test');\n      sessionStorage.removeItem('Meteor.oauth.test');\n    } catch (e) {\n      loginStyle = 'popup';\n    }\n  }\n\n  return loginStyle;\n};\n\nOAuth._stateParam = (loginStyle, credentialToken, redirectUrl) => {\n  const state = {\n    loginStyle,\n    credentialToken,\n    isCordova: Meteor.isCordova\n  };\n\n  if (loginStyle === 'redirect' ||\n    (Meteor.settings?.public?.packages?.oauth?.setRedirectUrlWhenLoginStyleIsPopup && loginStyle === 'popup')\n  ) {\n    state.redirectUrl = redirectUrl || ('' + window.location);\n  }\n\n  // Encode base64 as not all login services URI-encode the state\n  // parameter when they pass it back to us.\n  // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.\n  return Base64.encode(JSON.stringify(state));\n};\n\n\n// At the beginning of the redirect login flow, before we redirect to\n// the login service, save the credential token for this login attempt\n// in the reload migration data.\n//\nOAuth.saveDataForRedirect = (loginService, credentialToken) => {\n  Reload._onMigrate('oauth', () => [true, { loginService, credentialToken }]);\n  Reload._migrate(null, {immediateMigration: true});\n};\n\n// At the end of the redirect login flow, when we've redirected back\n// to the application, retrieve the credentialToken and (if the login\n// was successful) the credentialSecret.\n//\n// Called at application startup.  Returns null if this is normal\n// application startup and we weren't just redirected at the end of\n// the login flow.\n//\nOAuth.getDataAfterRedirect = () => {\n  const migrationData = Reload._migrationData('oauth');\n\n  if (! (migrationData && migrationData.credentialToken))\n    return null;\n\n  const { credentialToken } = migrationData;\n  const key = OAuth._storageTokenPrefix + credentialToken;\n  let credentialSecret;\n  try {\n    credentialSecret = sessionStorage.getItem(key);\n    sessionStorage.removeItem(key);\n  } catch (e) {\n    Meteor._debug('error retrieving credentialSecret', e);\n  }\n  return {\n    loginService: migrationData.loginService,\n    credentialToken,\n    credentialSecret,\n  };\n};\n\n/**\n * Launch an OAuth login flow.  For the popup login style, show the\n * popup.  For the redirect login style, save the credential token for\n * this login attempt in the reload migration data, and redirect to\n * the service for the login.\n *\n * @param {Object} options\n * @param {string} options.loginService \"facebook\", \"google\", etc.\n * @param {string} options.loginStyle \"popup\" or \"redirect\"\n * @param {string} options.loginUrl The URL at the login service provider to start the OAuth flow.\n *  credentialRequestCompleteCallback: for the popup flow, call when the popup\n *    is closed and we have the credential from the login service.\n * @param {string} options.credentialToken our identifier for this login flow.\n **/\nOAuth.launchLogin = options => {\n  if (! options.loginService)\n    throw new Error('loginService required');\n  if (options.loginStyle === 'popup') {\n    OAuth.showPopup(\n      options.loginUrl,\n      options.credentialRequestCompleteCallback.bind(null, options.credentialToken),\n      options.popupOptions);\n  } else if (options.loginStyle === 'redirect') {\n    OAuth.saveDataForRedirect(options.loginService, options.credentialToken);\n    window.location = options.loginUrl;\n  } else {\n    throw new Error('invalid login style');\n  }\n};\n\n// Called by the popup when the OAuth flow is completed, right before\n// the popup closes.\nOAuth._handleCredentialSecret = (credentialToken, secret) => {\n  check(credentialToken, String);\n  check(secret, String);\n  if (! Object.prototype.hasOwnProperty.call(credentialSecrets, credentialToken)) {\n    credentialSecrets[credentialToken] = secret;\n  } else {\n    throw new Error(\"Duplicate credential token from OAuth login\");\n  }\n};\n\n// Used by accounts-oauth, which needs both a credentialToken and the\n// corresponding to credential secret to call the `login` method over DDP.\nOAuth._retrieveCredentialSecret = credentialToken => {\n  // First check the secrets collected by OAuth._handleCredentialSecret,\n  // then check localStorage. This matches what we do in\n  // end_of_login_response.html.\n  let secret = credentialSecrets[credentialToken];\n  if (! secret) {\n    const localStorageKey = OAuth._storageTokenPrefix + credentialToken;\n    secret = Meteor._localStorage.getItem(localStorageKey);\n    Meteor._localStorage.removeItem(localStorageKey);\n  } else {\n    delete credentialSecrets[credentialToken];\n  }\n  return secret;\n};\n","// Browser specific code for the OAuth package.\n\n// Open a popup window, centered on the screen, and call a callback when it\n// closes.\n//\n// @param url {String} url to show\n// @param callback {Function} Callback function to call on completion. Takes no\n//   arguments.\n// @param dimensions {optional Object(width, height)} The dimensions of\n//   the popup. If not passed defaults to something sane.\nOAuth.showPopup = (url, callback, dimensions) => {\n  // default dimensions that worked well for facebook and google\n  const popup = openCenteredPopup(\n    url,\n    (dimensions && dimensions.width) || 650,\n    (dimensions && dimensions.height) || 331\n  );\n\n  const checkPopupOpen = setInterval(() => {\n    let popupClosed;\n    try {\n      // Fix for #328 - added a second test criteria (popup.closed === undefined)\n      // to humour this Android quirk:\n      // http://code.google.com/p/android/issues/detail?id=21061\n      popupClosed = popup.closed || popup.closed === undefined;\n    } catch (e) {\n      // For some unknown reason, IE9 (and others?) sometimes (when\n      // the popup closes too quickly?) throws \"SCRIPT16386: No such\n      // interface supported\" when trying to read 'popup.closed'. Try\n      // again in 100ms.\n      return;\n    }\n\n    if (popupClosed) {\n      clearInterval(checkPopupOpen);\n      callback();\n    }\n  }, 100);\n};\n\nconst openCenteredPopup = function(url, width, height) {\n  const screenX = typeof window.screenX !== 'undefined'\n        ? window.screenX : window.screenLeft;\n  const screenY = typeof window.screenY !== 'undefined'\n        ? window.screenY : window.screenTop;\n  const outerWidth = typeof window.outerWidth !== 'undefined'\n        ? window.outerWidth : document.body.clientWidth;\n  const outerHeight = typeof window.outerHeight !== 'undefined'\n        ? window.outerHeight : (document.body.clientHeight - 22);\n  // XXX what is the 22?\n\n  // Use `outerWidth - width` and `outerHeight - height` for help in\n  // positioning the popup centered relative to the current window\n  const left = screenX + (outerWidth - width) / 2;\n  const top = screenY + (outerHeight - height) / 2;\n  const features = (`width=${width},height=${height}` +\n                  `,left=${left},top=${top},scrollbars=yes`);\n\n\n  const newwindow = window.open(url, 'Login', features);\n\n  if (!newwindow || newwindow.closed) {\n    // blocked by a popup blocker maybe?\n    const err = new Error(\"The login popup was blocked by the browser\");\n    err.attemptedUrl = url;\n    throw err;\n  }\n\n  if (newwindow.focus)\n    newwindow.focus();\n  \n  return newwindow;\n};\n","OAuth._storageTokenPrefix = \"Meteor.oauth.credentialSecret-\";\n\nOAuth._redirectUri = (serviceName, config, params, absoluteUrlOptions) => {\n  // Clone because we're going to mutate 'params'. The 'cordova' and\n  // 'android' parameters are only used for picking the host of the\n  // redirect URL, and not actually included in the redirect URL itself.\n  let isCordova = false;\n  let isAndroid = false;\n  if (params) {\n    params = { ...params };\n    isCordova = params.cordova;\n    isAndroid = params.android;\n    delete params.cordova;\n    delete params.android;\n    if (Object.keys(params).length === 0) {\n      params = undefined;\n    }\n  }\n\n  if (Meteor.isServer && isCordova) {\n    const url = Npm.require('url');\n    let rootUrl = process.env.MOBILE_ROOT_URL ||\n          __meteor_runtime_config__.ROOT_URL;\n\n    if (isAndroid) {\n      // Match the replace that we do in cordova boilerplate\n      // (boilerplate-generator package).\n      // XXX Maybe we should put this in a separate package or something\n      // that is used here and by boilerplate-generator? Or maybe\n      // `Meteor.absoluteUrl` should know how to do this?\n      const parsedRootUrl = url.parse(rootUrl);\n      if (parsedRootUrl.hostname === \"localhost\") {\n        parsedRootUrl.hostname = \"10.0.2.2\";\n        delete parsedRootUrl.host;\n      }\n      rootUrl = url.format(parsedRootUrl);\n    }\n\n    absoluteUrlOptions = {\n      ...absoluteUrlOptions,\n      // For Cordova clients, redirect to the special Cordova root url\n      // (likely a local IP in development mode).\n      rootUrl,\n    };\n  }\n\n  return URL._constructUrl(\n    Meteor.absoluteUrl(`_oauth/${serviceName}`, absoluteUrlOptions),\n    null,\n    params);\n};\n"]}}]