[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\nPackage[\"core-runtime\"].queue(\"meteor-developer-oauth\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar MeteorDeveloperAccounts;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"meteor-developer-oauth\":{\"meteor_developer_common.js\":function module(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/meteor-developer-oauth/meteor_developer_common.js                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nMeteorDeveloperAccounts = {};\nMeteorDeveloperAccounts._server = \"https://www.meteor.com\";\n\n// Options are:\n//  - developerAccountsServer: defaults to \"https://www.meteor.com\"\nMeteorDeveloperAccounts._config = function (options) {\n  if (options.developerAccountsServer) {\n    MeteorDeveloperAccounts._server = options.developerAccountsServer;\n  }\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"meteor_developer_client.js\":function module(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/meteor-developer-oauth/meteor_developer_client.js                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n// Request Meteor developer account credentials for the user\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nvar requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support a callback without options\n  if (!credentialRequestCompleteCallback && typeof options === \"function\") {\n    credentialRequestCompleteCallback = options;\n    options = null;\n  }\n  var config = ServiceConfiguration.configurations.findOne({\n    service: 'meteor-developer'\n  });\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError());\n    return;\n  }\n  var credentialToken = Random.secret();\n  var loginStyle = OAuth._loginStyle('meteor-developer', config, options);\n  var loginUrl = MeteorDeveloperAccounts._server + \"/oauth2/authorize?\" + (\"state=\" + OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl)) + \"&response_type=code&\" + (\"client_id=\" + config.clientId + (options && options.details ? \"&details=\" + (options && options.details) : ''));\n\n  /**\n   * @deprecated in 1.3.0\n   */\n  if (options && options.userEmail && !options.loginHint) {\n    options.loginHint = options.userEmail;\n    delete options.userEmail;\n  }\n  if (options && options.loginHint) {\n    loginUrl += \"&user_email=\" + encodeURIComponent(options.loginHint);\n  }\n  loginUrl += \"&redirect_uri=\" + OAuth._redirectUri('meteor-developer', config);\n  OAuth.launchLogin({\n    loginService: \"meteor-developer\",\n    loginStyle: loginStyle,\n    loginUrl: loginUrl,\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,\n    credentialToken: credentialToken,\n    popupOptions: {\n      width: 497,\n      height: 749\n    }\n  });\n};\nMeteorDeveloperAccounts.requestCredential = requestCredential;\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      MeteorDeveloperAccounts: MeteorDeveloperAccounts\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/meteor-developer-oauth/meteor_developer_common.js\",\n    \"/node_modules/meteor/meteor-developer-oauth/meteor_developer_client.js\"\n  ]\n}});\n","servePath":"/packages/meteor-developer-oauth.js","sourceMap":{"version":3,"sources":["packages/meteor-developer-oauth/meteor_developer_common.js","packages/meteor-developer-oauth/meteor_developer_client.js"],"names":["MeteorDeveloperAccounts","_server","_config","options","developerAccountsServer","requestCredential","credentialRequestCompleteCallback","config","ServiceConfiguration","configurations","findOne","service","ConfigError","credentialToken","Random","secret","loginStyle","OAuth","_loginStyle","loginUrl","_stateParam","redirectUrl","clientId","details","userEmail","loginHint","encodeURIComponent","_redirectUri","launchLogin","loginService","popupOptions","width","height"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,uBAAuB,GAAG,CAAC,CAAC;AAE5BA,uBAAuB,CAACC,OAAO,GAAG,wBAAwB;;AAE1D;AACA;AACAD,uBAAuB,CAACE,OAAO,GAAG,UAAAC,OAAO,EAAI;EAC3C,IAAIA,OAAO,CAACC,uBAAuB,EAAE;IACnCJ,uBAAuB,CAACC,OAAO,GAAGE,OAAO,CAACC,uBAAuB;EACnE;AACF,CAAC,C;;;;;;;;;;;ACVD;AACA;AACA;AACA;AACA,IAAMC,iBAAiB,GAAG,SAAAA,CAACF,OAAO,EAAEG,iCAAiC,EAAK;EACxE;EACA,IAAI,CAAEA,iCAAiC,IAAI,OAAOH,OAAO,KAAK,UAAU,EAAE;IACxEG,iCAAiC,GAAGH,OAAO;IAC3CA,OAAO,GAAG,IAAI;EAChB;EAEA,IAAMI,MAAM,GAAGC,oBAAoB,CAACC,cAAc,CAACC,OAAO,CAAC;IACzDC,OAAO,EAAE;EACX,CAAC,CAAC;EACF,IAAI,CAACJ,MAAM,EAAE;IACXD,iCAAiC,IAC/BA,iCAAiC,CAAC,IAAIE,oBAAoB,CAACI,WAAW,CAAC,CAAC,CAAC;IAC3E;EACF;EAEA,IAAMC,eAAe,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC;EAEvC,IAAMC,UAAU,GAAGC,KAAK,CAACC,WAAW,CAAC,kBAAkB,EAAEX,MAAM,EAAEJ,OAAO,CAAC;EAEzE,IAAIgB,QAAQ,GACNnB,uBAAuB,CAACC,OAAO,GAC/B,oBAAoB,eACXgB,KAAK,CAACG,WAAW,CAACJ,UAAU,EAAEH,eAAe,EAAEV,OAAO,IAAIA,OAAO,CAACkB,WAAW,CAAC,CAAE,GACzF,sBAAsB,mBACTd,MAAM,CAACe,QAAQ,IAAGnB,OAAO,IAAIA,OAAO,CAACoB,OAAO,kBAAepB,OAAO,IAAIA,OAAO,CAACoB,OAAO,IAAK,EAAE,EAAE;;EAEjH;AACF;AACA;EACE,IAAIpB,OAAO,IAAIA,OAAO,CAACqB,SAAS,IAAI,CAACrB,OAAO,CAACsB,SAAS,EAAE;IACtDtB,OAAO,CAACsB,SAAS,GAAGtB,OAAO,CAACqB,SAAS;IACrC,OAAOrB,OAAO,CAACqB,SAAS;EAC1B;EAEA,IAAIrB,OAAO,IAAIA,OAAO,CAACsB,SAAS,EAAE;IAChCN,QAAQ,qBAAmBO,kBAAkB,CAACvB,OAAO,CAACsB,SAAS,CAAG;EACpE;EAEAN,QAAQ,uBAAqBF,KAAK,CAACU,YAAY,CAAC,kBAAkB,EAAEpB,MAAM,CAAG;EAE7EU,KAAK,CAACW,WAAW,CAAC;IAChBC,YAAY,EAAE,kBAAkB;IAChCb,UAAU,EAAVA,UAAU;IACVG,QAAQ,EAARA,QAAQ;IACRb,iCAAiC,EAAjCA,iCAAiC;IACjCO,eAAe,EAAfA,eAAe;IACfiB,YAAY,EAAE;MAACC,KAAK,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAG;EACxC,CAAC,CAAC;AACJ,CAAC;AAEDhC,uBAAuB,CAACK,iBAAiB,GAAGA,iBAAiB,C","file":"/packages/meteor-developer-oauth.js","sourcesContent":["MeteorDeveloperAccounts = {};\n\nMeteorDeveloperAccounts._server = \"https://www.meteor.com\";\n\n// Options are:\n//  - developerAccountsServer: defaults to \"https://www.meteor.com\"\nMeteorDeveloperAccounts._config = options => {\n  if (options.developerAccountsServer) {\n    MeteorDeveloperAccounts._server = options.developerAccountsServer;\n  }\n};\n","// Request Meteor developer account credentials for the user\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nconst requestCredential = (options, credentialRequestCompleteCallback) => {\n  // support a callback without options\n  if (! credentialRequestCompleteCallback && typeof options === \"function\") {\n    credentialRequestCompleteCallback = options;\n    options = null;\n  }\n\n  const config = ServiceConfiguration.configurations.findOne({\n    service: 'meteor-developer'\n  });\n  if (!config) {\n    credentialRequestCompleteCallback &&\n      credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError());\n    return;\n  }\n\n  const credentialToken = Random.secret();\n\n  const loginStyle = OAuth._loginStyle('meteor-developer', config, options);\n\n  let loginUrl =\n        MeteorDeveloperAccounts._server +\n        \"/oauth2/authorize?\" +\n        `state=${OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl)}` +\n        \"&response_type=code&\" +\n        `client_id=${config.clientId}${options && options.details ? `&details=${options && options.details}` : ''}`;\n\n  /**\n   * @deprecated in 1.3.0\n   */\n  if (options && options.userEmail && !options.loginHint) {\n    options.loginHint = options.userEmail;\n    delete options.userEmail;\n  }\n\n  if (options && options.loginHint) {\n    loginUrl += `&user_email=${encodeURIComponent(options.loginHint)}`;\n  }\n\n  loginUrl += `&redirect_uri=${OAuth._redirectUri('meteor-developer', config)}`;\n\n  OAuth.launchLogin({\n    loginService: \"meteor-developer\",\n    loginStyle,\n    loginUrl,\n    credentialRequestCompleteCallback,\n    credentialToken,\n    popupOptions: {width: 497, height: 749}\n  });\n};\n\nMeteorDeveloperAccounts.requestCredential = requestCredential;\n"]}}]