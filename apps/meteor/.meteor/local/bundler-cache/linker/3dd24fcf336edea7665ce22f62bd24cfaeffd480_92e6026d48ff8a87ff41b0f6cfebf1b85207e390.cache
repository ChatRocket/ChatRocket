[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\nPackage[\"core-runtime\"].queue(\"google-oauth\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar Random = Package.random.Random;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Google;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"google-oauth\":{\"google_client.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/google-oauth/google_client.js                                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet Google;\nmodule.link(\"./namespace.js\", {\n  default(v) {\n    Google = v;\n  }\n}, 0);\nconst hasOwn = Object.prototype.hasOwnProperty;\nconst ILLEGAL_PARAMETERS = {\n  'response_type': 1,\n  'client_id': 1,\n  'scope': 1,\n  'redirect_uri': 1,\n  'state': 1\n};\n\n// Request Google credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGoogle.requestCredential = (options, credentialRequestCompleteCallback) => {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  } else if (!options) {\n    options = {};\n  }\n  const config = ServiceConfiguration.configurations.findOne({\n    service: 'google'\n  });\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError());\n    return;\n  }\n  const credentialToken = Random.secret();\n\n  // we need the email scope to get user id from google.\n  const requiredScopes = {\n    'email': 1\n  };\n  let scopes = options.requestPermissions || ['profile'];\n  scopes.forEach(scope => requiredScopes[scope] = 1);\n  scopes = Object.keys(requiredScopes);\n  const loginUrlParameters = {};\n  if (config.loginUrlParameters) {\n    Object.assign(loginUrlParameters, config.loginUrlParameters);\n  }\n  if (options.loginUrlParameters) {\n    Object.assign(loginUrlParameters, options.loginUrlParameters);\n  }\n\n  // validate options keys\n  Object.keys(loginUrlParameters).forEach(key => {\n    if (hasOwn.call(ILLEGAL_PARAMETERS, key)) {\n      throw new Error(\"Google.requestCredential: Invalid loginUrlParameter: \".concat(key));\n    }\n  });\n\n  // backwards compatible options\n  if (options.requestOfflineToken != null) {\n    loginUrlParameters.access_type = options.requestOfflineToken ? 'offline' : 'online';\n  }\n  if (options.prompt != null) {\n    loginUrlParameters.prompt = options.prompt;\n  } else if (options.forceApprovalPrompt) {\n    loginUrlParameters.prompt = 'consent';\n  }\n  if (options.loginHint) {\n    loginUrlParameters.login_hint = options.loginHint;\n  }\n  const loginStyle = OAuth._loginStyle('google', config, options);\n  // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl\n  Object.assign(loginUrlParameters, {\n    \"response_type\": \"code\",\n    \"client_id\": config.clientId,\n    \"scope\": scopes.join(' '),\n    // space delimited\n    \"redirect_uri\": OAuth._redirectUri('google', config),\n    \"state\": OAuth._stateParam(loginStyle, credentialToken, options.redirectUrl)\n  });\n  const loginUrl = 'https://accounts.google.com/o/oauth2/auth?' + Object.keys(loginUrlParameters).map(param => \"\".concat(encodeURIComponent(param), \"=\").concat(encodeURIComponent(loginUrlParameters[param]))).join(\"&\");\n  OAuth.launchLogin({\n    loginService: \"google\",\n    loginStyle,\n    loginUrl,\n    credentialRequestCompleteCallback,\n    credentialToken,\n    popupOptions: {\n      height: 600\n    }\n  });\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"namespace.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/google-oauth/namespace.js                                                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n!function (module1) {\n  // The module.exports object of this module becomes the Google namespace\n  // for other modules in this package.\n  Google = module.exports;\n\n  // So that api.export finds the \"Google\" property.\n  Google.Google = Google;\n}.call(this, module);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      Google: Google\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/google-oauth/google_client.js\",\n    \"/node_modules/meteor/google-oauth/namespace.js\"\n  ],\n  mainModulePath: \"/node_modules/meteor/google-oauth/namespace.js\"\n}});\n","servePath":"/packages/google-oauth.js","sourceMap":{"version":3,"sources":["packages/google-oauth/google_client.js","packages/google-oauth/namespace.js"],"names":["Google","module","link","default","v","hasOwn","Object","prototype","hasOwnProperty","ILLEGAL_PARAMETERS","requestCredential","options","credentialRequestCompleteCallback","config","ServiceConfiguration","configurations","findOne","service","ConfigError","credentialToken","Random","secret","requiredScopes","scopes","requestPermissions","forEach","scope","keys","loginUrlParameters","assign","key","call","Error","concat","requestOfflineToken","access_type","prompt","forceApprovalPrompt","loginHint","login_hint","loginStyle","OAuth","_loginStyle","clientId","join","_redirectUri","_stateParam","redirectUrl","loginUrl","map","param","encodeURIComponent","launchLogin","loginService","popupOptions","height","exports"],"mappings":"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","file":"/packages/google-oauth.js","sourcesContent":["import Google from './namespace.js';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nconst ILLEGAL_PARAMETERS = {\n  'response_type': 1,\n  'client_id': 1,\n  'scope': 1,\n  'redirect_uri': 1,\n  'state': 1\n};\n\n// Request Google credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGoogle.requestCredential = (options, credentialRequestCompleteCallback) => {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  } else if (!options) {\n    options = {};\n  }\n\n  const config = ServiceConfiguration.configurations.findOne({service: 'google'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\n      new ServiceConfiguration.ConfigError());\n    return;\n  }\n\n  const credentialToken = Random.secret();\n\n  // we need the email scope to get user id from google.\n  const requiredScopes = { 'email': 1 };\n  let scopes = options.requestPermissions || ['profile'];\n  scopes.forEach(scope => requiredScopes[scope] = 1);\n  scopes = Object.keys(requiredScopes);\n\n  const loginUrlParameters = {};\n  if (config.loginUrlParameters){\n    Object.assign(loginUrlParameters, config.loginUrlParameters);\n  }\n  if (options.loginUrlParameters){\n    Object.assign(loginUrlParameters, options.loginUrlParameters);\n  }\n\n  // validate options keys\n  Object.keys(loginUrlParameters).forEach(key => {\n    if (hasOwn.call(ILLEGAL_PARAMETERS, key)) {\n      throw new Error(`Google.requestCredential: Invalid loginUrlParameter: ${key}`);\n    }\n  });\n\n  // backwards compatible options\n  if (options.requestOfflineToken != null){\n    loginUrlParameters.access_type = options.requestOfflineToken ? 'offline' : 'online'\n  }\n  if (options.prompt != null) {\n    loginUrlParameters.prompt = options.prompt;\n  } else if (options.forceApprovalPrompt) {\n    loginUrlParameters.prompt = 'consent'\n  }\n\n  if (options.loginHint) {\n    loginUrlParameters.login_hint = options.loginHint;\n  }\n\n  const loginStyle = OAuth._loginStyle('google', config, options);\n  // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl\n  Object.assign(loginUrlParameters, {\n    \"response_type\": \"code\",\n    \"client_id\":  config.clientId,\n    \"scope\": scopes.join(' '), // space delimited\n    \"redirect_uri\": OAuth._redirectUri('google', config),\n    \"state\": OAuth._stateParam(loginStyle, credentialToken, options.redirectUrl)\n  });\n  const loginUrl = 'https://accounts.google.com/o/oauth2/auth?' +\n    Object.keys(loginUrlParameters).map(param => \n      `${encodeURIComponent(param)}=${encodeURIComponent(loginUrlParameters[param])}`\n    ).join(\"&\");\n\n  OAuth.launchLogin({\n    loginService: \"google\",\n    loginStyle,\n    loginUrl,\n    credentialRequestCompleteCallback,\n    credentialToken,\n    popupOptions: { height: 600 }\n  });\n};\n","// The module.exports object of this module becomes the Google namespace\n// for other modules in this package.\nGoogle = module.exports;\n\n// So that api.export finds the \"Google\" property.\nGoogle.Google = Google;\n"]}}]