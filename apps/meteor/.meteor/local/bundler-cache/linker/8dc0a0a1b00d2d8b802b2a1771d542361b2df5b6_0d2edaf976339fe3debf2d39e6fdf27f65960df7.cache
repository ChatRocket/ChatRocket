[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\nPackage[\"core-runtime\"].queue(\"github-oauth\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar OAuth = Package.oauth.OAuth;\nvar Random = Package.random.Random;\nvar Accounts = Package['accounts-base'].Accounts;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Github;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"github-oauth\":{\"github_client.js\":function module(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/github-oauth/github_client.js                                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nGithub = {};\n\n// Request Github credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGithub.requestCredential = function (options, credentialRequestCompleteCallback) {\n  var _Accounts$_options;\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n  var config = ServiceConfiguration.configurations.findOne({\n    service: 'github'\n  });\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError());\n    return;\n  }\n  var credentialToken = Random.secret();\n  var scope = options && options.requestPermissions || ['user:email'];\n  var flatScope = scope.map(encodeURIComponent).join('+');\n  var loginStyle = OAuth._loginStyle('github', config, options);\n  var allowSignup = '';\n  if ((_Accounts$_options = Accounts._options) !== null && _Accounts$_options !== void 0 && _Accounts$_options.forbidClientAccountCreation) {\n    allowSignup = '&allow_signup=false'; // https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#parameters\n  }\n  var loginUrl = 'https://github.com/login/oauth/authorize' + (\"?client_id=\" + config.clientId) + (\"&scope=\" + flatScope) + (\"&redirect_uri=\" + OAuth._redirectUri('github', config)) + (\"&state=\" + OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl)) + allowSignup;\n  OAuth.launchLogin({\n    loginService: \"github\",\n    loginStyle: loginStyle,\n    loginUrl: loginUrl,\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,\n    credentialToken: credentialToken,\n    popupOptions: {\n      width: 900,\n      height: 450\n    }\n  });\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      Github: Github\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/github-oauth/github_client.js\"\n  ]\n}});\n","servePath":"/packages/github-oauth.js","sourceMap":{"version":3,"sources":["packages/github-oauth/github_client.js"],"names":["Github","requestCredential","options","credentialRequestCompleteCallback","_Accounts$_options","config","ServiceConfiguration","configurations","findOne","service","ConfigError","credentialToken","Random","secret","scope","requestPermissions","flatScope","map","encodeURIComponent","join","loginStyle","OAuth","_loginStyle","allowSignup","Accounts","_options","forbidClientAccountCreation","loginUrl","clientId","_redirectUri","_stateParam","redirectUrl","launchLogin","loginService","popupOptions","width","height"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,GAAG,CAAC,CAAC;;AAEX;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,iBAAiB,GAAG,UAACC,OAAO,EAAEC,iCAAiC,EAAK;EAAA,IAAAC,kBAAA;EACzE;EACA,IAAI,CAACD,iCAAiC,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;IACvEC,iCAAiC,GAAGD,OAAO;IAC3CA,OAAO,GAAG,CAAC,CAAC;EACd;EAEA,IAAMG,MAAM,GAAGC,oBAAoB,CAACC,cAAc,CAACC,OAAO,CAAC;IAACC,OAAO,EAAE;EAAQ,CAAC,CAAC;EAC/E,IAAI,CAACJ,MAAM,EAAE;IACXF,iCAAiC,IAAIA,iCAAiC,CACpE,IAAIG,oBAAoB,CAACI,WAAW,CAAC,CAAC,CAAC;IACzC;EACF;EACA,IAAMC,eAAe,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC;EAEvC,IAAMC,KAAK,GAAIZ,OAAO,IAAIA,OAAO,CAACa,kBAAkB,IAAK,CAAC,YAAY,CAAC;EACvE,IAAMC,SAAS,GAAGF,KAAK,CAACG,GAAG,CAACC,kBAAkB,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAEzD,IAAMC,UAAU,GAAGC,KAAK,CAACC,WAAW,CAAC,QAAQ,EAAEjB,MAAM,EAAEH,OAAO,CAAC;EAE/D,IAAIqB,WAAW,GAAG,EAAE;EACpB,KAAAnB,kBAAA,GAAIoB,QAAQ,CAACC,QAAQ,cAAArB,kBAAA,eAAjBA,kBAAA,CAAmBsB,2BAA2B,EAAE;IAClDH,WAAW,GAAG,qBAAqB,CAAC,CAAC;EACvC;EAEA,IAAMI,QAAQ,GACZ,0CAA0C,oBAC5BtB,MAAM,CAACuB,QAAQ,CAAE,gBACrBZ,SAAS,CAAE,uBACJK,KAAK,CAACQ,YAAY,CAAC,QAAQ,EAAExB,MAAM,CAAC,CAAE,gBAC7CgB,KAAK,CAACS,WAAW,CAACV,UAAU,EAAET,eAAe,EAAET,OAAO,IAAIA,OAAO,CAAC6B,WAAW,CAAC,CAAE,GAC1FR,WAAW;EAEbF,KAAK,CAACW,WAAW,CAAC;IAChBC,YAAY,EAAE,QAAQ;IACtBb,UAAU,EAAVA,UAAU;IACVO,QAAQ,EAARA,QAAQ;IACRxB,iCAAiC,EAAjCA,iCAAiC;IACjCQ,eAAe,EAAfA,eAAe;IACfuB,YAAY,EAAE;MAACC,KAAK,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAG;EACxC,CAAC,CAAC;AACJ,CAAC,C","file":"/packages/github-oauth.js","sourcesContent":["Github = {};\n\n// Request Github credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGithub.requestCredential = (options, credentialRequestCompleteCallback) => {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  const config = ServiceConfiguration.configurations.findOne({service: 'github'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\n      new ServiceConfiguration.ConfigError());\n    return;\n  }\n  const credentialToken = Random.secret();\n\n  const scope = (options && options.requestPermissions) || ['user:email'];\n  const flatScope = scope.map(encodeURIComponent).join('+');\n\n  const loginStyle = OAuth._loginStyle('github', config, options);\n\n  let allowSignup = '';\n  if (Accounts._options?.forbidClientAccountCreation) {\n    allowSignup = '&allow_signup=false'; // https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#parameters\n  }\n\n  const loginUrl =\n    'https://github.com/login/oauth/authorize' +\n    `?client_id=${config.clientId}` +\n    `&scope=${flatScope}` +\n    `&redirect_uri=${OAuth._redirectUri('github', config)}` +\n    `&state=${OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl)}` +\n    allowSignup;\n\n  OAuth.launchLogin({\n    loginService: \"github\",\n    loginStyle,\n    loginUrl,\n    credentialRequestCompleteCallback,\n    credentialToken,\n    popupOptions: {width: 900, height: 450}\n  });\n};\n"]}}]