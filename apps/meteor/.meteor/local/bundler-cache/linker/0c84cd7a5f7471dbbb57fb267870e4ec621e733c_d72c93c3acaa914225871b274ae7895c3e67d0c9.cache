[{"type":"js","data":"Package[\"core-runtime\"].queue(\"oauth2\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EmitterPromise = Package.meteor.EmitterPromise;\nvar Random = Package.random.Random;\nvar OAuth = Package.oauth.OAuth;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"oauth2\":{\"oauth2_server.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/oauth2/oauth2_server.js                                  //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n// connect middleware\nOAuth._requestHandlers['2'] = async (service, query, res) => {\n  let credentialSecret;\n\n  // check if user authorized access\n  if (!query.error) {\n    // Prepare the login results before returning.\n\n    // Run service-specific handler.\n    const oauthResult = await service.handleOauthRequest(query);\n    credentialSecret = Random.secret();\n    const credentialToken = OAuth._credentialTokenFromQuery(query);\n\n    // Store the login result so it can be retrieved in another\n    // browser tab by the result handler\n    await OAuth._storePendingCredential(credentialToken, {\n      serviceName: service.serviceName,\n      serviceData: oauthResult.serviceData,\n      options: oauthResult.options\n    }, credentialSecret);\n  }\n\n  // Either close the window, redirect, or render nothing\n  // if all else fails\n  await OAuth._renderOauthResults(res, query, credentialSecret);\n};\n///////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/oauth2/oauth2_server.js\"\n  ]\n}});\n","servePath":"/packages/oauth2.js","sourceMap":{"version":3,"sources":["packages/oauth2/oauth2_server.js"],"names":["OAuth","_requestHandlers","service","query","res","credentialSecret","error","oauthResult","handleOauthRequest","Random","secret","credentialToken","_credentialTokenFromQuery","_storePendingCredential","serviceName","serviceData","options","_renderOauthResults"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACAA,KAAK,CAACC,gBAAgB,CAAC,GAAG,CAAC,GAAG,OAAOC,OAAO,EAAEC,KAAK,EAAEC,GAAG,KAAK;EAC3D,IAAIC,gBAAgB;;EAEpB;EACA,IAAI,CAACF,KAAK,CAACG,KAAK,EAAE;IAChB;;IAEA;IACA,MAAMC,WAAW,GAAG,MAAML,OAAO,CAACM,kBAAkB,CAACL,KAAK,CAAC;IAC3DE,gBAAgB,GAAGI,MAAM,CAACC,MAAM,CAAC,CAAC;IAElC,MAAMC,eAAe,GAAGX,KAAK,CAACY,yBAAyB,CAACT,KAAK,CAAC;;IAE9D;IACA;IACA,MAAMH,KAAK,CAACa,uBAAuB,CAACF,eAAe,EAAE;MACnDG,WAAW,EAAEZ,OAAO,CAACY,WAAW;MAChCC,WAAW,EAAER,WAAW,CAACQ,WAAW;MACpCC,OAAO,EAAET,WAAW,CAACS;IACvB,CAAC,EAAEX,gBAAgB,CAAC;EACtB;;EAEA;EACA;EACA,MAAML,KAAK,CAACiB,mBAAmB,CAACb,GAAG,EAAED,KAAK,EAAEE,gBAAgB,CAAC;AAC/D,CAAC,C","file":"/packages/oauth2.js","sourcesContent":["// connect middleware\nOAuth._requestHandlers['2'] = async (service, query, res) => {\n  let credentialSecret;\n\n  // check if user authorized access\n  if (!query.error) {\n    // Prepare the login results before returning.\n\n    // Run service-specific handler.\n    const oauthResult = await service.handleOauthRequest(query);\n    credentialSecret = Random.secret();\n\n    const credentialToken = OAuth._credentialTokenFromQuery(query);\n\n    // Store the login result so it can be retrieved in another\n    // browser tab by the result handler\n    await OAuth._storePendingCredential(credentialToken, {\n      serviceName: service.serviceName,\n      serviceData: oauthResult.serviceData,\n      options: oauthResult.options\n    }, credentialSecret);\n  }\n\n  // Either close the window, redirect, or render nothing\n  // if all else fails\n  await OAuth._renderOauthResults(res, query, credentialSecret);\n};\n"]}}]