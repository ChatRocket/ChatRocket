[{"type":"js","data":"Package[\"core-runtime\"].queue(\"kadira:flow-router\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EmitterPromise = Package.meteor.EmitterPromise;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\n\n/* Package-scope variables */\nvar Router, Group, Route, FlowRouter, FastRender;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"kadira:flow-router\":{\"server\":{\"router.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// packages/kadira_flow-router/server/router.js                                                   //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nvar Qs = Npm.require('qs');\n\nRouter = function () {\n\tthis._routes = [];\n\tthis._routesMap = {};\n\tthis.subscriptions = Function.prototype;\n\n\t// holds onRoute callbacks\n\tthis._onRouteCallbacks = [];\n};\n\nRouter.prototype.route = function (pathDef, options) {\n\tif (!/^\\/.*/.test(pathDef)) {\n\t\tvar message = \"route's path must start with '/'\";\n\t\tthrow new Error(message);\n\t}\n\n\toptions = options || {};\n\tvar route = new Route(this, pathDef, options);\n\tthis._routes.push(route);\n\n\tif (options.name) {\n\t\tthis._routesMap[options.name] = route;\n\t}\n\n\tthis._triggerRouteRegister(route);\n\treturn route;\n};\n\nRouter.prototype.group = function (options) {\n\treturn new Group(this, options);\n};\n\nRouter.prototype.path = function (pathDef, fields, queryParams) {\n\tif (this._routesMap[pathDef]) {\n\t\tpathDef = this._routesMap[pathDef].path;\n\t}\n\n\tfields = fields || {};\n\tvar regExp = /(:[\\w\\(\\)\\\\\\+\\*\\.\\?]+)+/g;\n\tvar path = pathDef.replace(regExp, function (key) {\n\t\tvar firstRegexpChar = key.indexOf('(');\n\t\t// get the content behind : and (\\\\d+/)\n\t\tkey = key.substring(1, firstRegexpChar > 0 ? firstRegexpChar : undefined);\n\t\t// remove +?*\n\t\tkey = key.replace(/[\\+\\*\\?]+/g, '');\n\n\t\treturn fields[key] || '';\n\t});\n\n\tpath = path.replace(/\\/\\/+/g, '/'); // Replace multiple slashes with single slash\n\n\t// remove trailing slash\n\t// but keep the root slash if it's the only one\n\tpath = path.match(/^\\/{1}$/) ? path : path.replace(/\\/$/, '');\n\n\tvar strQueryParams = Qs.stringify(queryParams || {});\n\tif (strQueryParams) {\n\t\tpath += '?' + strQueryParams;\n\t}\n\n\treturn path;\n};\n\nRouter.prototype.onRouteRegister = function (cb) {\n\tthis._onRouteCallbacks.push(cb);\n};\n\nRouter.prototype._triggerRouteRegister = function (currentRoute) {\n\t// We should only need to send a safe set of fields on the route\n\t// object.\n\t// This is not to hide what's inside the route object, but to show\n\t// these are the public APIs\n\tvar routePublicApi = _.pick(currentRoute, 'name', 'pathDef', 'path');\n\tvar omittingOptionFields = ['triggersEnter', 'triggersExit', 'action', 'subscriptions', 'name'];\n\troutePublicApi.options = _.omit(currentRoute.options, omittingOptionFields);\n\n\t_.each(this._onRouteCallbacks, function (cb) {\n\t\tcb(routePublicApi);\n\t});\n};\n\nRouter.prototype.go = function () {\n\t// client only\n};\n\nRouter.prototype.current = function () {\n\t// client only\n};\n\nRouter.prototype.triggers = {\n\tenter: function () {\n\t\t// client only\n\t},\n\texit: function () {\n\t\t// client only\n\t},\n};\n\nRouter.prototype.middleware = function () {\n\t// client only\n};\n\nRouter.prototype.getState = function () {\n\t// client only\n};\n\nRouter.prototype.getAllStates = function () {\n\t// client only\n};\n\nRouter.prototype.setState = function () {\n\t// client only\n};\n\nRouter.prototype.removeState = function () {\n\t// client only\n};\n\nRouter.prototype.clearStates = function () {\n\t// client only\n};\n\nRouter.prototype.ready = function () {\n\t// client only\n};\n\nRouter.prototype.initialize = function () {\n\t// client only\n};\n\nRouter.prototype.wait = function () {\n\t// client only\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"group.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// packages/kadira_flow-router/server/group.js                                                    //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nGroup = function (router, options) {\n\toptions = options || {};\n\tthis.prefix = options.prefix || '';\n\tthis.options = options;\n\tthis._router = router;\n};\n\nGroup.prototype.route = function (pathDef, options) {\n\tpathDef = this.prefix + pathDef;\n\treturn this._router.route(pathDef, options);\n};\n\nGroup.prototype.group = function (options) {\n\tvar group = new Group(this._router, options);\n\tgroup.parent = this;\n\n\treturn group;\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"route.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// packages/kadira_flow-router/server/route.js                                                    //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nRoute = function (router, pathDef, options) {\n\toptions = options || {};\n\tthis.options = options;\n\tthis.name = options.name;\n\tthis.pathDef = pathDef;\n\n\t// Route.path is deprecated and will be removed in 3.0\n\tthis.path = pathDef;\n\n\tthis.action = options.action || Function.prototype;\n\tthis.subscriptions = options.subscriptions || Function.prototype;\n\tthis._subsMap = {};\n};\n\nRoute.prototype.register = function (name, sub, options) {\n\tthis._subsMap[name] = sub;\n};\n\nRoute.prototype.subscription = function (name) {\n\treturn this._subsMap[name];\n};\n\nRoute.prototype.middleware = function (middleware) {};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_init.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// packages/kadira_flow-router/server/_init.js                                                    //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\n// Export Router Instance\nFlowRouter = new Router();\nFlowRouter.Router = Router;\nFlowRouter.Route = Route;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"plugins\":{\"fast_render.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// packages/kadira_flow-router/server/plugins/fast_render.js                                      //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nif(!Package['meteorhacks:fast-render']) {\n  return;\n}\n\nFastRender = Package['meteorhacks:fast-render'].FastRender;\n\n// hack to run after eveything else on startup\nMeteor.startup(function () {\n  Meteor.startup(function () {\n    setupFastRender();\n  });\n});\n\nfunction setupFastRender () {\n  _.each(FlowRouter._routes, function (route) {\n    FastRender.route(route.pathDef, function (routeParams, path) {\n      var self = this;\n\n      // anyone using Meteor.subscribe for something else?\n      var original = Meteor.subscribe;\n      Meteor.subscribe = function () {\n        return _.toArray(arguments);\n      };\n\n      route._subsMap = {};\n      FlowRouter.subscriptions.call(route, path);\n      if(route.subscriptions) {\n        var queryParams = routeParams.query;\n        var params = _.omit(routeParams, 'query');\n        route.subscriptions(params, queryParams);\n      }\n      _.each(route._subsMap, function (args) {\n        self.subscribe.apply(self, args);\n      });\n\n      // restore Meteor.subscribe, ... on server side\n      Meteor.subscribe = original;\n    });\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"lib\":{\"router.js\":function module(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// packages/kadira_flow-router/lib/router.js                                                      //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\nRouter.prototype.url = function () {\n\t// We need to remove the leading base path, or \"/\", as it will be inserted\n\t// automatically by `Meteor.absoluteUrl` as documented in:\n\t// http://docs.meteor.com/#/full/meteor_absoluteurl\n\tvar completePath = this.path.apply(this, arguments);\n\tvar basePath = this._basePath || '/';\n\tvar pathWithoutBase = completePath.replace(new RegExp('^' + basePath), '');\n\treturn Meteor.absoluteUrl(pathWithoutBase);\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      FlowRouter: FlowRouter\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/kadira:flow-router/server/router.js\",\n    \"/node_modules/meteor/kadira:flow-router/server/group.js\",\n    \"/node_modules/meteor/kadira:flow-router/server/route.js\",\n    \"/node_modules/meteor/kadira:flow-router/server/_init.js\",\n    \"/node_modules/meteor/kadira:flow-router/server/plugins/fast_render.js\",\n    \"/node_modules/meteor/kadira:flow-router/lib/router.js\"\n  ]\n}});\n","servePath":"/packages/kadira_flow-router.js"}]