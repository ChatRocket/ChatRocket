[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\nPackage[\"core-runtime\"].queue(\"autoupdate\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Autoupdate;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"autoupdate\":{\"autoupdate_client.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/autoupdate/autoupdate_client.js                                                                     //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n!function (module1) {\n  module1.export({\n    Autoupdate: () => Autoupdate\n  });\n  let ClientVersions;\n  module1.link(\"./client_versions.js\", {\n    ClientVersions(v) {\n      ClientVersions = v;\n    }\n  }, 0);\n  const clientArch = Meteor.isCordova ? 'web.cordova' : Meteor.isModern ? 'web.browser' : 'web.browser.legacy';\n  const autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n    version: 'unknown',\n    versionRefreshable: 'unknown',\n    versionNonRefreshable: 'unknown',\n    assets: []\n  };\n  const Autoupdate = {};\n  // Stores acceptable client versions.\n  const clientVersions = Autoupdate._clientVersions =\n  // Used by a self-test and hot-module-replacement\n  new ClientVersions();\n  Meteor.connection.registerStoreClient('meteor_autoupdate_clientVersions', clientVersions.createStore());\n  Autoupdate.newClientAvailable = function () {\n    return clientVersions.newClientAvailable(clientArch, ['versionRefreshable', 'versionNonRefreshable'], autoupdateVersions);\n  };\n\n  // Set to true if the link.onload callback ever fires for any <link> node.\n  let knownToSupportCssOnLoad = false;\n  const retry = new Retry({\n    // Unlike the stream reconnect use of Retry, which we want to be instant\n    // in normal operation, this is a wacky failure. We don't want to retry\n    // right away, we can start slowly.\n    //\n    // A better way than timeconstants here might be to use the knowledge\n    // of when we reconnect to help trigger these retries. Typically, the\n    // server fixing code will result in a restart and reconnect, but\n    // potentially the subscription could have a transient error.\n    minCount: 0,\n    // don't do any immediate retries\n    baseTimeout: 30 * 1000 // start with 30s\n  });\n  let failures = 0;\n  Autoupdate._retrySubscription = () => {\n    Meteor.subscribe('meteor_autoupdate_clientVersions', {\n      onError(error) {\n        Meteor._debug('autoupdate subscription failed', error);\n        failures++;\n        retry.retryLater(failures, function () {\n          // Just retry making the subscription, don't reload the whole\n          // page. While reloading would catch more cases (for example,\n          // the server went back a version and is now doing old-style hot\n          // code push), it would also be more prone to reload loops,\n          // which look really bad to the user. Just retrying the\n          // subscription over DDP means it is at least possible to fix by\n          // updating the server.\n          Autoupdate._retrySubscription();\n        });\n      },\n      onReady() {\n        // Call checkNewVersionDocument with a slight delay, so that the\n        // const handle declaration is guaranteed to be initialized, even if\n        // the added or changed callbacks are called synchronously.\n        const resolved = Promise.resolve();\n        function check(doc) {\n          resolved.then(() => checkNewVersionDocument(doc));\n        }\n        const stop = clientVersions.watch(check);\n        const reloadDelayInSeconds = Meteor.isProduction ? 60 : 0;\n        function checkNewVersionDocument(doc) {\n          if (doc._id !== clientArch) {\n            return;\n          }\n          if (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {\n            // Non-refreshable assets have changed, so we have to reload the\n            // whole page rather than just replacing <link> tags.\n            if (stop) stop();\n            if (Package.reload) {\n              // The reload package should be provided by ddp-client, which\n              // is provided by the ddp package that autoupdate depends on.\n\n              // Delay reload in 60 seconds\n              console.warn('Client version changed from', autoupdateVersions.versionNonRefreshable, 'to', doc.versionNonRefreshable, \"Page will reload in \".concat(reloadDelayInSeconds, \" seconds\"));\n              setTimeout(() => {\n                Package.reload.Reload._reload();\n              }, reloadDelayInSeconds * 1000);\n            }\n            return;\n          }\n          if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n            autoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n            // Switch out old css links for the new css links. Inspired by:\n            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n            var newCss = doc.assets || [];\n            var oldLinks = [];\n            Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            });\n            function waitUntilCssLoads(link, callback) {\n              var called;\n              link.onload = function () {\n                knownToSupportCssOnLoad = true;\n                if (!called) {\n                  called = true;\n                  callback();\n                }\n              };\n              if (!knownToSupportCssOnLoad) {\n                var id = Meteor.setInterval(function () {\n                  if (link.sheet) {\n                    if (!called) {\n                      called = true;\n                      callback();\n                    }\n                    Meteor.clearInterval(id);\n                  }\n                }, 50);\n              }\n            }\n            let newLinksLeftToLoad = newCss.length;\n            function removeOldLinks() {\n              if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\n                oldLinks.splice(0).forEach(link => {\n                  link.parentNode.removeChild(link);\n                });\n              }\n            }\n            if (newCss.length > 0) {\n              newCss.forEach(css => {\n                const newLink = document.createElement('link');\n                newLink.setAttribute('rel', 'stylesheet');\n                newLink.setAttribute('type', 'text/css');\n                newLink.setAttribute('class', '__meteor-css__');\n                newLink.setAttribute('href', css.url);\n                waitUntilCssLoads(newLink, function () {\n                  Meteor.setTimeout(removeOldLinks, 200);\n                });\n                const head = document.getElementsByTagName('head').item(0);\n                head.appendChild(newLink);\n              });\n            } else {\n              removeOldLinks();\n            }\n          }\n        }\n      }\n    });\n  };\n  Autoupdate._retrySubscription();\n}.call(this, module);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"client_versions.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/autoupdate/client_versions.js                                                                       //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  ClientVersions: () => ClientVersions\n});\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n}, 0);\nclass ClientVersions {\n  constructor() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  createStore() {\n    return {\n      update: _ref => {\n        let {\n          id,\n          msg,\n          fields\n        } = _ref;\n        if (msg === 'added' || msg === 'changed') {\n          this.set(id, fields);\n        }\n      }\n    };\n  }\n  hasVersions() {\n    return this._versions.size > 0;\n  }\n  get(id) {\n    return this._versions.get(id);\n  }\n\n  // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  set(id, fields) {\n    let version = this._versions.get(id);\n    let isNew = false;\n    if (version) {\n      Object.assign(version, fields);\n    } else {\n      version = _objectSpread({\n        _id: id\n      }, fields);\n      isNew = true;\n      this._versions.set(id, version);\n    }\n    this._watchCallbacks.forEach(_ref2 => {\n      let {\n        fn,\n        filter\n      } = _ref2;\n      if (!filter || filter === version._id) {\n        fn(version, isNew);\n      }\n    });\n  }\n\n  // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  watch(fn) {\n    let {\n      skipInitial,\n      filter\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!skipInitial) {\n      const resolved = Promise.resolve();\n      this._versions.forEach(version => {\n        if (!filter || filter === version._id) {\n          resolved.then(() => fn(version, true));\n        }\n      });\n    }\n    const callback = {\n      fn,\n      filter\n    };\n    this._watchCallbacks.add(callback);\n    return () => this._watchCallbacks.delete(callback);\n  }\n\n  // A reactive data source for `Autoupdate.newClientAvailable`.\n  newClientAvailable(id, fields, currentVersion) {\n    function isNewVersion(version) {\n      return version._id === id && fields.some(field => version[field] !== currentVersion[field]);\n    }\n    const dependency = new Tracker.Dependency();\n    const version = this.get(id);\n    dependency.depend();\n    const stop = this.watch(version => {\n      if (isNewVersion(version)) {\n        dependency.changed();\n        stop();\n      }\n    }, {\n      skipInitial: true\n    });\n    return !!version && isNewVersion(version);\n  }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      Autoupdate: Autoupdate\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/autoupdate/autoupdate_client.js\"\n  ],\n  mainModulePath: \"/node_modules/meteor/autoupdate/autoupdate_client.js\"\n}});\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["packages/autoupdate/autoupdate_client.js","packages/autoupdate/client_versions.js"],"names":["module1","export","Autoupdate","ClientVersions","link","v","clientArch","Meteor","isCordova","isModern","autoupdateVersions","__meteor_runtime_config__","autoupdate","versions","version","versionRefreshable","versionNonRefreshable","assets","clientVersions","_clientVersions","connection","registerStoreClient","createStore","newClientAvailable","knownToSupportCssOnLoad","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","subscribe","onError","error","_debug","retryLater","onReady","resolved","Promise","resolve","check","doc","then","checkNewVersionDocument","stop","watch","reloadDelayInSeconds","isProduction","_id","Package","reload","console","warn","concat","setTimeout","Reload","_reload","newCss","oldLinks","Array","prototype","forEach","call","document","getElementsByTagName","className","push","waitUntilCssLoads","callback","called","onload","id","setInterval","sheet","clearInterval","newLinksLeftToLoad","length","removeOldLinks","splice","parentNode","removeChild","css","newLink","createElement","setAttribute","url","head","item","appendChild","module","_objectSpread","default","Tracker","constructor","_versions","Map","_watchCallbacks","Set","update","_ref","msg","fields","set","hasVersions","size","get","isNew","Object","assign","_ref2","fn","filter","skipInitial","arguments","undefined","add","delete","currentVersion","isNewVersion","some","field","dependency","Dependency","depend","changed"],"mappings":"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","file":"/packages/autoupdate.js","sourcesContent":["// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n\n// The client version of the client code currently running in the\n// browser.\n\nimport { ClientVersions } from './client_versions.js';\n\nconst clientArch = Meteor.isCordova ? 'web.cordova' : Meteor.isModern ? 'web.browser' : 'web.browser.legacy';\n\nconst autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n\tversion: 'unknown',\n\tversionRefreshable: 'unknown',\n\tversionNonRefreshable: 'unknown',\n\tassets: [],\n};\n\nexport const Autoupdate = {};\n\n// Stores acceptable client versions.\nconst clientVersions = (Autoupdate._clientVersions = // Used by a self-test and hot-module-replacement\n\tnew ClientVersions());\n\nMeteor.connection.registerStoreClient('meteor_autoupdate_clientVersions', clientVersions.createStore());\n\nAutoupdate.newClientAvailable = function () {\n\treturn clientVersions.newClientAvailable(clientArch, ['versionRefreshable', 'versionNonRefreshable'], autoupdateVersions);\n};\n\n// Set to true if the link.onload callback ever fires for any <link> node.\nlet knownToSupportCssOnLoad = false;\n\nconst retry = new Retry({\n\t// Unlike the stream reconnect use of Retry, which we want to be instant\n\t// in normal operation, this is a wacky failure. We don't want to retry\n\t// right away, we can start slowly.\n\t//\n\t// A better way than timeconstants here might be to use the knowledge\n\t// of when we reconnect to help trigger these retries. Typically, the\n\t// server fixing code will result in a restart and reconnect, but\n\t// potentially the subscription could have a transient error.\n\tminCount: 0, // don't do any immediate retries\n\tbaseTimeout: 30 * 1000, // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n\tMeteor.subscribe('meteor_autoupdate_clientVersions', {\n\t\tonError(error) {\n\t\t\tMeteor._debug('autoupdate subscription failed', error);\n\t\t\tfailures++;\n\t\t\tretry.retryLater(failures, function () {\n\t\t\t\t// Just retry making the subscription, don't reload the whole\n\t\t\t\t// page. While reloading would catch more cases (for example,\n\t\t\t\t// the server went back a version and is now doing old-style hot\n\t\t\t\t// code push), it would also be more prone to reload loops,\n\t\t\t\t// which look really bad to the user. Just retrying the\n\t\t\t\t// subscription over DDP means it is at least possible to fix by\n\t\t\t\t// updating the server.\n\t\t\t\tAutoupdate._retrySubscription();\n\t\t\t});\n\t\t},\n\n\t\tonReady() {\n\t\t\t// Call checkNewVersionDocument with a slight delay, so that the\n\t\t\t// const handle declaration is guaranteed to be initialized, even if\n\t\t\t// the added or changed callbacks are called synchronously.\n\t\t\tconst resolved = Promise.resolve();\n\t\t\tfunction check(doc) {\n\t\t\t\tresolved.then(() => checkNewVersionDocument(doc));\n\t\t\t}\n\n\t\t\tconst stop = clientVersions.watch(check);\n\n\t\t\tconst reloadDelayInSeconds = Meteor.isProduction ? 60 : 0;\n\n\t\t\tfunction checkNewVersionDocument(doc) {\n\t\t\t\tif (doc._id !== clientArch) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {\n\t\t\t\t\t// Non-refreshable assets have changed, so we have to reload the\n\t\t\t\t\t// whole page rather than just replacing <link> tags.\n\t\t\t\t\tif (stop) stop();\n\t\t\t\t\tif (Package.reload) {\n\t\t\t\t\t\t// The reload package should be provided by ddp-client, which\n\t\t\t\t\t\t// is provided by the ddp package that autoupdate depends on.\n\n\t\t\t\t\t\t// Delay reload in 60 seconds\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t'Client version changed from',\n\t\t\t\t\t\t\tautoupdateVersions.versionNonRefreshable,\n\t\t\t\t\t\t\t'to',\n\t\t\t\t\t\t\tdoc.versionNonRefreshable,\n\t\t\t\t\t\t\t`Page will reload in ${reloadDelayInSeconds} seconds`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tPackage.reload.Reload._reload();\n\t\t\t\t\t\t}, reloadDelayInSeconds * 1000);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n\t\t\t\t\tautoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n\t\t\t\t\t// Switch out old css links for the new css links. Inspired by:\n\t\t\t\t\t// https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n\t\t\t\t\tvar newCss = doc.assets || [];\n\t\t\t\t\tvar oldLinks = [];\n\n\t\t\t\t\tArray.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {\n\t\t\t\t\t\tif (link.className === '__meteor-css__') {\n\t\t\t\t\t\t\toldLinks.push(link);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tfunction waitUntilCssLoads(link, callback) {\n\t\t\t\t\t\tvar called;\n\n\t\t\t\t\t\tlink.onload = function () {\n\t\t\t\t\t\t\tknownToSupportCssOnLoad = true;\n\t\t\t\t\t\t\tif (!called) {\n\t\t\t\t\t\t\t\tcalled = true;\n\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!knownToSupportCssOnLoad) {\n\t\t\t\t\t\t\tvar id = Meteor.setInterval(function () {\n\t\t\t\t\t\t\t\tif (link.sheet) {\n\t\t\t\t\t\t\t\t\tif (!called) {\n\t\t\t\t\t\t\t\t\t\tcalled = true;\n\t\t\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tMeteor.clearInterval(id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 50);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet newLinksLeftToLoad = newCss.length;\n\t\t\t\t\tfunction removeOldLinks() {\n\t\t\t\t\t\tif (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\n\t\t\t\t\t\t\toldLinks.splice(0).forEach((link) => {\n\t\t\t\t\t\t\t\tlink.parentNode.removeChild(link);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newCss.length > 0) {\n\t\t\t\t\t\tnewCss.forEach((css) => {\n\t\t\t\t\t\t\tconst newLink = document.createElement('link');\n\t\t\t\t\t\t\tnewLink.setAttribute('rel', 'stylesheet');\n\t\t\t\t\t\t\tnewLink.setAttribute('type', 'text/css');\n\t\t\t\t\t\t\tnewLink.setAttribute('class', '__meteor-css__');\n\t\t\t\t\t\t\tnewLink.setAttribute('href', css.url);\n\n\t\t\t\t\t\t\twaitUntilCssLoads(newLink, function () {\n\t\t\t\t\t\t\t\tMeteor.setTimeout(removeOldLinks, 200);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tconst head = document.getElementsByTagName('head').item(0);\n\t\t\t\t\t\t\thead.appendChild(newLink);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tremoveOldLinks();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t});\n};\n\nAutoupdate._retrySubscription();\n","import { Tracker } from 'meteor/tracker';\n\nexport class ClientVersions {\n\tconstructor() {\n\t\tthis._versions = new Map();\n\t\tthis._watchCallbacks = new Set();\n\t}\n\n\t// Creates a Livedata store for use with `Meteor.connection.registerStore`.\n\t// After the store is registered, document updates reported by Livedata are\n\t// merged with the documents in this `ClientVersions` instance.\n\tcreateStore() {\n\t\treturn {\n\t\t\tupdate: ({ id, msg, fields }) => {\n\t\t\t\tif (msg === 'added' || msg === 'changed') {\n\t\t\t\t\tthis.set(id, fields);\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\thasVersions() {\n\t\treturn this._versions.size > 0;\n\t}\n\n\tget(id) {\n\t\treturn this._versions.get(id);\n\t}\n\n\t// Adds or updates a version document and invokes registered callbacks for the\n\t// added/updated document. If a document with the given ID already exists, its\n\t// fields are merged with `fields`.\n\tset(id, fields) {\n\t\tlet version = this._versions.get(id);\n\t\tlet isNew = false;\n\n\t\tif (version) {\n\t\t\tObject.assign(version, fields);\n\t\t} else {\n\t\t\tversion = {\n\t\t\t\t_id: id,\n\t\t\t\t...fields,\n\t\t\t};\n\n\t\t\tisNew = true;\n\t\t\tthis._versions.set(id, version);\n\t\t}\n\n\t\tthis._watchCallbacks.forEach(({ fn, filter }) => {\n\t\t\tif (!filter || filter === version._id) {\n\t\t\t\tfn(version, isNew);\n\t\t\t}\n\t\t});\n\t}\n\n\t// Registers a callback that will be invoked when a version document is added\n\t// or changed. Calling the function returned by `watch` removes the callback.\n\t// If `skipInitial` is true, the callback isn't be invoked for existing\n\t// documents. If `filter` is set, the callback is only invoked for documents\n\t// with ID `filter`.\n\twatch(fn, { skipInitial, filter } = {}) {\n\t\tif (!skipInitial) {\n\t\t\tconst resolved = Promise.resolve();\n\n\t\t\tthis._versions.forEach((version) => {\n\t\t\t\tif (!filter || filter === version._id) {\n\t\t\t\t\tresolved.then(() => fn(version, true));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst callback = { fn, filter };\n\t\tthis._watchCallbacks.add(callback);\n\n\t\treturn () => this._watchCallbacks.delete(callback);\n\t}\n\n\t// A reactive data source for `Autoupdate.newClientAvailable`.\n\tnewClientAvailable(id, fields, currentVersion) {\n\t\tfunction isNewVersion(version) {\n\t\t\treturn version._id === id && fields.some((field) => version[field] !== currentVersion[field]);\n\t\t}\n\n\t\tconst dependency = new Tracker.Dependency();\n\t\tconst version = this.get(id);\n\n\t\tdependency.depend();\n\n\t\tconst stop = this.watch(\n\t\t\t(version) => {\n\t\t\t\tif (isNewVersion(version)) {\n\t\t\t\t\tdependency.changed();\n\t\t\t\t\tstop();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ skipInitial: true },\n\t\t);\n\n\t\treturn !!version && isNewVersion(version);\n\t}\n}\n"]}}]