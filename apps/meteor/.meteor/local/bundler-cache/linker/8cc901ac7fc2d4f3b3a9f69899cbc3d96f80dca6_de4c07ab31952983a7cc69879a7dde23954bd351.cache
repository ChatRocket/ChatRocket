[{"type":"js","data":"Package[\"core-runtime\"].queue(\"accounts-google\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EmitterPromise = Package.meteor.EmitterPromise;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar Accounts = Package['accounts-base'].Accounts;\nvar Google = Package['google-oauth'].Google;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-google\":{\"notice.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/accounts-google/notice.js                                                                        //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nif (Package['accounts-ui'] && !Package['service-configuration'] && !Object.prototype.hasOwnProperty.call(Package, 'google-config-ui')) {\n  console.warn(\"Note: You're using accounts-ui and accounts-google,\\n\" + \"but didn't install the configuration UI for the Google\\n\" + \"OAuth. You can install it with:\\n\" + \"\\n\" + \"    meteor add google-config-ui\" + \"\\n\");\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"google.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/accounts-google/google.js                                                                        //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    Accounts.oauth.registerService('google');\n    if (Meteor.isClient) {\n      const loginWithGoogle = (options, callback) => {\n        // support a callback without options\n        if (!callback && typeof options === \"function\") {\n          callback = options;\n          options = null;\n        }\n        if (Meteor.isCordova && Google.signIn) {\n          // After 20 April 2017, Google OAuth login will no longer work from\n          // a WebView, so Cordova apps must use Google Sign-In instead.\n          // https://github.com/meteor/meteor/issues/8253\n          Google.signIn(options, callback);\n          return;\n        }\n\n        // Use Google's domain-specific login page if we want to restrict creation to\n        // a particular email domain. (Don't use it if restrictCreationByEmailDomain\n        // is a function.) Note that all this does is change Google's UI ---\n        // accounts-base/accounts_server.js still checks server-side that the server\n        // has the proper email address after the OAuth conversation.\n        if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\n          options = _objectSpread({}, options);\n          options.loginUrlParameters = _objectSpread({}, options.loginUrlParameters);\n          options.loginUrlParameters.hd = Accounts._options.restrictCreationByEmailDomain;\n        }\n        const credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n        Google.requestCredential(options, credentialRequestCompleteCallback);\n      };\n      Accounts.registerClientLoginFunction('google', loginWithGoogle);\n      Meteor.loginWithGoogle = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return Accounts.applyLoginFunction('google', args);\n      };\n    } else {\n      Accounts.addAutopublishFields({\n        forLoggedInUser:\n        // publish access token since it can be used from the client (if\n        // transmitted over ssl or on\n        // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent\n        // refresh token probably shouldn't be sent down.\n        Google.whitelistedFields.concat(['accessToken', 'expiresAt']).map(subfield => \"services.google.\".concat(subfield) // don't publish refresh token\n        ),\n        forOtherUsers:\n        // even with autopublish, no legitimate web app should be\n        // publishing all users' emails\n        Google.whitelistedFields.filter(field => field !== 'email' && field !== 'verified_email').map(subfield => \"services.google.\".concat(subfield))\n      });\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/accounts-google/notice.js\",\n    \"/node_modules/meteor/accounts-google/google.js\"\n  ]\n}});\n","servePath":"/packages/accounts-google.js","sourceMap":{"version":3,"sources":["packages/accounts-google/notice.js","packages/accounts-google/google.js"],"names":["Package","Object","prototype","hasOwnProperty","call","console","warn","_objectSpread","module","link","default","v","__reifyWaitForDeps__","Accounts","oauth","registerService","Meteor","isClient","loginWithGoogle","options","callback","isCordova","Google","signIn","_options","restrictCreationByEmailDomain","loginUrlParameters","hd","credentialRequestCompleteCallback","credentialRequestCompleteHandler","requestCredential","registerClientLoginFunction","_len","arguments","length","args","Array","_key","applyLoginFunction","addAutopublishFields","forLoggedInUser","whitelistedFields","concat","map","subfield","forOtherUsers","filter","field","__reify_async_result__","_reifyError","self","async"],"mappings":"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","file":"/packages/accounts-google.js","sourcesContent":["if (Package['accounts-ui']\n    && !Package['service-configuration']\n    && !Object.prototype.hasOwnProperty.call(Package, 'google-config-ui')) {\n  console.warn(\n    \"Note: You're using accounts-ui and accounts-google,\\n\" +\n    \"but didn't install the configuration UI for the Google\\n\" +\n    \"OAuth. You can install it with:\\n\" +\n    \"\\n\" +\n    \"    meteor add google-config-ui\" +\n    \"\\n\"\n  );\n}\n","Accounts.oauth.registerService('google');\n\nif (Meteor.isClient) {\n  const loginWithGoogle = (options, callback) => {\n    // support a callback without options\n    if (! callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    if (Meteor.isCordova &&\n        Google.signIn) {\n      // After 20 April 2017, Google OAuth login will no longer work from\n      // a WebView, so Cordova apps must use Google Sign-In instead.\n      // https://github.com/meteor/meteor/issues/8253\n      Google.signIn(options, callback);\n      return;\n    }\n\n    // Use Google's domain-specific login page if we want to restrict creation to\n    // a particular email domain. (Don't use it if restrictCreationByEmailDomain\n    // is a function.) Note that all this does is change Google's UI ---\n    // accounts-base/accounts_server.js still checks server-side that the server\n    // has the proper email address after the OAuth conversation.\n    if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\n      options = { ...options };\n      options.loginUrlParameters = { ...options.loginUrlParameters };\n      options.loginUrlParameters.hd = Accounts._options.restrictCreationByEmailDomain;\n    }\n    const credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Google.requestCredential(options, credentialRequestCompleteCallback);\n  };\n  Accounts.registerClientLoginFunction('google', loginWithGoogle);\n  Meteor.loginWithGoogle = \n    (...args) => Accounts.applyLoginFunction('google', args);\n} else {\n  Accounts.addAutopublishFields({\n    forLoggedInUser:\n      // publish access token since it can be used from the client (if\n      // transmitted over ssl or on\n      // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent\n      // refresh token probably shouldn't be sent down.\n      Google.whitelistedFields.concat(['accessToken', 'expiresAt']).map(\n        subfield => `services.google.${subfield}` // don't publish refresh token\n      ), \n\n    forOtherUsers: \n      // even with autopublish, no legitimate web app should be\n      // publishing all users' emails\n      Google.whitelistedFields.filter(\n        field => field !== 'email' && field !== 'verified_email'\n      ).map(\n        subfield => `services.google.${subfield}`\n      ),\n  });\n}\n"]}}]