[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\nPackage[\"core-runtime\"].queue(\"rocketchat:user-presence\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"rocketchat:user-presence\":{\"client\":{\"client.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/rocketchat_user-presence/client/client.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  UserPresence: () => UserPresence\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n}, 1);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n}, 2);\nlet debounce;\nmodule.link(\"./utils\", {\n  debounce(v) {\n    debounce = v;\n  }\n}, 3);\nlet timer;\nlet status;\nconst UserPresence = {\n  awayTime: 60000,\n  // 1 minute\n  awayOnWindowBlur: false,\n  callbacks: [],\n  connected: true,\n  started: false,\n  userId: null,\n  /**\n   * The callback will receive the following parameters: user, status\n   */\n  onSetUserStatus(callback) {\n    this.callbacks.push(callback);\n  },\n  runCallbacks(user, status) {\n    this.callbacks.forEach(function (callback) {\n      callback.call(null, user, status);\n    });\n  },\n  startTimer() {\n    UserPresence.stopTimer();\n    if (!UserPresence.awayTime) {\n      return;\n    }\n    timer = setTimeout(UserPresence.setAway, UserPresence.awayTime);\n  },\n  stopTimer() {\n    clearTimeout(timer);\n  },\n  restartTimer() {\n    UserPresence.startTimer();\n  },\n  // eslint-disable-next-line no-use-before-define\n  setAway: () => setUserPresence('away'),\n  // eslint-disable-next-line no-use-before-define\n  setOnline: () => setUserPresence('online'),\n  start(userId) {\n    // after first call overwrite start function to only call startTimer\n    this.start = () => {\n      this.startTimer();\n    };\n    this.userId = userId;\n\n    // register a tracker on connection status so we can setup the away timer again (on reconnect)\n    Tracker.autorun(() => {\n      const {\n        connected\n      } = Meteor.status();\n      this.connected = connected;\n      if (connected) {\n        this.startTimer();\n        status = 'online';\n        return;\n      }\n      this.stopTimer();\n      status = 'offline';\n    });\n    ['mousemove', 'mousedown', 'touchend', 'keydown'].forEach(key => document.addEventListener(key, this.setOnline));\n    window.addEventListener('focus', this.setOnline);\n    if (this.awayOnWindowBlur === true) {\n      window.addEventListener('blur', this.setAway);\n    }\n  }\n};\nconst setUserPresence = debounce(async newStatus => {\n  if (!UserPresence.connected || newStatus === status) {\n    UserPresence.startTimer();\n    return;\n  }\n  switch (newStatus) {\n    case 'online':\n      await Meteor.callAsync('UserPresence:online', UserPresence.userId);\n      break;\n    case 'away':\n      await Meteor.callAsync('UserPresence:away', UserPresence.userId);\n      UserPresence.stopTimer();\n      break;\n    default:\n      return;\n  }\n  status = newStatus;\n}, 1000);\nMeteor.methods({\n  async 'UserPresence:setDefaultStatus'(status) {\n    check(status, String);\n    await Meteor.users.updateAsync({\n      _id: Meteor.userId()\n    }, {\n      $set: {\n        status,\n        statusDefault: status\n      }\n    });\n  },\n  async 'UserPresence:online'() {\n    const user = await Meteor.userAsync();\n    if (user && user.status !== 'online' && user.statusDefault === 'online') {\n      await Meteor.users.updateAsync({\n        _id: Meteor.userId()\n      }, {\n        $set: {\n          status: 'online'\n        }\n      });\n    }\n    UserPresence.runCallbacks(user, 'online');\n  },\n  async 'UserPresence:away'() {\n    const user = await Meteor.userAsync();\n    UserPresence.runCallbacks(user, 'away');\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/rocketchat_user-presence/client/utils.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  debounce: () => debounce\n});\nfunction debounce(func, wait) {\n  let timeout;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/rocketchat:user-presence/client/client.js\"\n  ],\n  mainModulePath: \"/node_modules/meteor/rocketchat:user-presence/client/client.js\"\n}});\n","servePath":"/packages/rocketchat_user-presence.js","sourceMap":{"version":3,"sources":["packages/rocketchat:user-presence/client/client.js","packages/rocketchat:user-presence/client/utils.js"],"names":["module","export","UserPresence","Meteor","link","v","Tracker","check","debounce","timer","status","awayTime","awayOnWindowBlur","callbacks","connected","started","userId","onSetUserStatus","callback","push","runCallbacks","user","forEach","call","startTimer","stopTimer","setTimeout","setAway","clearTimeout","restartTimer","setUserPresence","setOnline","start","autorun","key","document","addEventListener","window","newStatus","callAsync","methods","UserPresence:setDefaultStatus","String","users","updateAsync","_id","$set","statusDefault","UserPresence:online","userAsync","UserPresence:away","func","wait","timeout","_len","arguments","length","args","Array","_key"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAACC,MAAM,CAAC;EAACC,YAAY,EAACA,CAAA,KAAIA;AAAY,CAAC,CAAC;AAAC,IAAIC,MAAM;AAACH,MAAM,CAACI,IAAI,CAAC,eAAe,EAAC;EAACD,MAAMA,CAACE,CAAC,EAAC;IAACF,MAAM,GAACE,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIC,OAAO;AAACN,MAAM,CAACI,IAAI,CAAC,gBAAgB,EAAC;EAACE,OAAOA,CAACD,CAAC,EAAC;IAACC,OAAO,GAACD,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIE,KAAK;AAACP,MAAM,CAACI,IAAI,CAAC,cAAc,EAAC;EAACG,KAAKA,CAACF,CAAC,EAAC;IAACE,KAAK,GAACF,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIG,QAAQ;AAACR,MAAM,CAACI,IAAI,CAAC,SAAS,EAAC;EAACI,QAAQA,CAACH,CAAC,EAAC;IAACG,QAAQ,GAACH,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAM9S,IAAII,KAAK;AACT,IAAIC,MAAM;AAEH,MAAMR,YAAY,GAAG;EAC3BS,QAAQ,EAAE,KAAK;EAAE;EACjBC,gBAAgB,EAAE,KAAK;EACvBC,SAAS,EAAE,EAAE;EACbC,SAAS,EAAE,IAAI;EACfC,OAAO,EAAE,KAAK;EACdC,MAAM,EAAE,IAAI;EAEZ;AACD;AACA;EACCC,eAAeA,CAACC,QAAQ,EAAE;IACzB,IAAI,CAACL,SAAS,CAACM,IAAI,CAACD,QAAQ,CAAC;EAC9B,CAAC;EAEDE,YAAYA,CAACC,IAAI,EAAEX,MAAM,EAAE;IAC1B,IAAI,CAACG,SAAS,CAACS,OAAO,CAAC,UAAUJ,QAAQ,EAAE;MAC1CA,QAAQ,CAACK,IAAI,CAAC,IAAI,EAAEF,IAAI,EAAEX,MAAM,CAAC;IAClC,CAAC,CAAC;EACH,CAAC;EAEDc,UAAUA,CAAA,EAAG;IACZtB,YAAY,CAACuB,SAAS,CAAC,CAAC;IACxB,IAAI,CAACvB,YAAY,CAACS,QAAQ,EAAE;MAC3B;IACD;IACAF,KAAK,GAAGiB,UAAU,CAACxB,YAAY,CAACyB,OAAO,EAAEzB,YAAY,CAACS,QAAQ,CAAC;EAChE,CAAC;EACDc,SAASA,CAAA,EAAG;IACXG,YAAY,CAACnB,KAAK,CAAC;EACpB,CAAC;EACDoB,YAAYA,CAAA,EAAG;IACd3B,YAAY,CAACsB,UAAU,CAAC,CAAC;EAC1B,CAAC;EACD;EACAG,OAAO,EAAEA,CAAA,KAAMG,eAAe,CAAC,MAAM,CAAC;EACtC;EACAC,SAAS,EAAEA,CAAA,KAAMD,eAAe,CAAC,QAAQ,CAAC;EAC1CE,KAAKA,CAAChB,MAAM,EAAE;IACb;IACA,IAAI,CAACgB,KAAK,GAAG,MAAM;MAClB,IAAI,CAACR,UAAU,CAAC,CAAC;IAClB,CAAC;IACD,IAAI,CAACR,MAAM,GAAGA,MAAM;;IAEpB;IACAV,OAAO,CAAC2B,OAAO,CAAC,MAAM;MACrB,MAAM;QAAEnB;MAAU,CAAC,GAAGX,MAAM,CAACO,MAAM,CAAC,CAAC;MACrC,IAAI,CAACI,SAAS,GAAGA,SAAS;MAC1B,IAAIA,SAAS,EAAE;QACd,IAAI,CAACU,UAAU,CAAC,CAAC;QACjBd,MAAM,GAAG,QAAQ;QACjB;MACD;MACA,IAAI,CAACe,SAAS,CAAC,CAAC;MAChBf,MAAM,GAAG,SAAS;IACnB,CAAC,CAAC;IAEF,CAAC,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC,CAACY,OAAO,CAAEY,GAAG,IAAKC,QAAQ,CAACC,gBAAgB,CAACF,GAAG,EAAE,IAAI,CAACH,SAAS,CAAC,CAAC;IAElHM,MAAM,CAACD,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACL,SAAS,CAAC;IAEhD,IAAI,IAAI,CAACnB,gBAAgB,KAAK,IAAI,EAAE;MACnCyB,MAAM,CAACD,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAACT,OAAO,CAAC;IAC9C;EACD;AACD,CAAC;AAED,MAAMG,eAAe,GAAGtB,QAAQ,CAAC,MAAO8B,SAAS,IAAK;EACrD,IAAI,CAACpC,YAAY,CAACY,SAAS,IAAIwB,SAAS,KAAK5B,MAAM,EAAE;IACpDR,YAAY,CAACsB,UAAU,CAAC,CAAC;IACzB;EACD;EACA,QAAQc,SAAS;IAChB,KAAK,QAAQ;MACZ,MAAMnC,MAAM,CAACoC,SAAS,CAAC,qBAAqB,EAAErC,YAAY,CAACc,MAAM,CAAC;MAClE;IACD,KAAK,MAAM;MACV,MAAMb,MAAM,CAACoC,SAAS,CAAC,mBAAmB,EAAErC,YAAY,CAACc,MAAM,CAAC;MAChEd,YAAY,CAACuB,SAAS,CAAC,CAAC;MACxB;IACD;MACC;EACF;EACAf,MAAM,GAAG4B,SAAS;AACnB,CAAC,EAAE,IAAI,CAAC;AAERnC,MAAM,CAACqC,OAAO,CAAC;EACd,MAAM,+BAA+BC,CAAC/B,MAAM,EAAE;IAC7CH,KAAK,CAACG,MAAM,EAAEgC,MAAM,CAAC;IACrB,MAAMvC,MAAM,CAACwC,KAAK,CAACC,WAAW,CAAC;MAAEC,GAAG,EAAE1C,MAAM,CAACa,MAAM,CAAC;IAAE,CAAC,EAAE;MAAE8B,IAAI,EAAE;QAAEpC,MAAM;QAAEqC,aAAa,EAAErC;MAAO;IAAE,CAAC,CAAC;EACtG,CAAC;EACD,MAAM,qBAAqBsC,CAAA,EAAG;IAC7B,MAAM3B,IAAI,GAAG,MAAMlB,MAAM,CAAC8C,SAAS,CAAC,CAAC;IACrC,IAAI5B,IAAI,IAAIA,IAAI,CAACX,MAAM,KAAK,QAAQ,IAAIW,IAAI,CAAC0B,aAAa,KAAK,QAAQ,EAAE;MACxE,MAAM5C,MAAM,CAACwC,KAAK,CAACC,WAAW,CAAC;QAAEC,GAAG,EAAE1C,MAAM,CAACa,MAAM,CAAC;MAAE,CAAC,EAAE;QAAE8B,IAAI,EAAE;UAAEpC,MAAM,EAAE;QAAS;MAAE,CAAC,CAAC;IACzF;IACAR,YAAY,CAACkB,YAAY,CAACC,IAAI,EAAE,QAAQ,CAAC;EAC1C,CAAC;EACD,MAAM,mBAAmB6B,CAAA,EAAG;IAC3B,MAAM7B,IAAI,GAAG,MAAMlB,MAAM,CAAC8C,SAAS,CAAC,CAAC;IACrC/C,YAAY,CAACkB,YAAY,CAACC,IAAI,EAAE,MAAM,CAAC;EACxC;AACD,CAAC,CAAC,C;;;;;;;;;;;AChHFrB,MAAM,CAACC,MAAM,CAAC;EAACO,QAAQ,EAACA,CAAA,KAAIA;AAAQ,CAAC,CAAC;AAA/B,SAASA,QAAQA,CAAC2C,IAAI,EAAEC,IAAI,EAAE;EACpC,IAAIC,OAAO;EAEX,OAAO,YAAa;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IACd,IAAIN,OAAO,EAAEzB,YAAY,CAACyB,OAAO,CAAC;IAClCA,OAAO,GAAG3B,UAAU,CAAC,MAAMyB,IAAI,CAAC,GAAGM,IAAI,CAAC,EAAEL,IAAI,CAAC;EAChD,CAAC;AACF,C","file":"/packages/rocketchat_user-presence.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\nimport { check } from 'meteor/check';\n\nimport { debounce } from './utils';\n\nlet timer;\nlet status;\n\nexport const UserPresence = {\n\tawayTime: 60000, // 1 minute\n\tawayOnWindowBlur: false,\n\tcallbacks: [],\n\tconnected: true,\n\tstarted: false,\n\tuserId: null,\n\n\t/**\n\t * The callback will receive the following parameters: user, status\n\t */\n\tonSetUserStatus(callback) {\n\t\tthis.callbacks.push(callback);\n\t},\n\n\trunCallbacks(user, status) {\n\t\tthis.callbacks.forEach(function (callback) {\n\t\t\tcallback.call(null, user, status);\n\t\t});\n\t},\n\n\tstartTimer() {\n\t\tUserPresence.stopTimer();\n\t\tif (!UserPresence.awayTime) {\n\t\t\treturn;\n\t\t}\n\t\ttimer = setTimeout(UserPresence.setAway, UserPresence.awayTime);\n\t},\n\tstopTimer() {\n\t\tclearTimeout(timer);\n\t},\n\trestartTimer() {\n\t\tUserPresence.startTimer();\n\t},\n\t// eslint-disable-next-line no-use-before-define\n\tsetAway: () => setUserPresence('away'),\n\t// eslint-disable-next-line no-use-before-define\n\tsetOnline: () => setUserPresence('online'),\n\tstart(userId) {\n\t\t// after first call overwrite start function to only call startTimer\n\t\tthis.start = () => {\n\t\t\tthis.startTimer();\n\t\t};\n\t\tthis.userId = userId;\n\n\t\t// register a tracker on connection status so we can setup the away timer again (on reconnect)\n\t\tTracker.autorun(() => {\n\t\t\tconst { connected } = Meteor.status();\n\t\t\tthis.connected = connected;\n\t\t\tif (connected) {\n\t\t\t\tthis.startTimer();\n\t\t\t\tstatus = 'online';\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.stopTimer();\n\t\t\tstatus = 'offline';\n\t\t});\n\n\t\t['mousemove', 'mousedown', 'touchend', 'keydown'].forEach((key) => document.addEventListener(key, this.setOnline));\n\n\t\twindow.addEventListener('focus', this.setOnline);\n\n\t\tif (this.awayOnWindowBlur === true) {\n\t\t\twindow.addEventListener('blur', this.setAway);\n\t\t}\n\t},\n};\n\nconst setUserPresence = debounce(async (newStatus) => {\n\tif (!UserPresence.connected || newStatus === status) {\n\t\tUserPresence.startTimer();\n\t\treturn;\n\t}\n\tswitch (newStatus) {\n\t\tcase 'online':\n\t\t\tawait Meteor.callAsync('UserPresence:online', UserPresence.userId);\n\t\t\tbreak;\n\t\tcase 'away':\n\t\t\tawait Meteor.callAsync('UserPresence:away', UserPresence.userId);\n\t\t\tUserPresence.stopTimer();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn;\n\t}\n\tstatus = newStatus;\n}, 1000);\n\nMeteor.methods({\n\tasync 'UserPresence:setDefaultStatus'(status) {\n\t\tcheck(status, String);\n\t\tawait Meteor.users.updateAsync({ _id: Meteor.userId() }, { $set: { status, statusDefault: status } });\n\t},\n\tasync 'UserPresence:online'() {\n\t\tconst user = await Meteor.userAsync();\n\t\tif (user && user.status !== 'online' && user.statusDefault === 'online') {\n\t\t\tawait Meteor.users.updateAsync({ _id: Meteor.userId() }, { $set: { status: 'online' } });\n\t\t}\n\t\tUserPresence.runCallbacks(user, 'online');\n\t},\n\tasync 'UserPresence:away'() {\n\t\tconst user = await Meteor.userAsync();\n\t\tUserPresence.runCallbacks(user, 'away');\n\t},\n});\n","export function debounce(func, wait) {\n\tlet timeout;\n\n\treturn (...args) => {\n\t\tif (timeout) clearTimeout(timeout);\n\t\ttimeout = setTimeout(() => func(...args), wait);\n\t};\n}\n"]}}]