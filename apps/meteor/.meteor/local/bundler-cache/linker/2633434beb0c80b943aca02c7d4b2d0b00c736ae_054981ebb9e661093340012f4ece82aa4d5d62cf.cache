[{"type":"js","data":"Package[\"core-runtime\"].queue(\"autoupdate\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EmitterPromise = Package.meteor.EmitterPromise;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Autoupdate;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"autoupdate\":{\"autoupdate_server.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/autoupdate/autoupdate_server.js                                                                         //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n!module.wrapAsync(async function (module1, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module1.export({\n      Autoupdate: () => Autoupdate\n    });\n    let ClientVersions;\n    module1.link(\"./client_versions.js\", {\n      ClientVersions(v) {\n        ClientVersions = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const Autoupdate = __meteor_runtime_config__.autoupdate = {\n      // Map from client architectures (web.browser, web.browser.legacy,\n      // web.cordova) to version fields { version, versionRefreshable,\n      // versionNonRefreshable, refreshable } that will be stored in\n      // ClientVersions documents (whose IDs are client architectures). This\n      // data gets serialized into the boilerplate because it's stored in\n      // __meteor_runtime_config__.autoupdate.versions.\n      versions: {}\n    };\n    // Stores acceptable client versions.\n    const clientVersions = new ClientVersions();\n\n    // The client hash includes __meteor_runtime_config__, so wait until\n    // all packages have loaded and have had a chance to populate the\n    // runtime config before using the client hash as our default auto\n    // update version id.\n\n    // Note: Tests allow people to override Autoupdate.autoupdateVersion before\n    // startup.\n    Autoupdate.autoupdateVersion = null;\n    Autoupdate.autoupdateVersionRefreshable = null;\n    Autoupdate.autoupdateVersionCordova = null;\n    Autoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n    var syncQueue = new Meteor._AsynchronousQueue();\n    async function updateVersions(shouldReloadClientProgram) {\n      // Step 1: load the current client program on the server\n      if (shouldReloadClientProgram) {\n        await WebAppInternals.reloadClientPrograms();\n      }\n      const {\n        // If the AUTOUPDATE_VERSION environment variable is defined, it takes\n        // precedence, but Autoupdate.autoupdateVersion is still supported as\n        // a fallback. In most cases neither of these values will be defined.\n        AUTOUPDATE_VERSION = Autoupdate.autoupdateVersion\n      } = process.env;\n\n      // Step 2: update __meteor_runtime_config__.autoupdate.versions.\n      const clientArchs = Object.keys(WebApp.clientPrograms);\n      clientArchs.forEach(arch => {\n        Autoupdate.versions[arch] = {\n          version: AUTOUPDATE_VERSION || WebApp.calculateClientHash(arch),\n          versionRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashRefreshable(arch),\n          versionNonRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashNonRefreshable(arch),\n          versionReplaceable: AUTOUPDATE_VERSION || WebApp.calculateClientHashReplaceable(arch),\n          versionHmr: WebApp.clientPrograms[arch].hmrVersion\n        };\n      });\n\n      // Step 3: form the new client boilerplate which contains the updated\n      // assets and __meteor_runtime_config__.\n      if (shouldReloadClientProgram) {\n        await WebAppInternals.generateBoilerplate();\n      }\n\n      // Step 4: update the ClientVersions collection.\n      // We use `onListening` here because we need to use\n      // `WebApp.getRefreshableAssets`, which is only set after\n      // `WebApp.generateBoilerplate` is called by `main` in webapp.\n      WebApp.onListening(() => {\n        clientArchs.forEach(arch => {\n          const payload = _objectSpread(_objectSpread({}, Autoupdate.versions[arch]), {}, {\n            assets: WebApp.getRefreshableAssets(arch)\n          });\n          clientVersions.set(arch, payload);\n        });\n      });\n    }\n    Meteor.publish('meteor_autoupdate_clientVersions', function (appId) {\n      // `null` happens when a client doesn't have an appId and passes\n      // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n      // `null` as JSON doesn't have `undefined.\n      check(appId, Match.OneOf(String, undefined, null));\n\n      // Don't notify clients using wrong appId such as mobile apps built with a\n      // different server but pointing at the same local url\n      if (Autoupdate.appId && appId && Autoupdate.appId !== appId) return [];\n\n      // Random value to delay the updates for 2-10 minutes\n      const randomInterval = Meteor.isProduction ? (Math.floor(Math.random() * 8) + 2) * 1000 * 60 : 0;\n      const stop = clientVersions.watch((version, isNew) => {\n        setTimeout(() => {\n          (isNew ? this.added : this.changed).call(this, 'meteor_autoupdate_clientVersions', version._id, version);\n        }, randomInterval);\n      });\n      this.onStop(() => stop());\n      this.ready();\n    }, {\n      is_auto: true\n    });\n    Meteor.startup(async function () {\n      await updateVersions(false);\n\n      // Force any connected clients that are still looking for these older\n      // document IDs to reload.\n      ['version', 'version-refreshable', 'version-cordova'].forEach(_id => {\n        clientVersions.set(_id, {\n          version: 'outdated'\n        });\n      });\n    });\n    function enqueueVersionsRefresh() {\n      syncQueue.queueTask(async function () {\n        await updateVersions(true);\n      });\n    }\n    const setupListeners = () => {\n      let onMessage;\n      module1.link(\"meteor/inter-process-messaging\", {\n        onMessage(v) {\n          onMessage = v;\n        }\n      }, 1);\n      onMessage('client-refresh', enqueueVersionsRefresh);\n\n      // Another way to tell the process to refresh: send SIGHUP signal\n      process.on('SIGHUP', Meteor.bindEnvironment(function () {\n        enqueueVersionsRefresh();\n      }, 'handling SIGHUP signal for refresh'));\n    };\n    WebApp.onListening(function () {\n      Promise.resolve(setupListeners());\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"client_versions.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/autoupdate/client_versions.js                                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      ClientVersions: () => ClientVersions\n    });\n    let Tracker;\n    module.link(\"meteor/tracker\", {\n      Tracker(v) {\n        Tracker = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class ClientVersions {\n      constructor() {\n        this._versions = new Map();\n        this._watchCallbacks = new Set();\n      }\n\n      // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n      // After the store is registered, document updates reported by Livedata are\n      // merged with the documents in this `ClientVersions` instance.\n      createStore() {\n        return {\n          update: _ref => {\n            let {\n              id,\n              msg,\n              fields\n            } = _ref;\n            if (msg === 'added' || msg === 'changed') {\n              this.set(id, fields);\n            }\n          }\n        };\n      }\n      hasVersions() {\n        return this._versions.size > 0;\n      }\n      get(id) {\n        return this._versions.get(id);\n      }\n\n      // Adds or updates a version document and invokes registered callbacks for the\n      // added/updated document. If a document with the given ID already exists, its\n      // fields are merged with `fields`.\n      set(id, fields) {\n        let version = this._versions.get(id);\n        let isNew = false;\n        if (version) {\n          Object.assign(version, fields);\n        } else {\n          version = _objectSpread({\n            _id: id\n          }, fields);\n          isNew = true;\n          this._versions.set(id, version);\n        }\n        this._watchCallbacks.forEach(_ref2 => {\n          let {\n            fn,\n            filter\n          } = _ref2;\n          if (!filter || filter === version._id) {\n            fn(version, isNew);\n          }\n        });\n      }\n\n      // Registers a callback that will be invoked when a version document is added\n      // or changed. Calling the function returned by `watch` removes the callback.\n      // If `skipInitial` is true, the callback isn't be invoked for existing\n      // documents. If `filter` is set, the callback is only invoked for documents\n      // with ID `filter`.\n      watch(fn) {\n        let {\n          skipInitial,\n          filter\n        } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (!skipInitial) {\n          const resolved = Promise.resolve();\n          this._versions.forEach(version => {\n            if (!filter || filter === version._id) {\n              resolved.then(() => fn(version, true));\n            }\n          });\n        }\n        const callback = {\n          fn,\n          filter\n        };\n        this._watchCallbacks.add(callback);\n        return () => this._watchCallbacks.delete(callback);\n      }\n\n      // A reactive data source for `Autoupdate.newClientAvailable`.\n      newClientAvailable(id, fields, currentVersion) {\n        function isNewVersion(version) {\n          return version._id === id && fields.some(field => version[field] !== currentVersion[field]);\n        }\n        const dependency = new Tracker.Dependency();\n        const version = this.get(id);\n        dependency.depend();\n        const stop = this.watch(version => {\n          if (isNewVersion(version)) {\n            dependency.changed();\n            stop();\n          }\n        }, {\n          skipInitial: true\n        });\n        return !!version && isNewVersion(version);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  export: function () { return {\n      Autoupdate: Autoupdate\n    };},\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/autoupdate/autoupdate_server.js\"\n  ],\n  mainModulePath: \"/node_modules/meteor/autoupdate/autoupdate_server.js\"\n}});\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["packages/autoupdate/autoupdate_server.js","packages/autoupdate/client_versions.js"],"names":["_objectSpread","module1","link","default","v","export","Autoupdate","ClientVersions","__reifyWaitForDeps__","__meteor_runtime_config__","autoupdate","versions","clientVersions","autoupdateVersion","autoupdateVersionRefreshable","autoupdateVersionCordova","appId","process","env","APP_ID","syncQueue","Meteor","_AsynchronousQueue","updateVersions","shouldReloadClientProgram","WebAppInternals","reloadClientPrograms","AUTOUPDATE_VERSION","clientArchs","Object","keys","WebApp","clientPrograms","forEach","arch","version","calculateClientHash","versionRefreshable","calculateClientHashRefreshable","versionNonRefreshable","calculateClientHashNonRefreshable","versionReplaceable","calculateClientHashReplaceable","versionHmr","hmrVersion","generateBoilerplate","onListening","payload","assets","getRefreshableAssets","set","publish","check","Match","OneOf","String","undefined","randomInterval","isProduction","Math","floor","random","stop","watch","isNew","setTimeout","added","changed","call","_id","onStop","ready","is_auto","startup","enqueueVersionsRefresh","queueTask","setupListeners","onMessage","on","bindEnvironment","Promise","resolve","__reify_async_result__","_reifyError","self","async","module","Tracker","constructor","_versions","Map","_watchCallbacks","Set","createStore","update","_ref","id","msg","fields","hasVersions","size","get","assign","_ref2","fn","filter","skipInitial","arguments","length","resolved","then","callback","add","delete","newClientAvailable","currentVersion","isNewVersion","some","field","dependency","Dependency","depend"],"mappings":"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","file":"/packages/autoupdate.js","sourcesContent":["// Publish the current client versions for each client architecture\n// (web.browser, web.browser.legacy, web.cordova). When a client observes\n// a change in the versions associated with its client architecture,\n// it will refresh itself, either by swapping out CSS assets or by\n// reloading the page. Changes to the replaceable version are ignored\n// and handled by the hot-module-replacement package.\n//\n// There are four versions for any given client architecture: `version`,\n// `versionRefreshable`, `versionNonRefreshable`, and\n// `versionReplaceable`. The refreshable version is a hash of just the\n// client resources that are refreshable, such as CSS. The replaceable\n// version is a hash of files that can be updated with HMR. The\n// non-refreshable version is a hash of the rest of the client assets,\n// excluding the refreshable ones: HTML, JS that is not replaceable, and\n// static files in the `public` directory. The `version` version is a\n// combined hash of everything.\n//\n// If the environment variable `AUTOUPDATE_VERSION` is set, it will be\n// used in place of all client versions. You can use this variable to\n// control when the client reloads. For example, if you want to force a\n// reload only after major changes, use a custom AUTOUPDATE_VERSION and\n// change it only when something worth pushing to clients happens.\n//\n// The server publishes a `meteor_autoupdate_clientVersions` collection.\n// The ID of each document is the client architecture, and the fields of\n// the document are the versions described above.\n\nimport { ClientVersions } from './client_versions.js';\n\nexport const Autoupdate = (__meteor_runtime_config__.autoupdate = {\n\t// Map from client architectures (web.browser, web.browser.legacy,\n\t// web.cordova) to version fields { version, versionRefreshable,\n\t// versionNonRefreshable, refreshable } that will be stored in\n\t// ClientVersions documents (whose IDs are client architectures). This\n\t// data gets serialized into the boilerplate because it's stored in\n\t// __meteor_runtime_config__.autoupdate.versions.\n\tversions: {},\n});\n\n// Stores acceptable client versions.\nconst clientVersions = new ClientVersions();\n\n// The client hash includes __meteor_runtime_config__, so wait until\n// all packages have loaded and have had a chance to populate the\n// runtime config before using the client hash as our default auto\n// update version id.\n\n// Note: Tests allow people to override Autoupdate.autoupdateVersion before\n// startup.\nAutoupdate.autoupdateVersion = null;\nAutoupdate.autoupdateVersionRefreshable = null;\nAutoupdate.autoupdateVersionCordova = null;\nAutoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n\nvar syncQueue = new Meteor._AsynchronousQueue();\n\nasync function updateVersions(shouldReloadClientProgram) {\n\t// Step 1: load the current client program on the server\n\tif (shouldReloadClientProgram) {\n\t\tawait WebAppInternals.reloadClientPrograms();\n\t}\n\n\tconst {\n\t\t// If the AUTOUPDATE_VERSION environment variable is defined, it takes\n\t\t// precedence, but Autoupdate.autoupdateVersion is still supported as\n\t\t// a fallback. In most cases neither of these values will be defined.\n\t\tAUTOUPDATE_VERSION = Autoupdate.autoupdateVersion,\n\t} = process.env;\n\n\t// Step 2: update __meteor_runtime_config__.autoupdate.versions.\n\tconst clientArchs = Object.keys(WebApp.clientPrograms);\n\tclientArchs.forEach((arch) => {\n\t\tAutoupdate.versions[arch] = {\n\t\t\tversion: AUTOUPDATE_VERSION || WebApp.calculateClientHash(arch),\n\t\t\tversionRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashRefreshable(arch),\n\t\t\tversionNonRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashNonRefreshable(arch),\n\t\t\tversionReplaceable: AUTOUPDATE_VERSION || WebApp.calculateClientHashReplaceable(arch),\n\t\t\tversionHmr: WebApp.clientPrograms[arch].hmrVersion,\n\t\t};\n\t});\n\n\t// Step 3: form the new client boilerplate which contains the updated\n\t// assets and __meteor_runtime_config__.\n\tif (shouldReloadClientProgram) {\n\t\tawait WebAppInternals.generateBoilerplate();\n\t}\n\n\t// Step 4: update the ClientVersions collection.\n\t// We use `onListening` here because we need to use\n\t// `WebApp.getRefreshableAssets`, which is only set after\n\t// `WebApp.generateBoilerplate` is called by `main` in webapp.\n\tWebApp.onListening(() => {\n\t\tclientArchs.forEach((arch) => {\n\t\t\tconst payload = {\n\t\t\t\t...Autoupdate.versions[arch],\n\t\t\t\tassets: WebApp.getRefreshableAssets(arch),\n\t\t\t};\n\n\t\t\tclientVersions.set(arch, payload);\n\t\t});\n\t});\n}\n\nMeteor.publish(\n\t'meteor_autoupdate_clientVersions',\n\tfunction (appId) {\n\t\t// `null` happens when a client doesn't have an appId and passes\n\t\t// `undefined` to `Meteor.subscribe`. `undefined` is translated to\n\t\t// `null` as JSON doesn't have `undefined.\n\t\tcheck(appId, Match.OneOf(String, undefined, null));\n\n\t\t// Don't notify clients using wrong appId such as mobile apps built with a\n\t\t// different server but pointing at the same local url\n\t\tif (Autoupdate.appId && appId && Autoupdate.appId !== appId) return [];\n\n\t\t// Random value to delay the updates for 2-10 minutes\n\t\tconst randomInterval = Meteor.isProduction ? (Math.floor(Math.random() * 8) + 2) * 1000 * 60 : 0;\n\n\t\tconst stop = clientVersions.watch((version, isNew) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\t(isNew ? this.added : this.changed).call(this, 'meteor_autoupdate_clientVersions', version._id, version);\n\t\t\t}, randomInterval);\n\t\t});\n\n\t\tthis.onStop(() => stop());\n\t\tthis.ready();\n\t},\n\t{ is_auto: true },\n);\n\nMeteor.startup(async function () {\n\tawait updateVersions(false);\n\n\t// Force any connected clients that are still looking for these older\n\t// document IDs to reload.\n\t['version', 'version-refreshable', 'version-cordova'].forEach((_id) => {\n\t\tclientVersions.set(_id, {\n\t\t\tversion: 'outdated',\n\t\t});\n\t});\n});\n\nfunction enqueueVersionsRefresh() {\n\tsyncQueue.queueTask(async function () {\n\t\tawait updateVersions(true);\n\t});\n}\n\nconst setupListeners = () => {\n\t// Listen for messages pertaining to the client-refresh topic.\n\timport { onMessage } from 'meteor/inter-process-messaging';\n\tonMessage('client-refresh', enqueueVersionsRefresh);\n\n\t// Another way to tell the process to refresh: send SIGHUP signal\n\tprocess.on(\n\t\t'SIGHUP',\n\t\tMeteor.bindEnvironment(function () {\n\t\t\tenqueueVersionsRefresh();\n\t\t}, 'handling SIGHUP signal for refresh'),\n\t);\n};\n\nWebApp.onListening(function () {\n\tPromise.resolve(setupListeners());\n});\n","import { Tracker } from 'meteor/tracker';\n\nexport class ClientVersions {\n\tconstructor() {\n\t\tthis._versions = new Map();\n\t\tthis._watchCallbacks = new Set();\n\t}\n\n\t// Creates a Livedata store for use with `Meteor.connection.registerStore`.\n\t// After the store is registered, document updates reported by Livedata are\n\t// merged with the documents in this `ClientVersions` instance.\n\tcreateStore() {\n\t\treturn {\n\t\t\tupdate: ({ id, msg, fields }) => {\n\t\t\t\tif (msg === 'added' || msg === 'changed') {\n\t\t\t\t\tthis.set(id, fields);\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\thasVersions() {\n\t\treturn this._versions.size > 0;\n\t}\n\n\tget(id) {\n\t\treturn this._versions.get(id);\n\t}\n\n\t// Adds or updates a version document and invokes registered callbacks for the\n\t// added/updated document. If a document with the given ID already exists, its\n\t// fields are merged with `fields`.\n\tset(id, fields) {\n\t\tlet version = this._versions.get(id);\n\t\tlet isNew = false;\n\n\t\tif (version) {\n\t\t\tObject.assign(version, fields);\n\t\t} else {\n\t\t\tversion = {\n\t\t\t\t_id: id,\n\t\t\t\t...fields,\n\t\t\t};\n\n\t\t\tisNew = true;\n\t\t\tthis._versions.set(id, version);\n\t\t}\n\n\t\tthis._watchCallbacks.forEach(({ fn, filter }) => {\n\t\t\tif (!filter || filter === version._id) {\n\t\t\t\tfn(version, isNew);\n\t\t\t}\n\t\t});\n\t}\n\n\t// Registers a callback that will be invoked when a version document is added\n\t// or changed. Calling the function returned by `watch` removes the callback.\n\t// If `skipInitial` is true, the callback isn't be invoked for existing\n\t// documents. If `filter` is set, the callback is only invoked for documents\n\t// with ID `filter`.\n\twatch(fn, { skipInitial, filter } = {}) {\n\t\tif (!skipInitial) {\n\t\t\tconst resolved = Promise.resolve();\n\n\t\t\tthis._versions.forEach((version) => {\n\t\t\t\tif (!filter || filter === version._id) {\n\t\t\t\t\tresolved.then(() => fn(version, true));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst callback = { fn, filter };\n\t\tthis._watchCallbacks.add(callback);\n\n\t\treturn () => this._watchCallbacks.delete(callback);\n\t}\n\n\t// A reactive data source for `Autoupdate.newClientAvailable`.\n\tnewClientAvailable(id, fields, currentVersion) {\n\t\tfunction isNewVersion(version) {\n\t\t\treturn version._id === id && fields.some((field) => version[field] !== currentVersion[field]);\n\t\t}\n\n\t\tconst dependency = new Tracker.Dependency();\n\t\tconst version = this.get(id);\n\n\t\tdependency.depend();\n\n\t\tconst stop = this.watch(\n\t\t\t(version) => {\n\t\t\t\tif (isNewVersion(version)) {\n\t\t\t\t\tdependency.changed();\n\t\t\t\t\tstop();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ skipInitial: true },\n\t\t);\n\n\t\treturn !!version && isNewVersion(version);\n\t}\n}\n"]}}]