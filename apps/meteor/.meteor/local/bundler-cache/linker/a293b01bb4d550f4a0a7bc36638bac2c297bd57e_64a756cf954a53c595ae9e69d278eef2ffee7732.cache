[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\nPackage[\"core-runtime\"].queue(\"accounts-google\",function () {/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Accounts = Package['accounts-base'].Accounts;\nvar Google = Package['google-oauth'].Google;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-google\":{\"notice.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/accounts-google/notice.js                                                                  //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nif (Package['accounts-ui'] && !Package['service-configuration'] && !Object.prototype.hasOwnProperty.call(Package, 'google-config-ui')) {\n  console.warn(\"Note: You're using accounts-ui and accounts-google,\\n\" + \"but didn't install the configuration UI for the Google\\n\" + \"OAuth. You can install it with:\\n\" + \"\\n\" + \"    meteor add google-config-ui\" + \"\\n\");\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"google.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/accounts-google/google.js                                                                  //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\nAccounts.oauth.registerService('google');\nif (Meteor.isClient) {\n  var loginWithGoogle = function (options, callback) {\n    // support a callback without options\n    if (!callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n    if (Meteor.isCordova && Google.signIn) {\n      // After 20 April 2017, Google OAuth login will no longer work from\n      // a WebView, so Cordova apps must use Google Sign-In instead.\n      // https://github.com/meteor/meteor/issues/8253\n      Google.signIn(options, callback);\n      return;\n    }\n\n    // Use Google's domain-specific login page if we want to restrict creation to\n    // a particular email domain. (Don't use it if restrictCreationByEmailDomain\n    // is a function.) Note that all this does is change Google's UI ---\n    // accounts-base/accounts_server.js still checks server-side that the server\n    // has the proper email address after the OAuth conversation.\n    if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\n      options = _objectSpread({}, options);\n      options.loginUrlParameters = _objectSpread({}, options.loginUrlParameters);\n      options.loginUrlParameters.hd = Accounts._options.restrictCreationByEmailDomain;\n    }\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Google.requestCredential(options, credentialRequestCompleteCallback);\n  };\n  Accounts.registerClientLoginFunction('google', loginWithGoogle);\n  Meteor.loginWithGoogle = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return Accounts.applyLoginFunction('google', args);\n  };\n} else {\n  Accounts.addAutopublishFields({\n    forLoggedInUser:\n    // publish access token since it can be used from the client (if\n    // transmitted over ssl or on\n    // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent\n    // refresh token probably shouldn't be sent down.\n    Google.whitelistedFields.concat(['accessToken', 'expiresAt']).map(function (subfield) {\n      return \"services.google.\" + subfield;\n    } // don't publish refresh token\n    ),\n    forOtherUsers:\n    // even with autopublish, no legitimate web app should be\n    // publishing all users' emails\n    Google.whitelistedFields.filter(function (field) {\n      return field !== 'email' && field !== 'verified_email';\n    }).map(function (subfield) {\n      return \"services.google.\" + subfield;\n    })\n  });\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\n\n/* Exports */\nreturn {\n  require: require,\n  eagerModulePaths: [\n    \"/node_modules/meteor/accounts-google/notice.js\",\n    \"/node_modules/meteor/accounts-google/google.js\"\n  ]\n}});\n","servePath":"/packages/accounts-google.js","sourceMap":{"version":3,"sources":["packages/accounts-google/notice.js","packages/accounts-google/google.js"],"names":["Package","Object","prototype","hasOwnProperty","call","console","warn","_objectSpread","module","link","default","v","Accounts","oauth","registerService","Meteor","isClient","loginWithGoogle","options","callback","isCordova","Google","signIn","_options","restrictCreationByEmailDomain","loginUrlParameters","hd","credentialRequestCompleteCallback","credentialRequestCompleteHandler","requestCredential","registerClientLoginFunction","_len","arguments","length","args","Array","_key","applyLoginFunction","addAutopublishFields","forLoggedInUser","whitelistedFields","concat","map","subfield","forOtherUsers","filter","field"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,OAAO,CAAC,aAAa,CAAC,IACnB,CAACA,OAAO,CAAC,uBAAuB,CAAC,IACjC,CAACC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,OAAO,EAAE,kBAAkB,CAAC,EAAE;EACzEK,OAAO,CAACC,IAAI,CACV,uDAAuD,GACvD,0DAA0D,GAC1D,mCAAmC,GACnC,IAAI,GACJ,iCAAiC,GACjC,IACF,CAAC;AACH,C;;;;;;;;;;;ACXA,IAAIC,aAAa;AAACC,MAAM,CAACC,IAAI,CAAC,sCAAsC,EAAC;EAACC,OAAO,EAAC,SAAAA,CAASC,CAAC,EAAC;IAACJ,aAAa,GAACI,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAA9GC,QAAQ,CAACC,KAAK,CAACC,eAAe,CAAC,QAAQ,CAAC;AAExC,IAAIC,MAAM,CAACC,QAAQ,EAAE;EACnB,IAAMC,eAAe,GAAG,SAAAA,CAACC,OAAO,EAAEC,QAAQ,EAAK;IAC7C;IACA,IAAI,CAAEA,QAAQ,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;MAC/CC,QAAQ,GAAGD,OAAO;MAClBA,OAAO,GAAG,IAAI;IAChB;IAEA,IAAIH,MAAM,CAACK,SAAS,IAChBC,MAAM,CAACC,MAAM,EAAE;MACjB;MACA;MACA;MACAD,MAAM,CAACC,MAAM,CAACJ,OAAO,EAAEC,QAAQ,CAAC;MAChC;IACF;;IAEA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAOP,QAAQ,CAACW,QAAQ,CAACC,6BAA6B,KAAK,QAAQ,EAAE;MACvEN,OAAO,GAAAX,aAAA,KAAQW,OAAO,CAAE;MACxBA,OAAO,CAACO,kBAAkB,GAAAlB,aAAA,KAAQW,OAAO,CAACO,kBAAkB,CAAE;MAC9DP,OAAO,CAACO,kBAAkB,CAACC,EAAE,GAAGd,QAAQ,CAACW,QAAQ,CAACC,6BAA6B;IACjF;IACA,IAAMG,iCAAiC,GAAGf,QAAQ,CAACC,KAAK,CAACe,gCAAgC,CAACT,QAAQ,CAAC;IACnGE,MAAM,CAACQ,iBAAiB,CAACX,OAAO,EAAES,iCAAiC,CAAC;EACtE,CAAC;EACDf,QAAQ,CAACkB,2BAA2B,CAAC,QAAQ,EAAEb,eAAe,CAAC;EAC/DF,MAAM,CAACE,eAAe,GACpB;IAAA,SAAAc,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAIC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAAA,OAAKxB,QAAQ,CAACyB,kBAAkB,CAAC,QAAQ,EAAEH,IAAI,CAAC;EAAA;AAC5D,CAAC,MAAM;EACLtB,QAAQ,CAAC0B,oBAAoB,CAAC;IAC5BC,eAAe;IACb;IACA;IACA;IACA;IACAlB,MAAM,CAACmB,iBAAiB,CAACC,MAAM,CAAC,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC,CAACC,GAAG,CAC/D,UAAAC,QAAQ;MAAA,4BAAuBA,QAAQ;IAAA,CAAE,CAAC;IAC5C,CAAC;IAEHC,aAAa;IACX;IACA;IACAvB,MAAM,CAACmB,iBAAiB,CAACK,MAAM,CAC7B,UAAAC,KAAK;MAAA,OAAIA,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,gBAAgB;IAAA,CAC1D,CAAC,CAACJ,GAAG,CACH,UAAAC,QAAQ;MAAA,4BAAuBA,QAAQ;IAAA,CACzC;EACJ,CAAC,CAAC;AACJ,C","file":"/packages/accounts-google.js","sourcesContent":["if (Package['accounts-ui']\n    && !Package['service-configuration']\n    && !Object.prototype.hasOwnProperty.call(Package, 'google-config-ui')) {\n  console.warn(\n    \"Note: You're using accounts-ui and accounts-google,\\n\" +\n    \"but didn't install the configuration UI for the Google\\n\" +\n    \"OAuth. You can install it with:\\n\" +\n    \"\\n\" +\n    \"    meteor add google-config-ui\" +\n    \"\\n\"\n  );\n}\n","Accounts.oauth.registerService('google');\n\nif (Meteor.isClient) {\n  const loginWithGoogle = (options, callback) => {\n    // support a callback without options\n    if (! callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    if (Meteor.isCordova &&\n        Google.signIn) {\n      // After 20 April 2017, Google OAuth login will no longer work from\n      // a WebView, so Cordova apps must use Google Sign-In instead.\n      // https://github.com/meteor/meteor/issues/8253\n      Google.signIn(options, callback);\n      return;\n    }\n\n    // Use Google's domain-specific login page if we want to restrict creation to\n    // a particular email domain. (Don't use it if restrictCreationByEmailDomain\n    // is a function.) Note that all this does is change Google's UI ---\n    // accounts-base/accounts_server.js still checks server-side that the server\n    // has the proper email address after the OAuth conversation.\n    if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\n      options = { ...options };\n      options.loginUrlParameters = { ...options.loginUrlParameters };\n      options.loginUrlParameters.hd = Accounts._options.restrictCreationByEmailDomain;\n    }\n    const credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Google.requestCredential(options, credentialRequestCompleteCallback);\n  };\n  Accounts.registerClientLoginFunction('google', loginWithGoogle);\n  Meteor.loginWithGoogle = \n    (...args) => Accounts.applyLoginFunction('google', args);\n} else {\n  Accounts.addAutopublishFields({\n    forLoggedInUser:\n      // publish access token since it can be used from the client (if\n      // transmitted over ssl or on\n      // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent\n      // refresh token probably shouldn't be sent down.\n      Google.whitelistedFields.concat(['accessToken', 'expiresAt']).map(\n        subfield => `services.google.${subfield}` // don't publish refresh token\n      ), \n\n    forOtherUsers: \n      // even with autopublish, no legitimate web app should be\n      // publishing all users' emails\n      Google.whitelistedFields.filter(\n        field => field !== 'email' && field !== 'verified_email'\n      ).map(\n        subfield => `services.google.${subfield}`\n      ),\n  });\n}\n"]}}]